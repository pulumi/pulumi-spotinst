// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Organization
{
    /// <summary>
    /// Provides a Spotinst user-group of your Spot organization.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var terraformUserGroup = new SpotInst.Organization.UserGroup("terraform_user_group", new()
    ///     {
    ///         Name = "test_user_group",
    ///         Description = "user group by terraform",
    ///         UserIds = new[]
    ///         {
    ///             "u-372gf6ae",
    ///         },
    ///         Policies = new[]
    ///         {
    ///             new SpotInst.Organization.Inputs.UserGroupPolicyArgs
    ///             {
    ///                 AccountIds = new[]
    ///                 {
    ///                     "act-a1b2c3d4",
    ///                 },
    ///                 PolicyId = "pol-vv7d8c06",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [SpotInstResourceType("spotinst:organization/userGroup:UserGroup")]
    public partial class UserGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// User group description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User group name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The policies to register under the given group
        /// (should be existing policies only).
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.UserGroupPolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// The users to register under the created group
        /// (should be existing users only).
        /// </summary>
        [Output("userIds")]
        public Output<ImmutableArray<string>> UserIds { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroup(string name, UserGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("spotinst:organization/userGroup:UserGroup", name, args ?? new UserGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroup(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:organization/userGroup:UserGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroup Get(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroup(name, id, state, options);
        }
    }

    public sealed class UserGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User group description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies")]
        private InputList<Inputs.UserGroupPolicyArgs>? _policies;

        /// <summary>
        /// The policies to register under the given group
        /// (should be existing policies only).
        /// </summary>
        public InputList<Inputs.UserGroupPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.UserGroupPolicyArgs>());
            set => _policies = value;
        }

        [Input("userIds")]
        private InputList<string>? _userIds;

        /// <summary>
        /// The users to register under the created group
        /// (should be existing users only).
        /// </summary>
        public InputList<string> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<string>());
            set => _userIds = value;
        }

        public UserGroupArgs()
        {
        }
        public static new UserGroupArgs Empty => new UserGroupArgs();
    }

    public sealed class UserGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// User group description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies")]
        private InputList<Inputs.UserGroupPolicyGetArgs>? _policies;

        /// <summary>
        /// The policies to register under the given group
        /// (should be existing policies only).
        /// </summary>
        public InputList<Inputs.UserGroupPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.UserGroupPolicyGetArgs>());
            set => _policies = value;
        }

        [Input("userIds")]
        private InputList<string>? _userIds;

        /// <summary>
        /// The users to register under the created group
        /// (should be existing users only).
        /// </summary>
        public InputList<string> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<string>());
            set => _userIds = value;
        }

        public UserGroupState()
        {
        }
        public static new UserGroupState Empty => new UserGroupState();
    }
}
