// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Oceancd.Outputs
{

    [OutputType]
    public sealed class VerificationTemplateMetric
    {
        /// <summary>
        /// Baseline Object.
        /// </summary>
        public readonly Outputs.VerificationTemplateMetricBaseline? Baseline;
        /// <summary>
        /// The maximum number of times the measurement is allowed to error in succession, before the metric is considered error.Default is 4.When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        public readonly int? ConsecutiveErrorLimit;
        /// <summary>
        /// The number of times to run the measurement. If both interval and count are omitted, the effective count is 1. If only interval is specified, metric runs indefinitely. If count &gt; 1, interval must be specified. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        public readonly int? Count;
        /// <summary>
        /// Defines whether the metric should have an impact on the result of the rollout.
        /// </summary>
        public readonly bool? DryRun;
        /// <summary>
        /// An expression which determines if a measurement is considered failed.If failureCondition is set, then successCondition is not allowed. When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        public readonly string? FailureCondition;
        /// <summary>
        /// The maximum number of times the measurement is allowed to fail, before the entire metric is considered failed.Default is 0. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        public readonly int? FailureLimit;
        /// <summary>
        /// How long to wait before starting this metric measurements. When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        public readonly string? InitialDelay;
        /// <summary>
        /// Defines an interval string (30s, 5m, 1h) between each verification measurements. If omitted, will perform a single measurement.When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        public readonly string? Interval;
        /// <summary>
        /// The name of the verification metric.
        /// </summary>
        public readonly string MetricsName;
        /// <summary>
        /// The name of the monitoring tool chosen for the metric.
        /// </summary>
        public readonly ImmutableArray<Outputs.VerificationTemplateMetricProvider> Providers;
        /// <summary>
        /// An expression which determines if a measurement is considered successful. The keyword `Result` is a variable reference to the value of measurement. Results can be both structured data or primitive. If successCondition is set, then failureCondition is not allowed. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        public readonly string? SuccessCondition;

        [OutputConstructor]
        private VerificationTemplateMetric(
            Outputs.VerificationTemplateMetricBaseline? baseline,

            int? consecutiveErrorLimit,

            int? count,

            bool? dryRun,

            string? failureCondition,

            int? failureLimit,

            string? initialDelay,

            string? interval,

            string metricsName,

            ImmutableArray<Outputs.VerificationTemplateMetricProvider> providers,

            string? successCondition)
        {
            Baseline = baseline;
            ConsecutiveErrorLimit = consecutiveErrorLimit;
            Count = count;
            DryRun = dryRun;
            FailureCondition = failureCondition;
            FailureLimit = failureLimit;
            InitialDelay = initialDelay;
            Interval = interval;
            MetricsName = metricsName;
            Providers = providers;
            SuccessCondition = successCondition;
        }
    }
}
