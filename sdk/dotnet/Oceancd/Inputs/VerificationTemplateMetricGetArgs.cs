// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Oceancd.Inputs
{

    public sealed class VerificationTemplateMetricGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Baseline Object.
        /// </summary>
        [Input("baseline")]
        public Input<Inputs.VerificationTemplateMetricBaselineGetArgs>? Baseline { get; set; }

        /// <summary>
        /// The maximum number of times the measurement is allowed to error in succession, before the metric is considered error.Default is 4.When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        [Input("consecutiveErrorLimit")]
        public Input<int>? ConsecutiveErrorLimit { get; set; }

        /// <summary>
        /// The number of times to run the measurement. If both interval and count are omitted, the effective count is 1. If only interval is specified, metric runs indefinitely. If count &gt; 1, interval must be specified. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// Defines whether the metric should have an impact on the result of the rollout.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// An expression which determines if a measurement is considered failed.If failureCondition is set, then successCondition is not allowed. When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        [Input("failureCondition")]
        public Input<string>? FailureCondition { get; set; }

        /// <summary>
        /// The maximum number of times the measurement is allowed to fail, before the entire metric is considered failed.Default is 0. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        [Input("failureLimit")]
        public Input<int>? FailureLimit { get; set; }

        /// <summary>
        /// How long to wait before starting this metric measurements. When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        [Input("initialDelay")]
        public Input<string>? InitialDelay { get; set; }

        /// <summary>
        /// Defines an interval string (30s, 5m, 1h) between each verification measurements. If omitted, will perform a single measurement.When choosing Jenkins as the provider, there is no need to send this variable.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the verification metric.
        /// </summary>
        [Input("metricsName", required: true)]
        public Input<string> MetricsName { get; set; } = null!;

        [Input("providers", required: true)]
        private InputList<Inputs.VerificationTemplateMetricProviderGetArgs>? _providers;

        /// <summary>
        /// The name of the monitoring tool chosen for the metric.
        /// </summary>
        public InputList<Inputs.VerificationTemplateMetricProviderGetArgs> Providers
        {
            get => _providers ?? (_providers = new InputList<Inputs.VerificationTemplateMetricProviderGetArgs>());
            set => _providers = value;
        }

        /// <summary>
        /// An expression which determines if a measurement is considered successful. The keyword `result` is a variable reference to the value of measurement. Results can be both structured data or primitive. If successCondition is set, then failureCondition is not allowed. When choosing `Jenkins` as the provider, there is no need to send this variable.
        /// </summary>
        [Input("successCondition")]
        public Input<string>? SuccessCondition { get; set; }

        public VerificationTemplateMetricGetArgs()
        {
        }
        public static new VerificationTemplateMetricGetArgs Empty => new VerificationTemplateMetricGetArgs();
    }
}
