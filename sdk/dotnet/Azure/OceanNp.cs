// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Azure
{
    [SpotInstResourceType("spotinst:azure/oceanNp:OceanNp")]
    public partial class OceanNp : global::Pulumi.CustomResource
    {
        [Output("aksClusterName")]
        public Output<string> AksClusterName { get; private set; } = null!;

        [Output("aksInfrastructureResourceGroupName")]
        public Output<string> AksInfrastructureResourceGroupName { get; private set; } = null!;

        [Output("aksRegion")]
        public Output<string> AksRegion { get; private set; } = null!;

        [Output("aksResourceGroupName")]
        public Output<string> AksResourceGroupName { get; private set; } = null!;

        [Output("autoscaler")]
        public Output<Outputs.OceanNpAutoscaler?> Autoscaler { get; private set; } = null!;

        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("controllerClusterId")]
        public Output<string> ControllerClusterId { get; private set; } = null!;

        [Output("enableNodePublicIp")]
        public Output<bool?> EnableNodePublicIp { get; private set; } = null!;

        [Output("fallbackToOndemand")]
        public Output<bool?> FallbackToOndemand { get; private set; } = null!;

        [Output("health")]
        public Output<Outputs.OceanNpHealth> Health { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, object>?> Labels { get; private set; } = null!;

        [Output("maxCount")]
        public Output<int?> MaxCount { get; private set; } = null!;

        [Output("maxPodsPerNode")]
        public Output<int?> MaxPodsPerNode { get; private set; } = null!;

        [Output("minCount")]
        public Output<int?> MinCount { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("osDiskSizeGb")]
        public Output<int?> OsDiskSizeGb { get; private set; } = null!;

        [Output("osDiskType")]
        public Output<string?> OsDiskType { get; private set; } = null!;

        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        [Output("spotPercentage")]
        public Output<int?> SpotPercentage { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.OceanNpTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a OceanNp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OceanNp(string name, OceanNpArgs args, CustomResourceOptions? options = null)
            : base("spotinst:azure/oceanNp:OceanNp", name, args ?? new OceanNpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OceanNp(string name, Input<string> id, OceanNpState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:azure/oceanNp:OceanNp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OceanNp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OceanNp Get(string name, Input<string> id, OceanNpState? state = null, CustomResourceOptions? options = null)
        {
            return new OceanNp(name, id, state, options);
        }
    }

    public sealed class OceanNpArgs : global::Pulumi.ResourceArgs
    {
        [Input("aksClusterName", required: true)]
        public Input<string> AksClusterName { get; set; } = null!;

        [Input("aksInfrastructureResourceGroupName", required: true)]
        public Input<string> AksInfrastructureResourceGroupName { get; set; } = null!;

        [Input("aksRegion", required: true)]
        public Input<string> AksRegion { get; set; } = null!;

        [Input("aksResourceGroupName", required: true)]
        public Input<string> AksResourceGroupName { get; set; } = null!;

        [Input("autoscaler")]
        public Input<Inputs.OceanNpAutoscalerArgs>? Autoscaler { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("controllerClusterId")]
        public Input<string>? ControllerClusterId { get; set; }

        [Input("enableNodePublicIp")]
        public Input<bool>? EnableNodePublicIp { get; set; }

        [Input("fallbackToOndemand")]
        public Input<bool>? FallbackToOndemand { get; set; }

        [Input("health")]
        public Input<Inputs.OceanNpHealthArgs>? Health { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("maxCount")]
        public Input<int>? MaxCount { get; set; }

        [Input("maxPodsPerNode")]
        public Input<int>? MaxPodsPerNode { get; set; }

        [Input("minCount")]
        public Input<int>? MinCount { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("osDiskSizeGb")]
        public Input<int>? OsDiskSizeGb { get; set; }

        [Input("osDiskType")]
        public Input<string>? OsDiskType { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("spotPercentage")]
        public Input<int>? SpotPercentage { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.OceanNpTaintArgs>? _taints;
        public InputList<Inputs.OceanNpTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.OceanNpTaintArgs>());
            set => _taints = value;
        }

        public OceanNpArgs()
        {
        }
        public static new OceanNpArgs Empty => new OceanNpArgs();
    }

    public sealed class OceanNpState : global::Pulumi.ResourceArgs
    {
        [Input("aksClusterName")]
        public Input<string>? AksClusterName { get; set; }

        [Input("aksInfrastructureResourceGroupName")]
        public Input<string>? AksInfrastructureResourceGroupName { get; set; }

        [Input("aksRegion")]
        public Input<string>? AksRegion { get; set; }

        [Input("aksResourceGroupName")]
        public Input<string>? AksResourceGroupName { get; set; }

        [Input("autoscaler")]
        public Input<Inputs.OceanNpAutoscalerGetArgs>? Autoscaler { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("controllerClusterId")]
        public Input<string>? ControllerClusterId { get; set; }

        [Input("enableNodePublicIp")]
        public Input<bool>? EnableNodePublicIp { get; set; }

        [Input("fallbackToOndemand")]
        public Input<bool>? FallbackToOndemand { get; set; }

        [Input("health")]
        public Input<Inputs.OceanNpHealthGetArgs>? Health { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("maxCount")]
        public Input<int>? MaxCount { get; set; }

        [Input("maxPodsPerNode")]
        public Input<int>? MaxPodsPerNode { get; set; }

        [Input("minCount")]
        public Input<int>? MinCount { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("osDiskSizeGb")]
        public Input<int>? OsDiskSizeGb { get; set; }

        [Input("osDiskType")]
        public Input<string>? OsDiskType { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("spotPercentage")]
        public Input<int>? SpotPercentage { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.OceanNpTaintGetArgs>? _taints;
        public InputList<Inputs.OceanNpTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.OceanNpTaintGetArgs>());
            set => _taints = value;
        }

        public OceanNpState()
        {
        }
        public static new OceanNpState Empty => new OceanNpState();
    }
}
