// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Azure
{
    /// <summary>
    /// Manages a Spotinst Ocean AKS resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new SpotInst.Azure.Ocean("example", new SpotInst.Azure.OceanArgs
    ///         {
    ///             AcdIdentifier = "acd-12345",
    ///             AksName = "AKSName",
    ///             AksResourceGroupName = "ResourceGroupName",
    ///             ControllerClusterId = "controller-cluster-id",
    ///             SshPublicKey = "ssh-rsa [... redacted ...] generated-by-azure",
    ///             UserName = "some-name",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ```csharp
    /// using Pulumi;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         this.OceanId = spotinst_ocean_aks_.Example.Id;
    ///     }
    /// 
    ///     [Output("oceanId")]
    ///     public Output&lt;string&gt; OceanId { get; set; }
    /// }
    /// ```
    /// </summary>
    [SpotInstResourceType("spotinst:azure/ocean:Ocean")]
    public partial class Ocean : Pulumi.CustomResource
    {
        /// <summary>
        /// The AKS identifier.
        /// </summary>
        [Output("acdIdentifier")]
        public Output<string> AcdIdentifier { get; private set; } = null!;

        /// <summary>
        /// The AKS cluster name.
        /// </summary>
        [Output("aksName")]
        public Output<string> AksName { get; private set; } = null!;

        /// <summary>
        /// Name of the Resource Group for AKS cluster.
        /// </summary>
        [Output("aksResourceGroupName")]
        public Output<string> AksResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Ocean controller cluster.
        /// </summary>
        [Output("controllerClusterId")]
        public Output<string> ControllerClusterId { get; private set; } = null!;

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// SSH public key for admin access to Linux VMs.
        /// </summary>
        [Output("sshPublicKey")]
        public Output<string> SshPublicKey { get; private set; } = null!;

        /// <summary>
        /// Username for admin access to VMs.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a Ocean resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ocean(string name, OceanArgs args, CustomResourceOptions? options = null)
            : base("spotinst:azure/ocean:Ocean", name, args ?? new OceanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ocean(string name, Input<string> id, OceanState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:azure/ocean:Ocean", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ocean resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ocean Get(string name, Input<string> id, OceanState? state = null, CustomResourceOptions? options = null)
        {
            return new Ocean(name, id, state, options);
        }
    }

    public sealed class OceanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AKS identifier.
        /// </summary>
        [Input("acdIdentifier", required: true)]
        public Input<string> AcdIdentifier { get; set; } = null!;

        /// <summary>
        /// The AKS cluster name.
        /// </summary>
        [Input("aksName", required: true)]
        public Input<string> AksName { get; set; } = null!;

        /// <summary>
        /// Name of the Resource Group for AKS cluster.
        /// </summary>
        [Input("aksResourceGroupName", required: true)]
        public Input<string> AksResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Ocean controller cluster.
        /// </summary>
        [Input("controllerClusterId")]
        public Input<string>? ControllerClusterId { get; set; }

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SSH public key for admin access to Linux VMs.
        /// </summary>
        [Input("sshPublicKey", required: true)]
        public Input<string> SshPublicKey { get; set; } = null!;

        /// <summary>
        /// Username for admin access to VMs.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public OceanArgs()
        {
        }
    }

    public sealed class OceanState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AKS identifier.
        /// </summary>
        [Input("acdIdentifier")]
        public Input<string>? AcdIdentifier { get; set; }

        /// <summary>
        /// The AKS cluster name.
        /// </summary>
        [Input("aksName")]
        public Input<string>? AksName { get; set; }

        /// <summary>
        /// Name of the Resource Group for AKS cluster.
        /// </summary>
        [Input("aksResourceGroupName")]
        public Input<string>? AksResourceGroupName { get; set; }

        /// <summary>
        /// The Ocean controller cluster.
        /// </summary>
        [Input("controllerClusterId")]
        public Input<string>? ControllerClusterId { get; set; }

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SSH public key for admin access to Linux VMs.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        /// <summary>
        /// Username for admin access to VMs.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public OceanState()
        {
        }
    }
}
