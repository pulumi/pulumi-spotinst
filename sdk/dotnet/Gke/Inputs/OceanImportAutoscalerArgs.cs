// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Gke.Inputs
{

    public sealed class OceanImportAutoscalerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
        /// </summary>
        [Input("autoHeadroomPercentage")]
        public Input<int>? AutoHeadroomPercentage { get; set; }

        /// <summary>
        /// Cooldown period between scaling actions.
        /// </summary>
        [Input("cooldown")]
        public Input<int>? Cooldown { get; set; }

        /// <summary>
        /// Auto Scaling scale down operations.
        /// </summary>
        [Input("down")]
        public Input<Inputs.OceanImportAutoscalerDownArgs>? Down { get; set; }

        /// <summary>
        /// enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
        /// </summary>
        [Input("enableAutomaticAndManualHeadroom")]
        public Input<bool>? EnableAutomaticAndManualHeadroom { get; set; }

        /// <summary>
        /// Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
        /// </summary>
        [Input("headroom")]
        public Input<Inputs.OceanImportAutoscalerHeadroomArgs>? Headroom { get; set; }

        /// <summary>
        /// Automatically configure and optimize headroom resources.
        /// </summary>
        [Input("isAutoConfig")]
        public Input<bool>? IsAutoConfig { get; set; }

        /// <summary>
        /// Enable the Ocean Kubernetes Autoscaler.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Optionally set upper and lower bounds on the resource usage of the cluster.
        /// </summary>
        [Input("resourceLimits")]
        public Input<Inputs.OceanImportAutoscalerResourceLimitsArgs>? ResourceLimits { get; set; }

        public OceanImportAutoscalerArgs()
        {
        }
        public static new OceanImportAutoscalerArgs Empty => new OceanImportAutoscalerArgs();
    }
}
