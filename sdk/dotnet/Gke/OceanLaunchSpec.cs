// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Gke
{
    /// <summary>
    /// Manages a custom Spotinst Ocean GKE Launch Spec resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new SpotInst.Gke.OceanLaunchSpec("example", new SpotInst.Gke.OceanLaunchSpecArgs
    ///         {
    ///             AutoscaleHeadrooms = 
    ///             {
    ///                 new SpotInst.Gke.Inputs.OceanLaunchSpecAutoscaleHeadroomArgs
    ///                 {
    ///                     CpuPerUnit = 1000,
    ///                     GpuPerUnit = 0,
    ///                     MemoryPerUnit = 2048,
    ///                     NumOfUnits = 5,
    ///                 },
    ///             },
    ///             Labels = 
    ///             {
    ///                 new SpotInst.Gke.Inputs.OceanLaunchSpecLabelArgs
    ///                 {
    ///                     Key = "labelKey",
    ///                     Value = "labelVal",
    ///                 },
    ///             },
    ///             Metadatas = 
    ///             {
    ///                 new SpotInst.Gke.Inputs.OceanLaunchSpecMetadataArgs
    ///                 {
    ///                     Key = "gci-update-strategy",
    ///                     Value = "update_disabled",
    ///                 },
    ///             },
    ///             OceanId = "o-123456",
    ///             SourceImage = "image",
    ///             Taints = 
    ///             {
    ///                 new SpotInst.Gke.Inputs.OceanLaunchSpecTaintArgs
    ///                 {
    ///                     Effect = "taintEffect",
    ///                     Key = "taintKey",
    ///                     Value = "taintVal",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ```csharp
    /// using Pulumi;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         this.OceanLaunchspecId = spotinst_ocean_gke_launch_spec.Example.Id;
    ///     }
    /// 
    ///     [Output("oceanLaunchspecId")]
    ///     public Output&lt;string&gt; OceanLaunchspecId { get; set; }
    /// }
    /// ```
    /// </summary>
    public partial class OceanLaunchSpec : Pulumi.CustomResource
    {
        /// <summary>
        /// Set custom headroom per launch spec. provide list of headrooms object.
        /// </summary>
        [Output("autoscaleHeadrooms")]
        public Output<ImmutableArray<Outputs.OceanLaunchSpecAutoscaleHeadroom>> AutoscaleHeadrooms { get; private set; } = null!;

        /// <summary>
        /// Cluster's labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.OceanLaunchSpecLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Cluster's metadata.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.OceanLaunchSpecMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The Ocean cluster ID required for launchSpec create.
        /// </summary>
        [Output("oceanId")]
        public Output<string> OceanId { get; private set; } = null!;

        /// <summary>
        /// Image URL.
        /// </summary>
        [Output("sourceImage")]
        public Output<string> SourceImage { get; private set; } = null!;

        /// <summary>
        /// Cluster's taints.
        /// </summary>
        [Output("taints")]
        public Output<ImmutableArray<Outputs.OceanLaunchSpecTaint>> Taints { get; private set; } = null!;


        /// <summary>
        /// Create a OceanLaunchSpec resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OceanLaunchSpec(string name, OceanLaunchSpecArgs args, CustomResourceOptions? options = null)
            : base("spotinst:gke/oceanLaunchSpec:OceanLaunchSpec", name, args ?? new OceanLaunchSpecArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OceanLaunchSpec(string name, Input<string> id, OceanLaunchSpecState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:gke/oceanLaunchSpec:OceanLaunchSpec", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OceanLaunchSpec resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OceanLaunchSpec Get(string name, Input<string> id, OceanLaunchSpecState? state = null, CustomResourceOptions? options = null)
        {
            return new OceanLaunchSpec(name, id, state, options);
        }
    }

    public sealed class OceanLaunchSpecArgs : Pulumi.ResourceArgs
    {
        [Input("autoscaleHeadrooms")]
        private InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomArgs>? _autoscaleHeadrooms;

        /// <summary>
        /// Set custom headroom per launch spec. provide list of headrooms object.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomArgs> AutoscaleHeadrooms
        {
            get => _autoscaleHeadrooms ?? (_autoscaleHeadrooms = new InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomArgs>());
            set => _autoscaleHeadrooms = value;
        }

        [Input("labels")]
        private InputList<Inputs.OceanLaunchSpecLabelArgs>? _labels;

        /// <summary>
        /// Cluster's labels.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.OceanLaunchSpecLabelArgs>());
            set => _labels = value;
        }

        [Input("metadatas", required: true)]
        private InputList<Inputs.OceanLaunchSpecMetadataArgs>? _metadatas;

        /// <summary>
        /// Cluster's metadata.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.OceanLaunchSpecMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The Ocean cluster ID required for launchSpec create.
        /// </summary>
        [Input("oceanId", required: true)]
        public Input<string> OceanId { get; set; } = null!;

        /// <summary>
        /// Image URL.
        /// </summary>
        [Input("sourceImage", required: true)]
        public Input<string> SourceImage { get; set; } = null!;

        [Input("taints")]
        private InputList<Inputs.OceanLaunchSpecTaintArgs>? _taints;

        /// <summary>
        /// Cluster's taints.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.OceanLaunchSpecTaintArgs>());
            set => _taints = value;
        }

        public OceanLaunchSpecArgs()
        {
        }
    }

    public sealed class OceanLaunchSpecState : Pulumi.ResourceArgs
    {
        [Input("autoscaleHeadrooms")]
        private InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomGetArgs>? _autoscaleHeadrooms;

        /// <summary>
        /// Set custom headroom per launch spec. provide list of headrooms object.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomGetArgs> AutoscaleHeadrooms
        {
            get => _autoscaleHeadrooms ?? (_autoscaleHeadrooms = new InputList<Inputs.OceanLaunchSpecAutoscaleHeadroomGetArgs>());
            set => _autoscaleHeadrooms = value;
        }

        [Input("labels")]
        private InputList<Inputs.OceanLaunchSpecLabelGetArgs>? _labels;

        /// <summary>
        /// Cluster's labels.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.OceanLaunchSpecLabelGetArgs>());
            set => _labels = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.OceanLaunchSpecMetadataGetArgs>? _metadatas;

        /// <summary>
        /// Cluster's metadata.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.OceanLaunchSpecMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The Ocean cluster ID required for launchSpec create.
        /// </summary>
        [Input("oceanId")]
        public Input<string>? OceanId { get; set; }

        /// <summary>
        /// Image URL.
        /// </summary>
        [Input("sourceImage")]
        public Input<string>? SourceImage { get; set; }

        [Input("taints")]
        private InputList<Inputs.OceanLaunchSpecTaintGetArgs>? _taints;

        /// <summary>
        /// Cluster's taints.
        /// </summary>
        public InputList<Inputs.OceanLaunchSpecTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.OceanLaunchSpecTaintGetArgs>());
            set => _taints = value;
        }

        public OceanLaunchSpecState()
        {
        }
    }
}
