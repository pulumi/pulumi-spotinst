// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Gke
{
    /// <summary>
    /// Provides a Spotinst Ocean GKE import resource.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_gke_import.html.markdown.
    /// </summary>
    public partial class OceanImport : Pulumi.CustomResource
    {
        /// <summary>
        /// Describes the backend service configurations.
        /// </summary>
        [Output("backendServices")]
        public Output<ImmutableArray<Outputs.OceanImportBackendServices>> BackendServices { get; private set; } = null!;

        [Output("clusterControllerId")]
        public Output<string> ClusterControllerId { get; private set; } = null!;

        /// <summary>
        /// The GKE cluster name.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The number of instances to launch and maintain in the cluster. 
        /// </summary>
        [Output("desiredCapacity")]
        public Output<int> DesiredCapacity { get; private set; } = null!;

        /// <summary>
        /// The zone the master cluster is located in. 
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        [Output("scheduledTasks")]
        public Output<ImmutableArray<Outputs.OceanImportScheduledTasks>> ScheduledTasks { get; private set; } = null!;

        [Output("whitelists")]
        public Output<ImmutableArray<string>> Whitelists { get; private set; } = null!;


        /// <summary>
        /// Create a OceanImport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OceanImport(string name, OceanImportArgs args, CustomResourceOptions? options = null)
            : base("spotinst:gke/oceanImport:OceanImport", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private OceanImport(string name, Input<string> id, OceanImportState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:gke/oceanImport:OceanImport", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OceanImport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OceanImport Get(string name, Input<string> id, OceanImportState? state = null, CustomResourceOptions? options = null)
        {
            return new OceanImport(name, id, state, options);
        }
    }

    public sealed class OceanImportArgs : Pulumi.ResourceArgs
    {
        [Input("backendServices")]
        private InputList<Inputs.OceanImportBackendServicesArgs>? _backendServices;

        /// <summary>
        /// Describes the backend service configurations.
        /// </summary>
        public InputList<Inputs.OceanImportBackendServicesArgs> BackendServices
        {
            get => _backendServices ?? (_backendServices = new InputList<Inputs.OceanImportBackendServicesArgs>());
            set => _backendServices = value;
        }

        /// <summary>
        /// The GKE cluster name.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The number of instances to launch and maintain in the cluster. 
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// The zone the master cluster is located in. 
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.OceanImportScheduledTasksArgs>? _scheduledTasks;
        public InputList<Inputs.OceanImportScheduledTasksArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.OceanImportScheduledTasksArgs>());
            set => _scheduledTasks = value;
        }

        [Input("whitelists")]
        private InputList<string>? _whitelists;
        public InputList<string> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<string>());
            set => _whitelists = value;
        }

        public OceanImportArgs()
        {
        }
    }

    public sealed class OceanImportState : Pulumi.ResourceArgs
    {
        [Input("backendServices")]
        private InputList<Inputs.OceanImportBackendServicesGetArgs>? _backendServices;

        /// <summary>
        /// Describes the backend service configurations.
        /// </summary>
        public InputList<Inputs.OceanImportBackendServicesGetArgs> BackendServices
        {
            get => _backendServices ?? (_backendServices = new InputList<Inputs.OceanImportBackendServicesGetArgs>());
            set => _backendServices = value;
        }

        [Input("clusterControllerId")]
        public Input<string>? ClusterControllerId { get; set; }

        /// <summary>
        /// The GKE cluster name.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The number of instances to launch and maintain in the cluster. 
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// The zone the master cluster is located in. 
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.OceanImportScheduledTasksGetArgs>? _scheduledTasks;
        public InputList<Inputs.OceanImportScheduledTasksGetArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.OceanImportScheduledTasksGetArgs>());
            set => _scheduledTasks = value;
        }

        [Input("whitelists")]
        private InputList<string>? _whitelists;
        public InputList<string> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<string>());
            set => _whitelists = value;
        }

        public OceanImportState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class OceanImportBackendServicesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets which location the backend services will be active. Valid values: `regional`, `global`.
        /// </summary>
        [Input("locationType")]
        public Input<string>? LocationType { get; set; }

        [Input("namedPorts")]
        private InputList<OceanImportBackendServicesNamedPortsArgs>? _namedPorts;
        public InputList<OceanImportBackendServicesNamedPortsArgs> NamedPorts
        {
            get => _namedPorts ?? (_namedPorts = new InputList<OceanImportBackendServicesNamedPortsArgs>());
            set => _namedPorts = value;
        }

        /// <summary>
        /// Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// The name of the backend service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public OceanImportBackendServicesArgs()
        {
        }
    }

    public sealed class OceanImportBackendServicesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sets which location the backend services will be active. Valid values: `regional`, `global`.
        /// </summary>
        [Input("locationType")]
        public Input<string>? LocationType { get; set; }

        [Input("namedPorts")]
        private InputList<OceanImportBackendServicesNamedPortsGetArgs>? _namedPorts;
        public InputList<OceanImportBackendServicesNamedPortsGetArgs> NamedPorts
        {
            get => _namedPorts ?? (_namedPorts = new InputList<OceanImportBackendServicesNamedPortsGetArgs>());
            set => _namedPorts = value;
        }

        /// <summary>
        /// Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        /// <summary>
        /// The name of the backend service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public OceanImportBackendServicesGetArgs()
        {
        }
    }

    public sealed class OceanImportBackendServicesNamedPortsArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("ports", required: true)]
        private InputList<string>? _ports;

        /// <summary>
        /// A list of ports.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        public OceanImportBackendServicesNamedPortsArgs()
        {
        }
    }

    public sealed class OceanImportBackendServicesNamedPortsGetArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("ports", required: true)]
        private InputList<string>? _ports;

        /// <summary>
        /// A list of ports.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        public OceanImportBackendServicesNamedPortsGetArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksArgs : Pulumi.ResourceArgs
    {
        [Input("shutdownHours")]
        public Input<OceanImportScheduledTasksShutdownHoursArgs>? ShutdownHours { get; set; }

        [Input("tasks")]
        private InputList<OceanImportScheduledTasksTasksArgs>? _tasks;
        public InputList<OceanImportScheduledTasksTasksArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<OceanImportScheduledTasksTasksArgs>());
            set => _tasks = value;
        }

        public OceanImportScheduledTasksArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksGetArgs : Pulumi.ResourceArgs
    {
        [Input("shutdownHours")]
        public Input<OceanImportScheduledTasksShutdownHoursGetArgs>? ShutdownHours { get; set; }

        [Input("tasks")]
        private InputList<OceanImportScheduledTasksTasksGetArgs>? _tasks;
        public InputList<OceanImportScheduledTasksTasksGetArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<OceanImportScheduledTasksTasksGetArgs>());
            set => _tasks = value;
        }

        public OceanImportScheduledTasksGetArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksShutdownHoursArgs : Pulumi.ResourceArgs
    {
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("timeWindows", required: true)]
        private InputList<string>? _timeWindows;
        public InputList<string> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<string>());
            set => _timeWindows = value;
        }

        public OceanImportScheduledTasksShutdownHoursArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksShutdownHoursGetArgs : Pulumi.ResourceArgs
    {
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("timeWindows", required: true)]
        private InputList<string>? _timeWindows;
        public InputList<string> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<string>());
            set => _timeWindows = value;
        }

        public OceanImportScheduledTasksShutdownHoursGetArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksTasksArgs : Pulumi.ResourceArgs
    {
        [Input("batchSizePercentage")]
        public Input<int>? BatchSizePercentage { get; set; }

        [Input("cronExpression", required: true)]
        public Input<string> CronExpression { get; set; } = null!;

        [Input("isEnabled", required: true)]
        public Input<bool> IsEnabled { get; set; } = null!;

        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public OceanImportScheduledTasksTasksArgs()
        {
        }
    }

    public sealed class OceanImportScheduledTasksTasksGetArgs : Pulumi.ResourceArgs
    {
        [Input("batchSizePercentage")]
        public Input<int>? BatchSizePercentage { get; set; }

        [Input("cronExpression", required: true)]
        public Input<string> CronExpression { get; set; } = null!;

        [Input("isEnabled", required: true)]
        public Input<bool> IsEnabled { get; set; } = null!;

        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public OceanImportScheduledTasksTasksGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class OceanImportBackendServices
    {
        /// <summary>
        /// Sets which location the backend services will be active. Valid values: `regional`, `global`.
        /// </summary>
        public readonly string? LocationType;
        public readonly ImmutableArray<OceanImportBackendServicesNamedPorts> NamedPorts;
        /// <summary>
        /// Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
        /// </summary>
        public readonly string? Scheme;
        /// <summary>
        /// The name of the backend service.
        /// </summary>
        public readonly string ServiceName;

        [OutputConstructor]
        private OceanImportBackendServices(
            string? locationType,
            ImmutableArray<OceanImportBackendServicesNamedPorts> namedPorts,
            string? scheme,
            string serviceName)
        {
            LocationType = locationType;
            NamedPorts = namedPorts;
            Scheme = scheme;
            ServiceName = serviceName;
        }
    }

    [OutputType]
    public sealed class OceanImportBackendServicesNamedPorts
    {
        public readonly string Name;
        /// <summary>
        /// A list of ports.
        /// </summary>
        public readonly ImmutableArray<string> Ports;

        [OutputConstructor]
        private OceanImportBackendServicesNamedPorts(
            string name,
            ImmutableArray<string> ports)
        {
            Name = name;
            Ports = ports;
        }
    }

    [OutputType]
    public sealed class OceanImportScheduledTasks
    {
        public readonly OceanImportScheduledTasksShutdownHours? ShutdownHours;
        public readonly ImmutableArray<OceanImportScheduledTasksTasks> Tasks;

        [OutputConstructor]
        private OceanImportScheduledTasks(
            OceanImportScheduledTasksShutdownHours? shutdownHours,
            ImmutableArray<OceanImportScheduledTasksTasks> tasks)
        {
            ShutdownHours = shutdownHours;
            Tasks = tasks;
        }
    }

    [OutputType]
    public sealed class OceanImportScheduledTasksShutdownHours
    {
        public readonly bool? IsEnabled;
        public readonly ImmutableArray<string> TimeWindows;

        [OutputConstructor]
        private OceanImportScheduledTasksShutdownHours(
            bool? isEnabled,
            ImmutableArray<string> timeWindows)
        {
            IsEnabled = isEnabled;
            TimeWindows = timeWindows;
        }
    }

    [OutputType]
    public sealed class OceanImportScheduledTasksTasks
    {
        public readonly int? BatchSizePercentage;
        public readonly string CronExpression;
        public readonly bool IsEnabled;
        public readonly string TaskType;

        [OutputConstructor]
        private OceanImportScheduledTasksTasks(
            int? batchSizePercentage,
            string cronExpression,
            bool isEnabled,
            string taskType)
        {
            BatchSizePercentage = batchSizePercentage;
            CronExpression = cronExpression;
            IsEnabled = isEnabled;
            TaskType = taskType;
        }
    }
    }
}
