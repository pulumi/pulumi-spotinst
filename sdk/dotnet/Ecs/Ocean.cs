// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Ecs
{
    /// <summary>
    /// Provides a Spotinst Ocean ECS resource.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_ecs.html.markdown.
    /// </summary>
    public partial class Ocean : Pulumi.CustomResource
    {
        /// <summary>
        /// Configure public IP address allocation.
        /// </summary>
        [Output("associatePublicIpAddress")]
        public Output<bool?> AssociatePublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// Describes the Ocean ECS autoscaler.
        /// </summary>
        [Output("autoscaler")]
        public Output<Outputs.OceanAutoscaler?> Autoscaler { get; private set; } = null!;

        /// <summary>
        /// The ocean cluster name.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The number of instances to launch and maintain in the cluster.
        /// </summary>
        [Output("desiredCapacity")]
        public Output<int> DesiredCapacity { get; private set; } = null!;

        /// <summary>
        /// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
        /// </summary>
        [Output("drainingTimeout")]
        public Output<int?> DrainingTimeout { get; private set; } = null!;

        /// <summary>
        /// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
        /// </summary>
        [Output("ebsOptimized")]
        public Output<bool?> EbsOptimized { get; private set; } = null!;

        /// <summary>
        /// The instance profile iam role.
        /// </summary>
        [Output("iamInstanceProfile")]
        public Output<string?> IamInstanceProfile { get; private set; } = null!;

        /// <summary>
        /// ID of the image used to launch the instances.
        /// </summary>
        [Output("imageId")]
        public Output<string?> ImageId { get; private set; } = null!;

        /// <summary>
        /// The key pair to attach the instances.
        /// </summary>
        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        /// <summary>
        /// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
        /// </summary>
        [Output("monitoring")]
        public Output<bool?> Monitoring { get; private set; } = null!;

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region the cluster will run in.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("scheduledTasks")]
        public Output<ImmutableArray<Outputs.OceanScheduledTasks>> ScheduledTasks { get; private set; } = null!;

        /// <summary>
        /// One or more security group ids.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Optionally adds tags to instances launched in an Ocean cluster.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.OceanTags>> Tags { get; private set; } = null!;

        [Output("updatePolicy")]
        public Output<Outputs.OceanUpdatePolicy?> UpdatePolicy { get; private set; } = null!;

        /// <summary>
        /// Base64-encoded MIME user data to make available to the instances.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// If Reserved instances exist, OCean will utilize them before launching Spot instances.
        /// </summary>
        [Output("utilizeReservedInstances")]
        public Output<bool?> UtilizeReservedInstances { get; private set; } = null!;

        /// <summary>
        /// Instance types allowed in the Ocean cluster.
        /// </summary>
        [Output("whitelists")]
        public Output<ImmutableArray<string>> Whitelists { get; private set; } = null!;


        /// <summary>
        /// Create a Ocean resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ocean(string name, OceanArgs args, CustomResourceOptions? options = null)
            : base("spotinst:ecs/ocean:Ocean", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Ocean(string name, Input<string> id, OceanState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:ecs/ocean:Ocean", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ocean resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ocean Get(string name, Input<string> id, OceanState? state = null, CustomResourceOptions? options = null)
        {
            return new Ocean(name, id, state, options);
        }
    }

    public sealed class OceanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure public IP address allocation.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        /// <summary>
        /// Describes the Ocean ECS autoscaler.
        /// </summary>
        [Input("autoscaler")]
        public Input<Inputs.OceanAutoscalerArgs>? Autoscaler { get; set; }

        /// <summary>
        /// The ocean cluster name.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The number of instances to launch and maintain in the cluster.
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
        /// </summary>
        [Input("drainingTimeout")]
        public Input<int>? DrainingTimeout { get; set; }

        /// <summary>
        /// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// The instance profile iam role.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// ID of the image used to launch the instances.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The key pair to attach the instances.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region the cluster will run in.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("scheduledTasks")]
        private InputList<Inputs.OceanScheduledTasksArgs>? _scheduledTasks;
        public InputList<Inputs.OceanScheduledTasksArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.OceanScheduledTasksArgs>());
            set => _scheduledTasks = value;
        }

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security group ids.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.OceanTagsArgs>? _tags;

        /// <summary>
        /// Optionally adds tags to instances launched in an Ocean cluster.
        /// </summary>
        public InputList<Inputs.OceanTagsArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.OceanTagsArgs>());
            set => _tags = value;
        }

        [Input("updatePolicy")]
        public Input<Inputs.OceanUpdatePolicyArgs>? UpdatePolicy { get; set; }

        /// <summary>
        /// Base64-encoded MIME user data to make available to the instances.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// If Reserved instances exist, OCean will utilize them before launching Spot instances.
        /// </summary>
        [Input("utilizeReservedInstances")]
        public Input<bool>? UtilizeReservedInstances { get; set; }

        [Input("whitelists")]
        private InputList<string>? _whitelists;

        /// <summary>
        /// Instance types allowed in the Ocean cluster.
        /// </summary>
        public InputList<string> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<string>());
            set => _whitelists = value;
        }

        public OceanArgs()
        {
        }
    }

    public sealed class OceanState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure public IP address allocation.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        /// <summary>
        /// Describes the Ocean ECS autoscaler.
        /// </summary>
        [Input("autoscaler")]
        public Input<Inputs.OceanAutoscalerGetArgs>? Autoscaler { get; set; }

        /// <summary>
        /// The ocean cluster name.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The number of instances to launch and maintain in the cluster.
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        /// <summary>
        /// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
        /// </summary>
        [Input("drainingTimeout")]
        public Input<int>? DrainingTimeout { get; set; }

        /// <summary>
        /// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// The instance profile iam role.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// ID of the image used to launch the instances.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The key pair to attach the instances.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        /// <summary>
        /// The upper limit of instances the cluster can scale up to.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The lower limit of instances the cluster can scale down to.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        /// <summary>
        /// The Ocean cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region the cluster will run in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.OceanScheduledTasksGetArgs>? _scheduledTasks;
        public InputList<Inputs.OceanScheduledTasksGetArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.OceanScheduledTasksGetArgs>());
            set => _scheduledTasks = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security group ids.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.OceanTagsGetArgs>? _tags;

        /// <summary>
        /// Optionally adds tags to instances launched in an Ocean cluster.
        /// </summary>
        public InputList<Inputs.OceanTagsGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.OceanTagsGetArgs>());
            set => _tags = value;
        }

        [Input("updatePolicy")]
        public Input<Inputs.OceanUpdatePolicyGetArgs>? UpdatePolicy { get; set; }

        /// <summary>
        /// Base64-encoded MIME user data to make available to the instances.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// If Reserved instances exist, OCean will utilize them before launching Spot instances.
        /// </summary>
        [Input("utilizeReservedInstances")]
        public Input<bool>? UtilizeReservedInstances { get; set; }

        [Input("whitelists")]
        private InputList<string>? _whitelists;

        /// <summary>
        /// Instance types allowed in the Ocean cluster.
        /// </summary>
        public InputList<string> Whitelists
        {
            get => _whitelists ?? (_whitelists = new InputList<string>());
            set => _whitelists = value;
        }

        public OceanState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class OceanAutoscalerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cooldown period between scaling actions.
        /// </summary>
        [Input("cooldown")]
        public Input<int>? Cooldown { get; set; }

        /// <summary>
        /// Auto Scaling scale down operations.
        /// </summary>
        [Input("down")]
        public Input<OceanAutoscalerDownArgs>? Down { get; set; }

        /// <summary>
        /// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
        /// </summary>
        [Input("headroom")]
        public Input<OceanAutoscalerHeadroomArgs>? Headroom { get; set; }

        /// <summary>
        /// Automatically configure and optimize headroom resources.
        /// </summary>
        [Input("isAutoConfig")]
        public Input<bool>? IsAutoConfig { get; set; }

        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Optionally set upper and lower bounds on the resource usage of the cluster.
        /// </summary>
        [Input("resourceLimits")]
        public Input<OceanAutoscalerResourceLimitsArgs>? ResourceLimits { get; set; }

        public OceanAutoscalerArgs()
        {
        }
    }

    public sealed class OceanAutoscalerDownArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Would represent the maximum % to scale-down. Number between 1-100
        /// </summary>
        [Input("maxScaleDownPercentage")]
        public Input<int>? MaxScaleDownPercentage { get; set; }

        public OceanAutoscalerDownArgs()
        {
        }
    }

    public sealed class OceanAutoscalerDownGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Would represent the maximum % to scale-down. Number between 1-100
        /// </summary>
        [Input("maxScaleDownPercentage")]
        public Input<int>? MaxScaleDownPercentage { get; set; }

        public OceanAutoscalerDownGetArgs()
        {
        }
    }

    public sealed class OceanAutoscalerGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cooldown period between scaling actions.
        /// </summary>
        [Input("cooldown")]
        public Input<int>? Cooldown { get; set; }

        /// <summary>
        /// Auto Scaling scale down operations.
        /// </summary>
        [Input("down")]
        public Input<OceanAutoscalerDownGetArgs>? Down { get; set; }

        /// <summary>
        /// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
        /// </summary>
        [Input("headroom")]
        public Input<OceanAutoscalerHeadroomGetArgs>? Headroom { get; set; }

        /// <summary>
        /// Automatically configure and optimize headroom resources.
        /// </summary>
        [Input("isAutoConfig")]
        public Input<bool>? IsAutoConfig { get; set; }

        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Optionally set upper and lower bounds on the resource usage of the cluster.
        /// </summary>
        [Input("resourceLimits")]
        public Input<OceanAutoscalerResourceLimitsGetArgs>? ResourceLimits { get; set; }

        public OceanAutoscalerGetArgs()
        {
        }
    }

    public sealed class OceanAutoscalerHeadroomArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
        /// </summary>
        [Input("cpuPerUnit")]
        public Input<int>? CpuPerUnit { get; set; }

        /// <summary>
        /// Optionally configure the amount of memory (MB) to allocate the headroom.
        /// </summary>
        [Input("memoryPerUnit")]
        public Input<int>? MemoryPerUnit { get; set; }

        /// <summary>
        /// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
        /// </summary>
        [Input("numOfUnits")]
        public Input<int>? NumOfUnits { get; set; }

        public OceanAutoscalerHeadroomArgs()
        {
        }
    }

    public sealed class OceanAutoscalerHeadroomGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
        /// </summary>
        [Input("cpuPerUnit")]
        public Input<int>? CpuPerUnit { get; set; }

        /// <summary>
        /// Optionally configure the amount of memory (MB) to allocate the headroom.
        /// </summary>
        [Input("memoryPerUnit")]
        public Input<int>? MemoryPerUnit { get; set; }

        /// <summary>
        /// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
        /// </summary>
        [Input("numOfUnits")]
        public Input<int>? NumOfUnits { get; set; }

        public OceanAutoscalerHeadroomGetArgs()
        {
        }
    }

    public sealed class OceanAutoscalerResourceLimitsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum memory in GiB units that can be allocated to the cluster.
        /// </summary>
        [Input("maxMemoryGib")]
        public Input<int>? MaxMemoryGib { get; set; }

        /// <summary>
        /// The maximum cpu in vCPU units that can be allocated to the cluster.
        /// </summary>
        [Input("maxVcpu")]
        public Input<int>? MaxVcpu { get; set; }

        public OceanAutoscalerResourceLimitsArgs()
        {
        }
    }

    public sealed class OceanAutoscalerResourceLimitsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum memory in GiB units that can be allocated to the cluster.
        /// </summary>
        [Input("maxMemoryGib")]
        public Input<int>? MaxMemoryGib { get; set; }

        /// <summary>
        /// The maximum cpu in vCPU units that can be allocated to the cluster.
        /// </summary>
        [Input("maxVcpu")]
        public Input<int>? MaxVcpu { get; set; }

        public OceanAutoscalerResourceLimitsGetArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksArgs : Pulumi.ResourceArgs
    {
        [Input("shutdownHours")]
        public Input<OceanScheduledTasksShutdownHoursArgs>? ShutdownHours { get; set; }

        [Input("tasks")]
        private InputList<OceanScheduledTasksTasksArgs>? _tasks;
        public InputList<OceanScheduledTasksTasksArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<OceanScheduledTasksTasksArgs>());
            set => _tasks = value;
        }

        public OceanScheduledTasksArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksGetArgs : Pulumi.ResourceArgs
    {
        [Input("shutdownHours")]
        public Input<OceanScheduledTasksShutdownHoursGetArgs>? ShutdownHours { get; set; }

        [Input("tasks")]
        private InputList<OceanScheduledTasksTasksGetArgs>? _tasks;
        public InputList<OceanScheduledTasksTasksGetArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<OceanScheduledTasksTasksGetArgs>());
            set => _tasks = value;
        }

        public OceanScheduledTasksGetArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksShutdownHoursArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("timeWindows", required: true)]
        private InputList<string>? _timeWindows;
        public InputList<string> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<string>());
            set => _timeWindows = value;
        }

        public OceanScheduledTasksShutdownHoursArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksShutdownHoursGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("timeWindows", required: true)]
        private InputList<string>? _timeWindows;
        public InputList<string> TimeWindows
        {
            get => _timeWindows ?? (_timeWindows = new InputList<string>());
            set => _timeWindows = value;
        }

        public OceanScheduledTasksShutdownHoursGetArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksTasksArgs : Pulumi.ResourceArgs
    {
        [Input("cronExpression", required: true)]
        public Input<string> CronExpression { get; set; } = null!;

        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled", required: true)]
        public Input<bool> IsEnabled { get; set; } = null!;

        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public OceanScheduledTasksTasksArgs()
        {
        }
    }

    public sealed class OceanScheduledTasksTasksGetArgs : Pulumi.ResourceArgs
    {
        [Input("cronExpression", required: true)]
        public Input<string> CronExpression { get; set; } = null!;

        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        [Input("isEnabled", required: true)]
        public Input<bool> IsEnabled { get; set; } = null!;

        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public OceanScheduledTasksTasksGetArgs()
        {
        }
    }

    public sealed class OceanTagsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The tag key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The tag value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public OceanTagsArgs()
        {
        }
    }

    public sealed class OceanTagsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The tag key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The tag value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public OceanTagsGetArgs()
        {
        }
    }

    public sealed class OceanUpdatePolicyArgs : Pulumi.ResourceArgs
    {
        [Input("rollConfig")]
        public Input<OceanUpdatePolicyRollConfigArgs>? RollConfig { get; set; }

        [Input("shouldRoll", required: true)]
        public Input<bool> ShouldRoll { get; set; } = null!;

        public OceanUpdatePolicyArgs()
        {
        }
    }

    public sealed class OceanUpdatePolicyGetArgs : Pulumi.ResourceArgs
    {
        [Input("rollConfig")]
        public Input<OceanUpdatePolicyRollConfigGetArgs>? RollConfig { get; set; }

        [Input("shouldRoll", required: true)]
        public Input<bool> ShouldRoll { get; set; } = null!;

        public OceanUpdatePolicyGetArgs()
        {
        }
    }

    public sealed class OceanUpdatePolicyRollConfigArgs : Pulumi.ResourceArgs
    {
        [Input("batchSizePercentage", required: true)]
        public Input<int> BatchSizePercentage { get; set; } = null!;

        public OceanUpdatePolicyRollConfigArgs()
        {
        }
    }

    public sealed class OceanUpdatePolicyRollConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("batchSizePercentage", required: true)]
        public Input<int> BatchSizePercentage { get; set; } = null!;

        public OceanUpdatePolicyRollConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class OceanAutoscaler
    {
        /// <summary>
        /// Cooldown period between scaling actions.
        /// </summary>
        public readonly int? Cooldown;
        /// <summary>
        /// Auto Scaling scale down operations.
        /// </summary>
        public readonly OceanAutoscalerDown? Down;
        /// <summary>
        /// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
        /// </summary>
        public readonly OceanAutoscalerHeadroom? Headroom;
        /// <summary>
        /// Automatically configure and optimize headroom resources.
        /// </summary>
        public readonly bool? IsAutoConfig;
        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// Optionally set upper and lower bounds on the resource usage of the cluster.
        /// </summary>
        public readonly OceanAutoscalerResourceLimits? ResourceLimits;

        [OutputConstructor]
        private OceanAutoscaler(
            int? cooldown,
            OceanAutoscalerDown? down,
            OceanAutoscalerHeadroom? headroom,
            bool? isAutoConfig,
            bool? isEnabled,
            OceanAutoscalerResourceLimits? resourceLimits)
        {
            Cooldown = cooldown;
            Down = down;
            Headroom = headroom;
            IsAutoConfig = isAutoConfig;
            IsEnabled = isEnabled;
            ResourceLimits = resourceLimits;
        }
    }

    [OutputType]
    public sealed class OceanAutoscalerDown
    {
        /// <summary>
        /// Would represent the maximum % to scale-down. Number between 1-100
        /// </summary>
        public readonly int? MaxScaleDownPercentage;

        [OutputConstructor]
        private OceanAutoscalerDown(int? maxScaleDownPercentage)
        {
            MaxScaleDownPercentage = maxScaleDownPercentage;
        }
    }

    [OutputType]
    public sealed class OceanAutoscalerHeadroom
    {
        /// <summary>
        /// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
        /// </summary>
        public readonly int? CpuPerUnit;
        /// <summary>
        /// Optionally configure the amount of memory (MB) to allocate the headroom.
        /// </summary>
        public readonly int? MemoryPerUnit;
        /// <summary>
        /// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
        /// </summary>
        public readonly int? NumOfUnits;

        [OutputConstructor]
        private OceanAutoscalerHeadroom(
            int? cpuPerUnit,
            int? memoryPerUnit,
            int? numOfUnits)
        {
            CpuPerUnit = cpuPerUnit;
            MemoryPerUnit = memoryPerUnit;
            NumOfUnits = numOfUnits;
        }
    }

    [OutputType]
    public sealed class OceanAutoscalerResourceLimits
    {
        /// <summary>
        /// The maximum memory in GiB units that can be allocated to the cluster.
        /// </summary>
        public readonly int? MaxMemoryGib;
        /// <summary>
        /// The maximum cpu in vCPU units that can be allocated to the cluster.
        /// </summary>
        public readonly int? MaxVcpu;

        [OutputConstructor]
        private OceanAutoscalerResourceLimits(
            int? maxMemoryGib,
            int? maxVcpu)
        {
            MaxMemoryGib = maxMemoryGib;
            MaxVcpu = maxVcpu;
        }
    }

    [OutputType]
    public sealed class OceanScheduledTasks
    {
        public readonly OceanScheduledTasksShutdownHours? ShutdownHours;
        public readonly ImmutableArray<OceanScheduledTasksTasks> Tasks;

        [OutputConstructor]
        private OceanScheduledTasks(
            OceanScheduledTasksShutdownHours? shutdownHours,
            ImmutableArray<OceanScheduledTasksTasks> tasks)
        {
            ShutdownHours = shutdownHours;
            Tasks = tasks;
        }
    }

    [OutputType]
    public sealed class OceanScheduledTasksShutdownHours
    {
        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        public readonly bool? IsEnabled;
        public readonly ImmutableArray<string> TimeWindows;

        [OutputConstructor]
        private OceanScheduledTasksShutdownHours(
            bool? isEnabled,
            ImmutableArray<string> timeWindows)
        {
            IsEnabled = isEnabled;
            TimeWindows = timeWindows;
        }
    }

    [OutputType]
    public sealed class OceanScheduledTasksTasks
    {
        public readonly string CronExpression;
        /// <summary>
        /// Enable the Ocean ECS autoscaler.
        /// </summary>
        public readonly bool IsEnabled;
        public readonly string TaskType;

        [OutputConstructor]
        private OceanScheduledTasksTasks(
            string cronExpression,
            bool isEnabled,
            string taskType)
        {
            CronExpression = cronExpression;
            IsEnabled = isEnabled;
            TaskType = taskType;
        }
    }

    [OutputType]
    public sealed class OceanTags
    {
        /// <summary>
        /// The tag key.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The tag value.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private OceanTags(
            string key,
            string value)
        {
            Key = key;
            Value = value;
        }
    }

    [OutputType]
    public sealed class OceanUpdatePolicy
    {
        public readonly OceanUpdatePolicyRollConfig? RollConfig;
        public readonly bool ShouldRoll;

        [OutputConstructor]
        private OceanUpdatePolicy(
            OceanUpdatePolicyRollConfig? rollConfig,
            bool shouldRoll)
        {
            RollConfig = rollConfig;
            ShouldRoll = shouldRoll;
        }
    }

    [OutputType]
    public sealed class OceanUpdatePolicyRollConfig
    {
        public readonly int BatchSizePercentage;

        [OutputConstructor]
        private OceanUpdatePolicyRollConfig(int batchSizePercentage)
        {
            BatchSizePercentage = batchSizePercentage;
        }
    }
    }
}
