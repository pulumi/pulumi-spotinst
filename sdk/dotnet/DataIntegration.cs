// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst
{
    /// <summary>
    /// Provides a Spotinst Data Integration resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new SpotInst.DataIntegration("example", new()
    ///     {
    ///         S3 = new SpotInst.Inputs.DataIntegrationS3Args
    ///         {
    ///             BucketName = "terraform-test-do-not-delete",
    ///             Subdir = "terraform-test-data-integration",
    ///         },
    ///         Status = "enabled",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpotInstResourceType("spotinst:index/dataIntegration:DataIntegration")]
    public partial class DataIntegration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the data integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// When vendor value is s3, the following fields are included:
        /// </summary>
        [Output("s3")]
        public Output<Outputs.DataIntegrationS3?> S3 { get; private set; } = null!;

        /// <summary>
        /// Determines if this data integration is on or off. Valid values: `"enabled"`, `"disabled"`
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DataIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataIntegration(string name, DataIntegrationArgs? args = null, CustomResourceOptions? options = null)
            : base("spotinst:index/dataIntegration:DataIntegration", name, args ?? new DataIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataIntegration(string name, Input<string> id, DataIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:index/dataIntegration:DataIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataIntegration Get(string name, Input<string> id, DataIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new DataIntegration(name, id, state, options);
        }
    }

    public sealed class DataIntegrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the data integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// When vendor value is s3, the following fields are included:
        /// </summary>
        [Input("s3")]
        public Input<Inputs.DataIntegrationS3Args>? S3 { get; set; }

        /// <summary>
        /// Determines if this data integration is on or off. Valid values: `"enabled"`, `"disabled"`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DataIntegrationArgs()
        {
        }
        public static new DataIntegrationArgs Empty => new DataIntegrationArgs();
    }

    public sealed class DataIntegrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the data integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// When vendor value is s3, the following fields are included:
        /// </summary>
        [Input("s3")]
        public Input<Inputs.DataIntegrationS3GetArgs>? S3 { get; set; }

        /// <summary>
        /// Determines if this data integration is on or off. Valid values: `"enabled"`, `"disabled"`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DataIntegrationState()
        {
        }
        public static new DataIntegrationState Empty => new DataIntegrationState();
    }
}
