// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Multai
{
    /// <summary>
    /// Provides a Spotinst Multai Routing Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myRoutingRule = new SpotInst.Multai.RoutingRule("myRoutingRule", new SpotInst.Multai.RoutingRuleArgs
    ///         {
    ///             BalancerId = "b-12345",
    ///             ListenerId = "l-98765",
    ///             Route = "Path(`/bar`)",
    ///             Strategy = "LEASTCONN",
    ///             Tags = 
    ///             {
    ///                 new SpotInst.Multai.Inputs.RoutingRuleTagArgs
    ///                 {
    ///                     Key = "env",
    ///                     Value = "prod",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class RoutingRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Output("balancerId")]
        public Output<string> BalancerId { get; private set; } = null!;

        /// <summary>
        /// The ID of the listener.
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        [Output("middlewareIds")]
        public Output<ImmutableArray<string>> MiddlewareIds { get; private set; } = null!;

        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Route defines a simple language for matching HTTP requests and route the traffic accordingly. Route provides series of matchers that follow the syntax: Path matcher: — Path("/foo/bar") // trie-based PathRegexp(“/foo/.*”) // regexp-based Method matcher: — Method(“GET”) // trie-based MethodRegexp(“POST|PUT”) // regexp based Header matcher: — Header(“Content-Type”, “application/json”) // trie-based HeaderRegexp(“Content-Type”, “application/.*”) // regexp based Matchers can be combined using &amp;&amp; operator: — Method(“POST”) &amp;&amp; Path("/v1")
        /// </summary>
        [Output("route")]
        public Output<string> Route { get; private set; } = null!;

        /// <summary>
        /// Balancing strategy. Valid values: `ROUNDROBIN`, `RANDOM`, `LEASTCONN`, `IPHASH`.
        /// </summary>
        [Output("strategy")]
        public Output<string?> Strategy { get; private set; } = null!;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.RoutingRuleTag>> Tags { get; private set; } = null!;

        [Output("targetSetIds")]
        public Output<ImmutableArray<string>> TargetSetIds { get; private set; } = null!;


        /// <summary>
        /// Create a RoutingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoutingRule(string name, RoutingRuleArgs args, CustomResourceOptions? options = null)
            : base("spotinst:multai/routingRule:RoutingRule", name, args ?? new RoutingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoutingRule(string name, Input<string> id, RoutingRuleState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:multai/routingRule:RoutingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoutingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoutingRule Get(string name, Input<string> id, RoutingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RoutingRule(name, id, state, options);
        }
    }

    public sealed class RoutingRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Input("balancerId", required: true)]
        public Input<string> BalancerId { get; set; } = null!;

        /// <summary>
        /// The ID of the listener.
        /// </summary>
        [Input("listenerId", required: true)]
        public Input<string> ListenerId { get; set; } = null!;

        [Input("middlewareIds")]
        private InputList<string>? _middlewareIds;
        public InputList<string> MiddlewareIds
        {
            get => _middlewareIds ?? (_middlewareIds = new InputList<string>());
            set => _middlewareIds = value;
        }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Route defines a simple language for matching HTTP requests and route the traffic accordingly. Route provides series of matchers that follow the syntax: Path matcher: — Path("/foo/bar") // trie-based PathRegexp(“/foo/.*”) // regexp-based Method matcher: — Method(“GET”) // trie-based MethodRegexp(“POST|PUT”) // regexp based Header matcher: — Header(“Content-Type”, “application/json”) // trie-based HeaderRegexp(“Content-Type”, “application/.*”) // regexp based Matchers can be combined using &amp;&amp; operator: — Method(“POST”) &amp;&amp; Path("/v1")
        /// </summary>
        [Input("route", required: true)]
        public Input<string> Route { get; set; } = null!;

        /// <summary>
        /// Balancing strategy. Valid values: `ROUNDROBIN`, `RANDOM`, `LEASTCONN`, `IPHASH`.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        [Input("tags")]
        private InputList<Inputs.RoutingRuleTagArgs>? _tags;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        public InputList<Inputs.RoutingRuleTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RoutingRuleTagArgs>());
            set => _tags = value;
        }

        [Input("targetSetIds", required: true)]
        private InputList<string>? _targetSetIds;
        public InputList<string> TargetSetIds
        {
            get => _targetSetIds ?? (_targetSetIds = new InputList<string>());
            set => _targetSetIds = value;
        }

        public RoutingRuleArgs()
        {
        }
    }

    public sealed class RoutingRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Input("balancerId")]
        public Input<string>? BalancerId { get; set; }

        /// <summary>
        /// The ID of the listener.
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        [Input("middlewareIds")]
        private InputList<string>? _middlewareIds;
        public InputList<string> MiddlewareIds
        {
            get => _middlewareIds ?? (_middlewareIds = new InputList<string>());
            set => _middlewareIds = value;
        }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Route defines a simple language for matching HTTP requests and route the traffic accordingly. Route provides series of matchers that follow the syntax: Path matcher: — Path("/foo/bar") // trie-based PathRegexp(“/foo/.*”) // regexp-based Method matcher: — Method(“GET”) // trie-based MethodRegexp(“POST|PUT”) // regexp based Header matcher: — Header(“Content-Type”, “application/json”) // trie-based HeaderRegexp(“Content-Type”, “application/.*”) // regexp based Matchers can be combined using &amp;&amp; operator: — Method(“POST”) &amp;&amp; Path("/v1")
        /// </summary>
        [Input("route")]
        public Input<string>? Route { get; set; }

        /// <summary>
        /// Balancing strategy. Valid values: `ROUNDROBIN`, `RANDOM`, `LEASTCONN`, `IPHASH`.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        [Input("tags")]
        private InputList<Inputs.RoutingRuleTagGetArgs>? _tags;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        public InputList<Inputs.RoutingRuleTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RoutingRuleTagGetArgs>());
            set => _tags = value;
        }

        [Input("targetSetIds")]
        private InputList<string>? _targetSetIds;
        public InputList<string> TargetSetIds
        {
            get => _targetSetIds ?? (_targetSetIds = new InputList<string>());
            set => _targetSetIds = value;
        }

        public RoutingRuleState()
        {
        }
    }
}
