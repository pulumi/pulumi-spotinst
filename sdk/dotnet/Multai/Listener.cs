// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Multai
{
    /// <summary>
    /// Provides a Spotinst Multai Listener.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/multai_listener.html.markdown.
    /// </summary>
    public partial class Listener : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Output("balancerId")]
        public Output<string> BalancerId { get; private set; } = null!;

        /// <summary>
        /// The port on which the load balancer is listening.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol to allow connections to the load balancer.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ListenerTags>> Tags { get; private set; } = null!;

        /// <summary>
        /// Describes the TLSConfig configuration.
        /// </summary>
        [Output("tlsConfig")]
        public Output<Outputs.ListenerTlsConfig?> TlsConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("spotinst:multai/listener:Listener", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:multai/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Input("balancerId", required: true)]
        public Input<string> BalancerId { get; set; } = null!;

        /// <summary>
        /// The port on which the load balancer is listening.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol to allow connections to the load balancer.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.ListenerTagsArgs>? _tags;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        public InputList<Inputs.ListenerTagsArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagsArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Describes the TLSConfig configuration.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.ListenerTlsConfigArgs>? TlsConfig { get; set; }

        public ListenerArgs()
        {
        }
    }

    public sealed class ListenerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the balancer.
        /// </summary>
        [Input("balancerId")]
        public Input<string>? BalancerId { get; set; }

        /// <summary>
        /// The port on which the load balancer is listening.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol to allow connections to the load balancer.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("tags")]
        private InputList<Inputs.ListenerTagsGetArgs>? _tags;

        /// <summary>
        /// A list of key:value paired tags.
        /// </summary>
        public InputList<Inputs.ListenerTagsGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagsGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Describes the TLSConfig configuration.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.ListenerTlsConfigGetArgs>? TlsConfig { get; set; }

        public ListenerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ListenerTagsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The tag's key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The tag's value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ListenerTagsArgs()
        {
        }
    }

    public sealed class ListenerTagsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The tag's key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The tag's value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ListenerTagsGetArgs()
        {
        }
    }

    public sealed class ListenerTlsConfigArgs : Pulumi.ResourceArgs
    {
        [Input("certificateIds", required: true)]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// Contains one or more certificate chains to present to the other side of the connection.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        [Input("cipherSuites", required: true)]
        private InputList<string>? _cipherSuites;

        /// <summary>
        /// List of supported cipher suites. If cipherSuites is nil, TLS uses a list of suites supported by the implementation.
        /// </summary>
        public InputList<string> CipherSuites
        {
            get => _cipherSuites ?? (_cipherSuites = new InputList<string>());
            set => _cipherSuites = value;
        }

        /// <summary>
        /// MaxVersion contains the maximum SSL/TLS version that is acceptable.
        /// </summary>
        [Input("maxVersion", required: true)]
        public Input<string> MaxVersion { get; set; } = null!;

        /// <summary>
        /// MinVersion contains the minimum SSL/TLS version that is acceptable (1.0 is the minimum).
        /// </summary>
        [Input("minVersion", required: true)]
        public Input<string> MinVersion { get; set; } = null!;

        /// <summary>
        /// Controls whether the server selects the client’s most preferred ciphersuite, or the server’s most preferred ciphersuite.
        /// </summary>
        [Input("preferServerCipherSuites", required: true)]
        public Input<bool> PreferServerCipherSuites { get; set; } = null!;

        /// <summary>
        /// May be set to true to disable session ticket (resumption) support.
        /// </summary>
        [Input("sessionTicketsDisabled", required: true)]
        public Input<bool> SessionTicketsDisabled { get; set; } = null!;

        public ListenerTlsConfigArgs()
        {
        }
    }

    public sealed class ListenerTlsConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificateIds", required: true)]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// Contains one or more certificate chains to present to the other side of the connection.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        [Input("cipherSuites", required: true)]
        private InputList<string>? _cipherSuites;

        /// <summary>
        /// List of supported cipher suites. If cipherSuites is nil, TLS uses a list of suites supported by the implementation.
        /// </summary>
        public InputList<string> CipherSuites
        {
            get => _cipherSuites ?? (_cipherSuites = new InputList<string>());
            set => _cipherSuites = value;
        }

        /// <summary>
        /// MaxVersion contains the maximum SSL/TLS version that is acceptable.
        /// </summary>
        [Input("maxVersion", required: true)]
        public Input<string> MaxVersion { get; set; } = null!;

        /// <summary>
        /// MinVersion contains the minimum SSL/TLS version that is acceptable (1.0 is the minimum).
        /// </summary>
        [Input("minVersion", required: true)]
        public Input<string> MinVersion { get; set; } = null!;

        /// <summary>
        /// Controls whether the server selects the client’s most preferred ciphersuite, or the server’s most preferred ciphersuite.
        /// </summary>
        [Input("preferServerCipherSuites", required: true)]
        public Input<bool> PreferServerCipherSuites { get; set; } = null!;

        /// <summary>
        /// May be set to true to disable session ticket (resumption) support.
        /// </summary>
        [Input("sessionTicketsDisabled", required: true)]
        public Input<bool> SessionTicketsDisabled { get; set; } = null!;

        public ListenerTlsConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ListenerTags
    {
        /// <summary>
        /// The tag's key.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The tag's value.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private ListenerTags(
            string key,
            string value)
        {
            Key = key;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ListenerTlsConfig
    {
        /// <summary>
        /// Contains one or more certificate chains to present to the other side of the connection.
        /// </summary>
        public readonly ImmutableArray<string> CertificateIds;
        /// <summary>
        /// List of supported cipher suites. If cipherSuites is nil, TLS uses a list of suites supported by the implementation.
        /// </summary>
        public readonly ImmutableArray<string> CipherSuites;
        /// <summary>
        /// MaxVersion contains the maximum SSL/TLS version that is acceptable.
        /// </summary>
        public readonly string MaxVersion;
        /// <summary>
        /// MinVersion contains the minimum SSL/TLS version that is acceptable (1.0 is the minimum).
        /// </summary>
        public readonly string MinVersion;
        /// <summary>
        /// Controls whether the server selects the client’s most preferred ciphersuite, or the server’s most preferred ciphersuite.
        /// </summary>
        public readonly bool PreferServerCipherSuites;
        /// <summary>
        /// May be set to true to disable session ticket (resumption) support.
        /// </summary>
        public readonly bool SessionTicketsDisabled;

        [OutputConstructor]
        private ListenerTlsConfig(
            ImmutableArray<string> certificateIds,
            ImmutableArray<string> cipherSuites,
            string maxVersion,
            string minVersion,
            bool preferServerCipherSuites,
            bool sessionTicketsDisabled)
        {
            CertificateIds = certificateIds;
            CipherSuites = cipherSuites;
            MaxVersion = maxVersion;
            MinVersion = minVersion;
            PreferServerCipherSuites = preferServerCipherSuites;
            SessionTicketsDisabled = sessionTicketsDisabled;
        }
    }
    }
}
