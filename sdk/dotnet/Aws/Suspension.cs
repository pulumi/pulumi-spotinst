// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Aws
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a suspension for Elastigroup
    ///     var resourceName = new SpotInst.Aws.Suspension("resourceName", new()
    ///     {
    ///         GroupId = "sig-12345678",
    ///         Suspensions = new[]
    ///         {
    ///             new SpotInst.Aws.Inputs.SuspensionSuspensionArgs
    ///             {
    ///                 Name = "OUT_OF_STRATEGY",
    ///             },
    ///             new SpotInst.Aws.Inputs.SuspensionSuspensionArgs
    ///             {
    ///                 Name = "REVERT_PREFERRED",
    ///             },
    ///             new SpotInst.Aws.Inputs.SuspensionSuspensionArgs
    ///             {
    ///                 Name = "PREVENTIVE_REPLACEMENT",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SpotInstResourceType("spotinst:aws/suspension:Suspension")]
    public partial class Suspension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Elastigroup ID to apply the suspensions on.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// block of single process to suspend.
        /// </summary>
        [Output("suspensions")]
        public Output<ImmutableArray<Outputs.SuspensionSuspension>> Suspensions { get; private set; } = null!;


        /// <summary>
        /// Create a Suspension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Suspension(string name, SuspensionArgs args, CustomResourceOptions? options = null)
            : base("spotinst:aws/suspension:Suspension", name, args ?? new SuspensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Suspension(string name, Input<string> id, SuspensionState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:aws/suspension:Suspension", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Suspension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Suspension Get(string name, Input<string> id, SuspensionState? state = null, CustomResourceOptions? options = null)
        {
            return new Suspension(name, id, state, options);
        }
    }

    public sealed class SuspensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Elastigroup ID to apply the suspensions on.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        [Input("suspensions", required: true)]
        private InputList<Inputs.SuspensionSuspensionArgs>? _suspensions;

        /// <summary>
        /// block of single process to suspend.
        /// </summary>
        public InputList<Inputs.SuspensionSuspensionArgs> Suspensions
        {
            get => _suspensions ?? (_suspensions = new InputList<Inputs.SuspensionSuspensionArgs>());
            set => _suspensions = value;
        }

        public SuspensionArgs()
        {
        }
        public static new SuspensionArgs Empty => new SuspensionArgs();
    }

    public sealed class SuspensionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Elastigroup ID to apply the suspensions on.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("suspensions")]
        private InputList<Inputs.SuspensionSuspensionGetArgs>? _suspensions;

        /// <summary>
        /// block of single process to suspend.
        /// </summary>
        public InputList<Inputs.SuspensionSuspensionGetArgs> Suspensions
        {
            get => _suspensions ?? (_suspensions = new InputList<Inputs.SuspensionSuspensionGetArgs>());
            set => _suspensions = value;
        }

        public SuspensionState()
        {
        }
        public static new SuspensionState Empty => new SuspensionState();
    }
}
