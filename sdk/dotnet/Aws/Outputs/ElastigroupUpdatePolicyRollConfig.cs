// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Aws.Outputs
{

    [OutputType]
    public sealed class ElastigroupUpdatePolicyRollConfig
    {
        /// <summary>
        /// Sets the percentage of the instances to deploy in each batch.
        /// </summary>
        public readonly int BatchSizePercentage;
        /// <summary>
        /// Sets the grace period for new instances to become healthy.
        /// </summary>
        public readonly int? GracePeriod;
        /// <summary>
        /// Sets the health check type to use. Valid values: `"EC2"`, `"ECS_CLUSTER_INSTANCE"`, `"ELB"`, `"HCS"`, `"MLB"`, `"TARGET_GROUP"`, `"MULTAI_TARGET_SET"`, `"NONE"`.
        /// </summary>
        public readonly string? HealthCheckType;
        /// <summary>
        /// Strategy parameters
        /// </summary>
        public readonly Outputs.ElastigroupUpdatePolicyRollConfigStrategy? Strategy;
        /// <summary>
        /// For use with `should_roll`. Sets minimum % of roll required to complete before continuing the plan. Required if `wait_for_roll_timeout` is set.
        /// </summary>
        public readonly double? WaitForRollPercentage;
        /// <summary>
        /// For use with `should_roll`. Sets how long to wait for the deployed % of a roll to exceed `wait_for_roll_percentage` before continuing the plan. Required if `wait_for_roll_percentage` is set.
        /// </summary>
        public readonly int? WaitForRollTimeout;

        [OutputConstructor]
        private ElastigroupUpdatePolicyRollConfig(
            int batchSizePercentage,

            int? gracePeriod,

            string? healthCheckType,

            Outputs.ElastigroupUpdatePolicyRollConfigStrategy? strategy,

            double? waitForRollPercentage,

            int? waitForRollTimeout)
        {
            BatchSizePercentage = batchSizePercentage;
            GracePeriod = gracePeriod;
            HealthCheckType = healthCheckType;
            Strategy = strategy;
            WaitForRollPercentage = waitForRollPercentage;
            WaitForRollTimeout = waitForRollTimeout;
        }
    }
}
