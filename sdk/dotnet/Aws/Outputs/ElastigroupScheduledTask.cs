// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Aws.Outputs
{

    [OutputType]
    public sealed class ElastigroupScheduledTask
    {
        /// <summary>
        /// The number of instances to add or remove.
        /// </summary>
        public readonly string? Adjustment;
        /// <summary>
        /// The percentage of instances to add or remove.
        /// 
        /// Usage:
        /// </summary>
        public readonly string? AdjustmentPercentage;
        /// <summary>
        /// The percentage size of each batch in the scheduled deployment roll.
        /// </summary>
        public readonly string? BatchSizePercentage;
        /// <summary>
        /// A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
        /// </summary>
        public readonly string? CronExpression;
        /// <summary>
        /// The recurrence frequency to run this task. Supported values are `"hourly"`, `"daily"`, `"weekly"` and `"continuous"`.
        /// </summary>
        public readonly string? Frequency;
        /// <summary>
        /// The period of time (seconds) to wait before checking a batch's health after it's deployment.
        /// </summary>
        public readonly string? GracePeriod;
        /// <summary>
        /// Setting the task to being enabled or disabled.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// The maximum number of instances the group should have.
        /// </summary>
        public readonly string? MaxCapacity;
        /// <summary>
        /// The minimum number of instances the group should have.
        /// </summary>
        public readonly string? MinCapacity;
        /// <summary>
        /// The maximum number of instances the group should have.
        /// </summary>
        public readonly string? ScaleMaxCapacity;
        /// <summary>
        /// The minimum number of instances the group should have.
        /// </summary>
        public readonly string? ScaleMinCapacity;
        /// <summary>
        /// The desired number of instances the group should have.
        /// </summary>
        public readonly string? ScaleTargetCapacity;
        /// <summary>
        /// Set a start time for one time tasks.
        /// </summary>
        public readonly string? StartTime;
        /// <summary>
        /// The desired number of instances the group should have.
        /// </summary>
        public readonly string? TargetCapacity;
        /// <summary>
        /// The task type to run. Supported task types are: `"scale"`, `"backup_ami"`, `"roll"`, `"scaleUp"`, `"percentageScaleUp"`, `"scaleDown"`, `"percentageScaleDown"`, `"statefulUpdateCapacity"`.
        /// </summary>
        public readonly string TaskType;

        [OutputConstructor]
        private ElastigroupScheduledTask(
            string? adjustment,

            string? adjustmentPercentage,

            string? batchSizePercentage,

            string? cronExpression,

            string? frequency,

            string? gracePeriod,

            bool? isEnabled,

            string? maxCapacity,

            string? minCapacity,

            string? scaleMaxCapacity,

            string? scaleMinCapacity,

            string? scaleTargetCapacity,

            string? startTime,

            string? targetCapacity,

            string taskType)
        {
            Adjustment = adjustment;
            AdjustmentPercentage = adjustmentPercentage;
            BatchSizePercentage = batchSizePercentage;
            CronExpression = cronExpression;
            Frequency = frequency;
            GracePeriod = gracePeriod;
            IsEnabled = isEnabled;
            MaxCapacity = maxCapacity;
            MinCapacity = minCapacity;
            ScaleMaxCapacity = scaleMaxCapacity;
            ScaleMinCapacity = scaleMinCapacity;
            ScaleTargetCapacity = scaleTargetCapacity;
            StartTime = startTime;
            TargetCapacity = targetCapacity;
            TaskType = taskType;
        }
    }
}
