// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Aws
{
    /// <summary>
    /// Provides a Spotinst AWS group resource using Elastic Beanstalk.
    /// 
    /// ## Example Usage
    /// 
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var elastigoup_aws_beanstalk = new SpotInst.Aws.Beanstalk("elastigoup-aws-beanstalk", new SpotInst.Aws.BeanstalkArgs
    ///         {
    ///             BeanstalkEnvironmentId = "e-example",
    ///             BeanstalkEnvironmentName = "example-env",
    ///             DeploymentPreferences = new SpotInst.Aws.Inputs.BeanstalkDeploymentPreferencesArgs
    ///             {
    ///                 AutomaticRoll = true,
    ///                 BatchSizePercentage = 100,
    ///                 GracePeriod = 90,
    ///                 Strategy = 
    ///                 {
    ///                     
    ///                     {
    ///                         { "action", "REPLACE_SERVER" },
    ///                         { "shouldDrainInstances", true },
    ///                     },
    ///                 },
    ///             },
    ///             DesiredCapacity = 0,
    ///             InstanceTypesSpots = 
    ///             {
    ///                 "t2.micro",
    ///                 "t2.medium",
    ///                 "t2.large",
    ///             },
    ///             ManagedActions = new SpotInst.Aws.Inputs.BeanstalkManagedActionsArgs
    ///             {
    ///                 PlatformUpdate = new SpotInst.Aws.Inputs.BeanstalkManagedActionsPlatformUpdateArgs
    ///                 {
    ///                     PerformAt = "timeWindow",
    ///                     TimeWindow = "Mon:23:50-Tue:00:20",
    ///                     UpdateLevel = "minorAndPatch",
    ///                 },
    ///             },
    ///             MaxSize = 1,
    ///             MinSize = 0,
    ///             Product = "Linux/UNIX",
    ///             Region = "us-west-2",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Scheduled Tasks
    /// 
    /// Each `scheduled_task` supports the following:
    /// 
    /// * `task_type` - (Required) The task type to run. Supported task types are: `"scale"`, `"backup_ami"`, `"roll"`, `"scaleUp"`, `"percentageScaleUp"`, `"scaleDown"`, `"percentageScaleDown"`, `"statefulUpdateCapacity"`.
    /// * `cron_expression` - (Optional; Required if not using `frequency`) A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
    /// * `start_time` - (Optional; Format: ISO 8601) Set a start time for one time tasks.
    /// * `frequency` - (Optional; Required if not using `cron_expression`) The recurrence frequency to run this task. Supported values are `"hourly"`, `"daily"`, `"weekly"` and `"continuous"`.
    /// * `scale_target_capacity` - (Optional) The desired number of instances the group should have.
    /// * `scale_min_capacity` - (Optional) The minimum number of instances the group should have.
    /// * `scale_max_capacity` - (Optional) The maximum number of instances the group should have.
    /// * `is_enabled` - (Optional, Default: `true`) Setting the task to being enabled or disabled.
    /// * `target_capacity` - (Optional; Only valid for statefulUpdateCapacity) The desired number of instances the group should have.
    /// * `min_capacity` - (Optional; Only valid for statefulUpdateCapacity) The minimum number of instances the group should have.
    /// * `max_capacity` - (Optional; Only valid for statefulUpdateCapacity) The maximum number of instances the group should have.
    /// * `batch_size_percentage` - (Optional; Required when the `task_type` is `"roll"`.) The percentage size of each batch in the scheduled deployment roll.
    /// * `grace_period` - (Optional) The period of time (seconds) to wait before checking a batch's health after it's deployment.
    /// * `adjustment` - (Optional; Min 1) The number of instances to add or remove.
    /// * `adjustment_percentage` - (Optional; Min 1) The percentage of instances to add or remove.
    /// 
    /// Usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Beanstalk : Pulumi.CustomResource
    {
        /// <summary>
        /// The id of an existing Beanstalk environment. 
        /// </summary>
        [Output("beanstalkEnvironmentId")]
        public Output<string?> BeanstalkEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The name of an existing Beanstalk environment.
        /// </summary>
        [Output("beanstalkEnvironmentName")]
        public Output<string?> BeanstalkEnvironmentName { get; private set; } = null!;

        /// <summary>
        /// Preferences when performing a roll
        /// </summary>
        [Output("deploymentPreferences")]
        public Output<Outputs.BeanstalkDeploymentPreferences?> DeploymentPreferences { get; private set; } = null!;

        /// <summary>
        /// The desired number of instances the group should have at any time.
        /// </summary>
        [Output("desiredCapacity")]
        public Output<int> DesiredCapacity { get; private set; } = null!;

        /// <summary>
        /// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
        /// </summary>
        [Output("instanceTypesSpots")]
        public Output<ImmutableArray<string>> InstanceTypesSpots { get; private set; } = null!;

        [Output("maintenance")]
        public Output<string?> Maintenance { get; private set; } = null!;

        /// <summary>
        /// Managed Actions parameters
        /// </summary>
        [Output("managedActions")]
        public Output<Outputs.BeanstalkManagedActions?> ManagedActions { get; private set; } = null!;

        /// <summary>
        /// The maximum number of instances the group should have at any time.
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The minimum number of instances the group should have at any time.
        /// </summary>
        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        /// <summary>
        /// The group name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
        /// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
        /// </summary>
        [Output("product")]
        public Output<string> Product { get; private set; } = null!;

        /// <summary>
        /// The AWS region your group will be created in. Cannot be changed after the group has been created.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("scheduledTasks")]
        public Output<ImmutableArray<Outputs.BeanstalkScheduledTask>> ScheduledTasks { get; private set; } = null!;


        /// <summary>
        /// Create a Beanstalk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Beanstalk(string name, BeanstalkArgs args, CustomResourceOptions? options = null)
            : base("spotinst:aws/beanstalk:Beanstalk", name, args ?? new BeanstalkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Beanstalk(string name, Input<string> id, BeanstalkState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:aws/beanstalk:Beanstalk", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Beanstalk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Beanstalk Get(string name, Input<string> id, BeanstalkState? state = null, CustomResourceOptions? options = null)
        {
            return new Beanstalk(name, id, state, options);
        }
    }

    public sealed class BeanstalkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of an existing Beanstalk environment. 
        /// </summary>
        [Input("beanstalkEnvironmentId")]
        public Input<string>? BeanstalkEnvironmentId { get; set; }

        /// <summary>
        /// The name of an existing Beanstalk environment.
        /// </summary>
        [Input("beanstalkEnvironmentName")]
        public Input<string>? BeanstalkEnvironmentName { get; set; }

        /// <summary>
        /// Preferences when performing a roll
        /// </summary>
        [Input("deploymentPreferences")]
        public Input<Inputs.BeanstalkDeploymentPreferencesArgs>? DeploymentPreferences { get; set; }

        /// <summary>
        /// The desired number of instances the group should have at any time.
        /// </summary>
        [Input("desiredCapacity", required: true)]
        public Input<int> DesiredCapacity { get; set; } = null!;

        [Input("instanceTypesSpots", required: true)]
        private InputList<string>? _instanceTypesSpots;

        /// <summary>
        /// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
        /// </summary>
        public InputList<string> InstanceTypesSpots
        {
            get => _instanceTypesSpots ?? (_instanceTypesSpots = new InputList<string>());
            set => _instanceTypesSpots = value;
        }

        [Input("maintenance")]
        public Input<string>? Maintenance { get; set; }

        /// <summary>
        /// Managed Actions parameters
        /// </summary>
        [Input("managedActions")]
        public Input<Inputs.BeanstalkManagedActionsArgs>? ManagedActions { get; set; }

        /// <summary>
        /// The maximum number of instances the group should have at any time.
        /// </summary>
        [Input("maxSize", required: true)]
        public Input<int> MaxSize { get; set; } = null!;

        /// <summary>
        /// The minimum number of instances the group should have at any time.
        /// </summary>
        [Input("minSize", required: true)]
        public Input<int> MinSize { get; set; } = null!;

        /// <summary>
        /// The group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
        /// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// The AWS region your group will be created in. Cannot be changed after the group has been created.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("scheduledTasks")]
        private InputList<Inputs.BeanstalkScheduledTaskArgs>? _scheduledTasks;
        public InputList<Inputs.BeanstalkScheduledTaskArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.BeanstalkScheduledTaskArgs>());
            set => _scheduledTasks = value;
        }

        public BeanstalkArgs()
        {
        }
    }

    public sealed class BeanstalkState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of an existing Beanstalk environment. 
        /// </summary>
        [Input("beanstalkEnvironmentId")]
        public Input<string>? BeanstalkEnvironmentId { get; set; }

        /// <summary>
        /// The name of an existing Beanstalk environment.
        /// </summary>
        [Input("beanstalkEnvironmentName")]
        public Input<string>? BeanstalkEnvironmentName { get; set; }

        /// <summary>
        /// Preferences when performing a roll
        /// </summary>
        [Input("deploymentPreferences")]
        public Input<Inputs.BeanstalkDeploymentPreferencesGetArgs>? DeploymentPreferences { get; set; }

        /// <summary>
        /// The desired number of instances the group should have at any time.
        /// </summary>
        [Input("desiredCapacity")]
        public Input<int>? DesiredCapacity { get; set; }

        [Input("instanceTypesSpots")]
        private InputList<string>? _instanceTypesSpots;

        /// <summary>
        /// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
        /// </summary>
        public InputList<string> InstanceTypesSpots
        {
            get => _instanceTypesSpots ?? (_instanceTypesSpots = new InputList<string>());
            set => _instanceTypesSpots = value;
        }

        [Input("maintenance")]
        public Input<string>? Maintenance { get; set; }

        /// <summary>
        /// Managed Actions parameters
        /// </summary>
        [Input("managedActions")]
        public Input<Inputs.BeanstalkManagedActionsGetArgs>? ManagedActions { get; set; }

        /// <summary>
        /// The maximum number of instances the group should have at any time.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The minimum number of instances the group should have at any time.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// The group name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
        /// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// The AWS region your group will be created in. Cannot be changed after the group has been created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.BeanstalkScheduledTaskGetArgs>? _scheduledTasks;
        public InputList<Inputs.BeanstalkScheduledTaskGetArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.BeanstalkScheduledTaskGetArgs>());
            set => _scheduledTasks = value;
        }

        public BeanstalkState()
        {
        }
    }
}
