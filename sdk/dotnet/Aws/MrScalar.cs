// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst.Aws
{
    /// <summary>
    /// Provides a Spotinst AWS MrScaler resource.
    /// 
    /// ## Provisioning Timeout (Clone, New strategies)
    /// 
    /// * `timeout` - (Optional) The amount of time (minutes) after which the cluster is automatically terminated if it's still in provisioning status. Minimum: '15'.
    /// * `timeout_action` - (Optional) The action to take if the timeout is exceeded. Valid values: `terminate`, `terminateAndRetry`.
    /// 
    /// &lt;a id="cluster-config"&gt;&lt;/a&gt;
    /// ## Cluster Configuration (New strategy only)
    /// 
    /// * `log_uri` - (Optional) The path to the Amazon S3 location where logs for this cluster are stored.
    /// * `additional_info` - (Optional) This is meta information about third-party applications that third-party vendors use for testing purposes.
    /// * `security_config` - (Optional) The name of the security configuration applied to the cluster.
    /// * `service_role` - (Optional) The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
    /// * `job_flow_role` - (Optional) The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
    /// * `termination_protected` - (Optional) Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
    /// * `keep_job_flow_alive` - (Optional) Specifies whether the cluster should remain available after completing all steps.
    /// * `retries` - (Optional) Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded.
    /// 
    /// &lt;a id="task-group"&gt;&lt;/a&gt;
    /// ## Task Group (Wrap, Clone, and New strategies)
    /// 
    /// * `task_instance_types` - (Required) The MrScaler instance types for the task nodes.
    /// * `task_target` - (Required) amount of instances in task group.
    /// * `task_maximum` - (Optional) maximal amount of instances in task group.
    /// * `task_minimum` - (Optional) The minimal amount of instances in task group.
    /// * `task_unit` - (Optional, Default: `instance`) Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
    /// * `task_lifecycle` - (Required) The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
    /// * `task_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
    /// * `task_ebs_block_device` - (Required) This determines the ebs configuration for your task group instances. Only a single block is allowed.
    ///     * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the task group.
    ///     * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
    ///     * `size_in_gb` - (Required) Size of the volume, in GBs.
    ///     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
    /// 
    /// &lt;a id="core-group"&gt;&lt;/a&gt;
    /// ## Core Group (Clone, New strategies)
    /// 
    /// * `core_instance_types` - (Required) The MrScaler instance types for the core nodes.
    /// * `core_target` - (Required) amount of instances in core group.
    /// * `core_maximum` - (Optional) maximal amount of instances in core group.
    /// * `core_minimum` - (Optional) The minimal amount of instances in core group.
    /// * `core_unit` - (Optional, Default: `instance`) Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
    /// * `core_lifecycle` - (Required) The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
    /// * `core_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
    /// * `core_ebs_block_device` - (Required) This determines the ebs configuration for your core group instances. Only a single block is allowed.
    ///     * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the core group.
    ///     * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
    ///     * `size_in_gb` - (Required) Size of the volume, in GBs.
    ///     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
    /// 
    /// &lt;a id="master-group"&gt;&lt;/a&gt;
    /// ## Master Group (Clone, New strategies)
    /// 
    /// * `master_instance_types` - (Required) The MrScaler instance types for the master nodes.
    /// * `master_lifecycle` - (Required) The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
    /// * `master_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
    /// * `master_ebs_block_device` - (Required) This determines the ebs configuration for your master group instances. Only a single block is allowed.
    ///     * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the master group.
    ///     * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
    ///     * `size_in_gb` - (Required) Size of the volume, in GBs.
    ///     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
    /// 
    /// &lt;a id="tags"&gt;&lt;/a&gt;
    /// ## Tags (Clone, New strategies)
    /// 
    /// * `tags` - (Optional) A list of tags to assign to the resource. You may define multiple tags.
    ///     * `key` - (Required) Tag key.
    ///     * `value` - (Required) Tag value.
    /// 
    /// &lt;a id="Optional Compute Parameters"&gt;&lt;/a&gt;
    /// ## Optional Compute Parameters (New strategy)
    /// 
    /// * `managed_primary_security_group` - (Optional) EMR Managed Security group that will be set to the primary instance group.
    /// * `managed_replica_security_group` - (Optional) EMR Managed Security group that will be set to the replica instance group.
    /// * `service_access_security_group` - (Optional) The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
    /// * `additional_primary_security_groups` - (Optional) A list of additional Amazon EC2 security group IDs for the master node.
    /// * `additional_replica_security_groups` - (Optional) A list of additional Amazon EC2 security group IDs for the core and task nodes.
    /// * `custom_ami_id` - (Optional) The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
    /// * `repo_upgrade_on_boot` - (Optional) Applies only when `custom_ami_id` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
    /// * `ec2_key_name` - (Optional) The name of an Amazon EC2 key pair that can be used to ssh to the master node.
    /// * `applications` - (Optional) A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
    ///     * `args` - (Optional) Arguments for EMR to pass to the application.
    ///     * `name` - (Required) The application name.
    ///     * `version`- (Optional)T he version of the application.
    /// * `instance_weights` - (Optional) Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
    ///     * `instance_type` - (Required) The type of the instance.
    ///     * `weighted_capacity` - (Required) The weight given to the associated instance type.
    /// 
    /// &lt;a id="availability-zone"&gt;&lt;/a&gt;
    /// ## Availability Zones (Clone, New strategies)
    /// 
    /// * `availability_zones` - (Required in Clone) List of AZs and their subnet Ids. See example above for usage.
    /// 
    /// &lt;a id="configurations"&gt;&lt;/a&gt;
    /// ## Configurations (Clone, New strategies)
    /// 
    /// * `configurations_file` - (Optional) Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
    ///     * `bucket` - (Required) S3 Bucket name for configurations.
    ///     * `key`- (Required) S3 key for configurations.
    /// 
    /// &lt;a id="steps"&gt;&lt;/a&gt;
    /// ## Steps (Clone, New strategies)
    /// 
    /// * `steps_file` - (Optional) Steps from S3.
    ///     * `bucket` - (Required) S3 Bucket name for steps.
    ///     * `key`- (Required) S3 key for steps.
    /// 
    /// &lt;a id="boostrap-actions"&gt;&lt;/a&gt;
    /// ## Bootstrap Actions (Clone, New strategies)
    /// 
    /// * `bootstrap_actions_file` - (Optional) Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
    ///     * `bucket` - (Required) S3 Bucket name for bootstrap actions.
    ///     * `key`- (Required) S3 key for bootstrap actions.
    /// 
    /// &lt;a id="scaling-policy"&gt;&lt;/a&gt;
    /// ## Scaling Policies
    /// 
    /// Possible task group scaling policies (Wrap, Clone, and New strategies):
    /// * `task_scaling_up_policy`
    /// * `task_scaling_down_policy`
    /// 
    /// Possible core group scaling policies (Clone, New strategies):
    /// * `core_scaling_up_policy`
    /// * `core_scaling_down_policy`
    /// 
    /// Each `*_scaling_*_policy` supports the following:
    /// 
    /// * `policy_name` - (Required) The name of the policy.
    /// * `metric_name` - (Required) The name of the metric, with or without spaces.
    /// * `statistic` - (Required) The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
    /// * `unit` - (Required) The unit for the metric.
    /// * `threshold` - (Required) The value against which the specified statistic is compared.
    /// * `adjustment` - (Optional) The number of instances to add/remove to/from the target capacity when scale is needed.
    /// * `min_target_capacity` - (Optional) Min target capacity for scale up.
    /// * `max_target_capacity` - (Optional) Max target capacity for scale down.
    /// * `namespace` - (Required) The namespace for the metric.
    /// * `operator` - (Required) The operator to use. Allowed values are : 'gt', 'gte', 'lt' , 'lte'.
    /// * `evaluation_periods` - (Required) The number of periods over which data is compared to the specified threshold.
    /// * `period` - (Required) The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
    /// * `cooldown` - (Required) The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    /// * `dimensions` - (Optional) A mapping of dimensions describing qualities of the metric.
    /// * `minimum` - (Optional) The minimum to set when scale is needed.
    /// * `maximum` - (Optional) The maximum to set when scale is needed.
    /// * `target` - (Optional) The number of instances to set when scale is needed.
    /// * `action_type` - (Required) The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
    /// 
    /// &lt;a id="scheduled-task"&gt;&lt;/a&gt;
    /// ## Scheduled Tasks
    /// 
    /// * `scheduled_task` - (Optional) An array of scheduled tasks.
    /// * `is_enabled` - (Optional) Enable/Disable the specified scheduling task.
    /// * `task_type` - (Required) The type of task to be scheduled. Valid values: `setCapacity`.
    /// * `instance_group_type` - (Required) Select the EMR instance groups to execute the scheduled task on. Valid values: `task`.
    /// * `cron` - (Required) A cron expression representing the schedule for the task.
    /// * `desired_capacity` - (Optional) New desired capacity for the elastigroup.
    /// * `min_capacity` - (Optional) New min capacity for the elastigroup.
    /// * `max_capacity` - (Optional) New max capacity for the elastigroup.
    /// 
    /// &lt;a id="termination-policies"&gt;&lt;/a&gt;
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///     }
    /// 
    /// }
    /// ```
    /// ### New Strategy
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var terraform_MrScaler_01 = new SpotInst.Aws.MrScalar("terraform-MrScaler-01", new SpotInst.Aws.MrScalarArgs
    ///         {
    ///             AdditionalInfo = "{'test':'more information'}",
    ///             AdditionalPrimarySecurityGroups = 
    ///             {
    ///                 "sg-456321",
    ///             },
    ///             AdditionalReplicaSecurityGroups = 
    ///             {
    ///                 "sg-123654",
    ///             },
    ///             Applications = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarApplicationArgs
    ///                 {
    ///                     Name = "Ganglia",
    ///                     Version = "1.0",
    ///                 },
    ///                 new SpotInst.Aws.Inputs.MrScalarApplicationArgs
    ///                 {
    ///                     Name = "Hadoop",
    ///                 },
    ///                 new SpotInst.Aws.Inputs.MrScalarApplicationArgs
    ///                 {
    ///                     Args = 
    ///                     {
    ///                         "fake",
    ///                         "args",
    ///                     },
    ///                     Name = "Pig",
    ///                 },
    ///             },
    ///             AvailabilityZones = 
    ///             {
    ///                 "us-west-2a:subnet-123456",
    ///             },
    ///             BootstrapActionsFiles = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarBootstrapActionsFileArgs
    ///                 {
    ///                     Bucket = "terraform-emr-test",
    ///                     Key = "bootstrap-actions.json",
    ///                 },
    ///             },
    ///             ConfigurationsFiles = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarConfigurationsFileArgs
    ///                 {
    ///                     Bucket = "example-bucket",
    ///                     Key = "configurations.json",
    ///                 },
    ///             },
    ///             CoreDesiredCapacity = 1,
    ///             CoreEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarCoreEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 40,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 2,
    ///                 },
    ///             },
    ///             CoreEbsOptimized = false,
    ///             CoreInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///                 "c4.xlarge",
    ///             },
    ///             CoreLifecycle = "ON_DEMAND",
    ///             CoreMaxSize = 1,
    ///             CoreMinSize = 1,
    ///             CoreUnit = "instance",
    ///             CustomAmiId = "ami-123456",
    ///             Description = "Testing MrScaler creation via Terraform",
    ///             Ec2KeyName = "test-key",
    ///             InstanceWeights = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarInstanceWeightArgs
    ///                 {
    ///                     InstanceType = "t2.small",
    ///                     WeightedCapacity = 10,
    ///                 },
    ///                 new SpotInst.Aws.Inputs.MrScalarInstanceWeightArgs
    ///                 {
    ///                     InstanceType = "t2.medium",
    ///                     WeightedCapacity = 90,
    ///                 },
    ///             },
    ///             JobFlowRole = "EMR_EC2_ExampleRole",
    ///             KeepJobFlowAlive = true,
    ///             LogUri = "s3://example-logs",
    ///             ManagedPrimarySecurityGroup = "sg-123456",
    ///             ManagedReplicaSecurityGroup = "sg-987654",
    ///             MasterEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarMasterEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 30,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 1,
    ///                 },
    ///             },
    ///             MasterEbsOptimized = true,
    ///             MasterInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///             },
    ///             MasterLifecycle = "SPOT",
    ///             ProvisioningTimeout = new SpotInst.Aws.Inputs.MrScalarProvisioningTimeoutArgs
    ///             {
    ///                 Timeout = 15,
    ///                 TimeoutAction = "terminate",
    ///             },
    ///             Region = "us-west-2",
    ///             ReleaseLabel = "emr-5.17.0",
    ///             RepoUpgradeOnBoot = "NONE",
    ///             Retries = 2,
    ///             SecurityConfig = "example-config",
    ///             ServiceAccessSecurityGroup = "access-example",
    ///             ServiceRole = "example-role",
    ///             StepsFiles = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarStepsFileArgs
    ///                 {
    ///                     Bucket = "example-bucket",
    ///                     Key = "steps.json",
    ///                 },
    ///             },
    ///             Strategy = "new",
    ///             Tags = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTagArgs
    ///                 {
    ///                     Key = "Creator",
    ///                     Value = "Terraform",
    ///                 },
    ///             },
    ///             TaskDesiredCapacity = 1,
    ///             TaskEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTaskEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 40,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 2,
    ///                 },
    ///             },
    ///             TaskEbsOptimized = false,
    ///             TaskInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///                 "c4.xlarge",
    ///             },
    ///             TaskLifecycle = "SPOT",
    ///             TaskMaxSize = 30,
    ///             TaskMinSize = 0,
    ///             TaskUnit = "instance",
    ///             TerminationProtected = false,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Clone Strategy
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var terraform_MrScaler_01 = new SpotInst.Aws.MrScalar("terraform-MrScaler-01", new SpotInst.Aws.MrScalarArgs
    ///         {
    ///             AvailabilityZones = 
    ///             {
    ///                 "us-west-2a:subnet-12345678",
    ///             },
    ///             ClusterId = "j-123456789",
    ///             CoreDesiredCapacity = 1,
    ///             CoreEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarCoreEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 40,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 2,
    ///                 },
    ///             },
    ///             CoreEbsOptimized = false,
    ///             CoreInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///                 "c4.xlarge",
    ///             },
    ///             CoreLifecycle = "ON_DEMAND",
    ///             CoreMaxSize = 1,
    ///             CoreMinSize = 1,
    ///             CoreUnit = "instance",
    ///             Description = "Testing MrScaler creation via Terraform",
    ///             ExposeClusterId = true,
    ///             MasterEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarMasterEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 30,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 1,
    ///                 },
    ///             },
    ///             MasterEbsOptimized = true,
    ///             MasterInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///             },
    ///             MasterLifecycle = "SPOT",
    ///             Region = "us-west-2",
    ///             Strategy = "clone",
    ///             Tags = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTagArgs
    ///                 {
    ///                     Key = "Creator",
    ///                     Value = "Terraform",
    ///                 },
    ///             },
    ///             TaskDesiredCapacity = 1,
    ///             TaskEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTaskEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 40,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 2,
    ///                 },
    ///             },
    ///             TaskEbsOptimized = false,
    ///             TaskInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///                 "c4.xlarge",
    ///             },
    ///             TaskLifecycle = "SPOT",
    ///             TaskMaxSize = 30,
    ///             TaskMinSize = 0,
    ///             TaskScalingDownPolicies = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTaskScalingDownPolicyArgs
    ///                 {
    ///                     ActionType = "",
    ///                     Adjustment = "1",
    ///                     Cooldown = 60,
    ///                     Dimensions = 
    ///                     {
    ///                         { "name", "name-1" },
    ///                         { "value", "value-1" },
    ///                     },
    ///                     EvaluationPeriods = 10,
    ///                     MaxTargetCapacity = "1",
    ///                     Maximum = "10",
    ///                     MetricName = "CPUUtilization",
    ///                     Minimum = "0",
    ///                     Namespace = "AWS/EC2",
    ///                     Operator = "gt",
    ///                     Period = 60,
    ///                     PolicyName = "policy-name",
    ///                     Statistic = "average",
    ///                     Target = "5",
    ///                     Threshold = 10,
    ///                     Unit = "",
    ///                 },
    ///             },
    ///             TaskUnit = "instance",
    ///         });
    ///         this.Mrscaler_name = terraform_MrScaler_01.Name;
    ///         this.Mrscaler_created_cluster_id = terraform_MrScaler_01.OutputClusterId;
    ///     }
    /// 
    ///     [Output("mrscaler-name")]
    ///     public Output&lt;string&gt; Mrscaler_name { get; set; }
    ///     [Output("mrscaler-created-cluster-id")]
    ///     public Output&lt;string&gt; Mrscaler_created_cluster_id { get; set; }
    /// }
    /// ```
    /// ### Wrap Strategy
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using SpotInst = Pulumi.SpotInst;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example_scaler_2 = new SpotInst.Aws.MrScalar("example-scaler-2", new SpotInst.Aws.MrScalarArgs
    ///         {
    ///             ClusterId = "j-27UVDEHXL4OQM",
    ///             Description = "created by Terraform",
    ///             Region = "us-west-2",
    ///             Strategy = "wrap",
    ///             TaskDesiredCapacity = 2,
    ///             TaskEbsBlockDevices = 
    ///             {
    ///                 new SpotInst.Aws.Inputs.MrScalarTaskEbsBlockDeviceArgs
    ///                 {
    ///                     SizeInGb = 20,
    ///                     VolumeType = "gp2",
    ///                     VolumesPerInstance = 1,
    ///                 },
    ///             },
    ///             TaskInstanceTypes = 
    ///             {
    ///                 "c3.xlarge",
    ///                 "c4.xlarge",
    ///             },
    ///             TaskLifecycle = "SPOT",
    ///             TaskMaxSize = 4,
    ///             TaskMinSize = 0,
    ///             TaskUnit = "instance",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class MrScalar : Pulumi.CustomResource
    {
        [Output("additionalInfo")]
        public Output<string?> AdditionalInfo { get; private set; } = null!;

        [Output("additionalPrimarySecurityGroups")]
        public Output<ImmutableArray<string>> AdditionalPrimarySecurityGroups { get; private set; } = null!;

        [Output("additionalReplicaSecurityGroups")]
        public Output<ImmutableArray<string>> AdditionalReplicaSecurityGroups { get; private set; } = null!;

        [Output("applications")]
        public Output<ImmutableArray<Outputs.MrScalarApplication>> Applications { get; private set; } = null!;

        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("bootstrapActionsFiles")]
        public Output<ImmutableArray<Outputs.MrScalarBootstrapActionsFile>> BootstrapActionsFiles { get; private set; } = null!;

        /// <summary>
        /// The MrScaler cluster id.
        /// </summary>
        [Output("clusterId")]
        public Output<string?> ClusterId { get; private set; } = null!;

        [Output("configurationsFiles")]
        public Output<ImmutableArray<Outputs.MrScalarConfigurationsFile>> ConfigurationsFiles { get; private set; } = null!;

        [Output("coreDesiredCapacity")]
        public Output<int?> CoreDesiredCapacity { get; private set; } = null!;

        [Output("coreEbsBlockDevices")]
        public Output<ImmutableArray<Outputs.MrScalarCoreEbsBlockDevice>> CoreEbsBlockDevices { get; private set; } = null!;

        [Output("coreEbsOptimized")]
        public Output<bool?> CoreEbsOptimized { get; private set; } = null!;

        [Output("coreInstanceTypes")]
        public Output<ImmutableArray<string>> CoreInstanceTypes { get; private set; } = null!;

        [Output("coreLifecycle")]
        public Output<string?> CoreLifecycle { get; private set; } = null!;

        [Output("coreMaxSize")]
        public Output<int?> CoreMaxSize { get; private set; } = null!;

        [Output("coreMinSize")]
        public Output<int?> CoreMinSize { get; private set; } = null!;

        [Output("coreScalingDownPolicies")]
        public Output<ImmutableArray<Outputs.MrScalarCoreScalingDownPolicy>> CoreScalingDownPolicies { get; private set; } = null!;

        [Output("coreScalingUpPolicies")]
        public Output<ImmutableArray<Outputs.MrScalarCoreScalingUpPolicy>> CoreScalingUpPolicies { get; private set; } = null!;

        [Output("coreUnit")]
        public Output<string?> CoreUnit { get; private set; } = null!;

        [Output("customAmiId")]
        public Output<string?> CustomAmiId { get; private set; } = null!;

        /// <summary>
        /// The MrScaler description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("ebsRootVolumeSize")]
        public Output<int?> EbsRootVolumeSize { get; private set; } = null!;

        [Output("ec2KeyName")]
        public Output<string?> Ec2KeyName { get; private set; } = null!;

        [Output("exposeClusterId")]
        public Output<bool?> ExposeClusterId { get; private set; } = null!;

        [Output("instanceWeights")]
        public Output<ImmutableArray<Outputs.MrScalarInstanceWeight>> InstanceWeights { get; private set; } = null!;

        [Output("jobFlowRole")]
        public Output<string?> JobFlowRole { get; private set; } = null!;

        [Output("keepJobFlowAlive")]
        public Output<bool?> KeepJobFlowAlive { get; private set; } = null!;

        [Output("logUri")]
        public Output<string?> LogUri { get; private set; } = null!;

        [Output("managedPrimarySecurityGroup")]
        public Output<string?> ManagedPrimarySecurityGroup { get; private set; } = null!;

        [Output("managedReplicaSecurityGroup")]
        public Output<string?> ManagedReplicaSecurityGroup { get; private set; } = null!;

        [Output("masterEbsBlockDevices")]
        public Output<ImmutableArray<Outputs.MrScalarMasterEbsBlockDevice>> MasterEbsBlockDevices { get; private set; } = null!;

        [Output("masterEbsOptimized")]
        public Output<bool?> MasterEbsOptimized { get; private set; } = null!;

        [Output("masterInstanceTypes")]
        public Output<ImmutableArray<string>> MasterInstanceTypes { get; private set; } = null!;

        [Output("masterLifecycle")]
        public Output<string?> MasterLifecycle { get; private set; } = null!;

        /// <summary>
        /// The MrScaler name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("outputClusterId")]
        public Output<string> OutputClusterId { get; private set; } = null!;

        [Output("provisioningTimeout")]
        public Output<Outputs.MrScalarProvisioningTimeout?> ProvisioningTimeout { get; private set; } = null!;

        /// <summary>
        /// The MrScaler region.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        [Output("releaseLabel")]
        public Output<string?> ReleaseLabel { get; private set; } = null!;

        [Output("repoUpgradeOnBoot")]
        public Output<string?> RepoUpgradeOnBoot { get; private set; } = null!;

        [Output("retries")]
        public Output<int?> Retries { get; private set; } = null!;

        [Output("scheduledTasks")]
        public Output<ImmutableArray<Outputs.MrScalarScheduledTask>> ScheduledTasks { get; private set; } = null!;

        [Output("securityConfig")]
        public Output<string?> SecurityConfig { get; private set; } = null!;

        [Output("serviceAccessSecurityGroup")]
        public Output<string?> ServiceAccessSecurityGroup { get; private set; } = null!;

        [Output("serviceRole")]
        public Output<string?> ServiceRole { get; private set; } = null!;

        [Output("stepsFiles")]
        public Output<ImmutableArray<Outputs.MrScalarStepsFile>> StepsFiles { get; private set; } = null!;

        /// <summary>
        /// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.MrScalarTag>> Tags { get; private set; } = null!;

        [Output("taskDesiredCapacity")]
        public Output<int?> TaskDesiredCapacity { get; private set; } = null!;

        [Output("taskEbsBlockDevices")]
        public Output<ImmutableArray<Outputs.MrScalarTaskEbsBlockDevice>> TaskEbsBlockDevices { get; private set; } = null!;

        [Output("taskEbsOptimized")]
        public Output<bool?> TaskEbsOptimized { get; private set; } = null!;

        [Output("taskInstanceTypes")]
        public Output<ImmutableArray<string>> TaskInstanceTypes { get; private set; } = null!;

        [Output("taskLifecycle")]
        public Output<string?> TaskLifecycle { get; private set; } = null!;

        [Output("taskMaxSize")]
        public Output<int?> TaskMaxSize { get; private set; } = null!;

        [Output("taskMinSize")]
        public Output<int?> TaskMinSize { get; private set; } = null!;

        [Output("taskScalingDownPolicies")]
        public Output<ImmutableArray<Outputs.MrScalarTaskScalingDownPolicy>> TaskScalingDownPolicies { get; private set; } = null!;

        [Output("taskScalingUpPolicies")]
        public Output<ImmutableArray<Outputs.MrScalarTaskScalingUpPolicy>> TaskScalingUpPolicies { get; private set; } = null!;

        [Output("taskUnit")]
        public Output<string?> TaskUnit { get; private set; } = null!;

        /// <summary>
        /// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        /// </summary>
        [Output("terminationPolicies")]
        public Output<ImmutableArray<Outputs.MrScalarTerminationPolicy>> TerminationPolicies { get; private set; } = null!;

        [Output("terminationProtected")]
        public Output<bool?> TerminationProtected { get; private set; } = null!;

        [Output("visibleToAllUsers")]
        public Output<bool?> VisibleToAllUsers { get; private set; } = null!;


        /// <summary>
        /// Create a MrScalar resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MrScalar(string name, MrScalarArgs args, CustomResourceOptions? options = null)
            : base("spotinst:aws/mrScalar:MrScalar", name, args ?? new MrScalarArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MrScalar(string name, Input<string> id, MrScalarState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:aws/mrScalar:MrScalar", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MrScalar resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MrScalar Get(string name, Input<string> id, MrScalarState? state = null, CustomResourceOptions? options = null)
        {
            return new MrScalar(name, id, state, options);
        }
    }

    public sealed class MrScalarArgs : Pulumi.ResourceArgs
    {
        [Input("additionalInfo")]
        public Input<string>? AdditionalInfo { get; set; }

        [Input("additionalPrimarySecurityGroups")]
        private InputList<string>? _additionalPrimarySecurityGroups;
        public InputList<string> AdditionalPrimarySecurityGroups
        {
            get => _additionalPrimarySecurityGroups ?? (_additionalPrimarySecurityGroups = new InputList<string>());
            set => _additionalPrimarySecurityGroups = value;
        }

        [Input("additionalReplicaSecurityGroups")]
        private InputList<string>? _additionalReplicaSecurityGroups;
        public InputList<string> AdditionalReplicaSecurityGroups
        {
            get => _additionalReplicaSecurityGroups ?? (_additionalReplicaSecurityGroups = new InputList<string>());
            set => _additionalReplicaSecurityGroups = value;
        }

        [Input("applications")]
        private InputList<Inputs.MrScalarApplicationArgs>? _applications;
        public InputList<Inputs.MrScalarApplicationArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.MrScalarApplicationArgs>());
            set => _applications = value;
        }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("bootstrapActionsFiles")]
        private InputList<Inputs.MrScalarBootstrapActionsFileArgs>? _bootstrapActionsFiles;
        public InputList<Inputs.MrScalarBootstrapActionsFileArgs> BootstrapActionsFiles
        {
            get => _bootstrapActionsFiles ?? (_bootstrapActionsFiles = new InputList<Inputs.MrScalarBootstrapActionsFileArgs>());
            set => _bootstrapActionsFiles = value;
        }

        /// <summary>
        /// The MrScaler cluster id.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("configurationsFiles")]
        private InputList<Inputs.MrScalarConfigurationsFileArgs>? _configurationsFiles;
        public InputList<Inputs.MrScalarConfigurationsFileArgs> ConfigurationsFiles
        {
            get => _configurationsFiles ?? (_configurationsFiles = new InputList<Inputs.MrScalarConfigurationsFileArgs>());
            set => _configurationsFiles = value;
        }

        [Input("coreDesiredCapacity")]
        public Input<int>? CoreDesiredCapacity { get; set; }

        [Input("coreEbsBlockDevices")]
        private InputList<Inputs.MrScalarCoreEbsBlockDeviceArgs>? _coreEbsBlockDevices;
        public InputList<Inputs.MrScalarCoreEbsBlockDeviceArgs> CoreEbsBlockDevices
        {
            get => _coreEbsBlockDevices ?? (_coreEbsBlockDevices = new InputList<Inputs.MrScalarCoreEbsBlockDeviceArgs>());
            set => _coreEbsBlockDevices = value;
        }

        [Input("coreEbsOptimized")]
        public Input<bool>? CoreEbsOptimized { get; set; }

        [Input("coreInstanceTypes")]
        private InputList<string>? _coreInstanceTypes;
        public InputList<string> CoreInstanceTypes
        {
            get => _coreInstanceTypes ?? (_coreInstanceTypes = new InputList<string>());
            set => _coreInstanceTypes = value;
        }

        [Input("coreLifecycle")]
        public Input<string>? CoreLifecycle { get; set; }

        [Input("coreMaxSize")]
        public Input<int>? CoreMaxSize { get; set; }

        [Input("coreMinSize")]
        public Input<int>? CoreMinSize { get; set; }

        [Input("coreScalingDownPolicies")]
        private InputList<Inputs.MrScalarCoreScalingDownPolicyArgs>? _coreScalingDownPolicies;
        public InputList<Inputs.MrScalarCoreScalingDownPolicyArgs> CoreScalingDownPolicies
        {
            get => _coreScalingDownPolicies ?? (_coreScalingDownPolicies = new InputList<Inputs.MrScalarCoreScalingDownPolicyArgs>());
            set => _coreScalingDownPolicies = value;
        }

        [Input("coreScalingUpPolicies")]
        private InputList<Inputs.MrScalarCoreScalingUpPolicyArgs>? _coreScalingUpPolicies;
        public InputList<Inputs.MrScalarCoreScalingUpPolicyArgs> CoreScalingUpPolicies
        {
            get => _coreScalingUpPolicies ?? (_coreScalingUpPolicies = new InputList<Inputs.MrScalarCoreScalingUpPolicyArgs>());
            set => _coreScalingUpPolicies = value;
        }

        [Input("coreUnit")]
        public Input<string>? CoreUnit { get; set; }

        [Input("customAmiId")]
        public Input<string>? CustomAmiId { get; set; }

        /// <summary>
        /// The MrScaler description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ebsRootVolumeSize")]
        public Input<int>? EbsRootVolumeSize { get; set; }

        [Input("ec2KeyName")]
        public Input<string>? Ec2KeyName { get; set; }

        [Input("exposeClusterId")]
        public Input<bool>? ExposeClusterId { get; set; }

        [Input("instanceWeights")]
        private InputList<Inputs.MrScalarInstanceWeightArgs>? _instanceWeights;
        public InputList<Inputs.MrScalarInstanceWeightArgs> InstanceWeights
        {
            get => _instanceWeights ?? (_instanceWeights = new InputList<Inputs.MrScalarInstanceWeightArgs>());
            set => _instanceWeights = value;
        }

        [Input("jobFlowRole")]
        public Input<string>? JobFlowRole { get; set; }

        [Input("keepJobFlowAlive")]
        public Input<bool>? KeepJobFlowAlive { get; set; }

        [Input("logUri")]
        public Input<string>? LogUri { get; set; }

        [Input("managedPrimarySecurityGroup")]
        public Input<string>? ManagedPrimarySecurityGroup { get; set; }

        [Input("managedReplicaSecurityGroup")]
        public Input<string>? ManagedReplicaSecurityGroup { get; set; }

        [Input("masterEbsBlockDevices")]
        private InputList<Inputs.MrScalarMasterEbsBlockDeviceArgs>? _masterEbsBlockDevices;
        public InputList<Inputs.MrScalarMasterEbsBlockDeviceArgs> MasterEbsBlockDevices
        {
            get => _masterEbsBlockDevices ?? (_masterEbsBlockDevices = new InputList<Inputs.MrScalarMasterEbsBlockDeviceArgs>());
            set => _masterEbsBlockDevices = value;
        }

        [Input("masterEbsOptimized")]
        public Input<bool>? MasterEbsOptimized { get; set; }

        [Input("masterInstanceTypes")]
        private InputList<string>? _masterInstanceTypes;
        public InputList<string> MasterInstanceTypes
        {
            get => _masterInstanceTypes ?? (_masterInstanceTypes = new InputList<string>());
            set => _masterInstanceTypes = value;
        }

        [Input("masterLifecycle")]
        public Input<string>? MasterLifecycle { get; set; }

        /// <summary>
        /// The MrScaler name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("provisioningTimeout")]
        public Input<Inputs.MrScalarProvisioningTimeoutArgs>? ProvisioningTimeout { get; set; }

        /// <summary>
        /// The MrScaler region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("releaseLabel")]
        public Input<string>? ReleaseLabel { get; set; }

        [Input("repoUpgradeOnBoot")]
        public Input<string>? RepoUpgradeOnBoot { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.MrScalarScheduledTaskArgs>? _scheduledTasks;
        public InputList<Inputs.MrScalarScheduledTaskArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.MrScalarScheduledTaskArgs>());
            set => _scheduledTasks = value;
        }

        [Input("securityConfig")]
        public Input<string>? SecurityConfig { get; set; }

        [Input("serviceAccessSecurityGroup")]
        public Input<string>? ServiceAccessSecurityGroup { get; set; }

        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        [Input("stepsFiles")]
        private InputList<Inputs.MrScalarStepsFileArgs>? _stepsFiles;
        public InputList<Inputs.MrScalarStepsFileArgs> StepsFiles
        {
            get => _stepsFiles ?? (_stepsFiles = new InputList<Inputs.MrScalarStepsFileArgs>());
            set => _stepsFiles = value;
        }

        /// <summary>
        /// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.MrScalarTagArgs>? _tags;
        public InputList<Inputs.MrScalarTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.MrScalarTagArgs>());
            set => _tags = value;
        }

        [Input("taskDesiredCapacity")]
        public Input<int>? TaskDesiredCapacity { get; set; }

        [Input("taskEbsBlockDevices")]
        private InputList<Inputs.MrScalarTaskEbsBlockDeviceArgs>? _taskEbsBlockDevices;
        public InputList<Inputs.MrScalarTaskEbsBlockDeviceArgs> TaskEbsBlockDevices
        {
            get => _taskEbsBlockDevices ?? (_taskEbsBlockDevices = new InputList<Inputs.MrScalarTaskEbsBlockDeviceArgs>());
            set => _taskEbsBlockDevices = value;
        }

        [Input("taskEbsOptimized")]
        public Input<bool>? TaskEbsOptimized { get; set; }

        [Input("taskInstanceTypes")]
        private InputList<string>? _taskInstanceTypes;
        public InputList<string> TaskInstanceTypes
        {
            get => _taskInstanceTypes ?? (_taskInstanceTypes = new InputList<string>());
            set => _taskInstanceTypes = value;
        }

        [Input("taskLifecycle")]
        public Input<string>? TaskLifecycle { get; set; }

        [Input("taskMaxSize")]
        public Input<int>? TaskMaxSize { get; set; }

        [Input("taskMinSize")]
        public Input<int>? TaskMinSize { get; set; }

        [Input("taskScalingDownPolicies")]
        private InputList<Inputs.MrScalarTaskScalingDownPolicyArgs>? _taskScalingDownPolicies;
        public InputList<Inputs.MrScalarTaskScalingDownPolicyArgs> TaskScalingDownPolicies
        {
            get => _taskScalingDownPolicies ?? (_taskScalingDownPolicies = new InputList<Inputs.MrScalarTaskScalingDownPolicyArgs>());
            set => _taskScalingDownPolicies = value;
        }

        [Input("taskScalingUpPolicies")]
        private InputList<Inputs.MrScalarTaskScalingUpPolicyArgs>? _taskScalingUpPolicies;
        public InputList<Inputs.MrScalarTaskScalingUpPolicyArgs> TaskScalingUpPolicies
        {
            get => _taskScalingUpPolicies ?? (_taskScalingUpPolicies = new InputList<Inputs.MrScalarTaskScalingUpPolicyArgs>());
            set => _taskScalingUpPolicies = value;
        }

        [Input("taskUnit")]
        public Input<string>? TaskUnit { get; set; }

        [Input("terminationPolicies")]
        private InputList<Inputs.MrScalarTerminationPolicyArgs>? _terminationPolicies;

        /// <summary>
        /// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        /// </summary>
        public InputList<Inputs.MrScalarTerminationPolicyArgs> TerminationPolicies
        {
            get => _terminationPolicies ?? (_terminationPolicies = new InputList<Inputs.MrScalarTerminationPolicyArgs>());
            set => _terminationPolicies = value;
        }

        [Input("terminationProtected")]
        public Input<bool>? TerminationProtected { get; set; }

        [Input("visibleToAllUsers")]
        public Input<bool>? VisibleToAllUsers { get; set; }

        public MrScalarArgs()
        {
        }
    }

    public sealed class MrScalarState : Pulumi.ResourceArgs
    {
        [Input("additionalInfo")]
        public Input<string>? AdditionalInfo { get; set; }

        [Input("additionalPrimarySecurityGroups")]
        private InputList<string>? _additionalPrimarySecurityGroups;
        public InputList<string> AdditionalPrimarySecurityGroups
        {
            get => _additionalPrimarySecurityGroups ?? (_additionalPrimarySecurityGroups = new InputList<string>());
            set => _additionalPrimarySecurityGroups = value;
        }

        [Input("additionalReplicaSecurityGroups")]
        private InputList<string>? _additionalReplicaSecurityGroups;
        public InputList<string> AdditionalReplicaSecurityGroups
        {
            get => _additionalReplicaSecurityGroups ?? (_additionalReplicaSecurityGroups = new InputList<string>());
            set => _additionalReplicaSecurityGroups = value;
        }

        [Input("applications")]
        private InputList<Inputs.MrScalarApplicationGetArgs>? _applications;
        public InputList<Inputs.MrScalarApplicationGetArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.MrScalarApplicationGetArgs>());
            set => _applications = value;
        }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("bootstrapActionsFiles")]
        private InputList<Inputs.MrScalarBootstrapActionsFileGetArgs>? _bootstrapActionsFiles;
        public InputList<Inputs.MrScalarBootstrapActionsFileGetArgs> BootstrapActionsFiles
        {
            get => _bootstrapActionsFiles ?? (_bootstrapActionsFiles = new InputList<Inputs.MrScalarBootstrapActionsFileGetArgs>());
            set => _bootstrapActionsFiles = value;
        }

        /// <summary>
        /// The MrScaler cluster id.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("configurationsFiles")]
        private InputList<Inputs.MrScalarConfigurationsFileGetArgs>? _configurationsFiles;
        public InputList<Inputs.MrScalarConfigurationsFileGetArgs> ConfigurationsFiles
        {
            get => _configurationsFiles ?? (_configurationsFiles = new InputList<Inputs.MrScalarConfigurationsFileGetArgs>());
            set => _configurationsFiles = value;
        }

        [Input("coreDesiredCapacity")]
        public Input<int>? CoreDesiredCapacity { get; set; }

        [Input("coreEbsBlockDevices")]
        private InputList<Inputs.MrScalarCoreEbsBlockDeviceGetArgs>? _coreEbsBlockDevices;
        public InputList<Inputs.MrScalarCoreEbsBlockDeviceGetArgs> CoreEbsBlockDevices
        {
            get => _coreEbsBlockDevices ?? (_coreEbsBlockDevices = new InputList<Inputs.MrScalarCoreEbsBlockDeviceGetArgs>());
            set => _coreEbsBlockDevices = value;
        }

        [Input("coreEbsOptimized")]
        public Input<bool>? CoreEbsOptimized { get; set; }

        [Input("coreInstanceTypes")]
        private InputList<string>? _coreInstanceTypes;
        public InputList<string> CoreInstanceTypes
        {
            get => _coreInstanceTypes ?? (_coreInstanceTypes = new InputList<string>());
            set => _coreInstanceTypes = value;
        }

        [Input("coreLifecycle")]
        public Input<string>? CoreLifecycle { get; set; }

        [Input("coreMaxSize")]
        public Input<int>? CoreMaxSize { get; set; }

        [Input("coreMinSize")]
        public Input<int>? CoreMinSize { get; set; }

        [Input("coreScalingDownPolicies")]
        private InputList<Inputs.MrScalarCoreScalingDownPolicyGetArgs>? _coreScalingDownPolicies;
        public InputList<Inputs.MrScalarCoreScalingDownPolicyGetArgs> CoreScalingDownPolicies
        {
            get => _coreScalingDownPolicies ?? (_coreScalingDownPolicies = new InputList<Inputs.MrScalarCoreScalingDownPolicyGetArgs>());
            set => _coreScalingDownPolicies = value;
        }

        [Input("coreScalingUpPolicies")]
        private InputList<Inputs.MrScalarCoreScalingUpPolicyGetArgs>? _coreScalingUpPolicies;
        public InputList<Inputs.MrScalarCoreScalingUpPolicyGetArgs> CoreScalingUpPolicies
        {
            get => _coreScalingUpPolicies ?? (_coreScalingUpPolicies = new InputList<Inputs.MrScalarCoreScalingUpPolicyGetArgs>());
            set => _coreScalingUpPolicies = value;
        }

        [Input("coreUnit")]
        public Input<string>? CoreUnit { get; set; }

        [Input("customAmiId")]
        public Input<string>? CustomAmiId { get; set; }

        /// <summary>
        /// The MrScaler description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ebsRootVolumeSize")]
        public Input<int>? EbsRootVolumeSize { get; set; }

        [Input("ec2KeyName")]
        public Input<string>? Ec2KeyName { get; set; }

        [Input("exposeClusterId")]
        public Input<bool>? ExposeClusterId { get; set; }

        [Input("instanceWeights")]
        private InputList<Inputs.MrScalarInstanceWeightGetArgs>? _instanceWeights;
        public InputList<Inputs.MrScalarInstanceWeightGetArgs> InstanceWeights
        {
            get => _instanceWeights ?? (_instanceWeights = new InputList<Inputs.MrScalarInstanceWeightGetArgs>());
            set => _instanceWeights = value;
        }

        [Input("jobFlowRole")]
        public Input<string>? JobFlowRole { get; set; }

        [Input("keepJobFlowAlive")]
        public Input<bool>? KeepJobFlowAlive { get; set; }

        [Input("logUri")]
        public Input<string>? LogUri { get; set; }

        [Input("managedPrimarySecurityGroup")]
        public Input<string>? ManagedPrimarySecurityGroup { get; set; }

        [Input("managedReplicaSecurityGroup")]
        public Input<string>? ManagedReplicaSecurityGroup { get; set; }

        [Input("masterEbsBlockDevices")]
        private InputList<Inputs.MrScalarMasterEbsBlockDeviceGetArgs>? _masterEbsBlockDevices;
        public InputList<Inputs.MrScalarMasterEbsBlockDeviceGetArgs> MasterEbsBlockDevices
        {
            get => _masterEbsBlockDevices ?? (_masterEbsBlockDevices = new InputList<Inputs.MrScalarMasterEbsBlockDeviceGetArgs>());
            set => _masterEbsBlockDevices = value;
        }

        [Input("masterEbsOptimized")]
        public Input<bool>? MasterEbsOptimized { get; set; }

        [Input("masterInstanceTypes")]
        private InputList<string>? _masterInstanceTypes;
        public InputList<string> MasterInstanceTypes
        {
            get => _masterInstanceTypes ?? (_masterInstanceTypes = new InputList<string>());
            set => _masterInstanceTypes = value;
        }

        [Input("masterLifecycle")]
        public Input<string>? MasterLifecycle { get; set; }

        /// <summary>
        /// The MrScaler name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("outputClusterId")]
        public Input<string>? OutputClusterId { get; set; }

        [Input("provisioningTimeout")]
        public Input<Inputs.MrScalarProvisioningTimeoutGetArgs>? ProvisioningTimeout { get; set; }

        /// <summary>
        /// The MrScaler region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("releaseLabel")]
        public Input<string>? ReleaseLabel { get; set; }

        [Input("repoUpgradeOnBoot")]
        public Input<string>? RepoUpgradeOnBoot { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("scheduledTasks")]
        private InputList<Inputs.MrScalarScheduledTaskGetArgs>? _scheduledTasks;
        public InputList<Inputs.MrScalarScheduledTaskGetArgs> ScheduledTasks
        {
            get => _scheduledTasks ?? (_scheduledTasks = new InputList<Inputs.MrScalarScheduledTaskGetArgs>());
            set => _scheduledTasks = value;
        }

        [Input("securityConfig")]
        public Input<string>? SecurityConfig { get; set; }

        [Input("serviceAccessSecurityGroup")]
        public Input<string>? ServiceAccessSecurityGroup { get; set; }

        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        [Input("stepsFiles")]
        private InputList<Inputs.MrScalarStepsFileGetArgs>? _stepsFiles;
        public InputList<Inputs.MrScalarStepsFileGetArgs> StepsFiles
        {
            get => _stepsFiles ?? (_stepsFiles = new InputList<Inputs.MrScalarStepsFileGetArgs>());
            set => _stepsFiles = value;
        }

        /// <summary>
        /// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        [Input("tags")]
        private InputList<Inputs.MrScalarTagGetArgs>? _tags;
        public InputList<Inputs.MrScalarTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.MrScalarTagGetArgs>());
            set => _tags = value;
        }

        [Input("taskDesiredCapacity")]
        public Input<int>? TaskDesiredCapacity { get; set; }

        [Input("taskEbsBlockDevices")]
        private InputList<Inputs.MrScalarTaskEbsBlockDeviceGetArgs>? _taskEbsBlockDevices;
        public InputList<Inputs.MrScalarTaskEbsBlockDeviceGetArgs> TaskEbsBlockDevices
        {
            get => _taskEbsBlockDevices ?? (_taskEbsBlockDevices = new InputList<Inputs.MrScalarTaskEbsBlockDeviceGetArgs>());
            set => _taskEbsBlockDevices = value;
        }

        [Input("taskEbsOptimized")]
        public Input<bool>? TaskEbsOptimized { get; set; }

        [Input("taskInstanceTypes")]
        private InputList<string>? _taskInstanceTypes;
        public InputList<string> TaskInstanceTypes
        {
            get => _taskInstanceTypes ?? (_taskInstanceTypes = new InputList<string>());
            set => _taskInstanceTypes = value;
        }

        [Input("taskLifecycle")]
        public Input<string>? TaskLifecycle { get; set; }

        [Input("taskMaxSize")]
        public Input<int>? TaskMaxSize { get; set; }

        [Input("taskMinSize")]
        public Input<int>? TaskMinSize { get; set; }

        [Input("taskScalingDownPolicies")]
        private InputList<Inputs.MrScalarTaskScalingDownPolicyGetArgs>? _taskScalingDownPolicies;
        public InputList<Inputs.MrScalarTaskScalingDownPolicyGetArgs> TaskScalingDownPolicies
        {
            get => _taskScalingDownPolicies ?? (_taskScalingDownPolicies = new InputList<Inputs.MrScalarTaskScalingDownPolicyGetArgs>());
            set => _taskScalingDownPolicies = value;
        }

        [Input("taskScalingUpPolicies")]
        private InputList<Inputs.MrScalarTaskScalingUpPolicyGetArgs>? _taskScalingUpPolicies;
        public InputList<Inputs.MrScalarTaskScalingUpPolicyGetArgs> TaskScalingUpPolicies
        {
            get => _taskScalingUpPolicies ?? (_taskScalingUpPolicies = new InputList<Inputs.MrScalarTaskScalingUpPolicyGetArgs>());
            set => _taskScalingUpPolicies = value;
        }

        [Input("taskUnit")]
        public Input<string>? TaskUnit { get; set; }

        [Input("terminationPolicies")]
        private InputList<Inputs.MrScalarTerminationPolicyGetArgs>? _terminationPolicies;

        /// <summary>
        /// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        /// </summary>
        public InputList<Inputs.MrScalarTerminationPolicyGetArgs> TerminationPolicies
        {
            get => _terminationPolicies ?? (_terminationPolicies = new InputList<Inputs.MrScalarTerminationPolicyGetArgs>());
            set => _terminationPolicies = value;
        }

        [Input("terminationProtected")]
        public Input<bool>? TerminationProtected { get; set; }

        [Input("visibleToAllUsers")]
        public Input<bool>? VisibleToAllUsers { get; set; }

        public MrScalarState()
        {
        }
    }
}
