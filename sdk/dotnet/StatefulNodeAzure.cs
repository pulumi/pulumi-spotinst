// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SpotInst
{
    /// <summary>
    /// Provides a Spotinst stateful node Azure resource.
    /// </summary>
    [SpotInstResourceType("spotinst:index/statefulNodeAzure:StatefulNodeAzure")]
    public partial class StatefulNodeAzure : global::Pulumi.CustomResource
    {
        [Output("attachDataDisks")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureAttachDataDisk>> AttachDataDisks { get; private set; } = null!;

        [Output("bootDiagnostics")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureBootDiagnostic>> BootDiagnostics { get; private set; } = null!;

        [Output("customData")]
        public Output<string> CustomData { get; private set; } = null!;

        [Output("dataDisks")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureDataDisk>> DataDisks { get; private set; } = null!;

        [Output("dataDisksPersistenceMode")]
        public Output<string> DataDisksPersistenceMode { get; private set; } = null!;

        [Output("deletes")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureDelete>> Deletes { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("detachDataDisks")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureDetachDataDisk>> DetachDataDisks { get; private set; } = null!;

        [Output("extensions")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureExtension>> Extensions { get; private set; } = null!;

        [Output("health")]
        public Output<Outputs.StatefulNodeAzureHealth> Health { get; private set; } = null!;

        [Output("image")]
        public Output<Outputs.StatefulNodeAzureImage?> Image { get; private set; } = null!;

        [Output("importVms")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureImportVm>> ImportVms { get; private set; } = null!;

        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureLoadBalancer>> LoadBalancers { get; private set; } = null!;

        [Output("login")]
        public Output<Outputs.StatefulNodeAzureLogin?> Login { get; private set; } = null!;

        [Output("managedServiceIdentities")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureManagedServiceIdentity>> ManagedServiceIdentities { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("network")]
        public Output<Outputs.StatefulNodeAzureNetwork?> Network { get; private set; } = null!;

        [Output("odSizes")]
        public Output<ImmutableArray<string>> OdSizes { get; private set; } = null!;

        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        [Output("osDisk")]
        public Output<Outputs.StatefulNodeAzureOsDisk?> OsDisk { get; private set; } = null!;

        [Output("osDiskPersistenceMode")]
        public Output<string> OsDiskPersistenceMode { get; private set; } = null!;

        [Output("preferredSpotSizes")]
        public Output<ImmutableArray<string>> PreferredSpotSizes { get; private set; } = null!;

        [Output("preferredZone")]
        public Output<string> PreferredZone { get; private set; } = null!;

        [Output("proximityPlacementGroups")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureProximityPlacementGroup>> ProximityPlacementGroups { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        [Output("schedulingTasks")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureSchedulingTask>> SchedulingTasks { get; private set; } = null!;

        [Output("secrets")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureSecret>> Secrets { get; private set; } = null!;

        [Output("security")]
        public Output<Outputs.StatefulNodeAzureSecurity?> Security { get; private set; } = null!;

        [Output("shouldPersistDataDisks")]
        public Output<bool> ShouldPersistDataDisks { get; private set; } = null!;

        [Output("shouldPersistNetwork")]
        public Output<bool> ShouldPersistNetwork { get; private set; } = null!;

        [Output("shouldPersistOsDisk")]
        public Output<bool> ShouldPersistOsDisk { get; private set; } = null!;

        [Output("shouldPersistVm")]
        public Output<bool> ShouldPersistVm { get; private set; } = null!;

        [Output("shutdownScript")]
        public Output<string> ShutdownScript { get; private set; } = null!;

        [Output("signals")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureSignal>> Signals { get; private set; } = null!;

        [Output("spotSizes")]
        public Output<ImmutableArray<string>> SpotSizes { get; private set; } = null!;

        [Output("strategy")]
        public Output<Outputs.StatefulNodeAzureStrategy> Strategy { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureTag>> Tags { get; private set; } = null!;

        [Output("updateStates")]
        public Output<ImmutableArray<Outputs.StatefulNodeAzureUpdateState>> UpdateStates { get; private set; } = null!;

        [Output("userData")]
        public Output<string> UserData { get; private set; } = null!;

        [Output("vmName")]
        public Output<string?> VmName { get; private set; } = null!;

        [Output("vmNamePrefix")]
        public Output<string?> VmNamePrefix { get; private set; } = null!;

        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a StatefulNodeAzure resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StatefulNodeAzure(string name, StatefulNodeAzureArgs args, CustomResourceOptions? options = null)
            : base("spotinst:index/statefulNodeAzure:StatefulNodeAzure", name, args ?? new StatefulNodeAzureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StatefulNodeAzure(string name, Input<string> id, StatefulNodeAzureState? state = null, CustomResourceOptions? options = null)
            : base("spotinst:index/statefulNodeAzure:StatefulNodeAzure", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StatefulNodeAzure resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StatefulNodeAzure Get(string name, Input<string> id, StatefulNodeAzureState? state = null, CustomResourceOptions? options = null)
        {
            return new StatefulNodeAzure(name, id, state, options);
        }
    }

    public sealed class StatefulNodeAzureArgs : global::Pulumi.ResourceArgs
    {
        [Input("attachDataDisks")]
        private InputList<Inputs.StatefulNodeAzureAttachDataDiskArgs>? _attachDataDisks;
        public InputList<Inputs.StatefulNodeAzureAttachDataDiskArgs> AttachDataDisks
        {
            get => _attachDataDisks ?? (_attachDataDisks = new InputList<Inputs.StatefulNodeAzureAttachDataDiskArgs>());
            set => _attachDataDisks = value;
        }

        [Input("bootDiagnostics")]
        private InputList<Inputs.StatefulNodeAzureBootDiagnosticArgs>? _bootDiagnostics;
        public InputList<Inputs.StatefulNodeAzureBootDiagnosticArgs> BootDiagnostics
        {
            get => _bootDiagnostics ?? (_bootDiagnostics = new InputList<Inputs.StatefulNodeAzureBootDiagnosticArgs>());
            set => _bootDiagnostics = value;
        }

        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.StatefulNodeAzureDataDiskArgs>? _dataDisks;
        public InputList<Inputs.StatefulNodeAzureDataDiskArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.StatefulNodeAzureDataDiskArgs>());
            set => _dataDisks = value;
        }

        [Input("dataDisksPersistenceMode")]
        public Input<string>? DataDisksPersistenceMode { get; set; }

        [Input("deletes")]
        private InputList<Inputs.StatefulNodeAzureDeleteArgs>? _deletes;
        public InputList<Inputs.StatefulNodeAzureDeleteArgs> Deletes
        {
            get => _deletes ?? (_deletes = new InputList<Inputs.StatefulNodeAzureDeleteArgs>());
            set => _deletes = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("detachDataDisks")]
        private InputList<Inputs.StatefulNodeAzureDetachDataDiskArgs>? _detachDataDisks;
        public InputList<Inputs.StatefulNodeAzureDetachDataDiskArgs> DetachDataDisks
        {
            get => _detachDataDisks ?? (_detachDataDisks = new InputList<Inputs.StatefulNodeAzureDetachDataDiskArgs>());
            set => _detachDataDisks = value;
        }

        [Input("extensions")]
        private InputList<Inputs.StatefulNodeAzureExtensionArgs>? _extensions;
        public InputList<Inputs.StatefulNodeAzureExtensionArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.StatefulNodeAzureExtensionArgs>());
            set => _extensions = value;
        }

        [Input("health")]
        public Input<Inputs.StatefulNodeAzureHealthArgs>? Health { get; set; }

        [Input("image")]
        public Input<Inputs.StatefulNodeAzureImageArgs>? Image { get; set; }

        [Input("importVms")]
        private InputList<Inputs.StatefulNodeAzureImportVmArgs>? _importVms;
        public InputList<Inputs.StatefulNodeAzureImportVmArgs> ImportVms
        {
            get => _importVms ?? (_importVms = new InputList<Inputs.StatefulNodeAzureImportVmArgs>());
            set => _importVms = value;
        }

        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.StatefulNodeAzureLoadBalancerArgs>? _loadBalancers;
        public InputList<Inputs.StatefulNodeAzureLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.StatefulNodeAzureLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        [Input("login")]
        public Input<Inputs.StatefulNodeAzureLoginArgs>? Login { get; set; }

        [Input("managedServiceIdentities")]
        private InputList<Inputs.StatefulNodeAzureManagedServiceIdentityArgs>? _managedServiceIdentities;
        public InputList<Inputs.StatefulNodeAzureManagedServiceIdentityArgs> ManagedServiceIdentities
        {
            get => _managedServiceIdentities ?? (_managedServiceIdentities = new InputList<Inputs.StatefulNodeAzureManagedServiceIdentityArgs>());
            set => _managedServiceIdentities = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("network")]
        public Input<Inputs.StatefulNodeAzureNetworkArgs>? Network { get; set; }

        [Input("odSizes", required: true)]
        private InputList<string>? _odSizes;
        public InputList<string> OdSizes
        {
            get => _odSizes ?? (_odSizes = new InputList<string>());
            set => _odSizes = value;
        }

        [Input("os", required: true)]
        public Input<string> Os { get; set; } = null!;

        [Input("osDisk")]
        public Input<Inputs.StatefulNodeAzureOsDiskArgs>? OsDisk { get; set; }

        [Input("osDiskPersistenceMode")]
        public Input<string>? OsDiskPersistenceMode { get; set; }

        [Input("preferredSpotSizes")]
        private InputList<string>? _preferredSpotSizes;
        public InputList<string> PreferredSpotSizes
        {
            get => _preferredSpotSizes ?? (_preferredSpotSizes = new InputList<string>());
            set => _preferredSpotSizes = value;
        }

        [Input("preferredZone")]
        public Input<string>? PreferredZone { get; set; }

        [Input("proximityPlacementGroups")]
        private InputList<Inputs.StatefulNodeAzureProximityPlacementGroupArgs>? _proximityPlacementGroups;
        public InputList<Inputs.StatefulNodeAzureProximityPlacementGroupArgs> ProximityPlacementGroups
        {
            get => _proximityPlacementGroups ?? (_proximityPlacementGroups = new InputList<Inputs.StatefulNodeAzureProximityPlacementGroupArgs>());
            set => _proximityPlacementGroups = value;
        }

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("schedulingTasks")]
        private InputList<Inputs.StatefulNodeAzureSchedulingTaskArgs>? _schedulingTasks;
        public InputList<Inputs.StatefulNodeAzureSchedulingTaskArgs> SchedulingTasks
        {
            get => _schedulingTasks ?? (_schedulingTasks = new InputList<Inputs.StatefulNodeAzureSchedulingTaskArgs>());
            set => _schedulingTasks = value;
        }

        [Input("secrets")]
        private InputList<Inputs.StatefulNodeAzureSecretArgs>? _secrets;
        public InputList<Inputs.StatefulNodeAzureSecretArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.StatefulNodeAzureSecretArgs>());
            set => _secrets = value;
        }

        [Input("security")]
        public Input<Inputs.StatefulNodeAzureSecurityArgs>? Security { get; set; }

        [Input("shouldPersistDataDisks", required: true)]
        public Input<bool> ShouldPersistDataDisks { get; set; } = null!;

        [Input("shouldPersistNetwork", required: true)]
        public Input<bool> ShouldPersistNetwork { get; set; } = null!;

        [Input("shouldPersistOsDisk", required: true)]
        public Input<bool> ShouldPersistOsDisk { get; set; } = null!;

        [Input("shouldPersistVm")]
        public Input<bool>? ShouldPersistVm { get; set; }

        [Input("shutdownScript")]
        public Input<string>? ShutdownScript { get; set; }

        [Input("signals")]
        private InputList<Inputs.StatefulNodeAzureSignalArgs>? _signals;
        public InputList<Inputs.StatefulNodeAzureSignalArgs> Signals
        {
            get => _signals ?? (_signals = new InputList<Inputs.StatefulNodeAzureSignalArgs>());
            set => _signals = value;
        }

        [Input("spotSizes", required: true)]
        private InputList<string>? _spotSizes;
        public InputList<string> SpotSizes
        {
            get => _spotSizes ?? (_spotSizes = new InputList<string>());
            set => _spotSizes = value;
        }

        [Input("strategy", required: true)]
        public Input<Inputs.StatefulNodeAzureStrategyArgs> Strategy { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.StatefulNodeAzureTagArgs>? _tags;
        public InputList<Inputs.StatefulNodeAzureTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.StatefulNodeAzureTagArgs>());
            set => _tags = value;
        }

        [Input("updateStates")]
        private InputList<Inputs.StatefulNodeAzureUpdateStateArgs>? _updateStates;
        public InputList<Inputs.StatefulNodeAzureUpdateStateArgs> UpdateStates
        {
            get => _updateStates ?? (_updateStates = new InputList<Inputs.StatefulNodeAzureUpdateStateArgs>());
            set => _updateStates = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vmName")]
        public Input<string>? VmName { get; set; }

        [Input("vmNamePrefix")]
        public Input<string>? VmNamePrefix { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public StatefulNodeAzureArgs()
        {
        }
        public static new StatefulNodeAzureArgs Empty => new StatefulNodeAzureArgs();
    }

    public sealed class StatefulNodeAzureState : global::Pulumi.ResourceArgs
    {
        [Input("attachDataDisks")]
        private InputList<Inputs.StatefulNodeAzureAttachDataDiskGetArgs>? _attachDataDisks;
        public InputList<Inputs.StatefulNodeAzureAttachDataDiskGetArgs> AttachDataDisks
        {
            get => _attachDataDisks ?? (_attachDataDisks = new InputList<Inputs.StatefulNodeAzureAttachDataDiskGetArgs>());
            set => _attachDataDisks = value;
        }

        [Input("bootDiagnostics")]
        private InputList<Inputs.StatefulNodeAzureBootDiagnosticGetArgs>? _bootDiagnostics;
        public InputList<Inputs.StatefulNodeAzureBootDiagnosticGetArgs> BootDiagnostics
        {
            get => _bootDiagnostics ?? (_bootDiagnostics = new InputList<Inputs.StatefulNodeAzureBootDiagnosticGetArgs>());
            set => _bootDiagnostics = value;
        }

        [Input("customData")]
        public Input<string>? CustomData { get; set; }

        [Input("dataDisks")]
        private InputList<Inputs.StatefulNodeAzureDataDiskGetArgs>? _dataDisks;
        public InputList<Inputs.StatefulNodeAzureDataDiskGetArgs> DataDisks
        {
            get => _dataDisks ?? (_dataDisks = new InputList<Inputs.StatefulNodeAzureDataDiskGetArgs>());
            set => _dataDisks = value;
        }

        [Input("dataDisksPersistenceMode")]
        public Input<string>? DataDisksPersistenceMode { get; set; }

        [Input("deletes")]
        private InputList<Inputs.StatefulNodeAzureDeleteGetArgs>? _deletes;
        public InputList<Inputs.StatefulNodeAzureDeleteGetArgs> Deletes
        {
            get => _deletes ?? (_deletes = new InputList<Inputs.StatefulNodeAzureDeleteGetArgs>());
            set => _deletes = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("detachDataDisks")]
        private InputList<Inputs.StatefulNodeAzureDetachDataDiskGetArgs>? _detachDataDisks;
        public InputList<Inputs.StatefulNodeAzureDetachDataDiskGetArgs> DetachDataDisks
        {
            get => _detachDataDisks ?? (_detachDataDisks = new InputList<Inputs.StatefulNodeAzureDetachDataDiskGetArgs>());
            set => _detachDataDisks = value;
        }

        [Input("extensions")]
        private InputList<Inputs.StatefulNodeAzureExtensionGetArgs>? _extensions;
        public InputList<Inputs.StatefulNodeAzureExtensionGetArgs> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<Inputs.StatefulNodeAzureExtensionGetArgs>());
            set => _extensions = value;
        }

        [Input("health")]
        public Input<Inputs.StatefulNodeAzureHealthGetArgs>? Health { get; set; }

        [Input("image")]
        public Input<Inputs.StatefulNodeAzureImageGetArgs>? Image { get; set; }

        [Input("importVms")]
        private InputList<Inputs.StatefulNodeAzureImportVmGetArgs>? _importVms;
        public InputList<Inputs.StatefulNodeAzureImportVmGetArgs> ImportVms
        {
            get => _importVms ?? (_importVms = new InputList<Inputs.StatefulNodeAzureImportVmGetArgs>());
            set => _importVms = value;
        }

        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.StatefulNodeAzureLoadBalancerGetArgs>? _loadBalancers;
        public InputList<Inputs.StatefulNodeAzureLoadBalancerGetArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.StatefulNodeAzureLoadBalancerGetArgs>());
            set => _loadBalancers = value;
        }

        [Input("login")]
        public Input<Inputs.StatefulNodeAzureLoginGetArgs>? Login { get; set; }

        [Input("managedServiceIdentities")]
        private InputList<Inputs.StatefulNodeAzureManagedServiceIdentityGetArgs>? _managedServiceIdentities;
        public InputList<Inputs.StatefulNodeAzureManagedServiceIdentityGetArgs> ManagedServiceIdentities
        {
            get => _managedServiceIdentities ?? (_managedServiceIdentities = new InputList<Inputs.StatefulNodeAzureManagedServiceIdentityGetArgs>());
            set => _managedServiceIdentities = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("network")]
        public Input<Inputs.StatefulNodeAzureNetworkGetArgs>? Network { get; set; }

        [Input("odSizes")]
        private InputList<string>? _odSizes;
        public InputList<string> OdSizes
        {
            get => _odSizes ?? (_odSizes = new InputList<string>());
            set => _odSizes = value;
        }

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("osDisk")]
        public Input<Inputs.StatefulNodeAzureOsDiskGetArgs>? OsDisk { get; set; }

        [Input("osDiskPersistenceMode")]
        public Input<string>? OsDiskPersistenceMode { get; set; }

        [Input("preferredSpotSizes")]
        private InputList<string>? _preferredSpotSizes;
        public InputList<string> PreferredSpotSizes
        {
            get => _preferredSpotSizes ?? (_preferredSpotSizes = new InputList<string>());
            set => _preferredSpotSizes = value;
        }

        [Input("preferredZone")]
        public Input<string>? PreferredZone { get; set; }

        [Input("proximityPlacementGroups")]
        private InputList<Inputs.StatefulNodeAzureProximityPlacementGroupGetArgs>? _proximityPlacementGroups;
        public InputList<Inputs.StatefulNodeAzureProximityPlacementGroupGetArgs> ProximityPlacementGroups
        {
            get => _proximityPlacementGroups ?? (_proximityPlacementGroups = new InputList<Inputs.StatefulNodeAzureProximityPlacementGroupGetArgs>());
            set => _proximityPlacementGroups = value;
        }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("schedulingTasks")]
        private InputList<Inputs.StatefulNodeAzureSchedulingTaskGetArgs>? _schedulingTasks;
        public InputList<Inputs.StatefulNodeAzureSchedulingTaskGetArgs> SchedulingTasks
        {
            get => _schedulingTasks ?? (_schedulingTasks = new InputList<Inputs.StatefulNodeAzureSchedulingTaskGetArgs>());
            set => _schedulingTasks = value;
        }

        [Input("secrets")]
        private InputList<Inputs.StatefulNodeAzureSecretGetArgs>? _secrets;
        public InputList<Inputs.StatefulNodeAzureSecretGetArgs> Secrets
        {
            get => _secrets ?? (_secrets = new InputList<Inputs.StatefulNodeAzureSecretGetArgs>());
            set => _secrets = value;
        }

        [Input("security")]
        public Input<Inputs.StatefulNodeAzureSecurityGetArgs>? Security { get; set; }

        [Input("shouldPersistDataDisks")]
        public Input<bool>? ShouldPersistDataDisks { get; set; }

        [Input("shouldPersistNetwork")]
        public Input<bool>? ShouldPersistNetwork { get; set; }

        [Input("shouldPersistOsDisk")]
        public Input<bool>? ShouldPersistOsDisk { get; set; }

        [Input("shouldPersistVm")]
        public Input<bool>? ShouldPersistVm { get; set; }

        [Input("shutdownScript")]
        public Input<string>? ShutdownScript { get; set; }

        [Input("signals")]
        private InputList<Inputs.StatefulNodeAzureSignalGetArgs>? _signals;
        public InputList<Inputs.StatefulNodeAzureSignalGetArgs> Signals
        {
            get => _signals ?? (_signals = new InputList<Inputs.StatefulNodeAzureSignalGetArgs>());
            set => _signals = value;
        }

        [Input("spotSizes")]
        private InputList<string>? _spotSizes;
        public InputList<string> SpotSizes
        {
            get => _spotSizes ?? (_spotSizes = new InputList<string>());
            set => _spotSizes = value;
        }

        [Input("strategy")]
        public Input<Inputs.StatefulNodeAzureStrategyGetArgs>? Strategy { get; set; }

        [Input("tags")]
        private InputList<Inputs.StatefulNodeAzureTagGetArgs>? _tags;
        public InputList<Inputs.StatefulNodeAzureTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.StatefulNodeAzureTagGetArgs>());
            set => _tags = value;
        }

        [Input("updateStates")]
        private InputList<Inputs.StatefulNodeAzureUpdateStateGetArgs>? _updateStates;
        public InputList<Inputs.StatefulNodeAzureUpdateStateGetArgs> UpdateStates
        {
            get => _updateStates ?? (_updateStates = new InputList<Inputs.StatefulNodeAzureUpdateStateGetArgs>());
            set => _updateStates = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vmName")]
        public Input<string>? VmName { get; set; }

        [Input("vmNamePrefix")]
        public Input<string>? VmNamePrefix { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public StatefulNodeAzureState()
        {
        }
        public static new StatefulNodeAzureState Empty => new StatefulNodeAzureState();
    }
}
