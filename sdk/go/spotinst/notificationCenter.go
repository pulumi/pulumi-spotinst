// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spotinst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NotificationCenter struct {
	pulumi.CustomResourceState

	ComputePolicyConfig NotificationCenterComputePolicyConfigOutput `pulumi:"computePolicyConfig"`
	Description         pulumi.StringPtrOutput                      `pulumi:"description"`
	IsActive            pulumi.BoolPtrOutput                        `pulumi:"isActive"`
	Name                pulumi.StringOutput                         `pulumi:"name"`
	PrivacyLevel        pulumi.StringOutput                         `pulumi:"privacyLevel"`
	RegisteredUsers     NotificationCenterRegisteredUserArrayOutput `pulumi:"registeredUsers"`
	Subscriptions       NotificationCenterSubscriptionArrayOutput   `pulumi:"subscriptions"`
}

// NewNotificationCenter registers a new resource with the given unique name, arguments, and options.
func NewNotificationCenter(ctx *pulumi.Context,
	name string, args *NotificationCenterArgs, opts ...pulumi.ResourceOption) (*NotificationCenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComputePolicyConfig == nil {
		return nil, errors.New("invalid value for required argument 'ComputePolicyConfig'")
	}
	if args.PrivacyLevel == nil {
		return nil, errors.New("invalid value for required argument 'PrivacyLevel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationCenter
	err := ctx.RegisterResource("spotinst:index/notificationCenter:NotificationCenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationCenter gets an existing NotificationCenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationCenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationCenterState, opts ...pulumi.ResourceOption) (*NotificationCenter, error) {
	var resource NotificationCenter
	err := ctx.ReadResource("spotinst:index/notificationCenter:NotificationCenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationCenter resources.
type notificationCenterState struct {
	ComputePolicyConfig *NotificationCenterComputePolicyConfig `pulumi:"computePolicyConfig"`
	Description         *string                                `pulumi:"description"`
	IsActive            *bool                                  `pulumi:"isActive"`
	Name                *string                                `pulumi:"name"`
	PrivacyLevel        *string                                `pulumi:"privacyLevel"`
	RegisteredUsers     []NotificationCenterRegisteredUser     `pulumi:"registeredUsers"`
	Subscriptions       []NotificationCenterSubscription       `pulumi:"subscriptions"`
}

type NotificationCenterState struct {
	ComputePolicyConfig NotificationCenterComputePolicyConfigPtrInput
	Description         pulumi.StringPtrInput
	IsActive            pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	PrivacyLevel        pulumi.StringPtrInput
	RegisteredUsers     NotificationCenterRegisteredUserArrayInput
	Subscriptions       NotificationCenterSubscriptionArrayInput
}

func (NotificationCenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationCenterState)(nil)).Elem()
}

type notificationCenterArgs struct {
	ComputePolicyConfig NotificationCenterComputePolicyConfig `pulumi:"computePolicyConfig"`
	Description         *string                               `pulumi:"description"`
	IsActive            *bool                                 `pulumi:"isActive"`
	Name                *string                               `pulumi:"name"`
	PrivacyLevel        string                                `pulumi:"privacyLevel"`
	RegisteredUsers     []NotificationCenterRegisteredUser    `pulumi:"registeredUsers"`
	Subscriptions       []NotificationCenterSubscription      `pulumi:"subscriptions"`
}

// The set of arguments for constructing a NotificationCenter resource.
type NotificationCenterArgs struct {
	ComputePolicyConfig NotificationCenterComputePolicyConfigInput
	Description         pulumi.StringPtrInput
	IsActive            pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	PrivacyLevel        pulumi.StringInput
	RegisteredUsers     NotificationCenterRegisteredUserArrayInput
	Subscriptions       NotificationCenterSubscriptionArrayInput
}

func (NotificationCenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationCenterArgs)(nil)).Elem()
}

type NotificationCenterInput interface {
	pulumi.Input

	ToNotificationCenterOutput() NotificationCenterOutput
	ToNotificationCenterOutputWithContext(ctx context.Context) NotificationCenterOutput
}

func (*NotificationCenter) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationCenter)(nil)).Elem()
}

func (i *NotificationCenter) ToNotificationCenterOutput() NotificationCenterOutput {
	return i.ToNotificationCenterOutputWithContext(context.Background())
}

func (i *NotificationCenter) ToNotificationCenterOutputWithContext(ctx context.Context) NotificationCenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationCenterOutput)
}

// NotificationCenterArrayInput is an input type that accepts NotificationCenterArray and NotificationCenterArrayOutput values.
// You can construct a concrete instance of `NotificationCenterArrayInput` via:
//
//	NotificationCenterArray{ NotificationCenterArgs{...} }
type NotificationCenterArrayInput interface {
	pulumi.Input

	ToNotificationCenterArrayOutput() NotificationCenterArrayOutput
	ToNotificationCenterArrayOutputWithContext(context.Context) NotificationCenterArrayOutput
}

type NotificationCenterArray []NotificationCenterInput

func (NotificationCenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationCenter)(nil)).Elem()
}

func (i NotificationCenterArray) ToNotificationCenterArrayOutput() NotificationCenterArrayOutput {
	return i.ToNotificationCenterArrayOutputWithContext(context.Background())
}

func (i NotificationCenterArray) ToNotificationCenterArrayOutputWithContext(ctx context.Context) NotificationCenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationCenterArrayOutput)
}

// NotificationCenterMapInput is an input type that accepts NotificationCenterMap and NotificationCenterMapOutput values.
// You can construct a concrete instance of `NotificationCenterMapInput` via:
//
//	NotificationCenterMap{ "key": NotificationCenterArgs{...} }
type NotificationCenterMapInput interface {
	pulumi.Input

	ToNotificationCenterMapOutput() NotificationCenterMapOutput
	ToNotificationCenterMapOutputWithContext(context.Context) NotificationCenterMapOutput
}

type NotificationCenterMap map[string]NotificationCenterInput

func (NotificationCenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationCenter)(nil)).Elem()
}

func (i NotificationCenterMap) ToNotificationCenterMapOutput() NotificationCenterMapOutput {
	return i.ToNotificationCenterMapOutputWithContext(context.Background())
}

func (i NotificationCenterMap) ToNotificationCenterMapOutputWithContext(ctx context.Context) NotificationCenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationCenterMapOutput)
}

type NotificationCenterOutput struct{ *pulumi.OutputState }

func (NotificationCenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationCenter)(nil)).Elem()
}

func (o NotificationCenterOutput) ToNotificationCenterOutput() NotificationCenterOutput {
	return o
}

func (o NotificationCenterOutput) ToNotificationCenterOutputWithContext(ctx context.Context) NotificationCenterOutput {
	return o
}

func (o NotificationCenterOutput) ComputePolicyConfig() NotificationCenterComputePolicyConfigOutput {
	return o.ApplyT(func(v *NotificationCenter) NotificationCenterComputePolicyConfigOutput { return v.ComputePolicyConfig }).(NotificationCenterComputePolicyConfigOutput)
}

func (o NotificationCenterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationCenter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NotificationCenterOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationCenter) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

func (o NotificationCenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationCenter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NotificationCenterOutput) PrivacyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationCenter) pulumi.StringOutput { return v.PrivacyLevel }).(pulumi.StringOutput)
}

func (o NotificationCenterOutput) RegisteredUsers() NotificationCenterRegisteredUserArrayOutput {
	return o.ApplyT(func(v *NotificationCenter) NotificationCenterRegisteredUserArrayOutput { return v.RegisteredUsers }).(NotificationCenterRegisteredUserArrayOutput)
}

func (o NotificationCenterOutput) Subscriptions() NotificationCenterSubscriptionArrayOutput {
	return o.ApplyT(func(v *NotificationCenter) NotificationCenterSubscriptionArrayOutput { return v.Subscriptions }).(NotificationCenterSubscriptionArrayOutput)
}

type NotificationCenterArrayOutput struct{ *pulumi.OutputState }

func (NotificationCenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationCenter)(nil)).Elem()
}

func (o NotificationCenterArrayOutput) ToNotificationCenterArrayOutput() NotificationCenterArrayOutput {
	return o
}

func (o NotificationCenterArrayOutput) ToNotificationCenterArrayOutputWithContext(ctx context.Context) NotificationCenterArrayOutput {
	return o
}

func (o NotificationCenterArrayOutput) Index(i pulumi.IntInput) NotificationCenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationCenter {
		return vs[0].([]*NotificationCenter)[vs[1].(int)]
	}).(NotificationCenterOutput)
}

type NotificationCenterMapOutput struct{ *pulumi.OutputState }

func (NotificationCenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationCenter)(nil)).Elem()
}

func (o NotificationCenterMapOutput) ToNotificationCenterMapOutput() NotificationCenterMapOutput {
	return o
}

func (o NotificationCenterMapOutput) ToNotificationCenterMapOutputWithContext(ctx context.Context) NotificationCenterMapOutput {
	return o
}

func (o NotificationCenterMapOutput) MapIndex(k pulumi.StringInput) NotificationCenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationCenter {
		return vs[0].(map[string]*NotificationCenter)[vs[1].(string)]
	}).(NotificationCenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationCenterInput)(nil)).Elem(), &NotificationCenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationCenterArrayInput)(nil)).Elem(), NotificationCenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationCenterMapInput)(nil)).Elem(), NotificationCenterMap{})
	pulumi.RegisterOutputType(NotificationCenterOutput{})
	pulumi.RegisterOutputType(NotificationCenterArrayOutput{})
	pulumi.RegisterOutputType(NotificationCenterMapOutput{})
}
