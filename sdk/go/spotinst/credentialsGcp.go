// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spotinst

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Spotinst credential GCP resource.
type CredentialsGcp struct {
	pulumi.CustomResourceState

	// The ID of the account associated with your token.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// .
	AuthProviderX509CertUrl pulumi.StringOutput `pulumi:"authProviderX509CertUrl"`
	// Authentication uri.
	AuthUri pulumi.StringOutput `pulumi:"authUri"`
	// Email associated with service account.
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Client ID of service account.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
	ClientX509CertUrl pulumi.StringOutput `pulumi:"clientX509CertUrl"`
	// Private key of JSON key created during prerequisites stage.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// Private key ID of JSON key created during prerequisites stage.
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// Name of project in GCP.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Token uri.
	TokenUri pulumi.StringOutput `pulumi:"tokenUri"`
	// Valid values - service_account.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCredentialsGcp registers a new resource with the given unique name, arguments, and options.
func NewCredentialsGcp(ctx *pulumi.Context,
	name string, args *CredentialsGcpArgs, opts ...pulumi.ResourceOption) (*CredentialsGcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AuthProviderX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'AuthProviderX509CertUrl'")
	}
	if args.AuthUri == nil {
		return nil, errors.New("invalid value for required argument 'AuthUri'")
	}
	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientX509CertUrl == nil {
		return nil, errors.New("invalid value for required argument 'ClientX509CertUrl'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TokenUri == nil {
		return nil, errors.New("invalid value for required argument 'TokenUri'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialsGcp
	err := ctx.RegisterResource("spotinst:index/credentialsGcp:CredentialsGcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialsGcp gets an existing CredentialsGcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialsGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialsGcpState, opts ...pulumi.ResourceOption) (*CredentialsGcp, error) {
	var resource CredentialsGcp
	err := ctx.ReadResource("spotinst:index/credentialsGcp:CredentialsGcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialsGcp resources.
type credentialsGcpState struct {
	// The ID of the account associated with your token.
	AccountId *string `pulumi:"accountId"`
	// .
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	// Authentication uri.
	AuthUri *string `pulumi:"authUri"`
	// Email associated with service account.
	ClientEmail *string `pulumi:"clientEmail"`
	// Client ID of service account.
	ClientId *string `pulumi:"clientId"`
	// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
	ClientX509CertUrl *string `pulumi:"clientX509CertUrl"`
	// Private key of JSON key created during prerequisites stage.
	PrivateKey *string `pulumi:"privateKey"`
	// Private key ID of JSON key created during prerequisites stage.
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// Name of project in GCP.
	ProjectId *string `pulumi:"projectId"`
	// Token uri.
	TokenUri *string `pulumi:"tokenUri"`
	// Valid values - service_account.
	Type *string `pulumi:"type"`
}

type CredentialsGcpState struct {
	// The ID of the account associated with your token.
	AccountId pulumi.StringPtrInput
	// .
	AuthProviderX509CertUrl pulumi.StringPtrInput
	// Authentication uri.
	AuthUri pulumi.StringPtrInput
	// Email associated with service account.
	ClientEmail pulumi.StringPtrInput
	// Client ID of service account.
	ClientId pulumi.StringPtrInput
	// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
	ClientX509CertUrl pulumi.StringPtrInput
	// Private key of JSON key created during prerequisites stage.
	PrivateKey pulumi.StringPtrInput
	// Private key ID of JSON key created during prerequisites stage.
	PrivateKeyId pulumi.StringPtrInput
	// Name of project in GCP.
	ProjectId pulumi.StringPtrInput
	// Token uri.
	TokenUri pulumi.StringPtrInput
	// Valid values - service_account.
	Type pulumi.StringPtrInput
}

func (CredentialsGcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialsGcpState)(nil)).Elem()
}

type credentialsGcpArgs struct {
	// The ID of the account associated with your token.
	AccountId string `pulumi:"accountId"`
	// .
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Authentication uri.
	AuthUri string `pulumi:"authUri"`
	// Email associated with service account.
	ClientEmail string `pulumi:"clientEmail"`
	// Client ID of service account.
	ClientId string `pulumi:"clientId"`
	// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// Private key of JSON key created during prerequisites stage.
	PrivateKey string `pulumi:"privateKey"`
	// Private key ID of JSON key created during prerequisites stage.
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Name of project in GCP.
	ProjectId string `pulumi:"projectId"`
	// Token uri.
	TokenUri string `pulumi:"tokenUri"`
	// Valid values - service_account.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CredentialsGcp resource.
type CredentialsGcpArgs struct {
	// The ID of the account associated with your token.
	AccountId pulumi.StringInput
	// .
	AuthProviderX509CertUrl pulumi.StringInput
	// Authentication uri.
	AuthUri pulumi.StringInput
	// Email associated with service account.
	ClientEmail pulumi.StringInput
	// Client ID of service account.
	ClientId pulumi.StringInput
	// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
	ClientX509CertUrl pulumi.StringInput
	// Private key of JSON key created during prerequisites stage.
	PrivateKey pulumi.StringInput
	// Private key ID of JSON key created during prerequisites stage.
	PrivateKeyId pulumi.StringInput
	// Name of project in GCP.
	ProjectId pulumi.StringInput
	// Token uri.
	TokenUri pulumi.StringInput
	// Valid values - service_account.
	Type pulumi.StringInput
}

func (CredentialsGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialsGcpArgs)(nil)).Elem()
}

type CredentialsGcpInput interface {
	pulumi.Input

	ToCredentialsGcpOutput() CredentialsGcpOutput
	ToCredentialsGcpOutputWithContext(ctx context.Context) CredentialsGcpOutput
}

func (*CredentialsGcp) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialsGcp)(nil)).Elem()
}

func (i *CredentialsGcp) ToCredentialsGcpOutput() CredentialsGcpOutput {
	return i.ToCredentialsGcpOutputWithContext(context.Background())
}

func (i *CredentialsGcp) ToCredentialsGcpOutputWithContext(ctx context.Context) CredentialsGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsGcpOutput)
}

// CredentialsGcpArrayInput is an input type that accepts CredentialsGcpArray and CredentialsGcpArrayOutput values.
// You can construct a concrete instance of `CredentialsGcpArrayInput` via:
//
//	CredentialsGcpArray{ CredentialsGcpArgs{...} }
type CredentialsGcpArrayInput interface {
	pulumi.Input

	ToCredentialsGcpArrayOutput() CredentialsGcpArrayOutput
	ToCredentialsGcpArrayOutputWithContext(context.Context) CredentialsGcpArrayOutput
}

type CredentialsGcpArray []CredentialsGcpInput

func (CredentialsGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialsGcp)(nil)).Elem()
}

func (i CredentialsGcpArray) ToCredentialsGcpArrayOutput() CredentialsGcpArrayOutput {
	return i.ToCredentialsGcpArrayOutputWithContext(context.Background())
}

func (i CredentialsGcpArray) ToCredentialsGcpArrayOutputWithContext(ctx context.Context) CredentialsGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsGcpArrayOutput)
}

// CredentialsGcpMapInput is an input type that accepts CredentialsGcpMap and CredentialsGcpMapOutput values.
// You can construct a concrete instance of `CredentialsGcpMapInput` via:
//
//	CredentialsGcpMap{ "key": CredentialsGcpArgs{...} }
type CredentialsGcpMapInput interface {
	pulumi.Input

	ToCredentialsGcpMapOutput() CredentialsGcpMapOutput
	ToCredentialsGcpMapOutputWithContext(context.Context) CredentialsGcpMapOutput
}

type CredentialsGcpMap map[string]CredentialsGcpInput

func (CredentialsGcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialsGcp)(nil)).Elem()
}

func (i CredentialsGcpMap) ToCredentialsGcpMapOutput() CredentialsGcpMapOutput {
	return i.ToCredentialsGcpMapOutputWithContext(context.Background())
}

func (i CredentialsGcpMap) ToCredentialsGcpMapOutputWithContext(ctx context.Context) CredentialsGcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialsGcpMapOutput)
}

type CredentialsGcpOutput struct{ *pulumi.OutputState }

func (CredentialsGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialsGcp)(nil)).Elem()
}

func (o CredentialsGcpOutput) ToCredentialsGcpOutput() CredentialsGcpOutput {
	return o
}

func (o CredentialsGcpOutput) ToCredentialsGcpOutputWithContext(ctx context.Context) CredentialsGcpOutput {
	return o
}

// The ID of the account associated with your token.
func (o CredentialsGcpOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// .
func (o CredentialsGcpOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Authentication uri.
func (o CredentialsGcpOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.AuthUri }).(pulumi.StringOutput)
}

// Email associated with service account.
func (o CredentialsGcpOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client ID of service account.
func (o CredentialsGcpOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Should be in following format - "https://www.googleapis.com/robot/v1/metadata/x509/".
func (o CredentialsGcpOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// Private key of JSON key created during prerequisites stage.
func (o CredentialsGcpOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key ID of JSON key created during prerequisites stage.
func (o CredentialsGcpOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Name of project in GCP.
func (o CredentialsGcpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Token uri.
func (o CredentialsGcpOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.TokenUri }).(pulumi.StringOutput)
}

// Valid values - service_account.
func (o CredentialsGcpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialsGcp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CredentialsGcpArrayOutput struct{ *pulumi.OutputState }

func (CredentialsGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialsGcp)(nil)).Elem()
}

func (o CredentialsGcpArrayOutput) ToCredentialsGcpArrayOutput() CredentialsGcpArrayOutput {
	return o
}

func (o CredentialsGcpArrayOutput) ToCredentialsGcpArrayOutputWithContext(ctx context.Context) CredentialsGcpArrayOutput {
	return o
}

func (o CredentialsGcpArrayOutput) Index(i pulumi.IntInput) CredentialsGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialsGcp {
		return vs[0].([]*CredentialsGcp)[vs[1].(int)]
	}).(CredentialsGcpOutput)
}

type CredentialsGcpMapOutput struct{ *pulumi.OutputState }

func (CredentialsGcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialsGcp)(nil)).Elem()
}

func (o CredentialsGcpMapOutput) ToCredentialsGcpMapOutput() CredentialsGcpMapOutput {
	return o
}

func (o CredentialsGcpMapOutput) ToCredentialsGcpMapOutputWithContext(ctx context.Context) CredentialsGcpMapOutput {
	return o
}

func (o CredentialsGcpMapOutput) MapIndex(k pulumi.StringInput) CredentialsGcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialsGcp {
		return vs[0].(map[string]*CredentialsGcp)[vs[1].(string)]
	}).(CredentialsGcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialsGcpInput)(nil)).Elem(), &CredentialsGcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialsGcpArrayInput)(nil)).Elem(), CredentialsGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialsGcpMapInput)(nil)).Elem(), CredentialsGcpMap{})
	pulumi.RegisterOutputType(CredentialsGcpOutput{})
	pulumi.RegisterOutputType(CredentialsGcpArrayOutput{})
	pulumi.RegisterOutputType(CredentialsGcpMapOutput{})
}
