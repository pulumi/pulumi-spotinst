// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package multai

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst Multai Listener.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/multai_listener.html.markdown.
type Listener struct {
	s *pulumi.ResourceState
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOpt) (*Listener, error) {
	if args == nil || args.BalancerId == nil {
		return nil, errors.New("missing required argument 'BalancerId'")
	}
	if args == nil || args.Port == nil {
		return nil, errors.New("missing required argument 'Port'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["balancerId"] = nil
		inputs["port"] = nil
		inputs["protocol"] = nil
		inputs["tags"] = nil
		inputs["tlsConfig"] = nil
	} else {
		inputs["balancerId"] = args.BalancerId
		inputs["port"] = args.Port
		inputs["protocol"] = args.Protocol
		inputs["tags"] = args.Tags
		inputs["tlsConfig"] = args.TlsConfig
	}
	s, err := ctx.RegisterResource("spotinst:multai/listener:Listener", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Listener{s: s}, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ListenerState, opts ...pulumi.ResourceOpt) (*Listener, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["balancerId"] = state.BalancerId
		inputs["port"] = state.Port
		inputs["protocol"] = state.Protocol
		inputs["tags"] = state.Tags
		inputs["tlsConfig"] = state.TlsConfig
	}
	s, err := ctx.ReadResource("spotinst:multai/listener:Listener", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Listener{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Listener) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Listener) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the balancer.
func (r *Listener) BalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["balancerId"])
}

// The port on which the load balancer is listening.
func (r *Listener) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

// The protocol to allow connections to the load balancer.
func (r *Listener) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// A list of key:value paired tags.
func (r *Listener) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Describes the TLSConfig configuration.
func (r *Listener) TlsConfig() *pulumi.Output {
	return r.s.State["tlsConfig"]
}

// Input properties used for looking up and filtering Listener resources.
type ListenerState struct {
	// The ID of the balancer.
	BalancerId interface{}
	// The port on which the load balancer is listening.
	Port interface{}
	// The protocol to allow connections to the load balancer.
	Protocol interface{}
	// A list of key:value paired tags.
	Tags interface{}
	// Describes the TLSConfig configuration.
	TlsConfig interface{}
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// The ID of the balancer.
	BalancerId interface{}
	// The port on which the load balancer is listening.
	Port interface{}
	// The protocol to allow connections to the load balancer.
	Protocol interface{}
	// A list of key:value paired tags.
	Tags interface{}
	// Describes the TLSConfig configuration.
	TlsConfig interface{}
}
