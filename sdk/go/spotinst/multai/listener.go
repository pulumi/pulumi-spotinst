// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package multai

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Spotinst Multai Listener.
type Listener struct {
	pulumi.CustomResourceState

	// The ID of the balancer.
	BalancerId pulumi.StringOutput `pulumi:"balancerId"`
	// The port on which the load balancer is listening.
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocol to allow connections to the load balancer.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// A list of key:value paired tags.
	Tags ListenerTagArrayOutput `pulumi:"tags"`
	// Describes the TLSConfig configuration.
	TlsConfig ListenerTlsConfigPtrOutput `pulumi:"tlsConfig"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil || args.BalancerId == nil {
		return nil, errors.New("missing required argument 'BalancerId'")
	}
	if args == nil || args.Port == nil {
		return nil, errors.New("missing required argument 'Port'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil {
		args = &ListenerArgs{}
	}
	var resource Listener
	err := ctx.RegisterResource("spotinst:multai/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("spotinst:multai/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// The ID of the balancer.
	BalancerId *string `pulumi:"balancerId"`
	// The port on which the load balancer is listening.
	Port *int `pulumi:"port"`
	// The protocol to allow connections to the load balancer.
	Protocol *string `pulumi:"protocol"`
	// A list of key:value paired tags.
	Tags []ListenerTag `pulumi:"tags"`
	// Describes the TLSConfig configuration.
	TlsConfig *ListenerTlsConfig `pulumi:"tlsConfig"`
}

type ListenerState struct {
	// The ID of the balancer.
	BalancerId pulumi.StringPtrInput
	// The port on which the load balancer is listening.
	Port pulumi.IntPtrInput
	// The protocol to allow connections to the load balancer.
	Protocol pulumi.StringPtrInput
	// A list of key:value paired tags.
	Tags ListenerTagArrayInput
	// Describes the TLSConfig configuration.
	TlsConfig ListenerTlsConfigPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// The ID of the balancer.
	BalancerId string `pulumi:"balancerId"`
	// The port on which the load balancer is listening.
	Port int `pulumi:"port"`
	// The protocol to allow connections to the load balancer.
	Protocol string `pulumi:"protocol"`
	// A list of key:value paired tags.
	Tags []ListenerTag `pulumi:"tags"`
	// Describes the TLSConfig configuration.
	TlsConfig *ListenerTlsConfig `pulumi:"tlsConfig"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// The ID of the balancer.
	BalancerId pulumi.StringInput
	// The port on which the load balancer is listening.
	Port pulumi.IntInput
	// The protocol to allow connections to the load balancer.
	Protocol pulumi.StringInput
	// A list of key:value paired tags.
	Tags ListenerTagArrayInput
	// Describes the TLSConfig configuration.
	TlsConfig ListenerTlsConfigPtrInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}
