// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package multai

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst Multai Balancer.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/multai_balancer.html.markdown.
type Balancer struct {
	s *pulumi.ResourceState
}

// NewBalancer registers a new resource with the given unique name, arguments, and options.
func NewBalancer(ctx *pulumi.Context,
	name string, args *BalancerArgs, opts ...pulumi.ResourceOpt) (*Balancer, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["connectionTimeouts"] = nil
		inputs["dnsCnameAliases"] = nil
		inputs["name"] = nil
		inputs["scheme"] = nil
		inputs["tags"] = nil
	} else {
		inputs["connectionTimeouts"] = args.ConnectionTimeouts
		inputs["dnsCnameAliases"] = args.DnsCnameAliases
		inputs["name"] = args.Name
		inputs["scheme"] = args.Scheme
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("spotinst:multai/balancer:Balancer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Balancer{s: s}, nil
}

// GetBalancer gets an existing Balancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBalancer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BalancerState, opts ...pulumi.ResourceOpt) (*Balancer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connectionTimeouts"] = state.ConnectionTimeouts
		inputs["dnsCnameAliases"] = state.DnsCnameAliases
		inputs["name"] = state.Name
		inputs["scheme"] = state.Scheme
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("spotinst:multai/balancer:Balancer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Balancer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Balancer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Balancer) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Balancer) ConnectionTimeouts() pulumi.Output {
	return r.s.State["connectionTimeouts"]
}

func (r *Balancer) DnsCnameAliases() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["dnsCnameAliases"])
}

// The balancer name. May contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
func (r *Balancer) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Balancer) Scheme() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheme"])
}

// A list of key:value paired tags.
func (r *Balancer) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Balancer resources.
type BalancerState struct {
	ConnectionTimeouts interface{}
	DnsCnameAliases interface{}
	// The balancer name. May contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name interface{}
	Scheme interface{}
	// A list of key:value paired tags.
	Tags interface{}
}

// The set of arguments for constructing a Balancer resource.
type BalancerArgs struct {
	ConnectionTimeouts interface{}
	DnsCnameAliases interface{}
	// The balancer name. May contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
	Name interface{}
	Scheme interface{}
	// A list of key:value paired tags.
	Tags interface{}
}
