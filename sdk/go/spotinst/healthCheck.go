// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package spotinst

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Spotinst Health Check resource.
//
//
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/health_check.html.markdown.
type HealthCheck struct {
	pulumi.CustomResourceState

	// Describes the check to execute.
	Check HealthCheckCheckPtrOutput `pulumi:"check"`
	// The name of the health check.
	Name         pulumi.StringOutput `pulumi:"name"`
	ProxyAddress pulumi.StringOutput `pulumi:"proxyAddress"`
	ProxyPort    pulumi.IntPtrOutput `pulumi:"proxyPort"`
	// The ID of the resource to check.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewHealthCheck(ctx *pulumi.Context,
	name string, args *HealthCheckArgs, opts ...pulumi.ResourceOption) (*HealthCheck, error) {
	if args == nil || args.ProxyAddress == nil {
		return nil, errors.New("missing required argument 'ProxyAddress'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil {
		args = &HealthCheckArgs{}
	}
	var resource HealthCheck
	err := ctx.RegisterResource("spotinst:index/healthCheck:HealthCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthCheck gets an existing HealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthCheckState, opts ...pulumi.ResourceOption) (*HealthCheck, error) {
	var resource HealthCheck
	err := ctx.ReadResource("spotinst:index/healthCheck:HealthCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthCheck resources.
type healthCheckState struct {
	// Describes the check to execute.
	Check *HealthCheckCheck `pulumi:"check"`
	// The name of the health check.
	Name         *string `pulumi:"name"`
	ProxyAddress *string `pulumi:"proxyAddress"`
	ProxyPort    *int    `pulumi:"proxyPort"`
	// The ID of the resource to check.
	ResourceId *string `pulumi:"resourceId"`
}

type HealthCheckState struct {
	// Describes the check to execute.
	Check HealthCheckCheckPtrInput
	// The name of the health check.
	Name         pulumi.StringPtrInput
	ProxyAddress pulumi.StringPtrInput
	ProxyPort    pulumi.IntPtrInput
	// The ID of the resource to check.
	ResourceId pulumi.StringPtrInput
}

func (HealthCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckState)(nil)).Elem()
}

type healthCheckArgs struct {
	// Describes the check to execute.
	Check *HealthCheckCheck `pulumi:"check"`
	// The name of the health check.
	Name         *string `pulumi:"name"`
	ProxyAddress string  `pulumi:"proxyAddress"`
	ProxyPort    *int    `pulumi:"proxyPort"`
	// The ID of the resource to check.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a HealthCheck resource.
type HealthCheckArgs struct {
	// Describes the check to execute.
	Check HealthCheckCheckPtrInput
	// The name of the health check.
	Name         pulumi.StringPtrInput
	ProxyAddress pulumi.StringInput
	ProxyPort    pulumi.IntPtrInput
	// The ID of the resource to check.
	ResourceId pulumi.StringInput
}

func (HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthCheckArgs)(nil)).Elem()
}
