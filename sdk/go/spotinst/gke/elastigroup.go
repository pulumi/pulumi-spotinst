// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gke

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst Elastigroup GKE resource. Please see [Importing a GKE cluster](https://api.spotinst.com/elastigroup-for-google-cloud/tutorials/import-a-gke-cluster-as-an-elastigroup/) for detailed information.
// 
// 
// ## Diff-suppressed Parameters
// 
// The following parameters are created remotely and imported. The diffs have been suppressed in order to maintain plan legibility. You may update the values of these
// imported parameters by defining them in your template with your desired new value (including null values).
// 
// * `backendServices`
//     * `serviceName`
//     * `locationType`
//     * `scheme`
//     * `namedPort`
//         * `portName`
//         * `ports`
// * `labels`
//     * `key`
//     * `value`
// * `metadata`
//     * `key`
//     * `value`
// * `tags`
//     * `key`
//     * `value`
// * `serviceAccount`
// * `ipForwarding`
// * `fallbackToOd`
// * `subnets`
//     * `region`
//     * `subnetName`
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/elastigroup_gke.html.markdown.
type Elastigroup struct {
	s *pulumi.ResourceState
}

// NewElastigroup registers a new resource with the given unique name, arguments, and options.
func NewElastigroup(ctx *pulumi.Context,
	name string, args *ElastigroupArgs, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	if args == nil || args.ClusterZoneName == nil {
		return nil, errors.New("missing required argument 'ClusterZoneName'")
	}
	if args == nil || args.DesiredCapacity == nil {
		return nil, errors.New("missing required argument 'DesiredCapacity'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendServices"] = nil
		inputs["clusterId"] = nil
		inputs["clusterZoneName"] = nil
		inputs["desiredCapacity"] = nil
		inputs["disks"] = nil
		inputs["drainingTimeout"] = nil
		inputs["fallbackToOndemand"] = nil
		inputs["gpu"] = nil
		inputs["instanceTypesCustoms"] = nil
		inputs["instanceTypesOndemand"] = nil
		inputs["instanceTypesPreemptibles"] = nil
		inputs["integrationDockerSwarm"] = nil
		inputs["integrationGke"] = nil
		inputs["ipForwarding"] = nil
		inputs["labels"] = nil
		inputs["maxSize"] = nil
		inputs["metadatas"] = nil
		inputs["minSize"] = nil
		inputs["name"] = nil
		inputs["networkInterfaces"] = nil
		inputs["nodeImage"] = nil
		inputs["ondemandCount"] = nil
		inputs["preemptiblePercentage"] = nil
		inputs["scalingDownPolicies"] = nil
		inputs["scalingUpPolicies"] = nil
		inputs["serviceAccount"] = nil
		inputs["shutdownScript"] = nil
		inputs["startupScript"] = nil
		inputs["tags"] = nil
	} else {
		inputs["backendServices"] = args.BackendServices
		inputs["clusterId"] = args.ClusterId
		inputs["clusterZoneName"] = args.ClusterZoneName
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["disks"] = args.Disks
		inputs["drainingTimeout"] = args.DrainingTimeout
		inputs["fallbackToOndemand"] = args.FallbackToOndemand
		inputs["gpu"] = args.Gpu
		inputs["instanceTypesCustoms"] = args.InstanceTypesCustoms
		inputs["instanceTypesOndemand"] = args.InstanceTypesOndemand
		inputs["instanceTypesPreemptibles"] = args.InstanceTypesPreemptibles
		inputs["integrationDockerSwarm"] = args.IntegrationDockerSwarm
		inputs["integrationGke"] = args.IntegrationGke
		inputs["ipForwarding"] = args.IpForwarding
		inputs["labels"] = args.Labels
		inputs["maxSize"] = args.MaxSize
		inputs["metadatas"] = args.Metadatas
		inputs["minSize"] = args.MinSize
		inputs["name"] = args.Name
		inputs["networkInterfaces"] = args.NetworkInterfaces
		inputs["nodeImage"] = args.NodeImage
		inputs["ondemandCount"] = args.OndemandCount
		inputs["preemptiblePercentage"] = args.PreemptiblePercentage
		inputs["scalingDownPolicies"] = args.ScalingDownPolicies
		inputs["scalingUpPolicies"] = args.ScalingUpPolicies
		inputs["serviceAccount"] = args.ServiceAccount
		inputs["shutdownScript"] = args.ShutdownScript
		inputs["startupScript"] = args.StartupScript
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("spotinst:gke/elastigroup:Elastigroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// GetElastigroup gets an existing Elastigroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElastigroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ElastigroupState, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendServices"] = state.BackendServices
		inputs["clusterId"] = state.ClusterId
		inputs["clusterZoneName"] = state.ClusterZoneName
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["disks"] = state.Disks
		inputs["drainingTimeout"] = state.DrainingTimeout
		inputs["fallbackToOndemand"] = state.FallbackToOndemand
		inputs["gpu"] = state.Gpu
		inputs["instanceTypesCustoms"] = state.InstanceTypesCustoms
		inputs["instanceTypesOndemand"] = state.InstanceTypesOndemand
		inputs["instanceTypesPreemptibles"] = state.InstanceTypesPreemptibles
		inputs["integrationDockerSwarm"] = state.IntegrationDockerSwarm
		inputs["integrationGke"] = state.IntegrationGke
		inputs["ipForwarding"] = state.IpForwarding
		inputs["labels"] = state.Labels
		inputs["maxSize"] = state.MaxSize
		inputs["metadatas"] = state.Metadatas
		inputs["minSize"] = state.MinSize
		inputs["name"] = state.Name
		inputs["networkInterfaces"] = state.NetworkInterfaces
		inputs["nodeImage"] = state.NodeImage
		inputs["ondemandCount"] = state.OndemandCount
		inputs["preemptiblePercentage"] = state.PreemptiblePercentage
		inputs["scalingDownPolicies"] = state.ScalingDownPolicies
		inputs["scalingUpPolicies"] = state.ScalingUpPolicies
		inputs["serviceAccount"] = state.ServiceAccount
		inputs["shutdownScript"] = state.ShutdownScript
		inputs["startupScript"] = state.StartupScript
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("spotinst:gke/elastigroup:Elastigroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Elastigroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Elastigroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *Elastigroup) BackendServices() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["backendServices"])
}

// The name of the GKE cluster you wish to import.
func (r *Elastigroup) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// The zone where the cluster is hosted.
func (r *Elastigroup) ClusterZoneName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterZoneName"])
}

func (r *Elastigroup) DesiredCapacity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

func (r *Elastigroup) Disks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["disks"])
}

func (r *Elastigroup) DrainingTimeout() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["drainingTimeout"])
}

func (r *Elastigroup) FallbackToOndemand() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["fallbackToOndemand"])
}

func (r *Elastigroup) Gpu() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["gpu"])
}

func (r *Elastigroup) InstanceTypesCustoms() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceTypesCustoms"])
}

func (r *Elastigroup) InstanceTypesOndemand() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceTypesOndemand"])
}

func (r *Elastigroup) InstanceTypesPreemptibles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceTypesPreemptibles"])
}

func (r *Elastigroup) IntegrationDockerSwarm() pulumi.Output {
	return r.s.State["integrationDockerSwarm"]
}

func (r *Elastigroup) IntegrationGke() pulumi.Output {
	return r.s.State["integrationGke"]
}

func (r *Elastigroup) IpForwarding() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["ipForwarding"])
}

func (r *Elastigroup) Labels() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["labels"])
}

func (r *Elastigroup) MaxSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxSize"])
}

func (r *Elastigroup) Metadatas() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["metadatas"])
}

func (r *Elastigroup) MinSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minSize"])
}

func (r *Elastigroup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *Elastigroup) NetworkInterfaces() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkInterfaces"])
}

// The image that will be used for the node VMs. Possible values: COS, UBUNTU.
func (r *Elastigroup) NodeImage() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nodeImage"])
}

func (r *Elastigroup) OndemandCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ondemandCount"])
}

func (r *Elastigroup) PreemptiblePercentage() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["preemptiblePercentage"])
}

func (r *Elastigroup) ScalingDownPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["scalingDownPolicies"])
}

func (r *Elastigroup) ScalingUpPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["scalingUpPolicies"])
}

func (r *Elastigroup) ServiceAccount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccount"])
}

func (r *Elastigroup) ShutdownScript() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["shutdownScript"])
}

func (r *Elastigroup) StartupScript() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["startupScript"])
}

func (r *Elastigroup) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Elastigroup resources.
type ElastigroupState struct {
	BackendServices interface{}
	// The name of the GKE cluster you wish to import.
	ClusterId interface{}
	// The zone where the cluster is hosted.
	ClusterZoneName interface{}
	DesiredCapacity interface{}
	Disks interface{}
	DrainingTimeout interface{}
	FallbackToOndemand interface{}
	Gpu interface{}
	InstanceTypesCustoms interface{}
	InstanceTypesOndemand interface{}
	InstanceTypesPreemptibles interface{}
	IntegrationDockerSwarm interface{}
	IntegrationGke interface{}
	IpForwarding interface{}
	Labels interface{}
	MaxSize interface{}
	Metadatas interface{}
	MinSize interface{}
	Name interface{}
	NetworkInterfaces interface{}
	// The image that will be used for the node VMs. Possible values: COS, UBUNTU.
	NodeImage interface{}
	OndemandCount interface{}
	PreemptiblePercentage interface{}
	ScalingDownPolicies interface{}
	ScalingUpPolicies interface{}
	ServiceAccount interface{}
	ShutdownScript interface{}
	StartupScript interface{}
	Tags interface{}
}

// The set of arguments for constructing a Elastigroup resource.
type ElastigroupArgs struct {
	BackendServices interface{}
	// The name of the GKE cluster you wish to import.
	ClusterId interface{}
	// The zone where the cluster is hosted.
	ClusterZoneName interface{}
	DesiredCapacity interface{}
	Disks interface{}
	DrainingTimeout interface{}
	FallbackToOndemand interface{}
	Gpu interface{}
	InstanceTypesCustoms interface{}
	InstanceTypesOndemand interface{}
	InstanceTypesPreemptibles interface{}
	IntegrationDockerSwarm interface{}
	IntegrationGke interface{}
	IpForwarding interface{}
	Labels interface{}
	MaxSize interface{}
	Metadatas interface{}
	MinSize interface{}
	Name interface{}
	NetworkInterfaces interface{}
	// The image that will be used for the node VMs. Possible values: COS, UBUNTU.
	NodeImage interface{}
	OndemandCount interface{}
	PreemptiblePercentage interface{}
	ScalingDownPolicies interface{}
	ScalingUpPolicies interface{}
	ServiceAccount interface{}
	ShutdownScript interface{}
	StartupScript interface{}
	Tags interface{}
}
