// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gke

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst Ocean GKE import resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_gke_import.html.markdown.
type OceanImport struct {
	s *pulumi.ResourceState
}

// NewOceanImport registers a new resource with the given unique name, arguments, and options.
func NewOceanImport(ctx *pulumi.Context,
	name string, args *OceanImportArgs, opts ...pulumi.ResourceOpt) (*OceanImport, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Whitelists == nil {
		return nil, errors.New("missing required argument 'Whitelists'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendServices"] = nil
		inputs["clusterName"] = nil
		inputs["desiredCapacity"] = nil
		inputs["location"] = nil
		inputs["maxSize"] = nil
		inputs["minSize"] = nil
		inputs["whitelists"] = nil
	} else {
		inputs["backendServices"] = args.BackendServices
		inputs["clusterName"] = args.ClusterName
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["location"] = args.Location
		inputs["maxSize"] = args.MaxSize
		inputs["minSize"] = args.MinSize
		inputs["whitelists"] = args.Whitelists
	}
	inputs["clusterControllerId"] = nil
	s, err := ctx.RegisterResource("spotinst:gke/oceanImport:OceanImport", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanImport{s: s}, nil
}

// GetOceanImport gets an existing OceanImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanImport(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OceanImportState, opts ...pulumi.ResourceOpt) (*OceanImport, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendServices"] = state.BackendServices
		inputs["clusterControllerId"] = state.ClusterControllerId
		inputs["clusterName"] = state.ClusterName
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["location"] = state.Location
		inputs["maxSize"] = state.MaxSize
		inputs["minSize"] = state.MinSize
		inputs["whitelists"] = state.Whitelists
	}
	s, err := ctx.ReadResource("spotinst:gke/oceanImport:OceanImport", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanImport{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OceanImport) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OceanImport) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Describes the backend service configurations.
func (r *OceanImport) BackendServices() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["backendServices"])
}

func (r *OceanImport) ClusterControllerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterControllerId"])
}

// The GKE cluster name.
func (r *OceanImport) ClusterName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterName"])
}

// The number of instances to launch and maintain in the cluster. 
func (r *OceanImport) DesiredCapacity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

// The zone the master cluster is located in. 
func (r *OceanImport) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The upper limit of instances the cluster can scale up to.
func (r *OceanImport) MaxSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxSize"])
}

// The lower limit of instances the cluster can scale down to.
func (r *OceanImport) MinSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minSize"])
}

func (r *OceanImport) Whitelists() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["whitelists"])
}

// Input properties used for looking up and filtering OceanImport resources.
type OceanImportState struct {
	// Describes the backend service configurations.
	BackendServices interface{}
	ClusterControllerId interface{}
	// The GKE cluster name.
	ClusterName interface{}
	// The number of instances to launch and maintain in the cluster. 
	DesiredCapacity interface{}
	// The zone the master cluster is located in. 
	Location interface{}
	// The upper limit of instances the cluster can scale up to.
	MaxSize interface{}
	// The lower limit of instances the cluster can scale down to.
	MinSize interface{}
	Whitelists interface{}
}

// The set of arguments for constructing a OceanImport resource.
type OceanImportArgs struct {
	// Describes the backend service configurations.
	BackendServices interface{}
	// The GKE cluster name.
	ClusterName interface{}
	// The number of instances to launch and maintain in the cluster. 
	DesiredCapacity interface{}
	// The zone the master cluster is located in. 
	Location interface{}
	// The upper limit of instances the cluster can scale up to.
	MaxSize interface{}
	// The lower limit of instances the cluster can scale down to.
	MinSize interface{}
	Whitelists interface{}
}
