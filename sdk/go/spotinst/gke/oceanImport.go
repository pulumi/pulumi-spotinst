// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gke

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Spotinst Ocean GKE import resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v2/go/spotinst/gke"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := gke.NewOceanImport(ctx, "example", &gke.OceanImportArgs{
// 			BackendServices: gke.OceanImportBackendServiceArray{
// 				&gke.OceanImportBackendServiceArgs{
// 					LocationType: pulumi.String("regional"),
// 					NamedPorts: gke.OceanImportBackendServiceNamedPortArray{
// 						&gke.OceanImportBackendServiceNamedPortArgs{
// 							Name: pulumi.String("http"),
// 							Ports: pulumi.StringArray{
// 								pulumi.String("80"),
// 								pulumi.String("8080"),
// 							},
// 						},
// 					},
// 					Scheme:      pulumi.String("INTERNAL"),
// 					ServiceName: pulumi.String("example-backend-service"),
// 				},
// 			},
// 			ClusterName:     pulumi.String("example-cluster-name"),
// 			DesiredCapacity: pulumi.Int(0),
// 			Location:        pulumi.String("us-central1-a"),
// 			MaxSize:         pulumi.Int(2),
// 			MinSize:         pulumi.Int(0),
// 			Whitelists: pulumi.StringArray{
// 				pulumi.String("n1-standard-1"),
// 				pulumi.String("n1-standard-2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ctx.Export("controllerClusterId", spotinst_ocean_gke_import.Ocean-gke-example.Cluster_controller_id)
// 		return nil
// 	})
// }
// ```
// ## scheduled task
//
// * `scheduledTask` - (Optional) Set scheduling object.
//     * `shutdownHours` - (Optional) Set shutdown hours for cluster object.
//         * `isEnabled` - (Optional)  Flag to enable / disable the shutdown hours.
//                                      Example: True
//         * `timeWindows` - (Required) Set time windows for shutdown hours. specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59. Time windows should not overlap. required on cluster.scheduling.isEnabled = True. API Times are in UTC
//                                       Example: Fri:15:30-Wed:14:30
//     * `tasks` - (Optional) The scheduling tasks for the cluster.
//         * `isEnabled` - (Required)  Describes whether the task is enabled. When true the task should run when false it should not run. Required for cluster.scheduling.tasks object.
//         * `cronExpression` - (Required) A valid cron expression. For example : " * * * * * ".The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of ‘frequency’ or ‘cronExpression’ should be used at a time. Required for cluster.scheduling.tasks object
//                                          Example: 0 1 * * *
//         * `taskType` - (Required) Valid values: "clusterRoll". Required for cluster.scheduling.tasks object.
//         * `batchSizePercentage` - (Optional)  Value in % to set size of batch in roll. Valid values are 0-100
//                                                 Example: 20.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// <a id="autoscaler"></a>
// ## Autoscaler
//
// * `autoscaler` - (Optional) The Ocean Kubernetes Autoscaler object.
// * `isEnabled` - (Optional, Default: `true`) Enable the Ocean Kubernetes Autoscaler.
// * `isAutoConfig` - (Optional, Default: `true`) Automatically configure and optimize headroom resources.
// * `autoHeadroomPercentage` - Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
// * `cooldown` - (Optional, Default: `null`) Cooldown period between scaling actions.
// * `headroom` - (Optional) Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
// * `cpuPerUnit` - (Optional) Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
// * `memoryPerUnit` - (Optional) Optionally configure the amount of memory (MiB) to allocate the headroom.
// * `gpuPerUnit` - (Optional) How much GPU allocate for headroom unit.
// * `numOfUnits` - (Optional) The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
// * `down` - (Optional) Auto Scaling scale down operations.
// * `evaluationPeriods` - (Optional, Default: `null`) The number of evaluation periods that should accumulate before a scale down action takes place.
// * `maxScaleDownPercentage` - (Optional) Would represent the maximum % to scale-down. Number between 1-100.
// * `resourceLimits` - (Optional) Optionally set upper and lower bounds on the resource usage of the cluster.
// * `maxVcpu` - (Optional) The maximum cpu in vCpu units that can be allocated to the cluster.
// * `maxMemoryGib` - (Optional) The maximum memory in GiB units that can be allocated to the cluster.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
type OceanImport struct {
	pulumi.CustomResourceState

	Autoscaler OceanImportAutoscalerOutput `pulumi:"autoscaler"`
	// Describes the backend service configurations.
	BackendServices     OceanImportBackendServiceArrayOutput `pulumi:"backendServices"`
	ClusterControllerId pulumi.StringOutput                  `pulumi:"clusterControllerId"`
	// The GKE cluster name.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// The zone the master cluster is located in.
	Location pulumi.StringOutput `pulumi:"location"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize        pulumi.IntOutput                    `pulumi:"minSize"`
	ScheduledTasks OceanImportScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	Whitelists     pulumi.StringArrayOutput            `pulumi:"whitelists"`
}

// NewOceanImport registers a new resource with the given unique name, arguments, and options.
func NewOceanImport(ctx *pulumi.Context,
	name string, args *OceanImportArgs, opts ...pulumi.ResourceOption) (*OceanImport, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil {
		args = &OceanImportArgs{}
	}
	var resource OceanImport
	err := ctx.RegisterResource("spotinst:gke/oceanImport:OceanImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOceanImport gets an existing OceanImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanImportState, opts ...pulumi.ResourceOption) (*OceanImport, error) {
	var resource OceanImport
	err := ctx.ReadResource("spotinst:gke/oceanImport:OceanImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OceanImport resources.
type oceanImportState struct {
	Autoscaler *OceanImportAutoscaler `pulumi:"autoscaler"`
	// Describes the backend service configurations.
	BackendServices     []OceanImportBackendService `pulumi:"backendServices"`
	ClusterControllerId *string                     `pulumi:"clusterControllerId"`
	// The GKE cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The zone the master cluster is located in.
	Location *string `pulumi:"location"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize        *int                       `pulumi:"minSize"`
	ScheduledTasks []OceanImportScheduledTask `pulumi:"scheduledTasks"`
	Whitelists     []string                   `pulumi:"whitelists"`
}

type OceanImportState struct {
	Autoscaler OceanImportAutoscalerPtrInput
	// Describes the backend service configurations.
	BackendServices     OceanImportBackendServiceArrayInput
	ClusterControllerId pulumi.StringPtrInput
	// The GKE cluster name.
	ClusterName pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The zone the master cluster is located in.
	Location pulumi.StringPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize        pulumi.IntPtrInput
	ScheduledTasks OceanImportScheduledTaskArrayInput
	Whitelists     pulumi.StringArrayInput
}

func (OceanImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanImportState)(nil)).Elem()
}

type oceanImportArgs struct {
	Autoscaler *OceanImportAutoscaler `pulumi:"autoscaler"`
	// Describes the backend service configurations.
	BackendServices []OceanImportBackendService `pulumi:"backendServices"`
	// The GKE cluster name.
	ClusterName string `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The zone the master cluster is located in.
	Location string `pulumi:"location"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize        *int                       `pulumi:"minSize"`
	ScheduledTasks []OceanImportScheduledTask `pulumi:"scheduledTasks"`
	Whitelists     []string                   `pulumi:"whitelists"`
}

// The set of arguments for constructing a OceanImport resource.
type OceanImportArgs struct {
	Autoscaler OceanImportAutoscalerPtrInput
	// Describes the backend service configurations.
	BackendServices OceanImportBackendServiceArrayInput
	// The GKE cluster name.
	ClusterName pulumi.StringInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The zone the master cluster is located in.
	Location pulumi.StringInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize        pulumi.IntPtrInput
	ScheduledTasks OceanImportScheduledTaskArrayInput
	Whitelists     pulumi.StringArrayInput
}

func (OceanImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanImportArgs)(nil)).Elem()
}

type OceanImportInput interface {
	pulumi.Input

	ToOceanImportOutput() OceanImportOutput
	ToOceanImportOutputWithContext(ctx context.Context) OceanImportOutput
}

func (OceanImport) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanImport)(nil)).Elem()
}

func (i OceanImport) ToOceanImportOutput() OceanImportOutput {
	return i.ToOceanImportOutputWithContext(context.Background())
}

func (i OceanImport) ToOceanImportOutputWithContext(ctx context.Context) OceanImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanImportOutput)
}

type OceanImportOutput struct {
	*pulumi.OutputState
}

func (OceanImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanImportOutput)(nil)).Elem()
}

func (o OceanImportOutput) ToOceanImportOutput() OceanImportOutput {
	return o
}

func (o OceanImportOutput) ToOceanImportOutputWithContext(ctx context.Context) OceanImportOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OceanImportOutput{})
}
