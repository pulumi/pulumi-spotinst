// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gke

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a custom Spotinst Ocean GKE Launch Spec Import resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_gke_launch_spec_import.html.markdown.
type OceanLaunchSpecImport struct {
	s *pulumi.ResourceState
}

// NewOceanLaunchSpecImport registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpecImport(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecImportArgs, opts ...pulumi.ResourceOpt) (*OceanLaunchSpecImport, error) {
	if args == nil || args.NodePoolName == nil {
		return nil, errors.New("missing required argument 'NodePoolName'")
	}
	if args == nil || args.OceanId == nil {
		return nil, errors.New("missing required argument 'OceanId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["nodePoolName"] = nil
		inputs["oceanId"] = nil
	} else {
		inputs["nodePoolName"] = args.NodePoolName
		inputs["oceanId"] = args.OceanId
	}
	s, err := ctx.RegisterResource("spotinst:gke/oceanLaunchSpecImport:OceanLaunchSpecImport", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpecImport{s: s}, nil
}

// GetOceanLaunchSpecImport gets an existing OceanLaunchSpecImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpecImport(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OceanLaunchSpecImportState, opts ...pulumi.ResourceOpt) (*OceanLaunchSpecImport, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["nodePoolName"] = state.NodePoolName
		inputs["oceanId"] = state.OceanId
	}
	s, err := ctx.ReadResource("spotinst:gke/oceanLaunchSpecImport:OceanLaunchSpecImport", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpecImport{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OceanLaunchSpecImport) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OceanLaunchSpecImport) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The node pool you wish to use in your launchSpec.
func (r *OceanLaunchSpecImport) NodePoolName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nodePoolName"])
}

// The Ocean cluster ID required for launchSpec create. 
func (r *OceanLaunchSpecImport) OceanId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["oceanId"])
}

// Input properties used for looking up and filtering OceanLaunchSpecImport resources.
type OceanLaunchSpecImportState struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName interface{}
	// The Ocean cluster ID required for launchSpec create. 
	OceanId interface{}
}

// The set of arguments for constructing a OceanLaunchSpecImport resource.
type OceanLaunchSpecImportArgs struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName interface{}
	// The Ocean cluster ID required for launchSpec create. 
	OceanId interface{}
}
