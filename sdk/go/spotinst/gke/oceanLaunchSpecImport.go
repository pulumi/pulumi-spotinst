// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package gke

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a custom Spotinst Ocean GKE Launch Spec Import resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_gke_launch_spec_import.html.markdown.
type OceanLaunchSpecImport struct {
	pulumi.CustomResourceState

	// The node pool you wish to use in your launchSpec.
	NodePoolName pulumi.StringOutput `pulumi:"nodePoolName"`
	// The Ocean cluster ID required for launchSpec create.
	OceanId pulumi.StringOutput `pulumi:"oceanId"`
}

// NewOceanLaunchSpecImport registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpecImport(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecImportArgs, opts ...pulumi.ResourceOption) (*OceanLaunchSpecImport, error) {
	if args == nil || args.NodePoolName == nil {
		return nil, errors.New("missing required argument 'NodePoolName'")
	}
	if args == nil || args.OceanId == nil {
		return nil, errors.New("missing required argument 'OceanId'")
	}
	if args == nil {
		args = &OceanLaunchSpecImportArgs{}
	}
	var resource OceanLaunchSpecImport
	err := ctx.RegisterResource("spotinst:gke/oceanLaunchSpecImport:OceanLaunchSpecImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOceanLaunchSpecImport gets an existing OceanLaunchSpecImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpecImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanLaunchSpecImportState, opts ...pulumi.ResourceOption) (*OceanLaunchSpecImport, error) {
	var resource OceanLaunchSpecImport
	err := ctx.ReadResource("spotinst:gke/oceanLaunchSpecImport:OceanLaunchSpecImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OceanLaunchSpecImport resources.
type oceanLaunchSpecImportState struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName *string `pulumi:"nodePoolName"`
	// The Ocean cluster ID required for launchSpec create.
	OceanId *string `pulumi:"oceanId"`
}

type OceanLaunchSpecImportState struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName pulumi.StringPtrInput
	// The Ocean cluster ID required for launchSpec create.
	OceanId pulumi.StringPtrInput
}

func (OceanLaunchSpecImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecImportState)(nil)).Elem()
}

type oceanLaunchSpecImportArgs struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName string `pulumi:"nodePoolName"`
	// The Ocean cluster ID required for launchSpec create.
	OceanId string `pulumi:"oceanId"`
}

// The set of arguments for constructing a OceanLaunchSpecImport resource.
type OceanLaunchSpecImportArgs struct {
	// The node pool you wish to use in your launchSpec.
	NodePoolName pulumi.StringInput
	// The Ocean cluster ID required for launchSpec create.
	OceanId pulumi.StringInput
}

func (OceanLaunchSpecImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecImportArgs)(nil)).Elem()
}
