// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gke

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a custom Spotinst Ocean GKE Launch Spec resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_gke_launch_spec.html.markdown.
type OceanLaunchSpec struct {
	s *pulumi.ResourceState
}

// NewOceanLaunchSpec registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpec(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecArgs, opts ...pulumi.ResourceOpt) (*OceanLaunchSpec, error) {
	if args == nil || args.Metadatas == nil {
		return nil, errors.New("missing required argument 'Metadatas'")
	}
	if args == nil || args.OceanId == nil {
		return nil, errors.New("missing required argument 'OceanId'")
	}
	if args == nil || args.SourceImage == nil {
		return nil, errors.New("missing required argument 'SourceImage'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["labels"] = nil
		inputs["metadatas"] = nil
		inputs["oceanId"] = nil
		inputs["sourceImage"] = nil
		inputs["taints"] = nil
	} else {
		inputs["labels"] = args.Labels
		inputs["metadatas"] = args.Metadatas
		inputs["oceanId"] = args.OceanId
		inputs["sourceImage"] = args.SourceImage
		inputs["taints"] = args.Taints
	}
	s, err := ctx.RegisterResource("spotinst:gke/oceanLaunchSpec:OceanLaunchSpec", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpec{s: s}, nil
}

// GetOceanLaunchSpec gets an existing OceanLaunchSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpec(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OceanLaunchSpecState, opts ...pulumi.ResourceOpt) (*OceanLaunchSpec, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["labels"] = state.Labels
		inputs["metadatas"] = state.Metadatas
		inputs["oceanId"] = state.OceanId
		inputs["sourceImage"] = state.SourceImage
		inputs["taints"] = state.Taints
	}
	s, err := ctx.ReadResource("spotinst:gke/oceanLaunchSpec:OceanLaunchSpec", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpec{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OceanLaunchSpec) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OceanLaunchSpec) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Cluster's labels.
func (r *OceanLaunchSpec) Labels() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["labels"])
}

// Cluster's metadata.
func (r *OceanLaunchSpec) Metadatas() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["metadatas"])
}

// The Ocean cluster ID required for launchSpec create. 
func (r *OceanLaunchSpec) OceanId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oceanId"])
}

// Image URL.
func (r *OceanLaunchSpec) SourceImage() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceImage"])
}

// Cluster's taints.
func (r *OceanLaunchSpec) Taints() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["taints"])
}

// Input properties used for looking up and filtering OceanLaunchSpec resources.
type OceanLaunchSpecState struct {
	// Cluster's labels.
	Labels interface{}
	// Cluster's metadata.
	Metadatas interface{}
	// The Ocean cluster ID required for launchSpec create. 
	OceanId interface{}
	// Image URL.
	SourceImage interface{}
	// Cluster's taints.
	Taints interface{}
}

// The set of arguments for constructing a OceanLaunchSpec resource.
type OceanLaunchSpecArgs struct {
	// Cluster's labels.
	Labels interface{}
	// Cluster's metadata.
	Metadatas interface{}
	// The Ocean cluster ID required for launchSpec create. 
	OceanId interface{}
	// Image URL.
	SourceImage interface{}
	// Cluster's taints.
	Taints interface{}
}
