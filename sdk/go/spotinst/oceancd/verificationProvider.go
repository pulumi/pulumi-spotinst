// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceancd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spotinst OceanCD Verfification Provider resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/oceancd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oceancd.NewVerificationProvider(ctx, "example", &oceancd.VerificationProviderArgs{
//				Name: pulumi.String("test-verification-provider"),
//				ClusterIds: pulumi.StringArray{
//					pulumi.String("Example-Cluster-Id-1"),
//					pulumi.String("Example-Cluster-Id-2"),
//					pulumi.String("Example-Cluster-Id-3"),
//				},
//				Datadog: &oceancd.VerificationProviderDatadogArgs{
//					Address: pulumi.String("1024"),
//					ApiKey:  pulumi.String("512"),
//					AppKey:  pulumi.String("0"),
//				},
//				CloudWatch: &oceancd.VerificationProviderCloudWatchArgs{
//					IamArn: pulumi.String("arn:aws:iam::123456789012:role/GetMetricData"),
//				},
//				Prometheus: &oceancd.VerificationProviderPrometheusArgs{
//					Address: pulumi.String("http://localhost:9090"),
//				},
//				NewRelic: &oceancd.VerificationProviderNewRelicArgs{
//					PersonalApiKey:   pulumi.String("AUO32RN20oUMD-40283"),
//					AccountId:        pulumi.String("account-0189718"),
//					Region:           pulumi.String("eu"),
//					BaseUrlRest:      pulumi.String("https://rest.api.newrelic.eu"),
//					BaseUrlNerdGraph: pulumi.String("https://nerdgraph.api.newrelic.eu"),
//				},
//				Jenkins: &oceancd.VerificationProviderJenkinsArgs{
//					BaseUrl:  pulumi.String("http://localhost:9090"),
//					Username: pulumi.String("test-user"),
//					ApiToken: pulumi.String("AbCDeeFFGG"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VerificationProvider struct {
	pulumi.CustomResourceState

	// Specify the credentials for CloudWatch verification provider.
	CloudWatch VerificationProviderCloudWatchPtrOutput `pulumi:"cloudWatch"`
	// List of cluster IDs that this Verification Provider will be applied to.
	ClusterIds pulumi.StringArrayOutput `pulumi:"clusterIds"`
	// Specify the credentials for datadog verification provider.
	Datadog VerificationProviderDatadogPtrOutput `pulumi:"datadog"`
	// Specify the credentials for Jenkins verification provider.
	Jenkins VerificationProviderJenkinsPtrOutput `pulumi:"jenkins"`
	// Identifier name for Ocean CD Verification Provider. Must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify the credentials for New Relic verification provider.
	NewRelic VerificationProviderNewRelicPtrOutput `pulumi:"newRelic"`
	// Specify the credentials for prometheus verification provider.
	Prometheus VerificationProviderPrometheusPtrOutput `pulumi:"prometheus"`
}

// NewVerificationProvider registers a new resource with the given unique name, arguments, and options.
func NewVerificationProvider(ctx *pulumi.Context,
	name string, args *VerificationProviderArgs, opts ...pulumi.ResourceOption) (*VerificationProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterIds == nil {
		return nil, errors.New("invalid value for required argument 'ClusterIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VerificationProvider
	err := ctx.RegisterResource("spotinst:oceancd/verificationProvider:VerificationProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVerificationProvider gets an existing VerificationProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVerificationProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VerificationProviderState, opts ...pulumi.ResourceOption) (*VerificationProvider, error) {
	var resource VerificationProvider
	err := ctx.ReadResource("spotinst:oceancd/verificationProvider:VerificationProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VerificationProvider resources.
type verificationProviderState struct {
	// Specify the credentials for CloudWatch verification provider.
	CloudWatch *VerificationProviderCloudWatch `pulumi:"cloudWatch"`
	// List of cluster IDs that this Verification Provider will be applied to.
	ClusterIds []string `pulumi:"clusterIds"`
	// Specify the credentials for datadog verification provider.
	Datadog *VerificationProviderDatadog `pulumi:"datadog"`
	// Specify the credentials for Jenkins verification provider.
	Jenkins *VerificationProviderJenkins `pulumi:"jenkins"`
	// Identifier name for Ocean CD Verification Provider. Must be unique.
	Name *string `pulumi:"name"`
	// Specify the credentials for New Relic verification provider.
	NewRelic *VerificationProviderNewRelic `pulumi:"newRelic"`
	// Specify the credentials for prometheus verification provider.
	Prometheus *VerificationProviderPrometheus `pulumi:"prometheus"`
}

type VerificationProviderState struct {
	// Specify the credentials for CloudWatch verification provider.
	CloudWatch VerificationProviderCloudWatchPtrInput
	// List of cluster IDs that this Verification Provider will be applied to.
	ClusterIds pulumi.StringArrayInput
	// Specify the credentials for datadog verification provider.
	Datadog VerificationProviderDatadogPtrInput
	// Specify the credentials for Jenkins verification provider.
	Jenkins VerificationProviderJenkinsPtrInput
	// Identifier name for Ocean CD Verification Provider. Must be unique.
	Name pulumi.StringPtrInput
	// Specify the credentials for New Relic verification provider.
	NewRelic VerificationProviderNewRelicPtrInput
	// Specify the credentials for prometheus verification provider.
	Prometheus VerificationProviderPrometheusPtrInput
}

func (VerificationProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*verificationProviderState)(nil)).Elem()
}

type verificationProviderArgs struct {
	// Specify the credentials for CloudWatch verification provider.
	CloudWatch *VerificationProviderCloudWatch `pulumi:"cloudWatch"`
	// List of cluster IDs that this Verification Provider will be applied to.
	ClusterIds []string `pulumi:"clusterIds"`
	// Specify the credentials for datadog verification provider.
	Datadog *VerificationProviderDatadog `pulumi:"datadog"`
	// Specify the credentials for Jenkins verification provider.
	Jenkins *VerificationProviderJenkins `pulumi:"jenkins"`
	// Identifier name for Ocean CD Verification Provider. Must be unique.
	Name *string `pulumi:"name"`
	// Specify the credentials for New Relic verification provider.
	NewRelic *VerificationProviderNewRelic `pulumi:"newRelic"`
	// Specify the credentials for prometheus verification provider.
	Prometheus *VerificationProviderPrometheus `pulumi:"prometheus"`
}

// The set of arguments for constructing a VerificationProvider resource.
type VerificationProviderArgs struct {
	// Specify the credentials for CloudWatch verification provider.
	CloudWatch VerificationProviderCloudWatchPtrInput
	// List of cluster IDs that this Verification Provider will be applied to.
	ClusterIds pulumi.StringArrayInput
	// Specify the credentials for datadog verification provider.
	Datadog VerificationProviderDatadogPtrInput
	// Specify the credentials for Jenkins verification provider.
	Jenkins VerificationProviderJenkinsPtrInput
	// Identifier name for Ocean CD Verification Provider. Must be unique.
	Name pulumi.StringPtrInput
	// Specify the credentials for New Relic verification provider.
	NewRelic VerificationProviderNewRelicPtrInput
	// Specify the credentials for prometheus verification provider.
	Prometheus VerificationProviderPrometheusPtrInput
}

func (VerificationProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*verificationProviderArgs)(nil)).Elem()
}

type VerificationProviderInput interface {
	pulumi.Input

	ToVerificationProviderOutput() VerificationProviderOutput
	ToVerificationProviderOutputWithContext(ctx context.Context) VerificationProviderOutput
}

func (*VerificationProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**VerificationProvider)(nil)).Elem()
}

func (i *VerificationProvider) ToVerificationProviderOutput() VerificationProviderOutput {
	return i.ToVerificationProviderOutputWithContext(context.Background())
}

func (i *VerificationProvider) ToVerificationProviderOutputWithContext(ctx context.Context) VerificationProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerificationProviderOutput)
}

// VerificationProviderArrayInput is an input type that accepts VerificationProviderArray and VerificationProviderArrayOutput values.
// You can construct a concrete instance of `VerificationProviderArrayInput` via:
//
//	VerificationProviderArray{ VerificationProviderArgs{...} }
type VerificationProviderArrayInput interface {
	pulumi.Input

	ToVerificationProviderArrayOutput() VerificationProviderArrayOutput
	ToVerificationProviderArrayOutputWithContext(context.Context) VerificationProviderArrayOutput
}

type VerificationProviderArray []VerificationProviderInput

func (VerificationProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VerificationProvider)(nil)).Elem()
}

func (i VerificationProviderArray) ToVerificationProviderArrayOutput() VerificationProviderArrayOutput {
	return i.ToVerificationProviderArrayOutputWithContext(context.Background())
}

func (i VerificationProviderArray) ToVerificationProviderArrayOutputWithContext(ctx context.Context) VerificationProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerificationProviderArrayOutput)
}

// VerificationProviderMapInput is an input type that accepts VerificationProviderMap and VerificationProviderMapOutput values.
// You can construct a concrete instance of `VerificationProviderMapInput` via:
//
//	VerificationProviderMap{ "key": VerificationProviderArgs{...} }
type VerificationProviderMapInput interface {
	pulumi.Input

	ToVerificationProviderMapOutput() VerificationProviderMapOutput
	ToVerificationProviderMapOutputWithContext(context.Context) VerificationProviderMapOutput
}

type VerificationProviderMap map[string]VerificationProviderInput

func (VerificationProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VerificationProvider)(nil)).Elem()
}

func (i VerificationProviderMap) ToVerificationProviderMapOutput() VerificationProviderMapOutput {
	return i.ToVerificationProviderMapOutputWithContext(context.Background())
}

func (i VerificationProviderMap) ToVerificationProviderMapOutputWithContext(ctx context.Context) VerificationProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerificationProviderMapOutput)
}

type VerificationProviderOutput struct{ *pulumi.OutputState }

func (VerificationProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerificationProvider)(nil)).Elem()
}

func (o VerificationProviderOutput) ToVerificationProviderOutput() VerificationProviderOutput {
	return o
}

func (o VerificationProviderOutput) ToVerificationProviderOutputWithContext(ctx context.Context) VerificationProviderOutput {
	return o
}

// Specify the credentials for CloudWatch verification provider.
func (o VerificationProviderOutput) CloudWatch() VerificationProviderCloudWatchPtrOutput {
	return o.ApplyT(func(v *VerificationProvider) VerificationProviderCloudWatchPtrOutput { return v.CloudWatch }).(VerificationProviderCloudWatchPtrOutput)
}

// List of cluster IDs that this Verification Provider will be applied to.
func (o VerificationProviderOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VerificationProvider) pulumi.StringArrayOutput { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

// Specify the credentials for datadog verification provider.
func (o VerificationProviderOutput) Datadog() VerificationProviderDatadogPtrOutput {
	return o.ApplyT(func(v *VerificationProvider) VerificationProviderDatadogPtrOutput { return v.Datadog }).(VerificationProviderDatadogPtrOutput)
}

// Specify the credentials for Jenkins verification provider.
func (o VerificationProviderOutput) Jenkins() VerificationProviderJenkinsPtrOutput {
	return o.ApplyT(func(v *VerificationProvider) VerificationProviderJenkinsPtrOutput { return v.Jenkins }).(VerificationProviderJenkinsPtrOutput)
}

// Identifier name for Ocean CD Verification Provider. Must be unique.
func (o VerificationProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VerificationProvider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify the credentials for New Relic verification provider.
func (o VerificationProviderOutput) NewRelic() VerificationProviderNewRelicPtrOutput {
	return o.ApplyT(func(v *VerificationProvider) VerificationProviderNewRelicPtrOutput { return v.NewRelic }).(VerificationProviderNewRelicPtrOutput)
}

// Specify the credentials for prometheus verification provider.
func (o VerificationProviderOutput) Prometheus() VerificationProviderPrometheusPtrOutput {
	return o.ApplyT(func(v *VerificationProvider) VerificationProviderPrometheusPtrOutput { return v.Prometheus }).(VerificationProviderPrometheusPtrOutput)
}

type VerificationProviderArrayOutput struct{ *pulumi.OutputState }

func (VerificationProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VerificationProvider)(nil)).Elem()
}

func (o VerificationProviderArrayOutput) ToVerificationProviderArrayOutput() VerificationProviderArrayOutput {
	return o
}

func (o VerificationProviderArrayOutput) ToVerificationProviderArrayOutputWithContext(ctx context.Context) VerificationProviderArrayOutput {
	return o
}

func (o VerificationProviderArrayOutput) Index(i pulumi.IntInput) VerificationProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VerificationProvider {
		return vs[0].([]*VerificationProvider)[vs[1].(int)]
	}).(VerificationProviderOutput)
}

type VerificationProviderMapOutput struct{ *pulumi.OutputState }

func (VerificationProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VerificationProvider)(nil)).Elem()
}

func (o VerificationProviderMapOutput) ToVerificationProviderMapOutput() VerificationProviderMapOutput {
	return o
}

func (o VerificationProviderMapOutput) ToVerificationProviderMapOutputWithContext(ctx context.Context) VerificationProviderMapOutput {
	return o
}

func (o VerificationProviderMapOutput) MapIndex(k pulumi.StringInput) VerificationProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VerificationProvider {
		return vs[0].(map[string]*VerificationProvider)[vs[1].(string)]
	}).(VerificationProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VerificationProviderInput)(nil)).Elem(), &VerificationProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerificationProviderArrayInput)(nil)).Elem(), VerificationProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerificationProviderMapInput)(nil)).Elem(), VerificationProviderMap{})
	pulumi.RegisterOutputType(VerificationProviderOutput{})
	pulumi.RegisterOutputType(VerificationProviderArrayOutput{})
	pulumi.RegisterOutputType(VerificationProviderMapOutput{})
}
