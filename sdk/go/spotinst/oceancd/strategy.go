// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceancd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spotinst OceanCD Strategy resource.
type Strategy struct {
	pulumi.CustomResourceState

	// Represents Canary strategy. Cannot be defined when Rolling object is defined.
	Canary StrategyCanaryPtrOutput `pulumi:"canary"`
	// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
	Rolling      StrategyRollingPtrOutput `pulumi:"rolling"`
	StrategyName pulumi.StringOutput      `pulumi:"strategyName"`
}

// NewStrategy registers a new resource with the given unique name, arguments, and options.
func NewStrategy(ctx *pulumi.Context,
	name string, args *StrategyArgs, opts ...pulumi.ResourceOption) (*Strategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StrategyName == nil {
		return nil, errors.New("invalid value for required argument 'StrategyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Strategy
	err := ctx.RegisterResource("spotinst:oceancd/strategy:Strategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStrategy gets an existing Strategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StrategyState, opts ...pulumi.ResourceOption) (*Strategy, error) {
	var resource Strategy
	err := ctx.ReadResource("spotinst:oceancd/strategy:Strategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Strategy resources.
type strategyState struct {
	// Represents Canary strategy. Cannot be defined when Rolling object is defined.
	Canary *StrategyCanary `pulumi:"canary"`
	// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
	Rolling      *StrategyRolling `pulumi:"rolling"`
	StrategyName *string          `pulumi:"strategyName"`
}

type StrategyState struct {
	// Represents Canary strategy. Cannot be defined when Rolling object is defined.
	Canary StrategyCanaryPtrInput
	// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
	Rolling      StrategyRollingPtrInput
	StrategyName pulumi.StringPtrInput
}

func (StrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*strategyState)(nil)).Elem()
}

type strategyArgs struct {
	// Represents Canary strategy. Cannot be defined when Rolling object is defined.
	Canary *StrategyCanary `pulumi:"canary"`
	// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
	Rolling      *StrategyRolling `pulumi:"rolling"`
	StrategyName string           `pulumi:"strategyName"`
}

// The set of arguments for constructing a Strategy resource.
type StrategyArgs struct {
	// Represents Canary strategy. Cannot be defined when Rolling object is defined.
	Canary StrategyCanaryPtrInput
	// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
	Rolling      StrategyRollingPtrInput
	StrategyName pulumi.StringInput
}

func (StrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*strategyArgs)(nil)).Elem()
}

type StrategyInput interface {
	pulumi.Input

	ToStrategyOutput() StrategyOutput
	ToStrategyOutputWithContext(ctx context.Context) StrategyOutput
}

func (*Strategy) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (i *Strategy) ToStrategyOutput() StrategyOutput {
	return i.ToStrategyOutputWithContext(context.Background())
}

func (i *Strategy) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyOutput)
}

// StrategyArrayInput is an input type that accepts StrategyArray and StrategyArrayOutput values.
// You can construct a concrete instance of `StrategyArrayInput` via:
//
//	StrategyArray{ StrategyArgs{...} }
type StrategyArrayInput interface {
	pulumi.Input

	ToStrategyArrayOutput() StrategyArrayOutput
	ToStrategyArrayOutputWithContext(context.Context) StrategyArrayOutput
}

type StrategyArray []StrategyInput

func (StrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Strategy)(nil)).Elem()
}

func (i StrategyArray) ToStrategyArrayOutput() StrategyArrayOutput {
	return i.ToStrategyArrayOutputWithContext(context.Background())
}

func (i StrategyArray) ToStrategyArrayOutputWithContext(ctx context.Context) StrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyArrayOutput)
}

// StrategyMapInput is an input type that accepts StrategyMap and StrategyMapOutput values.
// You can construct a concrete instance of `StrategyMapInput` via:
//
//	StrategyMap{ "key": StrategyArgs{...} }
type StrategyMapInput interface {
	pulumi.Input

	ToStrategyMapOutput() StrategyMapOutput
	ToStrategyMapOutputWithContext(context.Context) StrategyMapOutput
}

type StrategyMap map[string]StrategyInput

func (StrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Strategy)(nil)).Elem()
}

func (i StrategyMap) ToStrategyMapOutput() StrategyMapOutput {
	return i.ToStrategyMapOutputWithContext(context.Background())
}

func (i StrategyMap) ToStrategyMapOutputWithContext(ctx context.Context) StrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyMapOutput)
}

type StrategyOutput struct{ *pulumi.OutputState }

func (StrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Strategy)(nil)).Elem()
}

func (o StrategyOutput) ToStrategyOutput() StrategyOutput {
	return o
}

func (o StrategyOutput) ToStrategyOutputWithContext(ctx context.Context) StrategyOutput {
	return o
}

// Represents Canary strategy. Cannot be defined when Rolling object is defined.
func (o StrategyOutput) Canary() StrategyCanaryPtrOutput {
	return o.ApplyT(func(v *Strategy) StrategyCanaryPtrOutput { return v.Canary }).(StrategyCanaryPtrOutput)
}

// Represents Rolling Update strategy. Cannot be defined when Canary object is defined.
func (o StrategyOutput) Rolling() StrategyRollingPtrOutput {
	return o.ApplyT(func(v *Strategy) StrategyRollingPtrOutput { return v.Rolling }).(StrategyRollingPtrOutput)
}

func (o StrategyOutput) StrategyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Strategy) pulumi.StringOutput { return v.StrategyName }).(pulumi.StringOutput)
}

type StrategyArrayOutput struct{ *pulumi.OutputState }

func (StrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Strategy)(nil)).Elem()
}

func (o StrategyArrayOutput) ToStrategyArrayOutput() StrategyArrayOutput {
	return o
}

func (o StrategyArrayOutput) ToStrategyArrayOutputWithContext(ctx context.Context) StrategyArrayOutput {
	return o
}

func (o StrategyArrayOutput) Index(i pulumi.IntInput) StrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Strategy {
		return vs[0].([]*Strategy)[vs[1].(int)]
	}).(StrategyOutput)
}

type StrategyMapOutput struct{ *pulumi.OutputState }

func (StrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Strategy)(nil)).Elem()
}

func (o StrategyMapOutput) ToStrategyMapOutput() StrategyMapOutput {
	return o
}

func (o StrategyMapOutput) ToStrategyMapOutputWithContext(ctx context.Context) StrategyMapOutput {
	return o
}

func (o StrategyMapOutput) MapIndex(k pulumi.StringInput) StrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Strategy {
		return vs[0].(map[string]*Strategy)[vs[1].(string)]
	}).(StrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyInput)(nil)).Elem(), &Strategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyArrayInput)(nil)).Elem(), StrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyMapInput)(nil)).Elem(), StrategyMap{})
	pulumi.RegisterOutputType(StrategyOutput{})
	pulumi.RegisterOutputType(StrategyArrayOutput{})
	pulumi.RegisterOutputType(StrategyMapOutput{})
}
