// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceancd

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spotinst OceanCD Rollout Spec resource.
type RolloutSpec struct {
	pulumi.CustomResourceState

	// Holds information on how to react when failure happens.
	FailurePolicy RolloutSpecFailurePolicyPtrOutput `pulumi:"failurePolicy"`
	// Identifier name for Ocean CD Rollout Spec. Must be unique
	RolloutSpecName pulumi.StringOutput `pulumi:"rolloutSpecName"`
	// Represents the SpotDeployment selector.
	SpotDeployment RolloutSpecSpotDeploymentPtrOutput `pulumi:"spotDeployment"`
	// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
	SpotDeployments RolloutSpecSpotDeploymentArrayOutput `pulumi:"spotDeployments"`
	// Determines the Ocean CD strategy
	Strategy RolloutSpecStrategyOutput `pulumi:"strategy"`
	// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
	Traffic RolloutSpecTrafficPtrOutput `pulumi:"traffic"`
}

// NewRolloutSpec registers a new resource with the given unique name, arguments, and options.
func NewRolloutSpec(ctx *pulumi.Context,
	name string, args *RolloutSpecArgs, opts ...pulumi.ResourceOption) (*RolloutSpec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RolloutSpecName == nil {
		return nil, errors.New("invalid value for required argument 'RolloutSpecName'")
	}
	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RolloutSpec
	err := ctx.RegisterResource("spotinst:oceancd/rolloutSpec:RolloutSpec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolloutSpec gets an existing RolloutSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolloutSpec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutSpecState, opts ...pulumi.ResourceOption) (*RolloutSpec, error) {
	var resource RolloutSpec
	err := ctx.ReadResource("spotinst:oceancd/rolloutSpec:RolloutSpec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolloutSpec resources.
type rolloutSpecState struct {
	// Holds information on how to react when failure happens.
	FailurePolicy *RolloutSpecFailurePolicy `pulumi:"failurePolicy"`
	// Identifier name for Ocean CD Rollout Spec. Must be unique
	RolloutSpecName *string `pulumi:"rolloutSpecName"`
	// Represents the SpotDeployment selector.
	SpotDeployment *RolloutSpecSpotDeployment `pulumi:"spotDeployment"`
	// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
	SpotDeployments []RolloutSpecSpotDeployment `pulumi:"spotDeployments"`
	// Determines the Ocean CD strategy
	Strategy *RolloutSpecStrategy `pulumi:"strategy"`
	// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
	Traffic *RolloutSpecTraffic `pulumi:"traffic"`
}

type RolloutSpecState struct {
	// Holds information on how to react when failure happens.
	FailurePolicy RolloutSpecFailurePolicyPtrInput
	// Identifier name for Ocean CD Rollout Spec. Must be unique
	RolloutSpecName pulumi.StringPtrInput
	// Represents the SpotDeployment selector.
	SpotDeployment RolloutSpecSpotDeploymentPtrInput
	// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
	SpotDeployments RolloutSpecSpotDeploymentArrayInput
	// Determines the Ocean CD strategy
	Strategy RolloutSpecStrategyPtrInput
	// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
	Traffic RolloutSpecTrafficPtrInput
}

func (RolloutSpecState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutSpecState)(nil)).Elem()
}

type rolloutSpecArgs struct {
	// Holds information on how to react when failure happens.
	FailurePolicy *RolloutSpecFailurePolicy `pulumi:"failurePolicy"`
	// Identifier name for Ocean CD Rollout Spec. Must be unique
	RolloutSpecName string `pulumi:"rolloutSpecName"`
	// Represents the SpotDeployment selector.
	SpotDeployment *RolloutSpecSpotDeployment `pulumi:"spotDeployment"`
	// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
	SpotDeployments []RolloutSpecSpotDeployment `pulumi:"spotDeployments"`
	// Determines the Ocean CD strategy
	Strategy RolloutSpecStrategy `pulumi:"strategy"`
	// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
	Traffic *RolloutSpecTraffic `pulumi:"traffic"`
}

// The set of arguments for constructing a RolloutSpec resource.
type RolloutSpecArgs struct {
	// Holds information on how to react when failure happens.
	FailurePolicy RolloutSpecFailurePolicyPtrInput
	// Identifier name for Ocean CD Rollout Spec. Must be unique
	RolloutSpecName pulumi.StringInput
	// Represents the SpotDeployment selector.
	SpotDeployment RolloutSpecSpotDeploymentPtrInput
	// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
	SpotDeployments RolloutSpecSpotDeploymentArrayInput
	// Determines the Ocean CD strategy
	Strategy RolloutSpecStrategyInput
	// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
	Traffic RolloutSpecTrafficPtrInput
}

func (RolloutSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutSpecArgs)(nil)).Elem()
}

type RolloutSpecInput interface {
	pulumi.Input

	ToRolloutSpecOutput() RolloutSpecOutput
	ToRolloutSpecOutputWithContext(ctx context.Context) RolloutSpecOutput
}

func (*RolloutSpec) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutSpec)(nil)).Elem()
}

func (i *RolloutSpec) ToRolloutSpecOutput() RolloutSpecOutput {
	return i.ToRolloutSpecOutputWithContext(context.Background())
}

func (i *RolloutSpec) ToRolloutSpecOutputWithContext(ctx context.Context) RolloutSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutSpecOutput)
}

// RolloutSpecArrayInput is an input type that accepts RolloutSpecArray and RolloutSpecArrayOutput values.
// You can construct a concrete instance of `RolloutSpecArrayInput` via:
//
//	RolloutSpecArray{ RolloutSpecArgs{...} }
type RolloutSpecArrayInput interface {
	pulumi.Input

	ToRolloutSpecArrayOutput() RolloutSpecArrayOutput
	ToRolloutSpecArrayOutputWithContext(context.Context) RolloutSpecArrayOutput
}

type RolloutSpecArray []RolloutSpecInput

func (RolloutSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutSpec)(nil)).Elem()
}

func (i RolloutSpecArray) ToRolloutSpecArrayOutput() RolloutSpecArrayOutput {
	return i.ToRolloutSpecArrayOutputWithContext(context.Background())
}

func (i RolloutSpecArray) ToRolloutSpecArrayOutputWithContext(ctx context.Context) RolloutSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutSpecArrayOutput)
}

// RolloutSpecMapInput is an input type that accepts RolloutSpecMap and RolloutSpecMapOutput values.
// You can construct a concrete instance of `RolloutSpecMapInput` via:
//
//	RolloutSpecMap{ "key": RolloutSpecArgs{...} }
type RolloutSpecMapInput interface {
	pulumi.Input

	ToRolloutSpecMapOutput() RolloutSpecMapOutput
	ToRolloutSpecMapOutputWithContext(context.Context) RolloutSpecMapOutput
}

type RolloutSpecMap map[string]RolloutSpecInput

func (RolloutSpecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutSpec)(nil)).Elem()
}

func (i RolloutSpecMap) ToRolloutSpecMapOutput() RolloutSpecMapOutput {
	return i.ToRolloutSpecMapOutputWithContext(context.Background())
}

func (i RolloutSpecMap) ToRolloutSpecMapOutputWithContext(ctx context.Context) RolloutSpecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutSpecMapOutput)
}

type RolloutSpecOutput struct{ *pulumi.OutputState }

func (RolloutSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutSpec)(nil)).Elem()
}

func (o RolloutSpecOutput) ToRolloutSpecOutput() RolloutSpecOutput {
	return o
}

func (o RolloutSpecOutput) ToRolloutSpecOutputWithContext(ctx context.Context) RolloutSpecOutput {
	return o
}

// Holds information on how to react when failure happens.
func (o RolloutSpecOutput) FailurePolicy() RolloutSpecFailurePolicyPtrOutput {
	return o.ApplyT(func(v *RolloutSpec) RolloutSpecFailurePolicyPtrOutput { return v.FailurePolicy }).(RolloutSpecFailurePolicyPtrOutput)
}

// Identifier name for Ocean CD Rollout Spec. Must be unique
func (o RolloutSpecOutput) RolloutSpecName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutSpec) pulumi.StringOutput { return v.RolloutSpecName }).(pulumi.StringOutput)
}

// Represents the SpotDeployment selector.
func (o RolloutSpecOutput) SpotDeployment() RolloutSpecSpotDeploymentPtrOutput {
	return o.ApplyT(func(v *RolloutSpec) RolloutSpecSpotDeploymentPtrOutput { return v.SpotDeployment }).(RolloutSpecSpotDeploymentPtrOutput)
}

// You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
func (o RolloutSpecOutput) SpotDeployments() RolloutSpecSpotDeploymentArrayOutput {
	return o.ApplyT(func(v *RolloutSpec) RolloutSpecSpotDeploymentArrayOutput { return v.SpotDeployments }).(RolloutSpecSpotDeploymentArrayOutput)
}

// Determines the Ocean CD strategy
func (o RolloutSpecOutput) Strategy() RolloutSpecStrategyOutput {
	return o.ApplyT(func(v *RolloutSpec) RolloutSpecStrategyOutput { return v.Strategy }).(RolloutSpecStrategyOutput)
}

// Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
func (o RolloutSpecOutput) Traffic() RolloutSpecTrafficPtrOutput {
	return o.ApplyT(func(v *RolloutSpec) RolloutSpecTrafficPtrOutput { return v.Traffic }).(RolloutSpecTrafficPtrOutput)
}

type RolloutSpecArrayOutput struct{ *pulumi.OutputState }

func (RolloutSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutSpec)(nil)).Elem()
}

func (o RolloutSpecArrayOutput) ToRolloutSpecArrayOutput() RolloutSpecArrayOutput {
	return o
}

func (o RolloutSpecArrayOutput) ToRolloutSpecArrayOutputWithContext(ctx context.Context) RolloutSpecArrayOutput {
	return o
}

func (o RolloutSpecArrayOutput) Index(i pulumi.IntInput) RolloutSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolloutSpec {
		return vs[0].([]*RolloutSpec)[vs[1].(int)]
	}).(RolloutSpecOutput)
}

type RolloutSpecMapOutput struct{ *pulumi.OutputState }

func (RolloutSpecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutSpec)(nil)).Elem()
}

func (o RolloutSpecMapOutput) ToRolloutSpecMapOutput() RolloutSpecMapOutput {
	return o
}

func (o RolloutSpecMapOutput) ToRolloutSpecMapOutputWithContext(ctx context.Context) RolloutSpecMapOutput {
	return o
}

func (o RolloutSpecMapOutput) MapIndex(k pulumi.StringInput) RolloutSpecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolloutSpec {
		return vs[0].(map[string]*RolloutSpec)[vs[1].(string)]
	}).(RolloutSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutSpecInput)(nil)).Elem(), &RolloutSpec{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutSpecArrayInput)(nil)).Elem(), RolloutSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutSpecMapInput)(nil)).Elem(), RolloutSpecMap{})
	pulumi.RegisterOutputType(RolloutSpecOutput{})
	pulumi.RegisterOutputType(RolloutSpecArrayOutput{})
	pulumi.RegisterOutputType(RolloutSpecMapOutput{})
}
