// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PolicyPolicyContent struct {
	// List of permissions statements.
	Statements []PolicyPolicyContentStatement `pulumi:"statements"`
}

// PolicyPolicyContentInput is an input type that accepts PolicyPolicyContentArgs and PolicyPolicyContentOutput values.
// You can construct a concrete instance of `PolicyPolicyContentInput` via:
//
//	PolicyPolicyContentArgs{...}
type PolicyPolicyContentInput interface {
	pulumi.Input

	ToPolicyPolicyContentOutput() PolicyPolicyContentOutput
	ToPolicyPolicyContentOutputWithContext(context.Context) PolicyPolicyContentOutput
}

type PolicyPolicyContentArgs struct {
	// List of permissions statements.
	Statements PolicyPolicyContentStatementArrayInput `pulumi:"statements"`
}

func (PolicyPolicyContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicyContent)(nil)).Elem()
}

func (i PolicyPolicyContentArgs) ToPolicyPolicyContentOutput() PolicyPolicyContentOutput {
	return i.ToPolicyPolicyContentOutputWithContext(context.Background())
}

func (i PolicyPolicyContentArgs) ToPolicyPolicyContentOutputWithContext(ctx context.Context) PolicyPolicyContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyContentOutput)
}

func (i PolicyPolicyContentArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyPolicyContent] {
	return pulumix.Output[PolicyPolicyContent]{
		OutputState: i.ToPolicyPolicyContentOutputWithContext(ctx).OutputState,
	}
}

// PolicyPolicyContentArrayInput is an input type that accepts PolicyPolicyContentArray and PolicyPolicyContentArrayOutput values.
// You can construct a concrete instance of `PolicyPolicyContentArrayInput` via:
//
//	PolicyPolicyContentArray{ PolicyPolicyContentArgs{...} }
type PolicyPolicyContentArrayInput interface {
	pulumi.Input

	ToPolicyPolicyContentArrayOutput() PolicyPolicyContentArrayOutput
	ToPolicyPolicyContentArrayOutputWithContext(context.Context) PolicyPolicyContentArrayOutput
}

type PolicyPolicyContentArray []PolicyPolicyContentInput

func (PolicyPolicyContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyPolicyContent)(nil)).Elem()
}

func (i PolicyPolicyContentArray) ToPolicyPolicyContentArrayOutput() PolicyPolicyContentArrayOutput {
	return i.ToPolicyPolicyContentArrayOutputWithContext(context.Background())
}

func (i PolicyPolicyContentArray) ToPolicyPolicyContentArrayOutputWithContext(ctx context.Context) PolicyPolicyContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyContentArrayOutput)
}

func (i PolicyPolicyContentArray) ToOutput(ctx context.Context) pulumix.Output[[]PolicyPolicyContent] {
	return pulumix.Output[[]PolicyPolicyContent]{
		OutputState: i.ToPolicyPolicyContentArrayOutputWithContext(ctx).OutputState,
	}
}

type PolicyPolicyContentOutput struct{ *pulumi.OutputState }

func (PolicyPolicyContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicyContent)(nil)).Elem()
}

func (o PolicyPolicyContentOutput) ToPolicyPolicyContentOutput() PolicyPolicyContentOutput {
	return o
}

func (o PolicyPolicyContentOutput) ToPolicyPolicyContentOutputWithContext(ctx context.Context) PolicyPolicyContentOutput {
	return o
}

func (o PolicyPolicyContentOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyPolicyContent] {
	return pulumix.Output[PolicyPolicyContent]{
		OutputState: o.OutputState,
	}
}

// List of permissions statements.
func (o PolicyPolicyContentOutput) Statements() PolicyPolicyContentStatementArrayOutput {
	return o.ApplyT(func(v PolicyPolicyContent) []PolicyPolicyContentStatement { return v.Statements }).(PolicyPolicyContentStatementArrayOutput)
}

type PolicyPolicyContentArrayOutput struct{ *pulumi.OutputState }

func (PolicyPolicyContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyPolicyContent)(nil)).Elem()
}

func (o PolicyPolicyContentArrayOutput) ToPolicyPolicyContentArrayOutput() PolicyPolicyContentArrayOutput {
	return o
}

func (o PolicyPolicyContentArrayOutput) ToPolicyPolicyContentArrayOutputWithContext(ctx context.Context) PolicyPolicyContentArrayOutput {
	return o
}

func (o PolicyPolicyContentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PolicyPolicyContent] {
	return pulumix.Output[[]PolicyPolicyContent]{
		OutputState: o.OutputState,
	}
}

func (o PolicyPolicyContentArrayOutput) Index(i pulumi.IntInput) PolicyPolicyContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyPolicyContent {
		return vs[0].([]PolicyPolicyContent)[vs[1].(int)]
	}).(PolicyPolicyContentOutput)
}

type PolicyPolicyContentStatement struct {
	// Set a list of required actions for this permissions statement.
	// Full list of actions can be found in [https://docs.spot.io/account-user-management/user-management/access-policies-actions/](https://docs.spot.io/account-user-management/user-management/access-policies-actions/).
	Actions []string `pulumi:"actions"`
	// Valid values "ALLOW", "DENY".
	Effect string `pulumi:"effect"`
	// Set a list of resources IDs. In order to include all resources in this statement - use "*".
	Resources []string `pulumi:"resources"`
}

// PolicyPolicyContentStatementInput is an input type that accepts PolicyPolicyContentStatementArgs and PolicyPolicyContentStatementOutput values.
// You can construct a concrete instance of `PolicyPolicyContentStatementInput` via:
//
//	PolicyPolicyContentStatementArgs{...}
type PolicyPolicyContentStatementInput interface {
	pulumi.Input

	ToPolicyPolicyContentStatementOutput() PolicyPolicyContentStatementOutput
	ToPolicyPolicyContentStatementOutputWithContext(context.Context) PolicyPolicyContentStatementOutput
}

type PolicyPolicyContentStatementArgs struct {
	// Set a list of required actions for this permissions statement.
	// Full list of actions can be found in [https://docs.spot.io/account-user-management/user-management/access-policies-actions/](https://docs.spot.io/account-user-management/user-management/access-policies-actions/).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Valid values "ALLOW", "DENY".
	Effect pulumi.StringInput `pulumi:"effect"`
	// Set a list of resources IDs. In order to include all resources in this statement - use "*".
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (PolicyPolicyContentStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicyContentStatement)(nil)).Elem()
}

func (i PolicyPolicyContentStatementArgs) ToPolicyPolicyContentStatementOutput() PolicyPolicyContentStatementOutput {
	return i.ToPolicyPolicyContentStatementOutputWithContext(context.Background())
}

func (i PolicyPolicyContentStatementArgs) ToPolicyPolicyContentStatementOutputWithContext(ctx context.Context) PolicyPolicyContentStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyContentStatementOutput)
}

func (i PolicyPolicyContentStatementArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyPolicyContentStatement] {
	return pulumix.Output[PolicyPolicyContentStatement]{
		OutputState: i.ToPolicyPolicyContentStatementOutputWithContext(ctx).OutputState,
	}
}

// PolicyPolicyContentStatementArrayInput is an input type that accepts PolicyPolicyContentStatementArray and PolicyPolicyContentStatementArrayOutput values.
// You can construct a concrete instance of `PolicyPolicyContentStatementArrayInput` via:
//
//	PolicyPolicyContentStatementArray{ PolicyPolicyContentStatementArgs{...} }
type PolicyPolicyContentStatementArrayInput interface {
	pulumi.Input

	ToPolicyPolicyContentStatementArrayOutput() PolicyPolicyContentStatementArrayOutput
	ToPolicyPolicyContentStatementArrayOutputWithContext(context.Context) PolicyPolicyContentStatementArrayOutput
}

type PolicyPolicyContentStatementArray []PolicyPolicyContentStatementInput

func (PolicyPolicyContentStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyPolicyContentStatement)(nil)).Elem()
}

func (i PolicyPolicyContentStatementArray) ToPolicyPolicyContentStatementArrayOutput() PolicyPolicyContentStatementArrayOutput {
	return i.ToPolicyPolicyContentStatementArrayOutputWithContext(context.Background())
}

func (i PolicyPolicyContentStatementArray) ToPolicyPolicyContentStatementArrayOutputWithContext(ctx context.Context) PolicyPolicyContentStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyContentStatementArrayOutput)
}

func (i PolicyPolicyContentStatementArray) ToOutput(ctx context.Context) pulumix.Output[[]PolicyPolicyContentStatement] {
	return pulumix.Output[[]PolicyPolicyContentStatement]{
		OutputState: i.ToPolicyPolicyContentStatementArrayOutputWithContext(ctx).OutputState,
	}
}

type PolicyPolicyContentStatementOutput struct{ *pulumi.OutputState }

func (PolicyPolicyContentStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicyContentStatement)(nil)).Elem()
}

func (o PolicyPolicyContentStatementOutput) ToPolicyPolicyContentStatementOutput() PolicyPolicyContentStatementOutput {
	return o
}

func (o PolicyPolicyContentStatementOutput) ToPolicyPolicyContentStatementOutputWithContext(ctx context.Context) PolicyPolicyContentStatementOutput {
	return o
}

func (o PolicyPolicyContentStatementOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyPolicyContentStatement] {
	return pulumix.Output[PolicyPolicyContentStatement]{
		OutputState: o.OutputState,
	}
}

// Set a list of required actions for this permissions statement.
// Full list of actions can be found in [https://docs.spot.io/account-user-management/user-management/access-policies-actions/](https://docs.spot.io/account-user-management/user-management/access-policies-actions/).
func (o PolicyPolicyContentStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyPolicyContentStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Valid values "ALLOW", "DENY".
func (o PolicyPolicyContentStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyPolicyContentStatement) string { return v.Effect }).(pulumi.StringOutput)
}

// Set a list of resources IDs. In order to include all resources in this statement - use "*".
func (o PolicyPolicyContentStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyPolicyContentStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type PolicyPolicyContentStatementArrayOutput struct{ *pulumi.OutputState }

func (PolicyPolicyContentStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyPolicyContentStatement)(nil)).Elem()
}

func (o PolicyPolicyContentStatementArrayOutput) ToPolicyPolicyContentStatementArrayOutput() PolicyPolicyContentStatementArrayOutput {
	return o
}

func (o PolicyPolicyContentStatementArrayOutput) ToPolicyPolicyContentStatementArrayOutputWithContext(ctx context.Context) PolicyPolicyContentStatementArrayOutput {
	return o
}

func (o PolicyPolicyContentStatementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PolicyPolicyContentStatement] {
	return pulumix.Output[[]PolicyPolicyContentStatement]{
		OutputState: o.OutputState,
	}
}

func (o PolicyPolicyContentStatementArrayOutput) Index(i pulumi.IntInput) PolicyPolicyContentStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyPolicyContentStatement {
		return vs[0].([]PolicyPolicyContentStatement)[vs[1].(int)]
	}).(PolicyPolicyContentStatementOutput)
}

type ProgrammaticUserAccount struct {
	// Account ID the programmatic user will have access to.
	AccountId string `pulumi:"accountId"`
	// (Enum: `"viewer", "editor") Role to be associated with the
	// programmatic user for this account.
	AccountRole string `pulumi:"accountRole"`
}

// ProgrammaticUserAccountInput is an input type that accepts ProgrammaticUserAccountArgs and ProgrammaticUserAccountOutput values.
// You can construct a concrete instance of `ProgrammaticUserAccountInput` via:
//
//	ProgrammaticUserAccountArgs{...}
type ProgrammaticUserAccountInput interface {
	pulumi.Input

	ToProgrammaticUserAccountOutput() ProgrammaticUserAccountOutput
	ToProgrammaticUserAccountOutputWithContext(context.Context) ProgrammaticUserAccountOutput
}

type ProgrammaticUserAccountArgs struct {
	// Account ID the programmatic user will have access to.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// (Enum: `"viewer", "editor") Role to be associated with the
	// programmatic user for this account.
	AccountRole pulumi.StringInput `pulumi:"accountRole"`
}

func (ProgrammaticUserAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgrammaticUserAccount)(nil)).Elem()
}

func (i ProgrammaticUserAccountArgs) ToProgrammaticUserAccountOutput() ProgrammaticUserAccountOutput {
	return i.ToProgrammaticUserAccountOutputWithContext(context.Background())
}

func (i ProgrammaticUserAccountArgs) ToProgrammaticUserAccountOutputWithContext(ctx context.Context) ProgrammaticUserAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgrammaticUserAccountOutput)
}

func (i ProgrammaticUserAccountArgs) ToOutput(ctx context.Context) pulumix.Output[ProgrammaticUserAccount] {
	return pulumix.Output[ProgrammaticUserAccount]{
		OutputState: i.ToProgrammaticUserAccountOutputWithContext(ctx).OutputState,
	}
}

// ProgrammaticUserAccountArrayInput is an input type that accepts ProgrammaticUserAccountArray and ProgrammaticUserAccountArrayOutput values.
// You can construct a concrete instance of `ProgrammaticUserAccountArrayInput` via:
//
//	ProgrammaticUserAccountArray{ ProgrammaticUserAccountArgs{...} }
type ProgrammaticUserAccountArrayInput interface {
	pulumi.Input

	ToProgrammaticUserAccountArrayOutput() ProgrammaticUserAccountArrayOutput
	ToProgrammaticUserAccountArrayOutputWithContext(context.Context) ProgrammaticUserAccountArrayOutput
}

type ProgrammaticUserAccountArray []ProgrammaticUserAccountInput

func (ProgrammaticUserAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProgrammaticUserAccount)(nil)).Elem()
}

func (i ProgrammaticUserAccountArray) ToProgrammaticUserAccountArrayOutput() ProgrammaticUserAccountArrayOutput {
	return i.ToProgrammaticUserAccountArrayOutputWithContext(context.Background())
}

func (i ProgrammaticUserAccountArray) ToProgrammaticUserAccountArrayOutputWithContext(ctx context.Context) ProgrammaticUserAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgrammaticUserAccountArrayOutput)
}

func (i ProgrammaticUserAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]ProgrammaticUserAccount] {
	return pulumix.Output[[]ProgrammaticUserAccount]{
		OutputState: i.ToProgrammaticUserAccountArrayOutputWithContext(ctx).OutputState,
	}
}

type ProgrammaticUserAccountOutput struct{ *pulumi.OutputState }

func (ProgrammaticUserAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgrammaticUserAccount)(nil)).Elem()
}

func (o ProgrammaticUserAccountOutput) ToProgrammaticUserAccountOutput() ProgrammaticUserAccountOutput {
	return o
}

func (o ProgrammaticUserAccountOutput) ToProgrammaticUserAccountOutputWithContext(ctx context.Context) ProgrammaticUserAccountOutput {
	return o
}

func (o ProgrammaticUserAccountOutput) ToOutput(ctx context.Context) pulumix.Output[ProgrammaticUserAccount] {
	return pulumix.Output[ProgrammaticUserAccount]{
		OutputState: o.OutputState,
	}
}

// Account ID the programmatic user will have access to.
func (o ProgrammaticUserAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ProgrammaticUserAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

// (Enum: `"viewer", "editor") Role to be associated with the
// programmatic user for this account.
func (o ProgrammaticUserAccountOutput) AccountRole() pulumi.StringOutput {
	return o.ApplyT(func(v ProgrammaticUserAccount) string { return v.AccountRole }).(pulumi.StringOutput)
}

type ProgrammaticUserAccountArrayOutput struct{ *pulumi.OutputState }

func (ProgrammaticUserAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProgrammaticUserAccount)(nil)).Elem()
}

func (o ProgrammaticUserAccountArrayOutput) ToProgrammaticUserAccountArrayOutput() ProgrammaticUserAccountArrayOutput {
	return o
}

func (o ProgrammaticUserAccountArrayOutput) ToProgrammaticUserAccountArrayOutputWithContext(ctx context.Context) ProgrammaticUserAccountArrayOutput {
	return o
}

func (o ProgrammaticUserAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProgrammaticUserAccount] {
	return pulumix.Output[[]ProgrammaticUserAccount]{
		OutputState: o.OutputState,
	}
}

func (o ProgrammaticUserAccountArrayOutput) Index(i pulumi.IntInput) ProgrammaticUserAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProgrammaticUserAccount {
		return vs[0].([]ProgrammaticUserAccount)[vs[1].(int)]
	}).(ProgrammaticUserAccountOutput)
}

type ProgrammaticUserPolicy struct {
	// A list of the accounts that the policy should be
	// enforced for the user.
	PolicyAccountIds []string `pulumi:"policyAccountIds"`
	// Policy ID the programmatic user will have access to.
	PolicyId string `pulumi:"policyId"`
}

// ProgrammaticUserPolicyInput is an input type that accepts ProgrammaticUserPolicyArgs and ProgrammaticUserPolicyOutput values.
// You can construct a concrete instance of `ProgrammaticUserPolicyInput` via:
//
//	ProgrammaticUserPolicyArgs{...}
type ProgrammaticUserPolicyInput interface {
	pulumi.Input

	ToProgrammaticUserPolicyOutput() ProgrammaticUserPolicyOutput
	ToProgrammaticUserPolicyOutputWithContext(context.Context) ProgrammaticUserPolicyOutput
}

type ProgrammaticUserPolicyArgs struct {
	// A list of the accounts that the policy should be
	// enforced for the user.
	PolicyAccountIds pulumi.StringArrayInput `pulumi:"policyAccountIds"`
	// Policy ID the programmatic user will have access to.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
}

func (ProgrammaticUserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgrammaticUserPolicy)(nil)).Elem()
}

func (i ProgrammaticUserPolicyArgs) ToProgrammaticUserPolicyOutput() ProgrammaticUserPolicyOutput {
	return i.ToProgrammaticUserPolicyOutputWithContext(context.Background())
}

func (i ProgrammaticUserPolicyArgs) ToProgrammaticUserPolicyOutputWithContext(ctx context.Context) ProgrammaticUserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgrammaticUserPolicyOutput)
}

func (i ProgrammaticUserPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[ProgrammaticUserPolicy] {
	return pulumix.Output[ProgrammaticUserPolicy]{
		OutputState: i.ToProgrammaticUserPolicyOutputWithContext(ctx).OutputState,
	}
}

// ProgrammaticUserPolicyArrayInput is an input type that accepts ProgrammaticUserPolicyArray and ProgrammaticUserPolicyArrayOutput values.
// You can construct a concrete instance of `ProgrammaticUserPolicyArrayInput` via:
//
//	ProgrammaticUserPolicyArray{ ProgrammaticUserPolicyArgs{...} }
type ProgrammaticUserPolicyArrayInput interface {
	pulumi.Input

	ToProgrammaticUserPolicyArrayOutput() ProgrammaticUserPolicyArrayOutput
	ToProgrammaticUserPolicyArrayOutputWithContext(context.Context) ProgrammaticUserPolicyArrayOutput
}

type ProgrammaticUserPolicyArray []ProgrammaticUserPolicyInput

func (ProgrammaticUserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProgrammaticUserPolicy)(nil)).Elem()
}

func (i ProgrammaticUserPolicyArray) ToProgrammaticUserPolicyArrayOutput() ProgrammaticUserPolicyArrayOutput {
	return i.ToProgrammaticUserPolicyArrayOutputWithContext(context.Background())
}

func (i ProgrammaticUserPolicyArray) ToProgrammaticUserPolicyArrayOutputWithContext(ctx context.Context) ProgrammaticUserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgrammaticUserPolicyArrayOutput)
}

func (i ProgrammaticUserPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]ProgrammaticUserPolicy] {
	return pulumix.Output[[]ProgrammaticUserPolicy]{
		OutputState: i.ToProgrammaticUserPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type ProgrammaticUserPolicyOutput struct{ *pulumi.OutputState }

func (ProgrammaticUserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgrammaticUserPolicy)(nil)).Elem()
}

func (o ProgrammaticUserPolicyOutput) ToProgrammaticUserPolicyOutput() ProgrammaticUserPolicyOutput {
	return o
}

func (o ProgrammaticUserPolicyOutput) ToProgrammaticUserPolicyOutputWithContext(ctx context.Context) ProgrammaticUserPolicyOutput {
	return o
}

func (o ProgrammaticUserPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[ProgrammaticUserPolicy] {
	return pulumix.Output[ProgrammaticUserPolicy]{
		OutputState: o.OutputState,
	}
}

// A list of the accounts that the policy should be
// enforced for the user.
func (o ProgrammaticUserPolicyOutput) PolicyAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProgrammaticUserPolicy) []string { return v.PolicyAccountIds }).(pulumi.StringArrayOutput)
}

// Policy ID the programmatic user will have access to.
func (o ProgrammaticUserPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v ProgrammaticUserPolicy) string { return v.PolicyId }).(pulumi.StringOutput)
}

type ProgrammaticUserPolicyArrayOutput struct{ *pulumi.OutputState }

func (ProgrammaticUserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProgrammaticUserPolicy)(nil)).Elem()
}

func (o ProgrammaticUserPolicyArrayOutput) ToProgrammaticUserPolicyArrayOutput() ProgrammaticUserPolicyArrayOutput {
	return o
}

func (o ProgrammaticUserPolicyArrayOutput) ToProgrammaticUserPolicyArrayOutputWithContext(ctx context.Context) ProgrammaticUserPolicyArrayOutput {
	return o
}

func (o ProgrammaticUserPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProgrammaticUserPolicy] {
	return pulumix.Output[[]ProgrammaticUserPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ProgrammaticUserPolicyArrayOutput) Index(i pulumi.IntInput) ProgrammaticUserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProgrammaticUserPolicy {
		return vs[0].([]ProgrammaticUserPolicy)[vs[1].(int)]
	}).(ProgrammaticUserPolicyOutput)
}

type UserGroupPolicy struct {
	// A list of accounts to register with the assigned under the
	// given group (should be existing accounts only).
	AccountIds []string `pulumi:"accountIds"`
	// A policy to register under the given group
	// (should be existing policy only).
	PolicyId string `pulumi:"policyId"`
}

// UserGroupPolicyInput is an input type that accepts UserGroupPolicyArgs and UserGroupPolicyOutput values.
// You can construct a concrete instance of `UserGroupPolicyInput` via:
//
//	UserGroupPolicyArgs{...}
type UserGroupPolicyInput interface {
	pulumi.Input

	ToUserGroupPolicyOutput() UserGroupPolicyOutput
	ToUserGroupPolicyOutputWithContext(context.Context) UserGroupPolicyOutput
}

type UserGroupPolicyArgs struct {
	// A list of accounts to register with the assigned under the
	// given group (should be existing accounts only).
	AccountIds pulumi.StringArrayInput `pulumi:"accountIds"`
	// A policy to register under the given group
	// (should be existing policy only).
	PolicyId pulumi.StringInput `pulumi:"policyId"`
}

func (UserGroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPolicy)(nil)).Elem()
}

func (i UserGroupPolicyArgs) ToUserGroupPolicyOutput() UserGroupPolicyOutput {
	return i.ToUserGroupPolicyOutputWithContext(context.Background())
}

func (i UserGroupPolicyArgs) ToUserGroupPolicyOutputWithContext(ctx context.Context) UserGroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPolicyOutput)
}

func (i UserGroupPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[UserGroupPolicy] {
	return pulumix.Output[UserGroupPolicy]{
		OutputState: i.ToUserGroupPolicyOutputWithContext(ctx).OutputState,
	}
}

// UserGroupPolicyArrayInput is an input type that accepts UserGroupPolicyArray and UserGroupPolicyArrayOutput values.
// You can construct a concrete instance of `UserGroupPolicyArrayInput` via:
//
//	UserGroupPolicyArray{ UserGroupPolicyArgs{...} }
type UserGroupPolicyArrayInput interface {
	pulumi.Input

	ToUserGroupPolicyArrayOutput() UserGroupPolicyArrayOutput
	ToUserGroupPolicyArrayOutputWithContext(context.Context) UserGroupPolicyArrayOutput
}

type UserGroupPolicyArray []UserGroupPolicyInput

func (UserGroupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPolicy)(nil)).Elem()
}

func (i UserGroupPolicyArray) ToUserGroupPolicyArrayOutput() UserGroupPolicyArrayOutput {
	return i.ToUserGroupPolicyArrayOutputWithContext(context.Background())
}

func (i UserGroupPolicyArray) ToUserGroupPolicyArrayOutputWithContext(ctx context.Context) UserGroupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPolicyArrayOutput)
}

func (i UserGroupPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]UserGroupPolicy] {
	return pulumix.Output[[]UserGroupPolicy]{
		OutputState: i.ToUserGroupPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type UserGroupPolicyOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPolicy)(nil)).Elem()
}

func (o UserGroupPolicyOutput) ToUserGroupPolicyOutput() UserGroupPolicyOutput {
	return o
}

func (o UserGroupPolicyOutput) ToUserGroupPolicyOutputWithContext(ctx context.Context) UserGroupPolicyOutput {
	return o
}

func (o UserGroupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UserGroupPolicy] {
	return pulumix.Output[UserGroupPolicy]{
		OutputState: o.OutputState,
	}
}

// A list of accounts to register with the assigned under the
// given group (should be existing accounts only).
func (o UserGroupPolicyOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserGroupPolicy) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

// A policy to register under the given group
// (should be existing policy only).
func (o UserGroupPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v UserGroupPolicy) string { return v.PolicyId }).(pulumi.StringOutput)
}

type UserGroupPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserGroupPolicy)(nil)).Elem()
}

func (o UserGroupPolicyArrayOutput) ToUserGroupPolicyArrayOutput() UserGroupPolicyArrayOutput {
	return o
}

func (o UserGroupPolicyArrayOutput) ToUserGroupPolicyArrayOutputWithContext(ctx context.Context) UserGroupPolicyArrayOutput {
	return o
}

func (o UserGroupPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UserGroupPolicy] {
	return pulumix.Output[[]UserGroupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserGroupPolicyArrayOutput) Index(i pulumi.IntInput) UserGroupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserGroupPolicy {
		return vs[0].([]UserGroupPolicy)[vs[1].(int)]
	}).(UserGroupPolicyOutput)
}

type UserPolicy struct {
	PolicyAccountIds []string `pulumi:"policyAccountIds"`
	// A policy to register under the given group
	// (should be existing policy only).
	PolicyId string `pulumi:"policyId"`
}

// UserPolicyInput is an input type that accepts UserPolicyArgs and UserPolicyOutput values.
// You can construct a concrete instance of `UserPolicyInput` via:
//
//	UserPolicyArgs{...}
type UserPolicyInput interface {
	pulumi.Input

	ToUserPolicyOutput() UserPolicyOutput
	ToUserPolicyOutputWithContext(context.Context) UserPolicyOutput
}

type UserPolicyArgs struct {
	PolicyAccountIds pulumi.StringArrayInput `pulumi:"policyAccountIds"`
	// A policy to register under the given group
	// (should be existing policy only).
	PolicyId pulumi.StringInput `pulumi:"policyId"`
}

func (UserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (i UserPolicyArgs) ToUserPolicyOutput() UserPolicyOutput {
	return i.ToUserPolicyOutputWithContext(context.Background())
}

func (i UserPolicyArgs) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyOutput)
}

func (i UserPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[UserPolicy] {
	return pulumix.Output[UserPolicy]{
		OutputState: i.ToUserPolicyOutputWithContext(ctx).OutputState,
	}
}

// UserPolicyArrayInput is an input type that accepts UserPolicyArray and UserPolicyArrayOutput values.
// You can construct a concrete instance of `UserPolicyArrayInput` via:
//
//	UserPolicyArray{ UserPolicyArgs{...} }
type UserPolicyArrayInput interface {
	pulumi.Input

	ToUserPolicyArrayOutput() UserPolicyArrayOutput
	ToUserPolicyArrayOutputWithContext(context.Context) UserPolicyArrayOutput
}

type UserPolicyArray []UserPolicyInput

func (UserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (i UserPolicyArray) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return i.ToUserPolicyArrayOutputWithContext(context.Background())
}

func (i UserPolicyArray) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyArrayOutput)
}

func (i UserPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]UserPolicy] {
	return pulumix.Output[[]UserPolicy]{
		OutputState: i.ToUserPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type UserPolicyOutput struct{ *pulumi.OutputState }

func (UserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (o UserPolicyOutput) ToUserPolicyOutput() UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UserPolicy] {
	return pulumix.Output[UserPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPolicyOutput) PolicyAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserPolicy) []string { return v.PolicyAccountIds }).(pulumi.StringArrayOutput)
}

// A policy to register under the given group
// (should be existing policy only).
func (o UserPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v UserPolicy) string { return v.PolicyId }).(pulumi.StringOutput)
}

type UserPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UserPolicy] {
	return pulumix.Output[[]UserPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPolicyArrayOutput) Index(i pulumi.IntInput) UserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPolicy {
		return vs[0].([]UserPolicy)[vs[1].(int)]
	}).(UserPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyContentInput)(nil)).Elem(), PolicyPolicyContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyContentArrayInput)(nil)).Elem(), PolicyPolicyContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyContentStatementInput)(nil)).Elem(), PolicyPolicyContentStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyContentStatementArrayInput)(nil)).Elem(), PolicyPolicyContentStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgrammaticUserAccountInput)(nil)).Elem(), ProgrammaticUserAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgrammaticUserAccountArrayInput)(nil)).Elem(), ProgrammaticUserAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgrammaticUserPolicyInput)(nil)).Elem(), ProgrammaticUserPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgrammaticUserPolicyArrayInput)(nil)).Elem(), ProgrammaticUserPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPolicyInput)(nil)).Elem(), UserGroupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPolicyArrayInput)(nil)).Elem(), UserGroupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyInput)(nil)).Elem(), UserPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyArrayInput)(nil)).Elem(), UserPolicyArray{})
	pulumi.RegisterOutputType(PolicyPolicyContentOutput{})
	pulumi.RegisterOutputType(PolicyPolicyContentArrayOutput{})
	pulumi.RegisterOutputType(PolicyPolicyContentStatementOutput{})
	pulumi.RegisterOutputType(PolicyPolicyContentStatementArrayOutput{})
	pulumi.RegisterOutputType(ProgrammaticUserAccountOutput{})
	pulumi.RegisterOutputType(ProgrammaticUserAccountArrayOutput{})
	pulumi.RegisterOutputType(ProgrammaticUserPolicyOutput{})
	pulumi.RegisterOutputType(ProgrammaticUserPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPolicyOutput{})
	pulumi.RegisterOutputType(UserGroupPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserPolicyOutput{})
	pulumi.RegisterOutputType(UserPolicyArrayOutput{})
}
