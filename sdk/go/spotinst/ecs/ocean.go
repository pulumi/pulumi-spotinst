// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spotinst Ocean ECS resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/ecs"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ecs.NewOcean(ctx, "example", &ecs.OceanArgs{
// 			AssociatePublicIpAddress: pulumi.Bool(false),
// 			BlockDeviceMappings: ecs.OceanBlockDeviceMappingArray{
// 				&ecs.OceanBlockDeviceMappingArgs{
// 					DeviceName: pulumi.String("/dev/xvda1"),
// 					Ebs: &ecs.OceanBlockDeviceMappingEbsArgs{
// 						DeleteOnTermination: pulumi.Bool(true),
// 						DynamicVolumeSize: &ecs.OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs{
// 							BaseSize:            pulumi.Int(50),
// 							Resource:            pulumi.String("CPU"),
// 							SizePerResourceUnit: pulumi.Int(20),
// 						},
// 						Encrypted:  pulumi.Bool(false),
// 						Throughput: pulumi.Int(500),
// 						VolumeSize: pulumi.Int(50),
// 						VolumeType: pulumi.String("gp2"),
// 					},
// 				},
// 			},
// 			ClusterName:        pulumi.String("sample-ecs-cluster"),
// 			DesiredCapacity:    pulumi.Int(0),
// 			DrainingTimeout:    pulumi.Int(120),
// 			EbsOptimized:       pulumi.Bool(true),
// 			IamInstanceProfile: pulumi.String("iam-profile"),
// 			ImageId:            pulumi.String("ami-12345"),
// 			KeyPair:            pulumi.String("KeyPair"),
// 			MaxSize:            pulumi.Int(1),
// 			MinSize:            pulumi.Int(0),
// 			Monitoring:         pulumi.Bool(true),
// 			OptimizeImages: &ecs.OceanOptimizeImagesArgs{
// 				PerformAt:            pulumi.String("timeWindow"),
// 				ShouldOptimizeEcsAmi: pulumi.Bool(true),
// 				TimeWindows: pulumi.StringArray{
// 					pulumi.String("Sun:02:00-Sun:12:00"),
// 					pulumi.String("Sun:05:00-Sun:16:00"),
// 				},
// 			},
// 			Region: pulumi.String("us-west-2"),
// 			SecurityGroupIds: pulumi.StringArray{
// 				pulumi.String("sg-12345"),
// 			},
// 			SubnetIds: pulumi.StringArray{
// 				pulumi.String("subnet-12345"),
// 			},
// 			Tags: ecs.OceanTagArray{
// 				&ecs.OceanTagArgs{
// 					Key:   pulumi.String("fakeKey"),
// 					Value: pulumi.String("fakeValue"),
// 				},
// 			},
// 			UserData:                 pulumi.String("echo hello world"),
// 			UtilizeReservedInstances: pulumi.Bool(false),
// 			Whitelists: pulumi.StringArray{
// 				pulumi.String("t3.medium"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ctx.Export("oceanId", spotinst_ocean_ecs.Example.Id)
// 		return nil
// 	})
// }
// ```
type Ocean struct {
	pulumi.CustomResourceState

	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrOutput `pulumi:"associatePublicIpAddress"`
	// Describes the Ocean ECS autoscaler.
	Autoscaler OceanAutoscalerPtrOutput `pulumi:"autoscaler"`
	// Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	// The ocean cluster name.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrOutput `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrOutput `pulumi:"ebsOptimized"`
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// The key pair to attach the instances.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrOutput `pulumi:"monitoring"`
	// The Ocean cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Object. Set auto image update settings.
	OptimizeImages OceanOptimizeImagesPtrOutput `pulumi:"optimizeImages"`
	// The region the cluster will run in.
	Region pulumi.StringOutput `pulumi:"region"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	ScheduledTasks OceanScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags OceanTagArrayOutput `pulumi:"tags"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	UpdatePolicy OceanUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData           pulumi.StringPtrOutput `pulumi:"userData"`
	UtilizeCommitments pulumi.BoolPtrOutput   `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrOutput `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster, Cannot be configured if blacklist is configured.
	Whitelists pulumi.StringArrayOutput `pulumi:"whitelists"`
}

// NewOcean registers a new resource with the given unique name, arguments, and options.
func NewOcean(ctx *pulumi.Context,
	name string, args *OceanArgs, opts ...pulumi.ResourceOption) (*Ocean, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	var resource Ocean
	err := ctx.RegisterResource("spotinst:ecs/ocean:Ocean", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOcean gets an existing Ocean resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOcean(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanState, opts ...pulumi.ResourceOption) (*Ocean, error) {
	var resource Ocean
	err := ctx.ReadResource("spotinst:ecs/ocean:Ocean", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ocean resources.
type oceanState struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Describes the Ocean ECS autoscaler.
	Autoscaler *OceanAutoscaler `pulumi:"autoscaler"`
	// Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The ocean cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// The key pair to attach the instances.
	KeyPair *string `pulumi:"keyPair"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// The Ocean cluster name.
	Name *string `pulumi:"name"`
	// Object. Set auto image update settings.
	OptimizeImages *OceanOptimizeImages `pulumi:"optimizeImages"`
	// The region the cluster will run in.
	Region *string `pulumi:"region"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags []OceanTag `pulumi:"tags"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster, Cannot be configured if blacklist is configured.
	Whitelists []string `pulumi:"whitelists"`
}

type OceanState struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Describes the Ocean ECS autoscaler.
	Autoscaler OceanAutoscalerPtrInput
	// Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	// The ocean cluster name.
	ClusterName pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// The key pair to attach the instances.
	KeyPair pulumi.StringPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// The Ocean cluster name.
	Name pulumi.StringPtrInput
	// Object. Set auto image update settings.
	OptimizeImages OceanOptimizeImagesPtrInput
	// The region the cluster will run in.
	Region pulumi.StringPtrInput
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroupIds pulumi.StringArrayInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags OceanTagArrayInput
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	UpdatePolicy OceanUpdatePolicyPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Instance types allowed in the Ocean cluster, Cannot be configured if blacklist is configured.
	Whitelists pulumi.StringArrayInput
}

func (OceanState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanState)(nil)).Elem()
}

type oceanArgs struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Describes the Ocean ECS autoscaler.
	Autoscaler *OceanAutoscaler `pulumi:"autoscaler"`
	// Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The ocean cluster name.
	ClusterName string `pulumi:"clusterName"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// The key pair to attach the instances.
	KeyPair *string `pulumi:"keyPair"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// The Ocean cluster name.
	Name *string `pulumi:"name"`
	// Object. Set auto image update settings.
	OptimizeImages *OceanOptimizeImages `pulumi:"optimizeImages"`
	// The region the cluster will run in.
	Region string `pulumi:"region"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags []OceanTag `pulumi:"tags"`
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster, Cannot be configured if blacklist is configured.
	Whitelists []string `pulumi:"whitelists"`
}

// The set of arguments for constructing a Ocean resource.
type OceanArgs struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Describes the Ocean ECS autoscaler.
	Autoscaler OceanAutoscalerPtrInput
	// Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	// The ocean cluster name.
	ClusterName pulumi.StringInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// The key pair to attach the instances.
	KeyPair pulumi.StringPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// The Ocean cluster name.
	Name pulumi.StringPtrInput
	// Object. Set auto image update settings.
	OptimizeImages OceanOptimizeImagesPtrInput
	// The region the cluster will run in.
	Region pulumi.StringInput
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroupIds pulumi.StringArrayInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags OceanTagArrayInput
	// While used, you can control whether the group should perform a deployment after an update to the configuration.
	UpdatePolicy OceanUpdatePolicyPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Instance types allowed in the Ocean cluster, Cannot be configured if blacklist is configured.
	Whitelists pulumi.StringArrayInput
}

func (OceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanArgs)(nil)).Elem()
}

type OceanInput interface {
	pulumi.Input

	ToOceanOutput() OceanOutput
	ToOceanOutputWithContext(ctx context.Context) OceanOutput
}

func (*Ocean) ElementType() reflect.Type {
	return reflect.TypeOf((*Ocean)(nil))
}

func (i *Ocean) ToOceanOutput() OceanOutput {
	return i.ToOceanOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOutput)
}

func (i *Ocean) ToOceanPtrOutput() OceanPtrOutput {
	return i.ToOceanPtrOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanPtrOutput)
}

type OceanPtrInput interface {
	pulumi.Input

	ToOceanPtrOutput() OceanPtrOutput
	ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput
}

type oceanPtrType OceanArgs

func (*oceanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil))
}

func (i *oceanPtrType) ToOceanPtrOutput() OceanPtrOutput {
	return i.ToOceanPtrOutputWithContext(context.Background())
}

func (i *oceanPtrType) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanPtrOutput)
}

// OceanArrayInput is an input type that accepts OceanArray and OceanArrayOutput values.
// You can construct a concrete instance of `OceanArrayInput` via:
//
//          OceanArray{ OceanArgs{...} }
type OceanArrayInput interface {
	pulumi.Input

	ToOceanArrayOutput() OceanArrayOutput
	ToOceanArrayOutputWithContext(context.Context) OceanArrayOutput
}

type OceanArray []OceanInput

func (OceanArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Ocean)(nil))
}

func (i OceanArray) ToOceanArrayOutput() OceanArrayOutput {
	return i.ToOceanArrayOutputWithContext(context.Background())
}

func (i OceanArray) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanArrayOutput)
}

// OceanMapInput is an input type that accepts OceanMap and OceanMapOutput values.
// You can construct a concrete instance of `OceanMapInput` via:
//
//          OceanMap{ "key": OceanArgs{...} }
type OceanMapInput interface {
	pulumi.Input

	ToOceanMapOutput() OceanMapOutput
	ToOceanMapOutputWithContext(context.Context) OceanMapOutput
}

type OceanMap map[string]OceanInput

func (OceanMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Ocean)(nil))
}

func (i OceanMap) ToOceanMapOutput() OceanMapOutput {
	return i.ToOceanMapOutputWithContext(context.Background())
}

func (i OceanMap) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanMapOutput)
}

type OceanOutput struct {
	*pulumi.OutputState
}

func (OceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ocean)(nil))
}

func (o OceanOutput) ToOceanOutput() OceanOutput {
	return o
}

func (o OceanOutput) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return o
}

func (o OceanOutput) ToOceanPtrOutput() OceanPtrOutput {
	return o.ToOceanPtrOutputWithContext(context.Background())
}

func (o OceanOutput) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return o.ApplyT(func(v Ocean) *Ocean {
		return &v
	}).(OceanPtrOutput)
}

type OceanPtrOutput struct {
	*pulumi.OutputState
}

func (OceanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil))
}

func (o OceanPtrOutput) ToOceanPtrOutput() OceanPtrOutput {
	return o
}

func (o OceanPtrOutput) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return o
}

type OceanArrayOutput struct{ *pulumi.OutputState }

func (OceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ocean)(nil))
}

func (o OceanArrayOutput) ToOceanArrayOutput() OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) Index(i pulumi.IntInput) OceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ocean {
		return vs[0].([]Ocean)[vs[1].(int)]
	}).(OceanOutput)
}

type OceanMapOutput struct{ *pulumi.OutputState }

func (OceanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ocean)(nil))
}

func (o OceanMapOutput) ToOceanMapOutput() OceanMapOutput {
	return o
}

func (o OceanMapOutput) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return o
}

func (o OceanMapOutput) MapIndex(k pulumi.StringInput) OceanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ocean {
		return vs[0].(map[string]Ocean)[vs[1].(string)]
	}).(OceanOutput)
}

func init() {
	pulumi.RegisterOutputType(OceanOutput{})
	pulumi.RegisterOutputType(OceanPtrOutput{})
	pulumi.RegisterOutputType(OceanArrayOutput{})
	pulumi.RegisterOutputType(OceanMapOutput{})
}
