// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type OceanAutoscaler struct {
	// The auto-headroom percentage. Set a number between 0-200 to control the headroom % of the cluster. Relevant when `isAutoConfig`= true.
	AutoHeadroomPercentage *int `pulumi:"autoHeadroomPercentage"`
	// Cooldown period between scaling actions.
	Cooldown *int `pulumi:"cooldown"`
	// Auto Scaling scale down operations.
	Down *OceanAutoscalerDown `pulumi:"down"`
	// When set to true, both automatic and per custom launch specification manual headroom to be saved concurrently and independently in the cluster. prerequisite: isAutoConfig must be true
	EnableAutomaticAndManualHeadroom *bool `pulumi:"enableAutomaticAndManualHeadroom"`
	// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
	Headroom *OceanAutoscalerHeadroom `pulumi:"headroom"`
	// Automatically configure and optimize headroom resources.
	IsAutoConfig *bool `pulumi:"isAutoConfig"`
	// Enable the Ocean ECS autoscaler.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Optionally set upper and lower bounds on the resource usage of the cluster.
	ResourceLimits *OceanAutoscalerResourceLimits `pulumi:"resourceLimits"`
	// Option to scale down non-service tasks. If not set, Ocean does not scale down standalone tasks.
	ShouldScaleDownNonServiceTasks *bool `pulumi:"shouldScaleDownNonServiceTasks"`
}

// OceanAutoscalerInput is an input type that accepts OceanAutoscalerArgs and OceanAutoscalerOutput values.
// You can construct a concrete instance of `OceanAutoscalerInput` via:
//
//	OceanAutoscalerArgs{...}
type OceanAutoscalerInput interface {
	pulumi.Input

	ToOceanAutoscalerOutput() OceanAutoscalerOutput
	ToOceanAutoscalerOutputWithContext(context.Context) OceanAutoscalerOutput
}

type OceanAutoscalerArgs struct {
	// The auto-headroom percentage. Set a number between 0-200 to control the headroom % of the cluster. Relevant when `isAutoConfig`= true.
	AutoHeadroomPercentage pulumi.IntPtrInput `pulumi:"autoHeadroomPercentage"`
	// Cooldown period between scaling actions.
	Cooldown pulumi.IntPtrInput `pulumi:"cooldown"`
	// Auto Scaling scale down operations.
	Down OceanAutoscalerDownPtrInput `pulumi:"down"`
	// When set to true, both automatic and per custom launch specification manual headroom to be saved concurrently and independently in the cluster. prerequisite: isAutoConfig must be true
	EnableAutomaticAndManualHeadroom pulumi.BoolPtrInput `pulumi:"enableAutomaticAndManualHeadroom"`
	// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
	Headroom OceanAutoscalerHeadroomPtrInput `pulumi:"headroom"`
	// Automatically configure and optimize headroom resources.
	IsAutoConfig pulumi.BoolPtrInput `pulumi:"isAutoConfig"`
	// Enable the Ocean ECS autoscaler.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Optionally set upper and lower bounds on the resource usage of the cluster.
	ResourceLimits OceanAutoscalerResourceLimitsPtrInput `pulumi:"resourceLimits"`
	// Option to scale down non-service tasks. If not set, Ocean does not scale down standalone tasks.
	ShouldScaleDownNonServiceTasks pulumi.BoolPtrInput `pulumi:"shouldScaleDownNonServiceTasks"`
}

func (OceanAutoscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscaler)(nil)).Elem()
}

func (i OceanAutoscalerArgs) ToOceanAutoscalerOutput() OceanAutoscalerOutput {
	return i.ToOceanAutoscalerOutputWithContext(context.Background())
}

func (i OceanAutoscalerArgs) ToOceanAutoscalerOutputWithContext(ctx context.Context) OceanAutoscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerOutput)
}

func (i OceanAutoscalerArgs) ToOceanAutoscalerPtrOutput() OceanAutoscalerPtrOutput {
	return i.ToOceanAutoscalerPtrOutputWithContext(context.Background())
}

func (i OceanAutoscalerArgs) ToOceanAutoscalerPtrOutputWithContext(ctx context.Context) OceanAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerOutput).ToOceanAutoscalerPtrOutputWithContext(ctx)
}

// OceanAutoscalerPtrInput is an input type that accepts OceanAutoscalerArgs, OceanAutoscalerPtr and OceanAutoscalerPtrOutput values.
// You can construct a concrete instance of `OceanAutoscalerPtrInput` via:
//
//	        OceanAutoscalerArgs{...}
//
//	or:
//
//	        nil
type OceanAutoscalerPtrInput interface {
	pulumi.Input

	ToOceanAutoscalerPtrOutput() OceanAutoscalerPtrOutput
	ToOceanAutoscalerPtrOutputWithContext(context.Context) OceanAutoscalerPtrOutput
}

type oceanAutoscalerPtrType OceanAutoscalerArgs

func OceanAutoscalerPtr(v *OceanAutoscalerArgs) OceanAutoscalerPtrInput {
	return (*oceanAutoscalerPtrType)(v)
}

func (*oceanAutoscalerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscaler)(nil)).Elem()
}

func (i *oceanAutoscalerPtrType) ToOceanAutoscalerPtrOutput() OceanAutoscalerPtrOutput {
	return i.ToOceanAutoscalerPtrOutputWithContext(context.Background())
}

func (i *oceanAutoscalerPtrType) ToOceanAutoscalerPtrOutputWithContext(ctx context.Context) OceanAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerPtrOutput)
}

type OceanAutoscalerOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscaler)(nil)).Elem()
}

func (o OceanAutoscalerOutput) ToOceanAutoscalerOutput() OceanAutoscalerOutput {
	return o
}

func (o OceanAutoscalerOutput) ToOceanAutoscalerOutputWithContext(ctx context.Context) OceanAutoscalerOutput {
	return o
}

func (o OceanAutoscalerOutput) ToOceanAutoscalerPtrOutput() OceanAutoscalerPtrOutput {
	return o.ToOceanAutoscalerPtrOutputWithContext(context.Background())
}

func (o OceanAutoscalerOutput) ToOceanAutoscalerPtrOutputWithContext(ctx context.Context) OceanAutoscalerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanAutoscaler) *OceanAutoscaler {
		return &v
	}).(OceanAutoscalerPtrOutput)
}

// The auto-headroom percentage. Set a number between 0-200 to control the headroom % of the cluster. Relevant when `isAutoConfig`= true.
func (o OceanAutoscalerOutput) AutoHeadroomPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *int { return v.AutoHeadroomPercentage }).(pulumi.IntPtrOutput)
}

// Cooldown period between scaling actions.
func (o OceanAutoscalerOutput) Cooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *int { return v.Cooldown }).(pulumi.IntPtrOutput)
}

// Auto Scaling scale down operations.
func (o OceanAutoscalerOutput) Down() OceanAutoscalerDownPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *OceanAutoscalerDown { return v.Down }).(OceanAutoscalerDownPtrOutput)
}

// When set to true, both automatic and per custom launch specification manual headroom to be saved concurrently and independently in the cluster. prerequisite: isAutoConfig must be true
func (o OceanAutoscalerOutput) EnableAutomaticAndManualHeadroom() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *bool { return v.EnableAutomaticAndManualHeadroom }).(pulumi.BoolPtrOutput)
}

// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
func (o OceanAutoscalerOutput) Headroom() OceanAutoscalerHeadroomPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *OceanAutoscalerHeadroom { return v.Headroom }).(OceanAutoscalerHeadroomPtrOutput)
}

// Automatically configure and optimize headroom resources.
func (o OceanAutoscalerOutput) IsAutoConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *bool { return v.IsAutoConfig }).(pulumi.BoolPtrOutput)
}

// Enable the Ocean ECS autoscaler.
func (o OceanAutoscalerOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Optionally set upper and lower bounds on the resource usage of the cluster.
func (o OceanAutoscalerOutput) ResourceLimits() OceanAutoscalerResourceLimitsPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *OceanAutoscalerResourceLimits { return v.ResourceLimits }).(OceanAutoscalerResourceLimitsPtrOutput)
}

// Option to scale down non-service tasks. If not set, Ocean does not scale down standalone tasks.
func (o OceanAutoscalerOutput) ShouldScaleDownNonServiceTasks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanAutoscaler) *bool { return v.ShouldScaleDownNonServiceTasks }).(pulumi.BoolPtrOutput)
}

type OceanAutoscalerPtrOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscaler)(nil)).Elem()
}

func (o OceanAutoscalerPtrOutput) ToOceanAutoscalerPtrOutput() OceanAutoscalerPtrOutput {
	return o
}

func (o OceanAutoscalerPtrOutput) ToOceanAutoscalerPtrOutputWithContext(ctx context.Context) OceanAutoscalerPtrOutput {
	return o
}

func (o OceanAutoscalerPtrOutput) Elem() OceanAutoscalerOutput {
	return o.ApplyT(func(v *OceanAutoscaler) OceanAutoscaler {
		if v != nil {
			return *v
		}
		var ret OceanAutoscaler
		return ret
	}).(OceanAutoscalerOutput)
}

// The auto-headroom percentage. Set a number between 0-200 to control the headroom % of the cluster. Relevant when `isAutoConfig`= true.
func (o OceanAutoscalerPtrOutput) AutoHeadroomPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *int {
		if v == nil {
			return nil
		}
		return v.AutoHeadroomPercentage
	}).(pulumi.IntPtrOutput)
}

// Cooldown period between scaling actions.
func (o OceanAutoscalerPtrOutput) Cooldown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *int {
		if v == nil {
			return nil
		}
		return v.Cooldown
	}).(pulumi.IntPtrOutput)
}

// Auto Scaling scale down operations.
func (o OceanAutoscalerPtrOutput) Down() OceanAutoscalerDownPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *OceanAutoscalerDown {
		if v == nil {
			return nil
		}
		return v.Down
	}).(OceanAutoscalerDownPtrOutput)
}

// When set to true, both automatic and per custom launch specification manual headroom to be saved concurrently and independently in the cluster. prerequisite: isAutoConfig must be true
func (o OceanAutoscalerPtrOutput) EnableAutomaticAndManualHeadroom() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticAndManualHeadroom
	}).(pulumi.BoolPtrOutput)
}

// Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
func (o OceanAutoscalerPtrOutput) Headroom() OceanAutoscalerHeadroomPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *OceanAutoscalerHeadroom {
		if v == nil {
			return nil
		}
		return v.Headroom
	}).(OceanAutoscalerHeadroomPtrOutput)
}

// Automatically configure and optimize headroom resources.
func (o OceanAutoscalerPtrOutput) IsAutoConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoConfig
	}).(pulumi.BoolPtrOutput)
}

// Enable the Ocean ECS autoscaler.
func (o OceanAutoscalerPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optionally set upper and lower bounds on the resource usage of the cluster.
func (o OceanAutoscalerPtrOutput) ResourceLimits() OceanAutoscalerResourceLimitsPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *OceanAutoscalerResourceLimits {
		if v == nil {
			return nil
		}
		return v.ResourceLimits
	}).(OceanAutoscalerResourceLimitsPtrOutput)
}

// Option to scale down non-service tasks. If not set, Ocean does not scale down standalone tasks.
func (o OceanAutoscalerPtrOutput) ShouldScaleDownNonServiceTasks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanAutoscaler) *bool {
		if v == nil {
			return nil
		}
		return v.ShouldScaleDownNonServiceTasks
	}).(pulumi.BoolPtrOutput)
}

type OceanAutoscalerDown struct {
	// Would represent the maximum % to scale-down. Number between 1-100.
	MaxScaleDownPercentage *float64 `pulumi:"maxScaleDownPercentage"`
}

// OceanAutoscalerDownInput is an input type that accepts OceanAutoscalerDownArgs and OceanAutoscalerDownOutput values.
// You can construct a concrete instance of `OceanAutoscalerDownInput` via:
//
//	OceanAutoscalerDownArgs{...}
type OceanAutoscalerDownInput interface {
	pulumi.Input

	ToOceanAutoscalerDownOutput() OceanAutoscalerDownOutput
	ToOceanAutoscalerDownOutputWithContext(context.Context) OceanAutoscalerDownOutput
}

type OceanAutoscalerDownArgs struct {
	// Would represent the maximum % to scale-down. Number between 1-100.
	MaxScaleDownPercentage pulumi.Float64PtrInput `pulumi:"maxScaleDownPercentage"`
}

func (OceanAutoscalerDownArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerDown)(nil)).Elem()
}

func (i OceanAutoscalerDownArgs) ToOceanAutoscalerDownOutput() OceanAutoscalerDownOutput {
	return i.ToOceanAutoscalerDownOutputWithContext(context.Background())
}

func (i OceanAutoscalerDownArgs) ToOceanAutoscalerDownOutputWithContext(ctx context.Context) OceanAutoscalerDownOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerDownOutput)
}

func (i OceanAutoscalerDownArgs) ToOceanAutoscalerDownPtrOutput() OceanAutoscalerDownPtrOutput {
	return i.ToOceanAutoscalerDownPtrOutputWithContext(context.Background())
}

func (i OceanAutoscalerDownArgs) ToOceanAutoscalerDownPtrOutputWithContext(ctx context.Context) OceanAutoscalerDownPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerDownOutput).ToOceanAutoscalerDownPtrOutputWithContext(ctx)
}

// OceanAutoscalerDownPtrInput is an input type that accepts OceanAutoscalerDownArgs, OceanAutoscalerDownPtr and OceanAutoscalerDownPtrOutput values.
// You can construct a concrete instance of `OceanAutoscalerDownPtrInput` via:
//
//	        OceanAutoscalerDownArgs{...}
//
//	or:
//
//	        nil
type OceanAutoscalerDownPtrInput interface {
	pulumi.Input

	ToOceanAutoscalerDownPtrOutput() OceanAutoscalerDownPtrOutput
	ToOceanAutoscalerDownPtrOutputWithContext(context.Context) OceanAutoscalerDownPtrOutput
}

type oceanAutoscalerDownPtrType OceanAutoscalerDownArgs

func OceanAutoscalerDownPtr(v *OceanAutoscalerDownArgs) OceanAutoscalerDownPtrInput {
	return (*oceanAutoscalerDownPtrType)(v)
}

func (*oceanAutoscalerDownPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerDown)(nil)).Elem()
}

func (i *oceanAutoscalerDownPtrType) ToOceanAutoscalerDownPtrOutput() OceanAutoscalerDownPtrOutput {
	return i.ToOceanAutoscalerDownPtrOutputWithContext(context.Background())
}

func (i *oceanAutoscalerDownPtrType) ToOceanAutoscalerDownPtrOutputWithContext(ctx context.Context) OceanAutoscalerDownPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerDownPtrOutput)
}

type OceanAutoscalerDownOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerDownOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerDown)(nil)).Elem()
}

func (o OceanAutoscalerDownOutput) ToOceanAutoscalerDownOutput() OceanAutoscalerDownOutput {
	return o
}

func (o OceanAutoscalerDownOutput) ToOceanAutoscalerDownOutputWithContext(ctx context.Context) OceanAutoscalerDownOutput {
	return o
}

func (o OceanAutoscalerDownOutput) ToOceanAutoscalerDownPtrOutput() OceanAutoscalerDownPtrOutput {
	return o.ToOceanAutoscalerDownPtrOutputWithContext(context.Background())
}

func (o OceanAutoscalerDownOutput) ToOceanAutoscalerDownPtrOutputWithContext(ctx context.Context) OceanAutoscalerDownPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanAutoscalerDown) *OceanAutoscalerDown {
		return &v
	}).(OceanAutoscalerDownPtrOutput)
}

// Would represent the maximum % to scale-down. Number between 1-100.
func (o OceanAutoscalerDownOutput) MaxScaleDownPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OceanAutoscalerDown) *float64 { return v.MaxScaleDownPercentage }).(pulumi.Float64PtrOutput)
}

type OceanAutoscalerDownPtrOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerDownPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerDown)(nil)).Elem()
}

func (o OceanAutoscalerDownPtrOutput) ToOceanAutoscalerDownPtrOutput() OceanAutoscalerDownPtrOutput {
	return o
}

func (o OceanAutoscalerDownPtrOutput) ToOceanAutoscalerDownPtrOutputWithContext(ctx context.Context) OceanAutoscalerDownPtrOutput {
	return o
}

func (o OceanAutoscalerDownPtrOutput) Elem() OceanAutoscalerDownOutput {
	return o.ApplyT(func(v *OceanAutoscalerDown) OceanAutoscalerDown {
		if v != nil {
			return *v
		}
		var ret OceanAutoscalerDown
		return ret
	}).(OceanAutoscalerDownOutput)
}

// Would represent the maximum % to scale-down. Number between 1-100.
func (o OceanAutoscalerDownPtrOutput) MaxScaleDownPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerDown) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxScaleDownPercentage
	}).(pulumi.Float64PtrOutput)
}

type OceanAutoscalerHeadroom struct {
	// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
	CpuPerUnit *int `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MB) to allocate the headroom.
	MemoryPerUnit *int `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
	NumOfUnits *int `pulumi:"numOfUnits"`
}

// OceanAutoscalerHeadroomInput is an input type that accepts OceanAutoscalerHeadroomArgs and OceanAutoscalerHeadroomOutput values.
// You can construct a concrete instance of `OceanAutoscalerHeadroomInput` via:
//
//	OceanAutoscalerHeadroomArgs{...}
type OceanAutoscalerHeadroomInput interface {
	pulumi.Input

	ToOceanAutoscalerHeadroomOutput() OceanAutoscalerHeadroomOutput
	ToOceanAutoscalerHeadroomOutputWithContext(context.Context) OceanAutoscalerHeadroomOutput
}

type OceanAutoscalerHeadroomArgs struct {
	// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
	CpuPerUnit pulumi.IntPtrInput `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MB) to allocate the headroom.
	MemoryPerUnit pulumi.IntPtrInput `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
	NumOfUnits pulumi.IntPtrInput `pulumi:"numOfUnits"`
}

func (OceanAutoscalerHeadroomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerHeadroom)(nil)).Elem()
}

func (i OceanAutoscalerHeadroomArgs) ToOceanAutoscalerHeadroomOutput() OceanAutoscalerHeadroomOutput {
	return i.ToOceanAutoscalerHeadroomOutputWithContext(context.Background())
}

func (i OceanAutoscalerHeadroomArgs) ToOceanAutoscalerHeadroomOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerHeadroomOutput)
}

func (i OceanAutoscalerHeadroomArgs) ToOceanAutoscalerHeadroomPtrOutput() OceanAutoscalerHeadroomPtrOutput {
	return i.ToOceanAutoscalerHeadroomPtrOutputWithContext(context.Background())
}

func (i OceanAutoscalerHeadroomArgs) ToOceanAutoscalerHeadroomPtrOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerHeadroomOutput).ToOceanAutoscalerHeadroomPtrOutputWithContext(ctx)
}

// OceanAutoscalerHeadroomPtrInput is an input type that accepts OceanAutoscalerHeadroomArgs, OceanAutoscalerHeadroomPtr and OceanAutoscalerHeadroomPtrOutput values.
// You can construct a concrete instance of `OceanAutoscalerHeadroomPtrInput` via:
//
//	        OceanAutoscalerHeadroomArgs{...}
//
//	or:
//
//	        nil
type OceanAutoscalerHeadroomPtrInput interface {
	pulumi.Input

	ToOceanAutoscalerHeadroomPtrOutput() OceanAutoscalerHeadroomPtrOutput
	ToOceanAutoscalerHeadroomPtrOutputWithContext(context.Context) OceanAutoscalerHeadroomPtrOutput
}

type oceanAutoscalerHeadroomPtrType OceanAutoscalerHeadroomArgs

func OceanAutoscalerHeadroomPtr(v *OceanAutoscalerHeadroomArgs) OceanAutoscalerHeadroomPtrInput {
	return (*oceanAutoscalerHeadroomPtrType)(v)
}

func (*oceanAutoscalerHeadroomPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerHeadroom)(nil)).Elem()
}

func (i *oceanAutoscalerHeadroomPtrType) ToOceanAutoscalerHeadroomPtrOutput() OceanAutoscalerHeadroomPtrOutput {
	return i.ToOceanAutoscalerHeadroomPtrOutputWithContext(context.Background())
}

func (i *oceanAutoscalerHeadroomPtrType) ToOceanAutoscalerHeadroomPtrOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerHeadroomPtrOutput)
}

type OceanAutoscalerHeadroomOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerHeadroomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerHeadroom)(nil)).Elem()
}

func (o OceanAutoscalerHeadroomOutput) ToOceanAutoscalerHeadroomOutput() OceanAutoscalerHeadroomOutput {
	return o
}

func (o OceanAutoscalerHeadroomOutput) ToOceanAutoscalerHeadroomOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomOutput {
	return o
}

func (o OceanAutoscalerHeadroomOutput) ToOceanAutoscalerHeadroomPtrOutput() OceanAutoscalerHeadroomPtrOutput {
	return o.ToOceanAutoscalerHeadroomPtrOutputWithContext(context.Background())
}

func (o OceanAutoscalerHeadroomOutput) ToOceanAutoscalerHeadroomPtrOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanAutoscalerHeadroom) *OceanAutoscalerHeadroom {
		return &v
	}).(OceanAutoscalerHeadroomPtrOutput)
}

// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
func (o OceanAutoscalerHeadroomOutput) CpuPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscalerHeadroom) *int { return v.CpuPerUnit }).(pulumi.IntPtrOutput)
}

// Optionally configure the amount of memory (MB) to allocate the headroom.
func (o OceanAutoscalerHeadroomOutput) MemoryPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscalerHeadroom) *int { return v.MemoryPerUnit }).(pulumi.IntPtrOutput)
}

// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
func (o OceanAutoscalerHeadroomOutput) NumOfUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscalerHeadroom) *int { return v.NumOfUnits }).(pulumi.IntPtrOutput)
}

type OceanAutoscalerHeadroomPtrOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerHeadroomPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerHeadroom)(nil)).Elem()
}

func (o OceanAutoscalerHeadroomPtrOutput) ToOceanAutoscalerHeadroomPtrOutput() OceanAutoscalerHeadroomPtrOutput {
	return o
}

func (o OceanAutoscalerHeadroomPtrOutput) ToOceanAutoscalerHeadroomPtrOutputWithContext(ctx context.Context) OceanAutoscalerHeadroomPtrOutput {
	return o
}

func (o OceanAutoscalerHeadroomPtrOutput) Elem() OceanAutoscalerHeadroomOutput {
	return o.ApplyT(func(v *OceanAutoscalerHeadroom) OceanAutoscalerHeadroom {
		if v != nil {
			return *v
		}
		var ret OceanAutoscalerHeadroom
		return ret
	}).(OceanAutoscalerHeadroomOutput)
}

// Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
func (o OceanAutoscalerHeadroomPtrOutput) CpuPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerHeadroom) *int {
		if v == nil {
			return nil
		}
		return v.CpuPerUnit
	}).(pulumi.IntPtrOutput)
}

// Optionally configure the amount of memory (MB) to allocate the headroom.
func (o OceanAutoscalerHeadroomPtrOutput) MemoryPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerHeadroom) *int {
		if v == nil {
			return nil
		}
		return v.MemoryPerUnit
	}).(pulumi.IntPtrOutput)
}

// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
func (o OceanAutoscalerHeadroomPtrOutput) NumOfUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerHeadroom) *int {
		if v == nil {
			return nil
		}
		return v.NumOfUnits
	}).(pulumi.IntPtrOutput)
}

type OceanAutoscalerResourceLimits struct {
	// The maximum memory in GiB units that can be allocated to the cluster.
	MaxMemoryGib *int `pulumi:"maxMemoryGib"`
	// The maximum cpu in vCPU units that can be allocated to the cluster.
	MaxVcpu *int `pulumi:"maxVcpu"`
}

// OceanAutoscalerResourceLimitsInput is an input type that accepts OceanAutoscalerResourceLimitsArgs and OceanAutoscalerResourceLimitsOutput values.
// You can construct a concrete instance of `OceanAutoscalerResourceLimitsInput` via:
//
//	OceanAutoscalerResourceLimitsArgs{...}
type OceanAutoscalerResourceLimitsInput interface {
	pulumi.Input

	ToOceanAutoscalerResourceLimitsOutput() OceanAutoscalerResourceLimitsOutput
	ToOceanAutoscalerResourceLimitsOutputWithContext(context.Context) OceanAutoscalerResourceLimitsOutput
}

type OceanAutoscalerResourceLimitsArgs struct {
	// The maximum memory in GiB units that can be allocated to the cluster.
	MaxMemoryGib pulumi.IntPtrInput `pulumi:"maxMemoryGib"`
	// The maximum cpu in vCPU units that can be allocated to the cluster.
	MaxVcpu pulumi.IntPtrInput `pulumi:"maxVcpu"`
}

func (OceanAutoscalerResourceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerResourceLimits)(nil)).Elem()
}

func (i OceanAutoscalerResourceLimitsArgs) ToOceanAutoscalerResourceLimitsOutput() OceanAutoscalerResourceLimitsOutput {
	return i.ToOceanAutoscalerResourceLimitsOutputWithContext(context.Background())
}

func (i OceanAutoscalerResourceLimitsArgs) ToOceanAutoscalerResourceLimitsOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerResourceLimitsOutput)
}

func (i OceanAutoscalerResourceLimitsArgs) ToOceanAutoscalerResourceLimitsPtrOutput() OceanAutoscalerResourceLimitsPtrOutput {
	return i.ToOceanAutoscalerResourceLimitsPtrOutputWithContext(context.Background())
}

func (i OceanAutoscalerResourceLimitsArgs) ToOceanAutoscalerResourceLimitsPtrOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerResourceLimitsOutput).ToOceanAutoscalerResourceLimitsPtrOutputWithContext(ctx)
}

// OceanAutoscalerResourceLimitsPtrInput is an input type that accepts OceanAutoscalerResourceLimitsArgs, OceanAutoscalerResourceLimitsPtr and OceanAutoscalerResourceLimitsPtrOutput values.
// You can construct a concrete instance of `OceanAutoscalerResourceLimitsPtrInput` via:
//
//	        OceanAutoscalerResourceLimitsArgs{...}
//
//	or:
//
//	        nil
type OceanAutoscalerResourceLimitsPtrInput interface {
	pulumi.Input

	ToOceanAutoscalerResourceLimitsPtrOutput() OceanAutoscalerResourceLimitsPtrOutput
	ToOceanAutoscalerResourceLimitsPtrOutputWithContext(context.Context) OceanAutoscalerResourceLimitsPtrOutput
}

type oceanAutoscalerResourceLimitsPtrType OceanAutoscalerResourceLimitsArgs

func OceanAutoscalerResourceLimitsPtr(v *OceanAutoscalerResourceLimitsArgs) OceanAutoscalerResourceLimitsPtrInput {
	return (*oceanAutoscalerResourceLimitsPtrType)(v)
}

func (*oceanAutoscalerResourceLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerResourceLimits)(nil)).Elem()
}

func (i *oceanAutoscalerResourceLimitsPtrType) ToOceanAutoscalerResourceLimitsPtrOutput() OceanAutoscalerResourceLimitsPtrOutput {
	return i.ToOceanAutoscalerResourceLimitsPtrOutputWithContext(context.Background())
}

func (i *oceanAutoscalerResourceLimitsPtrType) ToOceanAutoscalerResourceLimitsPtrOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanAutoscalerResourceLimitsPtrOutput)
}

type OceanAutoscalerResourceLimitsOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerResourceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanAutoscalerResourceLimits)(nil)).Elem()
}

func (o OceanAutoscalerResourceLimitsOutput) ToOceanAutoscalerResourceLimitsOutput() OceanAutoscalerResourceLimitsOutput {
	return o
}

func (o OceanAutoscalerResourceLimitsOutput) ToOceanAutoscalerResourceLimitsOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsOutput {
	return o
}

func (o OceanAutoscalerResourceLimitsOutput) ToOceanAutoscalerResourceLimitsPtrOutput() OceanAutoscalerResourceLimitsPtrOutput {
	return o.ToOceanAutoscalerResourceLimitsPtrOutputWithContext(context.Background())
}

func (o OceanAutoscalerResourceLimitsOutput) ToOceanAutoscalerResourceLimitsPtrOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanAutoscalerResourceLimits) *OceanAutoscalerResourceLimits {
		return &v
	}).(OceanAutoscalerResourceLimitsPtrOutput)
}

// The maximum memory in GiB units that can be allocated to the cluster.
func (o OceanAutoscalerResourceLimitsOutput) MaxMemoryGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscalerResourceLimits) *int { return v.MaxMemoryGib }).(pulumi.IntPtrOutput)
}

// The maximum cpu in vCPU units that can be allocated to the cluster.
func (o OceanAutoscalerResourceLimitsOutput) MaxVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanAutoscalerResourceLimits) *int { return v.MaxVcpu }).(pulumi.IntPtrOutput)
}

type OceanAutoscalerResourceLimitsPtrOutput struct{ *pulumi.OutputState }

func (OceanAutoscalerResourceLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanAutoscalerResourceLimits)(nil)).Elem()
}

func (o OceanAutoscalerResourceLimitsPtrOutput) ToOceanAutoscalerResourceLimitsPtrOutput() OceanAutoscalerResourceLimitsPtrOutput {
	return o
}

func (o OceanAutoscalerResourceLimitsPtrOutput) ToOceanAutoscalerResourceLimitsPtrOutputWithContext(ctx context.Context) OceanAutoscalerResourceLimitsPtrOutput {
	return o
}

func (o OceanAutoscalerResourceLimitsPtrOutput) Elem() OceanAutoscalerResourceLimitsOutput {
	return o.ApplyT(func(v *OceanAutoscalerResourceLimits) OceanAutoscalerResourceLimits {
		if v != nil {
			return *v
		}
		var ret OceanAutoscalerResourceLimits
		return ret
	}).(OceanAutoscalerResourceLimitsOutput)
}

// The maximum memory in GiB units that can be allocated to the cluster.
func (o OceanAutoscalerResourceLimitsPtrOutput) MaxMemoryGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerResourceLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxMemoryGib
	}).(pulumi.IntPtrOutput)
}

// The maximum cpu in vCPU units that can be allocated to the cluster.
func (o OceanAutoscalerResourceLimitsPtrOutput) MaxVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanAutoscalerResourceLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxVcpu
	}).(pulumi.IntPtrOutput)
}

type OceanBlockDeviceMapping struct {
	// String. Set device name. Example: `/dev/xvda1`.
	DeviceName string `pulumi:"deviceName"`
	// Object. Set Elastic Block Store properties.
	Ebs *OceanBlockDeviceMappingEbs `pulumi:"ebs"`
	// String. Suppresses the specified device included in the block device mapping of the AMI.
	NoDevice    *string `pulumi:"noDevice"`
	VirtualName *string `pulumi:"virtualName"`
}

// OceanBlockDeviceMappingInput is an input type that accepts OceanBlockDeviceMappingArgs and OceanBlockDeviceMappingOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingInput` via:
//
//	OceanBlockDeviceMappingArgs{...}
type OceanBlockDeviceMappingInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingOutput() OceanBlockDeviceMappingOutput
	ToOceanBlockDeviceMappingOutputWithContext(context.Context) OceanBlockDeviceMappingOutput
}

type OceanBlockDeviceMappingArgs struct {
	// String. Set device name. Example: `/dev/xvda1`.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Object. Set Elastic Block Store properties.
	Ebs OceanBlockDeviceMappingEbsPtrInput `pulumi:"ebs"`
	// String. Suppresses the specified device included in the block device mapping of the AMI.
	NoDevice    pulumi.StringPtrInput `pulumi:"noDevice"`
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (OceanBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMapping)(nil)).Elem()
}

func (i OceanBlockDeviceMappingArgs) ToOceanBlockDeviceMappingOutput() OceanBlockDeviceMappingOutput {
	return i.ToOceanBlockDeviceMappingOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingArgs) ToOceanBlockDeviceMappingOutputWithContext(ctx context.Context) OceanBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingOutput)
}

// OceanBlockDeviceMappingArrayInput is an input type that accepts OceanBlockDeviceMappingArray and OceanBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingArrayInput` via:
//
//	OceanBlockDeviceMappingArray{ OceanBlockDeviceMappingArgs{...} }
type OceanBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingArrayOutput() OceanBlockDeviceMappingArrayOutput
	ToOceanBlockDeviceMappingArrayOutputWithContext(context.Context) OceanBlockDeviceMappingArrayOutput
}

type OceanBlockDeviceMappingArray []OceanBlockDeviceMappingInput

func (OceanBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanBlockDeviceMapping)(nil)).Elem()
}

func (i OceanBlockDeviceMappingArray) ToOceanBlockDeviceMappingArrayOutput() OceanBlockDeviceMappingArrayOutput {
	return i.ToOceanBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingArray) ToOceanBlockDeviceMappingArrayOutputWithContext(ctx context.Context) OceanBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingArrayOutput)
}

type OceanBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMapping)(nil)).Elem()
}

func (o OceanBlockDeviceMappingOutput) ToOceanBlockDeviceMappingOutput() OceanBlockDeviceMappingOutput {
	return o
}

func (o OceanBlockDeviceMappingOutput) ToOceanBlockDeviceMappingOutputWithContext(ctx context.Context) OceanBlockDeviceMappingOutput {
	return o
}

// String. Set device name. Example: `/dev/xvda1`.
func (o OceanBlockDeviceMappingOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v OceanBlockDeviceMapping) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Object. Set Elastic Block Store properties.
func (o OceanBlockDeviceMappingOutput) Ebs() OceanBlockDeviceMappingEbsPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMapping) *OceanBlockDeviceMappingEbs { return v.Ebs }).(OceanBlockDeviceMappingEbsPtrOutput)
}

// String. Suppresses the specified device included in the block device mapping of the AMI.
func (o OceanBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

func (o OceanBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type OceanBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanBlockDeviceMapping)(nil)).Elem()
}

func (o OceanBlockDeviceMappingArrayOutput) ToOceanBlockDeviceMappingArrayOutput() OceanBlockDeviceMappingArrayOutput {
	return o
}

func (o OceanBlockDeviceMappingArrayOutput) ToOceanBlockDeviceMappingArrayOutputWithContext(ctx context.Context) OceanBlockDeviceMappingArrayOutput {
	return o
}

func (o OceanBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) OceanBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanBlockDeviceMapping {
		return vs[0].([]OceanBlockDeviceMapping)[vs[1].(int)]
	}).(OceanBlockDeviceMappingOutput)
}

type OceanBlockDeviceMappingEbs struct {
	// Boolean. Toggles EBS deletion upon instance termination.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
	DynamicVolumeSize *OceanBlockDeviceMappingEbsDynamicVolumeSize `pulumi:"dynamicVolumeSize"`
	// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// Int. The number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// (Optional) String. The snapshot ID to mount by.
	SnapshotId *string `pulumi:"snapshotId"`
	// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
	Throughput *int `pulumi:"throughput"`
	// Int. The size (in GB) of the volume.
	VolumeSize *int `pulumi:"volumeSize"`
	// String. The type of the volume. Example: `gp2`.
	VolumeType *string `pulumi:"volumeType"`
}

// OceanBlockDeviceMappingEbsInput is an input type that accepts OceanBlockDeviceMappingEbsArgs and OceanBlockDeviceMappingEbsOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingEbsInput` via:
//
//	OceanBlockDeviceMappingEbsArgs{...}
type OceanBlockDeviceMappingEbsInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingEbsOutput() OceanBlockDeviceMappingEbsOutput
	ToOceanBlockDeviceMappingEbsOutputWithContext(context.Context) OceanBlockDeviceMappingEbsOutput
}

type OceanBlockDeviceMappingEbsArgs struct {
	// Boolean. Toggles EBS deletion upon instance termination.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
	DynamicVolumeSize OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput `pulumi:"dynamicVolumeSize"`
	// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Int. The number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// (Optional) String. The snapshot ID to mount by.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// Int. The size (in GB) of the volume.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// String. The type of the volume. Example: `gp2`.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (OceanBlockDeviceMappingEbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMappingEbs)(nil)).Elem()
}

func (i OceanBlockDeviceMappingEbsArgs) ToOceanBlockDeviceMappingEbsOutput() OceanBlockDeviceMappingEbsOutput {
	return i.ToOceanBlockDeviceMappingEbsOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingEbsArgs) ToOceanBlockDeviceMappingEbsOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsOutput)
}

func (i OceanBlockDeviceMappingEbsArgs) ToOceanBlockDeviceMappingEbsPtrOutput() OceanBlockDeviceMappingEbsPtrOutput {
	return i.ToOceanBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingEbsArgs) ToOceanBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsOutput).ToOceanBlockDeviceMappingEbsPtrOutputWithContext(ctx)
}

// OceanBlockDeviceMappingEbsPtrInput is an input type that accepts OceanBlockDeviceMappingEbsArgs, OceanBlockDeviceMappingEbsPtr and OceanBlockDeviceMappingEbsPtrOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingEbsPtrInput` via:
//
//	        OceanBlockDeviceMappingEbsArgs{...}
//
//	or:
//
//	        nil
type OceanBlockDeviceMappingEbsPtrInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingEbsPtrOutput() OceanBlockDeviceMappingEbsPtrOutput
	ToOceanBlockDeviceMappingEbsPtrOutputWithContext(context.Context) OceanBlockDeviceMappingEbsPtrOutput
}

type oceanBlockDeviceMappingEbsPtrType OceanBlockDeviceMappingEbsArgs

func OceanBlockDeviceMappingEbsPtr(v *OceanBlockDeviceMappingEbsArgs) OceanBlockDeviceMappingEbsPtrInput {
	return (*oceanBlockDeviceMappingEbsPtrType)(v)
}

func (*oceanBlockDeviceMappingEbsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanBlockDeviceMappingEbs)(nil)).Elem()
}

func (i *oceanBlockDeviceMappingEbsPtrType) ToOceanBlockDeviceMappingEbsPtrOutput() OceanBlockDeviceMappingEbsPtrOutput {
	return i.ToOceanBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (i *oceanBlockDeviceMappingEbsPtrType) ToOceanBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsPtrOutput)
}

type OceanBlockDeviceMappingEbsOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingEbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMappingEbs)(nil)).Elem()
}

func (o OceanBlockDeviceMappingEbsOutput) ToOceanBlockDeviceMappingEbsOutput() OceanBlockDeviceMappingEbsOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsOutput) ToOceanBlockDeviceMappingEbsOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsOutput) ToOceanBlockDeviceMappingEbsPtrOutput() OceanBlockDeviceMappingEbsPtrOutput {
	return o.ToOceanBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (o OceanBlockDeviceMappingEbsOutput) ToOceanBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanBlockDeviceMappingEbs) *OceanBlockDeviceMappingEbs {
		return &v
	}).(OceanBlockDeviceMappingEbsPtrOutput)
}

// Boolean. Toggles EBS deletion upon instance termination.
func (o OceanBlockDeviceMappingEbsOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
func (o OceanBlockDeviceMappingEbsOutput) DynamicVolumeSize() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *OceanBlockDeviceMappingEbsDynamicVolumeSize {
		return v.DynamicVolumeSize
	}).(OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
func (o OceanBlockDeviceMappingEbsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Int. The number of I/O operations per second (IOPS) that the volume supports.
func (o OceanBlockDeviceMappingEbsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
func (o OceanBlockDeviceMappingEbsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// (Optional) String. The snapshot ID to mount by.
func (o OceanBlockDeviceMappingEbsOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
func (o OceanBlockDeviceMappingEbsOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Int. The size (in GB) of the volume.
func (o OceanBlockDeviceMappingEbsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// String. The type of the volume. Example: `gp2`.
func (o OceanBlockDeviceMappingEbsOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type OceanBlockDeviceMappingEbsPtrOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingEbsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanBlockDeviceMappingEbs)(nil)).Elem()
}

func (o OceanBlockDeviceMappingEbsPtrOutput) ToOceanBlockDeviceMappingEbsPtrOutput() OceanBlockDeviceMappingEbsPtrOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsPtrOutput) ToOceanBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsPtrOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsPtrOutput) Elem() OceanBlockDeviceMappingEbsOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) OceanBlockDeviceMappingEbs {
		if v != nil {
			return *v
		}
		var ret OceanBlockDeviceMappingEbs
		return ret
	}).(OceanBlockDeviceMappingEbsOutput)
}

// Boolean. Toggles EBS deletion upon instance termination.
func (o OceanBlockDeviceMappingEbsPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
func (o OceanBlockDeviceMappingEbsPtrOutput) DynamicVolumeSize() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *OceanBlockDeviceMappingEbsDynamicVolumeSize {
		if v == nil {
			return nil
		}
		return v.DynamicVolumeSize
	}).(OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
func (o OceanBlockDeviceMappingEbsPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Int. The number of I/O operations per second (IOPS) that the volume supports.
func (o OceanBlockDeviceMappingEbsPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
func (o OceanBlockDeviceMappingEbsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// (Optional) String. The snapshot ID to mount by.
func (o OceanBlockDeviceMappingEbsPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
func (o OceanBlockDeviceMappingEbsPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Int. The size (in GB) of the volume.
func (o OceanBlockDeviceMappingEbsPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// String. The type of the volume. Example: `gp2`.
func (o OceanBlockDeviceMappingEbsPtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type OceanBlockDeviceMappingEbsDynamicVolumeSize struct {
	// Int. Initial size for volume. Example: `50`.
	BaseSize int `pulumi:"baseSize"`
	// String. Resource type to increase volume size dynamically by. Valid values: `CPU`.
	Resource string `pulumi:"resource"`
	// Int. Additional size (in GB) per resource unit. Example: When the `baseSize=50`, `sizePerResourceUnit=20`, and instance with two CPUs is launched, its total disk size will be: 90GB.
	SizePerResourceUnit int `pulumi:"sizePerResourceUnit"`
}

// OceanBlockDeviceMappingEbsDynamicVolumeSizeInput is an input type that accepts OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs and OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingEbsDynamicVolumeSizeInput` via:
//
//	OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs{...}
type OceanBlockDeviceMappingEbsDynamicVolumeSizeInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput
	ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput
}

type OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs struct {
	// Int. Initial size for volume. Example: `50`.
	BaseSize pulumi.IntInput `pulumi:"baseSize"`
	// String. Resource type to increase volume size dynamically by. Valid values: `CPU`.
	Resource pulumi.StringInput `pulumi:"resource"`
	// Int. Additional size (in GB) per resource unit. Example: When the `baseSize=50`, `sizePerResourceUnit=20`, and instance with two CPUs is launched, its total disk size will be: 90GB.
	SizePerResourceUnit pulumi.IntInput `pulumi:"sizePerResourceUnit"`
}

func (OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (i OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return i.ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput)
}

func (i OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return i.ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (i OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput).ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx)
}

// OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput is an input type that accepts OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs, OceanBlockDeviceMappingEbsDynamicVolumeSizePtr and OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput values.
// You can construct a concrete instance of `OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput` via:
//
//	        OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs{...}
//
//	or:
//
//	        nil
type OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput interface {
	pulumi.Input

	ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput
	ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput
}

type oceanBlockDeviceMappingEbsDynamicVolumeSizePtrType OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs

func OceanBlockDeviceMappingEbsDynamicVolumeSizePtr(v *OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput {
	return (*oceanBlockDeviceMappingEbsDynamicVolumeSizePtrType)(v)
}

func (*oceanBlockDeviceMappingEbsDynamicVolumeSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (i *oceanBlockDeviceMappingEbsDynamicVolumeSizePtrType) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return i.ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (i *oceanBlockDeviceMappingEbsDynamicVolumeSizePtrType) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

type OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanBlockDeviceMappingEbsDynamicVolumeSize) *OceanBlockDeviceMappingEbsDynamicVolumeSize {
		return &v
	}).(OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Int. Initial size for volume. Example: `50`.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) BaseSize() pulumi.IntOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbsDynamicVolumeSize) int { return v.BaseSize }).(pulumi.IntOutput)
}

// String. Resource type to increase volume size dynamically by. Valid values: `CPU`.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbsDynamicVolumeSize) string { return v.Resource }).(pulumi.StringOutput)
}

// Int. Additional size (in GB) per resource unit. Example: When the `baseSize=50`, `sizePerResourceUnit=20`, and instance with two CPUs is launched, its total disk size will be: 90GB.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput) SizePerResourceUnit() pulumi.IntOutput {
	return o.ApplyT(func(v OceanBlockDeviceMappingEbsDynamicVolumeSize) int { return v.SizePerResourceUnit }).(pulumi.IntOutput)
}

type OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput struct{ *pulumi.OutputState }

func (OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ToOceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o
}

func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) Elem() OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbsDynamicVolumeSize) OceanBlockDeviceMappingEbsDynamicVolumeSize {
		if v != nil {
			return *v
		}
		var ret OceanBlockDeviceMappingEbsDynamicVolumeSize
		return ret
	}).(OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput)
}

// Int. Initial size for volume. Example: `50`.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) BaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbsDynamicVolumeSize) *int {
		if v == nil {
			return nil
		}
		return &v.BaseSize
	}).(pulumi.IntPtrOutput)
}

// String. Resource type to increase volume size dynamically by. Valid values: `CPU`.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbsDynamicVolumeSize) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Int. Additional size (in GB) per resource unit. Example: When the `baseSize=50`, `sizePerResourceUnit=20`, and instance with two CPUs is launched, its total disk size will be: 90GB.
func (o OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) SizePerResourceUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanBlockDeviceMappingEbsDynamicVolumeSize) *int {
		if v == nil {
			return nil
		}
		return &v.SizePerResourceUnit
	}).(pulumi.IntPtrOutput)
}

type OceanClusterOrientation struct {
	// You can control the approach that Ocean takes while launching nodes by configuring this value. Possible values: `costOriented`,`balanced`,`cheapest`.
	AvailabilityVsCost *string `pulumi:"availabilityVsCost"`
}

// OceanClusterOrientationInput is an input type that accepts OceanClusterOrientationArgs and OceanClusterOrientationOutput values.
// You can construct a concrete instance of `OceanClusterOrientationInput` via:
//
//	OceanClusterOrientationArgs{...}
type OceanClusterOrientationInput interface {
	pulumi.Input

	ToOceanClusterOrientationOutput() OceanClusterOrientationOutput
	ToOceanClusterOrientationOutputWithContext(context.Context) OceanClusterOrientationOutput
}

type OceanClusterOrientationArgs struct {
	// You can control the approach that Ocean takes while launching nodes by configuring this value. Possible values: `costOriented`,`balanced`,`cheapest`.
	AvailabilityVsCost pulumi.StringPtrInput `pulumi:"availabilityVsCost"`
}

func (OceanClusterOrientationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanClusterOrientation)(nil)).Elem()
}

func (i OceanClusterOrientationArgs) ToOceanClusterOrientationOutput() OceanClusterOrientationOutput {
	return i.ToOceanClusterOrientationOutputWithContext(context.Background())
}

func (i OceanClusterOrientationArgs) ToOceanClusterOrientationOutputWithContext(ctx context.Context) OceanClusterOrientationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanClusterOrientationOutput)
}

// OceanClusterOrientationArrayInput is an input type that accepts OceanClusterOrientationArray and OceanClusterOrientationArrayOutput values.
// You can construct a concrete instance of `OceanClusterOrientationArrayInput` via:
//
//	OceanClusterOrientationArray{ OceanClusterOrientationArgs{...} }
type OceanClusterOrientationArrayInput interface {
	pulumi.Input

	ToOceanClusterOrientationArrayOutput() OceanClusterOrientationArrayOutput
	ToOceanClusterOrientationArrayOutputWithContext(context.Context) OceanClusterOrientationArrayOutput
}

type OceanClusterOrientationArray []OceanClusterOrientationInput

func (OceanClusterOrientationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanClusterOrientation)(nil)).Elem()
}

func (i OceanClusterOrientationArray) ToOceanClusterOrientationArrayOutput() OceanClusterOrientationArrayOutput {
	return i.ToOceanClusterOrientationArrayOutputWithContext(context.Background())
}

func (i OceanClusterOrientationArray) ToOceanClusterOrientationArrayOutputWithContext(ctx context.Context) OceanClusterOrientationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanClusterOrientationArrayOutput)
}

type OceanClusterOrientationOutput struct{ *pulumi.OutputState }

func (OceanClusterOrientationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanClusterOrientation)(nil)).Elem()
}

func (o OceanClusterOrientationOutput) ToOceanClusterOrientationOutput() OceanClusterOrientationOutput {
	return o
}

func (o OceanClusterOrientationOutput) ToOceanClusterOrientationOutputWithContext(ctx context.Context) OceanClusterOrientationOutput {
	return o
}

// You can control the approach that Ocean takes while launching nodes by configuring this value. Possible values: `costOriented`,`balanced`,`cheapest`.
func (o OceanClusterOrientationOutput) AvailabilityVsCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanClusterOrientation) *string { return v.AvailabilityVsCost }).(pulumi.StringPtrOutput)
}

type OceanClusterOrientationArrayOutput struct{ *pulumi.OutputState }

func (OceanClusterOrientationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanClusterOrientation)(nil)).Elem()
}

func (o OceanClusterOrientationArrayOutput) ToOceanClusterOrientationArrayOutput() OceanClusterOrientationArrayOutput {
	return o
}

func (o OceanClusterOrientationArrayOutput) ToOceanClusterOrientationArrayOutputWithContext(ctx context.Context) OceanClusterOrientationArrayOutput {
	return o
}

func (o OceanClusterOrientationArrayOutput) Index(i pulumi.IntInput) OceanClusterOrientationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanClusterOrientation {
		return vs[0].([]OceanClusterOrientation)[vs[1].(int)]
	}).(OceanClusterOrientationOutput)
}

type OceanFilters struct {
	// The filtered instance types will support at least one of the architectures from this list.
	Architectures []string `pulumi:"architectures"`
	// The filtered instance types will belong to one of the categories types from this list.
	Categories []string `pulumi:"categories"`
	// The filtered instance types will have one of the disk type from this list.
	DiskTypes []string `pulumi:"diskTypes"`
	// Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
	ExcludeFamilies []string `pulumi:"excludeFamilies"`
	// In case excludeMetal is set to true, metal types will not be available for scaling.
	ExcludeMetal *bool `pulumi:"excludeMetal"`
	// The filtered instance types will have a hypervisor type from this list.
	Hypervisors []string `pulumi:"hypervisors"`
	// Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
	IncludeFamilies []string `pulumi:"includeFamilies"`
	// Ena is supported or not.
	IsEnaSupported *string `pulumi:"isEnaSupported"`
	// Maximum total number of GPUs.
	MaxGpu       *int     `pulumi:"maxGpu"`
	MaxMemoryGib *float64 `pulumi:"maxMemoryGib"`
	// Maximum Bandwidth in Gib/s of network performance.
	MaxNetworkPerformance *int `pulumi:"maxNetworkPerformance"`
	MaxVcpu               *int `pulumi:"maxVcpu"`
	// Minimum number of network interfaces (ENIs).
	MinEnis *int `pulumi:"minEnis"`
	// Minimum total number of GPUs.
	MinGpu *int `pulumi:"minGpu"`
	// Minimum amount of Memory (GiB).
	MinMemoryGib *float64 `pulumi:"minMemoryGib"`
	// Minimum Bandwidth in Gib/s of network performance.
	MinNetworkPerformance *int `pulumi:"minNetworkPerformance"`
	// Minimum number of vcpus available.
	MinVcpu *int `pulumi:"minVcpu"`
	// The filtered instance types will have a root device types from this list.
	RootDeviceTypes []string `pulumi:"rootDeviceTypes"`
	// The filtered instance types will support at least one of the virtualization types from this list.
	VirtualizationTypes []string `pulumi:"virtualizationTypes"`
}

// OceanFiltersInput is an input type that accepts OceanFiltersArgs and OceanFiltersOutput values.
// You can construct a concrete instance of `OceanFiltersInput` via:
//
//	OceanFiltersArgs{...}
type OceanFiltersInput interface {
	pulumi.Input

	ToOceanFiltersOutput() OceanFiltersOutput
	ToOceanFiltersOutputWithContext(context.Context) OceanFiltersOutput
}

type OceanFiltersArgs struct {
	// The filtered instance types will support at least one of the architectures from this list.
	Architectures pulumi.StringArrayInput `pulumi:"architectures"`
	// The filtered instance types will belong to one of the categories types from this list.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// The filtered instance types will have one of the disk type from this list.
	DiskTypes pulumi.StringArrayInput `pulumi:"diskTypes"`
	// Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
	ExcludeFamilies pulumi.StringArrayInput `pulumi:"excludeFamilies"`
	// In case excludeMetal is set to true, metal types will not be available for scaling.
	ExcludeMetal pulumi.BoolPtrInput `pulumi:"excludeMetal"`
	// The filtered instance types will have a hypervisor type from this list.
	Hypervisors pulumi.StringArrayInput `pulumi:"hypervisors"`
	// Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
	IncludeFamilies pulumi.StringArrayInput `pulumi:"includeFamilies"`
	// Ena is supported or not.
	IsEnaSupported pulumi.StringPtrInput `pulumi:"isEnaSupported"`
	// Maximum total number of GPUs.
	MaxGpu       pulumi.IntPtrInput     `pulumi:"maxGpu"`
	MaxMemoryGib pulumi.Float64PtrInput `pulumi:"maxMemoryGib"`
	// Maximum Bandwidth in Gib/s of network performance.
	MaxNetworkPerformance pulumi.IntPtrInput `pulumi:"maxNetworkPerformance"`
	MaxVcpu               pulumi.IntPtrInput `pulumi:"maxVcpu"`
	// Minimum number of network interfaces (ENIs).
	MinEnis pulumi.IntPtrInput `pulumi:"minEnis"`
	// Minimum total number of GPUs.
	MinGpu pulumi.IntPtrInput `pulumi:"minGpu"`
	// Minimum amount of Memory (GiB).
	MinMemoryGib pulumi.Float64PtrInput `pulumi:"minMemoryGib"`
	// Minimum Bandwidth in Gib/s of network performance.
	MinNetworkPerformance pulumi.IntPtrInput `pulumi:"minNetworkPerformance"`
	// Minimum number of vcpus available.
	MinVcpu pulumi.IntPtrInput `pulumi:"minVcpu"`
	// The filtered instance types will have a root device types from this list.
	RootDeviceTypes pulumi.StringArrayInput `pulumi:"rootDeviceTypes"`
	// The filtered instance types will support at least one of the virtualization types from this list.
	VirtualizationTypes pulumi.StringArrayInput `pulumi:"virtualizationTypes"`
}

func (OceanFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanFilters)(nil)).Elem()
}

func (i OceanFiltersArgs) ToOceanFiltersOutput() OceanFiltersOutput {
	return i.ToOceanFiltersOutputWithContext(context.Background())
}

func (i OceanFiltersArgs) ToOceanFiltersOutputWithContext(ctx context.Context) OceanFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanFiltersOutput)
}

func (i OceanFiltersArgs) ToOceanFiltersPtrOutput() OceanFiltersPtrOutput {
	return i.ToOceanFiltersPtrOutputWithContext(context.Background())
}

func (i OceanFiltersArgs) ToOceanFiltersPtrOutputWithContext(ctx context.Context) OceanFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanFiltersOutput).ToOceanFiltersPtrOutputWithContext(ctx)
}

// OceanFiltersPtrInput is an input type that accepts OceanFiltersArgs, OceanFiltersPtr and OceanFiltersPtrOutput values.
// You can construct a concrete instance of `OceanFiltersPtrInput` via:
//
//	        OceanFiltersArgs{...}
//
//	or:
//
//	        nil
type OceanFiltersPtrInput interface {
	pulumi.Input

	ToOceanFiltersPtrOutput() OceanFiltersPtrOutput
	ToOceanFiltersPtrOutputWithContext(context.Context) OceanFiltersPtrOutput
}

type oceanFiltersPtrType OceanFiltersArgs

func OceanFiltersPtr(v *OceanFiltersArgs) OceanFiltersPtrInput {
	return (*oceanFiltersPtrType)(v)
}

func (*oceanFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanFilters)(nil)).Elem()
}

func (i *oceanFiltersPtrType) ToOceanFiltersPtrOutput() OceanFiltersPtrOutput {
	return i.ToOceanFiltersPtrOutputWithContext(context.Background())
}

func (i *oceanFiltersPtrType) ToOceanFiltersPtrOutputWithContext(ctx context.Context) OceanFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanFiltersPtrOutput)
}

type OceanFiltersOutput struct{ *pulumi.OutputState }

func (OceanFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanFilters)(nil)).Elem()
}

func (o OceanFiltersOutput) ToOceanFiltersOutput() OceanFiltersOutput {
	return o
}

func (o OceanFiltersOutput) ToOceanFiltersOutputWithContext(ctx context.Context) OceanFiltersOutput {
	return o
}

func (o OceanFiltersOutput) ToOceanFiltersPtrOutput() OceanFiltersPtrOutput {
	return o.ToOceanFiltersPtrOutputWithContext(context.Background())
}

func (o OceanFiltersOutput) ToOceanFiltersPtrOutputWithContext(ctx context.Context) OceanFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanFilters) *OceanFilters {
		return &v
	}).(OceanFiltersPtrOutput)
}

// The filtered instance types will support at least one of the architectures from this list.
func (o OceanFiltersOutput) Architectures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.Architectures }).(pulumi.StringArrayOutput)
}

// The filtered instance types will belong to one of the categories types from this list.
func (o OceanFiltersOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// The filtered instance types will have one of the disk type from this list.
func (o OceanFiltersOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.DiskTypes }).(pulumi.StringArrayOutput)
}

// Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
func (o OceanFiltersOutput) ExcludeFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.ExcludeFamilies }).(pulumi.StringArrayOutput)
}

// In case excludeMetal is set to true, metal types will not be available for scaling.
func (o OceanFiltersOutput) ExcludeMetal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanFilters) *bool { return v.ExcludeMetal }).(pulumi.BoolPtrOutput)
}

// The filtered instance types will have a hypervisor type from this list.
func (o OceanFiltersOutput) Hypervisors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.Hypervisors }).(pulumi.StringArrayOutput)
}

// Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
func (o OceanFiltersOutput) IncludeFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.IncludeFamilies }).(pulumi.StringArrayOutput)
}

// Ena is supported or not.
func (o OceanFiltersOutput) IsEnaSupported() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanFilters) *string { return v.IsEnaSupported }).(pulumi.StringPtrOutput)
}

// Maximum total number of GPUs.
func (o OceanFiltersOutput) MaxGpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MaxGpu }).(pulumi.IntPtrOutput)
}

func (o OceanFiltersOutput) MaxMemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OceanFilters) *float64 { return v.MaxMemoryGib }).(pulumi.Float64PtrOutput)
}

// Maximum Bandwidth in Gib/s of network performance.
func (o OceanFiltersOutput) MaxNetworkPerformance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MaxNetworkPerformance }).(pulumi.IntPtrOutput)
}

func (o OceanFiltersOutput) MaxVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MaxVcpu }).(pulumi.IntPtrOutput)
}

// Minimum number of network interfaces (ENIs).
func (o OceanFiltersOutput) MinEnis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MinEnis }).(pulumi.IntPtrOutput)
}

// Minimum total number of GPUs.
func (o OceanFiltersOutput) MinGpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MinGpu }).(pulumi.IntPtrOutput)
}

// Minimum amount of Memory (GiB).
func (o OceanFiltersOutput) MinMemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v OceanFilters) *float64 { return v.MinMemoryGib }).(pulumi.Float64PtrOutput)
}

// Minimum Bandwidth in Gib/s of network performance.
func (o OceanFiltersOutput) MinNetworkPerformance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MinNetworkPerformance }).(pulumi.IntPtrOutput)
}

// Minimum number of vcpus available.
func (o OceanFiltersOutput) MinVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanFilters) *int { return v.MinVcpu }).(pulumi.IntPtrOutput)
}

// The filtered instance types will have a root device types from this list.
func (o OceanFiltersOutput) RootDeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.RootDeviceTypes }).(pulumi.StringArrayOutput)
}

// The filtered instance types will support at least one of the virtualization types from this list.
func (o OceanFiltersOutput) VirtualizationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanFilters) []string { return v.VirtualizationTypes }).(pulumi.StringArrayOutput)
}

type OceanFiltersPtrOutput struct{ *pulumi.OutputState }

func (OceanFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanFilters)(nil)).Elem()
}

func (o OceanFiltersPtrOutput) ToOceanFiltersPtrOutput() OceanFiltersPtrOutput {
	return o
}

func (o OceanFiltersPtrOutput) ToOceanFiltersPtrOutputWithContext(ctx context.Context) OceanFiltersPtrOutput {
	return o
}

func (o OceanFiltersPtrOutput) Elem() OceanFiltersOutput {
	return o.ApplyT(func(v *OceanFilters) OceanFilters {
		if v != nil {
			return *v
		}
		var ret OceanFilters
		return ret
	}).(OceanFiltersOutput)
}

// The filtered instance types will support at least one of the architectures from this list.
func (o OceanFiltersPtrOutput) Architectures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.Architectures
	}).(pulumi.StringArrayOutput)
}

// The filtered instance types will belong to one of the categories types from this list.
func (o OceanFiltersPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// The filtered instance types will have one of the disk type from this list.
func (o OceanFiltersPtrOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.DiskTypes
	}).(pulumi.StringArrayOutput)
}

// Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
func (o OceanFiltersPtrOutput) ExcludeFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeFamilies
	}).(pulumi.StringArrayOutput)
}

// In case excludeMetal is set to true, metal types will not be available for scaling.
func (o OceanFiltersPtrOutput) ExcludeMetal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeMetal
	}).(pulumi.BoolPtrOutput)
}

// The filtered instance types will have a hypervisor type from this list.
func (o OceanFiltersPtrOutput) Hypervisors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.Hypervisors
	}).(pulumi.StringArrayOutput)
}

// Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
func (o OceanFiltersPtrOutput) IncludeFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.IncludeFamilies
	}).(pulumi.StringArrayOutput)
}

// Ena is supported or not.
func (o OceanFiltersPtrOutput) IsEnaSupported() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *string {
		if v == nil {
			return nil
		}
		return v.IsEnaSupported
	}).(pulumi.StringPtrOutput)
}

// Maximum total number of GPUs.
func (o OceanFiltersPtrOutput) MaxGpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MaxGpu
	}).(pulumi.IntPtrOutput)
}

func (o OceanFiltersPtrOutput) MaxMemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OceanFilters) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMemoryGib
	}).(pulumi.Float64PtrOutput)
}

// Maximum Bandwidth in Gib/s of network performance.
func (o OceanFiltersPtrOutput) MaxNetworkPerformance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MaxNetworkPerformance
	}).(pulumi.IntPtrOutput)
}

func (o OceanFiltersPtrOutput) MaxVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MaxVcpu
	}).(pulumi.IntPtrOutput)
}

// Minimum number of network interfaces (ENIs).
func (o OceanFiltersPtrOutput) MinEnis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MinEnis
	}).(pulumi.IntPtrOutput)
}

// Minimum total number of GPUs.
func (o OceanFiltersPtrOutput) MinGpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MinGpu
	}).(pulumi.IntPtrOutput)
}

// Minimum amount of Memory (GiB).
func (o OceanFiltersPtrOutput) MinMemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OceanFilters) *float64 {
		if v == nil {
			return nil
		}
		return v.MinMemoryGib
	}).(pulumi.Float64PtrOutput)
}

// Minimum Bandwidth in Gib/s of network performance.
func (o OceanFiltersPtrOutput) MinNetworkPerformance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MinNetworkPerformance
	}).(pulumi.IntPtrOutput)
}

// Minimum number of vcpus available.
func (o OceanFiltersPtrOutput) MinVcpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanFilters) *int {
		if v == nil {
			return nil
		}
		return v.MinVcpu
	}).(pulumi.IntPtrOutput)
}

// The filtered instance types will have a root device types from this list.
func (o OceanFiltersPtrOutput) RootDeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.RootDeviceTypes
	}).(pulumi.StringArrayOutput)
}

// The filtered instance types will support at least one of the virtualization types from this list.
func (o OceanFiltersPtrOutput) VirtualizationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanFilters) []string {
		if v == nil {
			return nil
		}
		return v.VirtualizationTypes
	}).(pulumi.StringArrayOutput)
}

type OceanInstanceMetadataOptions struct {
	// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
	HttpPutResponseHopLimit *int `pulumi:"httpPutResponseHopLimit"`
	// Determines if a signed token is required or not. Valid values: `optional` or `required`.
	HttpTokens string `pulumi:"httpTokens"`
}

// OceanInstanceMetadataOptionsInput is an input type that accepts OceanInstanceMetadataOptionsArgs and OceanInstanceMetadataOptionsOutput values.
// You can construct a concrete instance of `OceanInstanceMetadataOptionsInput` via:
//
//	OceanInstanceMetadataOptionsArgs{...}
type OceanInstanceMetadataOptionsInput interface {
	pulumi.Input

	ToOceanInstanceMetadataOptionsOutput() OceanInstanceMetadataOptionsOutput
	ToOceanInstanceMetadataOptionsOutputWithContext(context.Context) OceanInstanceMetadataOptionsOutput
}

type OceanInstanceMetadataOptionsArgs struct {
	// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
	HttpPutResponseHopLimit pulumi.IntPtrInput `pulumi:"httpPutResponseHopLimit"`
	// Determines if a signed token is required or not. Valid values: `optional` or `required`.
	HttpTokens pulumi.StringInput `pulumi:"httpTokens"`
}

func (OceanInstanceMetadataOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanInstanceMetadataOptions)(nil)).Elem()
}

func (i OceanInstanceMetadataOptionsArgs) ToOceanInstanceMetadataOptionsOutput() OceanInstanceMetadataOptionsOutput {
	return i.ToOceanInstanceMetadataOptionsOutputWithContext(context.Background())
}

func (i OceanInstanceMetadataOptionsArgs) ToOceanInstanceMetadataOptionsOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanInstanceMetadataOptionsOutput)
}

func (i OceanInstanceMetadataOptionsArgs) ToOceanInstanceMetadataOptionsPtrOutput() OceanInstanceMetadataOptionsPtrOutput {
	return i.ToOceanInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i OceanInstanceMetadataOptionsArgs) ToOceanInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanInstanceMetadataOptionsOutput).ToOceanInstanceMetadataOptionsPtrOutputWithContext(ctx)
}

// OceanInstanceMetadataOptionsPtrInput is an input type that accepts OceanInstanceMetadataOptionsArgs, OceanInstanceMetadataOptionsPtr and OceanInstanceMetadataOptionsPtrOutput values.
// You can construct a concrete instance of `OceanInstanceMetadataOptionsPtrInput` via:
//
//	        OceanInstanceMetadataOptionsArgs{...}
//
//	or:
//
//	        nil
type OceanInstanceMetadataOptionsPtrInput interface {
	pulumi.Input

	ToOceanInstanceMetadataOptionsPtrOutput() OceanInstanceMetadataOptionsPtrOutput
	ToOceanInstanceMetadataOptionsPtrOutputWithContext(context.Context) OceanInstanceMetadataOptionsPtrOutput
}

type oceanInstanceMetadataOptionsPtrType OceanInstanceMetadataOptionsArgs

func OceanInstanceMetadataOptionsPtr(v *OceanInstanceMetadataOptionsArgs) OceanInstanceMetadataOptionsPtrInput {
	return (*oceanInstanceMetadataOptionsPtrType)(v)
}

func (*oceanInstanceMetadataOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanInstanceMetadataOptions)(nil)).Elem()
}

func (i *oceanInstanceMetadataOptionsPtrType) ToOceanInstanceMetadataOptionsPtrOutput() OceanInstanceMetadataOptionsPtrOutput {
	return i.ToOceanInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i *oceanInstanceMetadataOptionsPtrType) ToOceanInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanInstanceMetadataOptionsPtrOutput)
}

type OceanInstanceMetadataOptionsOutput struct{ *pulumi.OutputState }

func (OceanInstanceMetadataOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanInstanceMetadataOptions)(nil)).Elem()
}

func (o OceanInstanceMetadataOptionsOutput) ToOceanInstanceMetadataOptionsOutput() OceanInstanceMetadataOptionsOutput {
	return o
}

func (o OceanInstanceMetadataOptionsOutput) ToOceanInstanceMetadataOptionsOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsOutput {
	return o
}

func (o OceanInstanceMetadataOptionsOutput) ToOceanInstanceMetadataOptionsPtrOutput() OceanInstanceMetadataOptionsPtrOutput {
	return o.ToOceanInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (o OceanInstanceMetadataOptionsOutput) ToOceanInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanInstanceMetadataOptions) *OceanInstanceMetadataOptions {
		return &v
	}).(OceanInstanceMetadataOptionsPtrOutput)
}

// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
func (o OceanInstanceMetadataOptionsOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanInstanceMetadataOptions) *int { return v.HttpPutResponseHopLimit }).(pulumi.IntPtrOutput)
}

// Determines if a signed token is required or not. Valid values: `optional` or `required`.
func (o OceanInstanceMetadataOptionsOutput) HttpTokens() pulumi.StringOutput {
	return o.ApplyT(func(v OceanInstanceMetadataOptions) string { return v.HttpTokens }).(pulumi.StringOutput)
}

type OceanInstanceMetadataOptionsPtrOutput struct{ *pulumi.OutputState }

func (OceanInstanceMetadataOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanInstanceMetadataOptions)(nil)).Elem()
}

func (o OceanInstanceMetadataOptionsPtrOutput) ToOceanInstanceMetadataOptionsPtrOutput() OceanInstanceMetadataOptionsPtrOutput {
	return o
}

func (o OceanInstanceMetadataOptionsPtrOutput) ToOceanInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanInstanceMetadataOptionsPtrOutput {
	return o
}

func (o OceanInstanceMetadataOptionsPtrOutput) Elem() OceanInstanceMetadataOptionsOutput {
	return o.ApplyT(func(v *OceanInstanceMetadataOptions) OceanInstanceMetadataOptions {
		if v != nil {
			return *v
		}
		var ret OceanInstanceMetadataOptions
		return ret
	}).(OceanInstanceMetadataOptionsOutput)
}

// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
func (o OceanInstanceMetadataOptionsPtrOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanInstanceMetadataOptions) *int {
		if v == nil {
			return nil
		}
		return v.HttpPutResponseHopLimit
	}).(pulumi.IntPtrOutput)
}

// Determines if a signed token is required or not. Valid values: `optional` or `required`.
func (o OceanInstanceMetadataOptionsPtrOutput) HttpTokens() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanInstanceMetadataOptions) *string {
		if v == nil {
			return nil
		}
		return &v.HttpTokens
	}).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecAttribute struct {
	// The label key.
	Key string `pulumi:"key"`
	// The label value.
	Value string `pulumi:"value"`
}

// OceanLaunchSpecAttributeInput is an input type that accepts OceanLaunchSpecAttributeArgs and OceanLaunchSpecAttributeOutput values.
// You can construct a concrete instance of `OceanLaunchSpecAttributeInput` via:
//
//	OceanLaunchSpecAttributeArgs{...}
type OceanLaunchSpecAttributeInput interface {
	pulumi.Input

	ToOceanLaunchSpecAttributeOutput() OceanLaunchSpecAttributeOutput
	ToOceanLaunchSpecAttributeOutputWithContext(context.Context) OceanLaunchSpecAttributeOutput
}

type OceanLaunchSpecAttributeArgs struct {
	// The label key.
	Key pulumi.StringInput `pulumi:"key"`
	// The label value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OceanLaunchSpecAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecAttribute)(nil)).Elem()
}

func (i OceanLaunchSpecAttributeArgs) ToOceanLaunchSpecAttributeOutput() OceanLaunchSpecAttributeOutput {
	return i.ToOceanLaunchSpecAttributeOutputWithContext(context.Background())
}

func (i OceanLaunchSpecAttributeArgs) ToOceanLaunchSpecAttributeOutputWithContext(ctx context.Context) OceanLaunchSpecAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecAttributeOutput)
}

// OceanLaunchSpecAttributeArrayInput is an input type that accepts OceanLaunchSpecAttributeArray and OceanLaunchSpecAttributeArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecAttributeArrayInput` via:
//
//	OceanLaunchSpecAttributeArray{ OceanLaunchSpecAttributeArgs{...} }
type OceanLaunchSpecAttributeArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecAttributeArrayOutput() OceanLaunchSpecAttributeArrayOutput
	ToOceanLaunchSpecAttributeArrayOutputWithContext(context.Context) OceanLaunchSpecAttributeArrayOutput
}

type OceanLaunchSpecAttributeArray []OceanLaunchSpecAttributeInput

func (OceanLaunchSpecAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecAttribute)(nil)).Elem()
}

func (i OceanLaunchSpecAttributeArray) ToOceanLaunchSpecAttributeArrayOutput() OceanLaunchSpecAttributeArrayOutput {
	return i.ToOceanLaunchSpecAttributeArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecAttributeArray) ToOceanLaunchSpecAttributeArrayOutputWithContext(ctx context.Context) OceanLaunchSpecAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecAttributeArrayOutput)
}

type OceanLaunchSpecAttributeOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecAttribute)(nil)).Elem()
}

func (o OceanLaunchSpecAttributeOutput) ToOceanLaunchSpecAttributeOutput() OceanLaunchSpecAttributeOutput {
	return o
}

func (o OceanLaunchSpecAttributeOutput) ToOceanLaunchSpecAttributeOutputWithContext(ctx context.Context) OceanLaunchSpecAttributeOutput {
	return o
}

// The label key.
func (o OceanLaunchSpecAttributeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecAttribute) string { return v.Key }).(pulumi.StringOutput)
}

// The label value.
func (o OceanLaunchSpecAttributeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecAttribute) string { return v.Value }).(pulumi.StringOutput)
}

type OceanLaunchSpecAttributeArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecAttribute)(nil)).Elem()
}

func (o OceanLaunchSpecAttributeArrayOutput) ToOceanLaunchSpecAttributeArrayOutput() OceanLaunchSpecAttributeArrayOutput {
	return o
}

func (o OceanLaunchSpecAttributeArrayOutput) ToOceanLaunchSpecAttributeArrayOutputWithContext(ctx context.Context) OceanLaunchSpecAttributeArrayOutput {
	return o
}

func (o OceanLaunchSpecAttributeArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecAttribute {
		return vs[0].([]OceanLaunchSpecAttribute)[vs[1].(int)]
	}).(OceanLaunchSpecAttributeOutput)
}

type OceanLaunchSpecAutoscaleHeadroom struct {
	// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in CPU units, where 1024 units = 1 vCPU.
	CpuPerUnit *int `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
	MemoryPerUnit *int `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
	NumOfUnits int `pulumi:"numOfUnits"`
}

// OceanLaunchSpecAutoscaleHeadroomInput is an input type that accepts OceanLaunchSpecAutoscaleHeadroomArgs and OceanLaunchSpecAutoscaleHeadroomOutput values.
// You can construct a concrete instance of `OceanLaunchSpecAutoscaleHeadroomInput` via:
//
//	OceanLaunchSpecAutoscaleHeadroomArgs{...}
type OceanLaunchSpecAutoscaleHeadroomInput interface {
	pulumi.Input

	ToOceanLaunchSpecAutoscaleHeadroomOutput() OceanLaunchSpecAutoscaleHeadroomOutput
	ToOceanLaunchSpecAutoscaleHeadroomOutputWithContext(context.Context) OceanLaunchSpecAutoscaleHeadroomOutput
}

type OceanLaunchSpecAutoscaleHeadroomArgs struct {
	// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in CPU units, where 1024 units = 1 vCPU.
	CpuPerUnit pulumi.IntPtrInput `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
	MemoryPerUnit pulumi.IntPtrInput `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
	NumOfUnits pulumi.IntInput `pulumi:"numOfUnits"`
}

func (OceanLaunchSpecAutoscaleHeadroomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecAutoscaleHeadroom)(nil)).Elem()
}

func (i OceanLaunchSpecAutoscaleHeadroomArgs) ToOceanLaunchSpecAutoscaleHeadroomOutput() OceanLaunchSpecAutoscaleHeadroomOutput {
	return i.ToOceanLaunchSpecAutoscaleHeadroomOutputWithContext(context.Background())
}

func (i OceanLaunchSpecAutoscaleHeadroomArgs) ToOceanLaunchSpecAutoscaleHeadroomOutputWithContext(ctx context.Context) OceanLaunchSpecAutoscaleHeadroomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecAutoscaleHeadroomOutput)
}

// OceanLaunchSpecAutoscaleHeadroomArrayInput is an input type that accepts OceanLaunchSpecAutoscaleHeadroomArray and OceanLaunchSpecAutoscaleHeadroomArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecAutoscaleHeadroomArrayInput` via:
//
//	OceanLaunchSpecAutoscaleHeadroomArray{ OceanLaunchSpecAutoscaleHeadroomArgs{...} }
type OceanLaunchSpecAutoscaleHeadroomArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecAutoscaleHeadroomArrayOutput() OceanLaunchSpecAutoscaleHeadroomArrayOutput
	ToOceanLaunchSpecAutoscaleHeadroomArrayOutputWithContext(context.Context) OceanLaunchSpecAutoscaleHeadroomArrayOutput
}

type OceanLaunchSpecAutoscaleHeadroomArray []OceanLaunchSpecAutoscaleHeadroomInput

func (OceanLaunchSpecAutoscaleHeadroomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecAutoscaleHeadroom)(nil)).Elem()
}

func (i OceanLaunchSpecAutoscaleHeadroomArray) ToOceanLaunchSpecAutoscaleHeadroomArrayOutput() OceanLaunchSpecAutoscaleHeadroomArrayOutput {
	return i.ToOceanLaunchSpecAutoscaleHeadroomArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecAutoscaleHeadroomArray) ToOceanLaunchSpecAutoscaleHeadroomArrayOutputWithContext(ctx context.Context) OceanLaunchSpecAutoscaleHeadroomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecAutoscaleHeadroomArrayOutput)
}

type OceanLaunchSpecAutoscaleHeadroomOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecAutoscaleHeadroomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecAutoscaleHeadroom)(nil)).Elem()
}

func (o OceanLaunchSpecAutoscaleHeadroomOutput) ToOceanLaunchSpecAutoscaleHeadroomOutput() OceanLaunchSpecAutoscaleHeadroomOutput {
	return o
}

func (o OceanLaunchSpecAutoscaleHeadroomOutput) ToOceanLaunchSpecAutoscaleHeadroomOutputWithContext(ctx context.Context) OceanLaunchSpecAutoscaleHeadroomOutput {
	return o
}

// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in CPU units, where 1024 units = 1 vCPU.
func (o OceanLaunchSpecAutoscaleHeadroomOutput) CpuPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecAutoscaleHeadroom) *int { return v.CpuPerUnit }).(pulumi.IntPtrOutput)
}

// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
func (o OceanLaunchSpecAutoscaleHeadroomOutput) MemoryPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecAutoscaleHeadroom) *int { return v.MemoryPerUnit }).(pulumi.IntPtrOutput)
}

// The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
func (o OceanLaunchSpecAutoscaleHeadroomOutput) NumOfUnits() pulumi.IntOutput {
	return o.ApplyT(func(v OceanLaunchSpecAutoscaleHeadroom) int { return v.NumOfUnits }).(pulumi.IntOutput)
}

type OceanLaunchSpecAutoscaleHeadroomArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecAutoscaleHeadroomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecAutoscaleHeadroom)(nil)).Elem()
}

func (o OceanLaunchSpecAutoscaleHeadroomArrayOutput) ToOceanLaunchSpecAutoscaleHeadroomArrayOutput() OceanLaunchSpecAutoscaleHeadroomArrayOutput {
	return o
}

func (o OceanLaunchSpecAutoscaleHeadroomArrayOutput) ToOceanLaunchSpecAutoscaleHeadroomArrayOutputWithContext(ctx context.Context) OceanLaunchSpecAutoscaleHeadroomArrayOutput {
	return o
}

func (o OceanLaunchSpecAutoscaleHeadroomArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecAutoscaleHeadroomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecAutoscaleHeadroom {
		return vs[0].([]OceanLaunchSpecAutoscaleHeadroom)[vs[1].(int)]
	}).(OceanLaunchSpecAutoscaleHeadroomOutput)
}

type OceanLaunchSpecBlockDeviceMapping struct {
	// String. Set device name. (Example: "/dev/xvda1").
	DeviceName string `pulumi:"deviceName"`
	// Object. Set Elastic Block Store properties .
	Ebs *OceanLaunchSpecBlockDeviceMappingEbs `pulumi:"ebs"`
	// String. suppresses the specified device included in the block device mapping of the AMI.
	NoDevice    *string `pulumi:"noDevice"`
	VirtualName *string `pulumi:"virtualName"`
}

// OceanLaunchSpecBlockDeviceMappingInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingArgs and OceanLaunchSpecBlockDeviceMappingOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingInput` via:
//
//	OceanLaunchSpecBlockDeviceMappingArgs{...}
type OceanLaunchSpecBlockDeviceMappingInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingOutput() OceanLaunchSpecBlockDeviceMappingOutput
	ToOceanLaunchSpecBlockDeviceMappingOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingOutput
}

type OceanLaunchSpecBlockDeviceMappingArgs struct {
	// String. Set device name. (Example: "/dev/xvda1").
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Object. Set Elastic Block Store properties .
	Ebs OceanLaunchSpecBlockDeviceMappingEbsPtrInput `pulumi:"ebs"`
	// String. suppresses the specified device included in the block device mapping of the AMI.
	NoDevice    pulumi.StringPtrInput `pulumi:"noDevice"`
	VirtualName pulumi.StringPtrInput `pulumi:"virtualName"`
}

func (OceanLaunchSpecBlockDeviceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMapping)(nil)).Elem()
}

func (i OceanLaunchSpecBlockDeviceMappingArgs) ToOceanLaunchSpecBlockDeviceMappingOutput() OceanLaunchSpecBlockDeviceMappingOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingArgs) ToOceanLaunchSpecBlockDeviceMappingOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingOutput)
}

// OceanLaunchSpecBlockDeviceMappingArrayInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingArray and OceanLaunchSpecBlockDeviceMappingArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingArrayInput` via:
//
//	OceanLaunchSpecBlockDeviceMappingArray{ OceanLaunchSpecBlockDeviceMappingArgs{...} }
type OceanLaunchSpecBlockDeviceMappingArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingArrayOutput() OceanLaunchSpecBlockDeviceMappingArrayOutput
	ToOceanLaunchSpecBlockDeviceMappingArrayOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingArrayOutput
}

type OceanLaunchSpecBlockDeviceMappingArray []OceanLaunchSpecBlockDeviceMappingInput

func (OceanLaunchSpecBlockDeviceMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecBlockDeviceMapping)(nil)).Elem()
}

func (i OceanLaunchSpecBlockDeviceMappingArray) ToOceanLaunchSpecBlockDeviceMappingArrayOutput() OceanLaunchSpecBlockDeviceMappingArrayOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingArray) ToOceanLaunchSpecBlockDeviceMappingArrayOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingArrayOutput)
}

type OceanLaunchSpecBlockDeviceMappingOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMapping)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingOutput) ToOceanLaunchSpecBlockDeviceMappingOutput() OceanLaunchSpecBlockDeviceMappingOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingOutput) ToOceanLaunchSpecBlockDeviceMappingOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingOutput {
	return o
}

// String. Set device name. (Example: "/dev/xvda1").
func (o OceanLaunchSpecBlockDeviceMappingOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMapping) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Object. Set Elastic Block Store properties .
func (o OceanLaunchSpecBlockDeviceMappingOutput) Ebs() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMapping) *OceanLaunchSpecBlockDeviceMappingEbs { return v.Ebs }).(OceanLaunchSpecBlockDeviceMappingEbsPtrOutput)
}

// String. suppresses the specified device included in the block device mapping of the AMI.
func (o OceanLaunchSpecBlockDeviceMappingOutput) NoDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMapping) *string { return v.NoDevice }).(pulumi.StringPtrOutput)
}

func (o OceanLaunchSpecBlockDeviceMappingOutput) VirtualName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMapping) *string { return v.VirtualName }).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecBlockDeviceMappingArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecBlockDeviceMapping)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingArrayOutput) ToOceanLaunchSpecBlockDeviceMappingArrayOutput() OceanLaunchSpecBlockDeviceMappingArrayOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingArrayOutput) ToOceanLaunchSpecBlockDeviceMappingArrayOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingArrayOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecBlockDeviceMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecBlockDeviceMapping {
		return vs[0].([]OceanLaunchSpecBlockDeviceMapping)[vs[1].(int)]
	}).(OceanLaunchSpecBlockDeviceMappingOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbs struct {
	// Boolean. Flag to delete the EBS on instance termination.
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
	DynamicVolumeSize *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize `pulumi:"dynamicVolumeSize"`
	// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
	Encrypted *bool `pulumi:"encrypted"`
	// Int. The number of I/O operations per second (IOPS) that the volume supports.
	Iops *int `pulumi:"iops"`
	// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// (Optional) String. The Snapshot ID to mount by.
	SnapshotId *string `pulumi:"snapshotId"`
	// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
	Throughput *int `pulumi:"throughput"`
	// Int. The size, in GB of the volume.
	VolumeSize *int `pulumi:"volumeSize"`
	// String. The type of the volume (example: "gp2").
	VolumeType *string `pulumi:"volumeType"`
}

// OceanLaunchSpecBlockDeviceMappingEbsInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingEbsArgs and OceanLaunchSpecBlockDeviceMappingEbsOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingEbsInput` via:
//
//	OceanLaunchSpecBlockDeviceMappingEbsArgs{...}
type OceanLaunchSpecBlockDeviceMappingEbsInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingEbsOutput() OceanLaunchSpecBlockDeviceMappingEbsOutput
	ToOceanLaunchSpecBlockDeviceMappingEbsOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingEbsOutput
}

type OceanLaunchSpecBlockDeviceMappingEbsArgs struct {
	// Boolean. Flag to delete the EBS on instance termination.
	DeleteOnTermination pulumi.BoolPtrInput `pulumi:"deleteOnTermination"`
	// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
	DynamicVolumeSize OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput `pulumi:"dynamicVolumeSize"`
	// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
	Encrypted pulumi.BoolPtrInput `pulumi:"encrypted"`
	// Int. The number of I/O operations per second (IOPS) that the volume supports.
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	// (Optional) String. The Snapshot ID to mount by.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// Int. The size, in GB of the volume.
	VolumeSize pulumi.IntPtrInput `pulumi:"volumeSize"`
	// String. The type of the volume (example: "gp2").
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (OceanLaunchSpecBlockDeviceMappingEbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbs)(nil)).Elem()
}

func (i OceanLaunchSpecBlockDeviceMappingEbsArgs) ToOceanLaunchSpecBlockDeviceMappingEbsOutput() OceanLaunchSpecBlockDeviceMappingEbsOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingEbsArgs) ToOceanLaunchSpecBlockDeviceMappingEbsOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsOutput)
}

func (i OceanLaunchSpecBlockDeviceMappingEbsArgs) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutput() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingEbsArgs) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsOutput).ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(ctx)
}

// OceanLaunchSpecBlockDeviceMappingEbsPtrInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingEbsArgs, OceanLaunchSpecBlockDeviceMappingEbsPtr and OceanLaunchSpecBlockDeviceMappingEbsPtrOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingEbsPtrInput` via:
//
//	        OceanLaunchSpecBlockDeviceMappingEbsArgs{...}
//
//	or:
//
//	        nil
type OceanLaunchSpecBlockDeviceMappingEbsPtrInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutput() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput
	ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingEbsPtrOutput
}

type oceanLaunchSpecBlockDeviceMappingEbsPtrType OceanLaunchSpecBlockDeviceMappingEbsArgs

func OceanLaunchSpecBlockDeviceMappingEbsPtr(v *OceanLaunchSpecBlockDeviceMappingEbsArgs) OceanLaunchSpecBlockDeviceMappingEbsPtrInput {
	return (*oceanLaunchSpecBlockDeviceMappingEbsPtrType)(v)
}

func (*oceanLaunchSpecBlockDeviceMappingEbsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecBlockDeviceMappingEbs)(nil)).Elem()
}

func (i *oceanLaunchSpecBlockDeviceMappingEbsPtrType) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutput() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (i *oceanLaunchSpecBlockDeviceMappingEbsPtrType) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsPtrOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbsOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingEbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbs)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) ToOceanLaunchSpecBlockDeviceMappingEbsOutput() OceanLaunchSpecBlockDeviceMappingEbsOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) ToOceanLaunchSpecBlockDeviceMappingEbsOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutput() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return o.ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(context.Background())
}

func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanLaunchSpecBlockDeviceMappingEbs) *OceanLaunchSpecBlockDeviceMappingEbs {
		return &v
	}).(OceanLaunchSpecBlockDeviceMappingEbsPtrOutput)
}

// Boolean. Flag to delete the EBS on instance termination.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *bool { return v.DeleteOnTermination }).(pulumi.BoolPtrOutput)
}

// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) DynamicVolumeSize() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
		return v.DynamicVolumeSize
	}).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// Int. The number of I/O operations per second (IOPS) that the volume supports.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// (Optional) String. The Snapshot ID to mount by.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Int. The size, in GB of the volume.
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *int { return v.VolumeSize }).(pulumi.IntPtrOutput)
}

// String. The type of the volume (example: "gp2").
func (o OceanLaunchSpecBlockDeviceMappingEbsOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbs) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbsPtrOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecBlockDeviceMappingEbs)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutput() OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) ToOceanLaunchSpecBlockDeviceMappingEbsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsPtrOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) Elem() OceanLaunchSpecBlockDeviceMappingEbsOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) OceanLaunchSpecBlockDeviceMappingEbs {
		if v != nil {
			return *v
		}
		var ret OceanLaunchSpecBlockDeviceMappingEbs
		return ret
	}).(OceanLaunchSpecBlockDeviceMappingEbsOutput)
}

// Boolean. Flag to delete the EBS on instance termination.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) DeleteOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *bool {
		if v == nil {
			return nil
		}
		return v.DeleteOnTermination
	}).(pulumi.BoolPtrOutput)
}

// Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) DynamicVolumeSize() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
		if v == nil {
			return nil
		}
		return v.DynamicVolumeSize
	}).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *bool {
		if v == nil {
			return nil
		}
		return v.Encrypted
	}).(pulumi.BoolPtrOutput)
}

// Int. The number of I/O operations per second (IOPS) that the volume supports.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

// (Optional) String. The Snapshot ID to mount by.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotId
	}).(pulumi.StringPtrOutput)
}

// The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Int. The size, in GB of the volume.
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) VolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSize
	}).(pulumi.IntPtrOutput)
}

// String. The type of the volume (example: "gp2").
func (o OceanLaunchSpecBlockDeviceMappingEbsPtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbs) *string {
		if v == nil {
			return nil
		}
		return v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize struct {
	// Int. Initial size for volume. (Example: 50)
	BaseSize int `pulumi:"baseSize"`
	// String. Resource type to increase volume size dynamically by. (valid values: "CPU")
	Resource string `pulumi:"resource"`
	// Int. Additional size (in GB) per resource unit. (Example: baseSize= 50, sizePerResourceUnit=20, and instance with 2 CPU is launched - its total disk size will be: 90GB)
	SizePerResourceUnit int `pulumi:"sizePerResourceUnit"`
}

// OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs and OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeInput` via:
//
//	OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs{...}
type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput
	ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput
}

type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs struct {
	// Int. Initial size for volume. (Example: 50)
	BaseSize pulumi.IntInput `pulumi:"baseSize"`
	// String. Resource type to increase volume size dynamically by. (valid values: "CPU")
	Resource pulumi.StringInput `pulumi:"resource"`
	// Int. Additional size (in GB) per resource unit. (Example: baseSize= 50, sizePerResourceUnit=20, and instance with 2 CPU is launched - its total disk size will be: 90GB)
	SizePerResourceUnit pulumi.IntInput `pulumi:"sizePerResourceUnit"`
}

func (OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (i OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput)
}

func (i OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (i OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput).ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx)
}

// OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput is an input type that accepts OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs, OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtr and OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput values.
// You can construct a concrete instance of `OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput` via:
//
//	        OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs{...}
//
//	or:
//
//	        nil
type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput interface {
	pulumi.Input

	ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput
	ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput
}

type oceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrType OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs

func OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtr(v *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput {
	return (*oceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrType)(v)
}

func (*oceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (i *oceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrType) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return i.ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (i *oceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrType) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(context.Background())
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
		return &v
	}).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput)
}

// Int. Initial size for volume. (Example: 50)
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) BaseSize() pulumi.IntOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) int { return v.BaseSize }).(pulumi.IntOutput)
}

// String. Resource type to increase volume size dynamically by. (valid values: "CPU")
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) string { return v.Resource }).(pulumi.StringOutput)
}

// Int. Additional size (in GB) per resource unit. (Example: baseSize= 50, sizePerResourceUnit=20, and instance with 2 CPU is launched - its total disk size will be: 90GB)
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput) SizePerResourceUnit() pulumi.IntOutput {
	return o.ApplyT(func(v OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) int { return v.SizePerResourceUnit }).(pulumi.IntOutput)
}

type OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize)(nil)).Elem()
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) ToOceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutputWithContext(ctx context.Context) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput {
	return o
}

func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) Elem() OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
		if v != nil {
			return *v
		}
		var ret OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize
		return ret
	}).(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput)
}

// Int. Initial size for volume. (Example: 50)
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) BaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) *int {
		if v == nil {
			return nil
		}
		return &v.BaseSize
	}).(pulumi.IntPtrOutput)
}

// String. Resource type to increase volume size dynamically by. (valid values: "CPU")
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Int. Additional size (in GB) per resource unit. (Example: baseSize= 50, sizePerResourceUnit=20, and instance with 2 CPU is launched - its total disk size will be: 90GB)
func (o OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput) SizePerResourceUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize) *int {
		if v == nil {
			return nil
		}
		return &v.SizePerResourceUnit
	}).(pulumi.IntPtrOutput)
}

type OceanLaunchSpecImage struct {
	// Identifier of the image in AWS. Valid values: any string which is not empty or null.
	ImageId *string `pulumi:"imageId"`
}

// OceanLaunchSpecImageInput is an input type that accepts OceanLaunchSpecImageArgs and OceanLaunchSpecImageOutput values.
// You can construct a concrete instance of `OceanLaunchSpecImageInput` via:
//
//	OceanLaunchSpecImageArgs{...}
type OceanLaunchSpecImageInput interface {
	pulumi.Input

	ToOceanLaunchSpecImageOutput() OceanLaunchSpecImageOutput
	ToOceanLaunchSpecImageOutputWithContext(context.Context) OceanLaunchSpecImageOutput
}

type OceanLaunchSpecImageArgs struct {
	// Identifier of the image in AWS. Valid values: any string which is not empty or null.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
}

func (OceanLaunchSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecImage)(nil)).Elem()
}

func (i OceanLaunchSpecImageArgs) ToOceanLaunchSpecImageOutput() OceanLaunchSpecImageOutput {
	return i.ToOceanLaunchSpecImageOutputWithContext(context.Background())
}

func (i OceanLaunchSpecImageArgs) ToOceanLaunchSpecImageOutputWithContext(ctx context.Context) OceanLaunchSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecImageOutput)
}

// OceanLaunchSpecImageArrayInput is an input type that accepts OceanLaunchSpecImageArray and OceanLaunchSpecImageArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecImageArrayInput` via:
//
//	OceanLaunchSpecImageArray{ OceanLaunchSpecImageArgs{...} }
type OceanLaunchSpecImageArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecImageArrayOutput() OceanLaunchSpecImageArrayOutput
	ToOceanLaunchSpecImageArrayOutputWithContext(context.Context) OceanLaunchSpecImageArrayOutput
}

type OceanLaunchSpecImageArray []OceanLaunchSpecImageInput

func (OceanLaunchSpecImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecImage)(nil)).Elem()
}

func (i OceanLaunchSpecImageArray) ToOceanLaunchSpecImageArrayOutput() OceanLaunchSpecImageArrayOutput {
	return i.ToOceanLaunchSpecImageArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecImageArray) ToOceanLaunchSpecImageArrayOutputWithContext(ctx context.Context) OceanLaunchSpecImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecImageArrayOutput)
}

type OceanLaunchSpecImageOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecImage)(nil)).Elem()
}

func (o OceanLaunchSpecImageOutput) ToOceanLaunchSpecImageOutput() OceanLaunchSpecImageOutput {
	return o
}

func (o OceanLaunchSpecImageOutput) ToOceanLaunchSpecImageOutputWithContext(ctx context.Context) OceanLaunchSpecImageOutput {
	return o
}

// Identifier of the image in AWS. Valid values: any string which is not empty or null.
func (o OceanLaunchSpecImageOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecImage) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecImageArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecImage)(nil)).Elem()
}

func (o OceanLaunchSpecImageArrayOutput) ToOceanLaunchSpecImageArrayOutput() OceanLaunchSpecImageArrayOutput {
	return o
}

func (o OceanLaunchSpecImageArrayOutput) ToOceanLaunchSpecImageArrayOutputWithContext(ctx context.Context) OceanLaunchSpecImageArrayOutput {
	return o
}

func (o OceanLaunchSpecImageArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecImage {
		return vs[0].([]OceanLaunchSpecImage)[vs[1].(int)]
	}).(OceanLaunchSpecImageOutput)
}

type OceanLaunchSpecInstanceMetadataOptions struct {
	// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
	HttpPutResponseHopLimit *int `pulumi:"httpPutResponseHopLimit"`
	// Determines if a signed token is required or not. Valid values: `optional` or `required`.
	HttpTokens string `pulumi:"httpTokens"`
}

// OceanLaunchSpecInstanceMetadataOptionsInput is an input type that accepts OceanLaunchSpecInstanceMetadataOptionsArgs and OceanLaunchSpecInstanceMetadataOptionsOutput values.
// You can construct a concrete instance of `OceanLaunchSpecInstanceMetadataOptionsInput` via:
//
//	OceanLaunchSpecInstanceMetadataOptionsArgs{...}
type OceanLaunchSpecInstanceMetadataOptionsInput interface {
	pulumi.Input

	ToOceanLaunchSpecInstanceMetadataOptionsOutput() OceanLaunchSpecInstanceMetadataOptionsOutput
	ToOceanLaunchSpecInstanceMetadataOptionsOutputWithContext(context.Context) OceanLaunchSpecInstanceMetadataOptionsOutput
}

type OceanLaunchSpecInstanceMetadataOptionsArgs struct {
	// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
	HttpPutResponseHopLimit pulumi.IntPtrInput `pulumi:"httpPutResponseHopLimit"`
	// Determines if a signed token is required or not. Valid values: `optional` or `required`.
	HttpTokens pulumi.StringInput `pulumi:"httpTokens"`
}

func (OceanLaunchSpecInstanceMetadataOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecInstanceMetadataOptions)(nil)).Elem()
}

func (i OceanLaunchSpecInstanceMetadataOptionsArgs) ToOceanLaunchSpecInstanceMetadataOptionsOutput() OceanLaunchSpecInstanceMetadataOptionsOutput {
	return i.ToOceanLaunchSpecInstanceMetadataOptionsOutputWithContext(context.Background())
}

func (i OceanLaunchSpecInstanceMetadataOptionsArgs) ToOceanLaunchSpecInstanceMetadataOptionsOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecInstanceMetadataOptionsOutput)
}

func (i OceanLaunchSpecInstanceMetadataOptionsArgs) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutput() OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return i.ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i OceanLaunchSpecInstanceMetadataOptionsArgs) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecInstanceMetadataOptionsOutput).ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(ctx)
}

// OceanLaunchSpecInstanceMetadataOptionsPtrInput is an input type that accepts OceanLaunchSpecInstanceMetadataOptionsArgs, OceanLaunchSpecInstanceMetadataOptionsPtr and OceanLaunchSpecInstanceMetadataOptionsPtrOutput values.
// You can construct a concrete instance of `OceanLaunchSpecInstanceMetadataOptionsPtrInput` via:
//
//	        OceanLaunchSpecInstanceMetadataOptionsArgs{...}
//
//	or:
//
//	        nil
type OceanLaunchSpecInstanceMetadataOptionsPtrInput interface {
	pulumi.Input

	ToOceanLaunchSpecInstanceMetadataOptionsPtrOutput() OceanLaunchSpecInstanceMetadataOptionsPtrOutput
	ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(context.Context) OceanLaunchSpecInstanceMetadataOptionsPtrOutput
}

type oceanLaunchSpecInstanceMetadataOptionsPtrType OceanLaunchSpecInstanceMetadataOptionsArgs

func OceanLaunchSpecInstanceMetadataOptionsPtr(v *OceanLaunchSpecInstanceMetadataOptionsArgs) OceanLaunchSpecInstanceMetadataOptionsPtrInput {
	return (*oceanLaunchSpecInstanceMetadataOptionsPtrType)(v)
}

func (*oceanLaunchSpecInstanceMetadataOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecInstanceMetadataOptions)(nil)).Elem()
}

func (i *oceanLaunchSpecInstanceMetadataOptionsPtrType) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutput() OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return i.ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (i *oceanLaunchSpecInstanceMetadataOptionsPtrType) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecInstanceMetadataOptionsPtrOutput)
}

type OceanLaunchSpecInstanceMetadataOptionsOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecInstanceMetadataOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecInstanceMetadataOptions)(nil)).Elem()
}

func (o OceanLaunchSpecInstanceMetadataOptionsOutput) ToOceanLaunchSpecInstanceMetadataOptionsOutput() OceanLaunchSpecInstanceMetadataOptionsOutput {
	return o
}

func (o OceanLaunchSpecInstanceMetadataOptionsOutput) ToOceanLaunchSpecInstanceMetadataOptionsOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsOutput {
	return o
}

func (o OceanLaunchSpecInstanceMetadataOptionsOutput) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutput() OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return o.ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(context.Background())
}

func (o OceanLaunchSpecInstanceMetadataOptionsOutput) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanLaunchSpecInstanceMetadataOptions) *OceanLaunchSpecInstanceMetadataOptions {
		return &v
	}).(OceanLaunchSpecInstanceMetadataOptionsPtrOutput)
}

// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
func (o OceanLaunchSpecInstanceMetadataOptionsOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecInstanceMetadataOptions) *int { return v.HttpPutResponseHopLimit }).(pulumi.IntPtrOutput)
}

// Determines if a signed token is required or not. Valid values: `optional` or `required`.
func (o OceanLaunchSpecInstanceMetadataOptionsOutput) HttpTokens() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecInstanceMetadataOptions) string { return v.HttpTokens }).(pulumi.StringOutput)
}

type OceanLaunchSpecInstanceMetadataOptionsPtrOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecInstanceMetadataOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpecInstanceMetadataOptions)(nil)).Elem()
}

func (o OceanLaunchSpecInstanceMetadataOptionsPtrOutput) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutput() OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return o
}

func (o OceanLaunchSpecInstanceMetadataOptionsPtrOutput) ToOceanLaunchSpecInstanceMetadataOptionsPtrOutputWithContext(ctx context.Context) OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return o
}

func (o OceanLaunchSpecInstanceMetadataOptionsPtrOutput) Elem() OceanLaunchSpecInstanceMetadataOptionsOutput {
	return o.ApplyT(func(v *OceanLaunchSpecInstanceMetadataOptions) OceanLaunchSpecInstanceMetadataOptions {
		if v != nil {
			return *v
		}
		var ret OceanLaunchSpecInstanceMetadataOptions
		return ret
	}).(OceanLaunchSpecInstanceMetadataOptionsOutput)
}

// An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
func (o OceanLaunchSpecInstanceMetadataOptionsPtrOutput) HttpPutResponseHopLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecInstanceMetadataOptions) *int {
		if v == nil {
			return nil
		}
		return v.HttpPutResponseHopLimit
	}).(pulumi.IntPtrOutput)
}

// Determines if a signed token is required or not. Valid values: `optional` or `required`.
func (o OceanLaunchSpecInstanceMetadataOptionsPtrOutput) HttpTokens() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpecInstanceMetadataOptions) *string {
		if v == nil {
			return nil
		}
		return &v.HttpTokens
	}).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecSchedulingTask struct {
	// A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
	CronExpression string `pulumi:"cronExpression"`
	// Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
	IsEnabled bool `pulumi:"isEnabled"`
	// The config of this scheduled task. Depends on the value of taskType.
	TaskHeadrooms []OceanLaunchSpecSchedulingTaskTaskHeadroom `pulumi:"taskHeadrooms"`
	// The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
	TaskType string `pulumi:"taskType"`
}

// OceanLaunchSpecSchedulingTaskInput is an input type that accepts OceanLaunchSpecSchedulingTaskArgs and OceanLaunchSpecSchedulingTaskOutput values.
// You can construct a concrete instance of `OceanLaunchSpecSchedulingTaskInput` via:
//
//	OceanLaunchSpecSchedulingTaskArgs{...}
type OceanLaunchSpecSchedulingTaskInput interface {
	pulumi.Input

	ToOceanLaunchSpecSchedulingTaskOutput() OceanLaunchSpecSchedulingTaskOutput
	ToOceanLaunchSpecSchedulingTaskOutputWithContext(context.Context) OceanLaunchSpecSchedulingTaskOutput
}

type OceanLaunchSpecSchedulingTaskArgs struct {
	// A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
	CronExpression pulumi.StringInput `pulumi:"cronExpression"`
	// Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The config of this scheduled task. Depends on the value of taskType.
	TaskHeadrooms OceanLaunchSpecSchedulingTaskTaskHeadroomArrayInput `pulumi:"taskHeadrooms"`
	// The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (OceanLaunchSpecSchedulingTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecSchedulingTask)(nil)).Elem()
}

func (i OceanLaunchSpecSchedulingTaskArgs) ToOceanLaunchSpecSchedulingTaskOutput() OceanLaunchSpecSchedulingTaskOutput {
	return i.ToOceanLaunchSpecSchedulingTaskOutputWithContext(context.Background())
}

func (i OceanLaunchSpecSchedulingTaskArgs) ToOceanLaunchSpecSchedulingTaskOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecSchedulingTaskOutput)
}

// OceanLaunchSpecSchedulingTaskArrayInput is an input type that accepts OceanLaunchSpecSchedulingTaskArray and OceanLaunchSpecSchedulingTaskArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecSchedulingTaskArrayInput` via:
//
//	OceanLaunchSpecSchedulingTaskArray{ OceanLaunchSpecSchedulingTaskArgs{...} }
type OceanLaunchSpecSchedulingTaskArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecSchedulingTaskArrayOutput() OceanLaunchSpecSchedulingTaskArrayOutput
	ToOceanLaunchSpecSchedulingTaskArrayOutputWithContext(context.Context) OceanLaunchSpecSchedulingTaskArrayOutput
}

type OceanLaunchSpecSchedulingTaskArray []OceanLaunchSpecSchedulingTaskInput

func (OceanLaunchSpecSchedulingTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecSchedulingTask)(nil)).Elem()
}

func (i OceanLaunchSpecSchedulingTaskArray) ToOceanLaunchSpecSchedulingTaskArrayOutput() OceanLaunchSpecSchedulingTaskArrayOutput {
	return i.ToOceanLaunchSpecSchedulingTaskArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecSchedulingTaskArray) ToOceanLaunchSpecSchedulingTaskArrayOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecSchedulingTaskArrayOutput)
}

type OceanLaunchSpecSchedulingTaskOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecSchedulingTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecSchedulingTask)(nil)).Elem()
}

func (o OceanLaunchSpecSchedulingTaskOutput) ToOceanLaunchSpecSchedulingTaskOutput() OceanLaunchSpecSchedulingTaskOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskOutput) ToOceanLaunchSpecSchedulingTaskOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskOutput {
	return o
}

// A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
func (o OceanLaunchSpecSchedulingTaskOutput) CronExpression() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTask) string { return v.CronExpression }).(pulumi.StringOutput)
}

// Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
func (o OceanLaunchSpecSchedulingTaskOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTask) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The config of this scheduled task. Depends on the value of taskType.
func (o OceanLaunchSpecSchedulingTaskOutput) TaskHeadrooms() OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTask) []OceanLaunchSpecSchedulingTaskTaskHeadroom {
		return v.TaskHeadrooms
	}).(OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput)
}

// The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
func (o OceanLaunchSpecSchedulingTaskOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTask) string { return v.TaskType }).(pulumi.StringOutput)
}

type OceanLaunchSpecSchedulingTaskArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecSchedulingTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecSchedulingTask)(nil)).Elem()
}

func (o OceanLaunchSpecSchedulingTaskArrayOutput) ToOceanLaunchSpecSchedulingTaskArrayOutput() OceanLaunchSpecSchedulingTaskArrayOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskArrayOutput) ToOceanLaunchSpecSchedulingTaskArrayOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskArrayOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecSchedulingTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecSchedulingTask {
		return vs[0].([]OceanLaunchSpecSchedulingTask)[vs[1].(int)]
	}).(OceanLaunchSpecSchedulingTaskOutput)
}

type OceanLaunchSpecSchedulingTaskTaskHeadroom struct {
	// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
	CpuPerUnit *int `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
	MemoryPerUnit *int `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
	NumOfUnits int `pulumi:"numOfUnits"`
}

// OceanLaunchSpecSchedulingTaskTaskHeadroomInput is an input type that accepts OceanLaunchSpecSchedulingTaskTaskHeadroomArgs and OceanLaunchSpecSchedulingTaskTaskHeadroomOutput values.
// You can construct a concrete instance of `OceanLaunchSpecSchedulingTaskTaskHeadroomInput` via:
//
//	OceanLaunchSpecSchedulingTaskTaskHeadroomArgs{...}
type OceanLaunchSpecSchedulingTaskTaskHeadroomInput interface {
	pulumi.Input

	ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomOutput
	ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutputWithContext(context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomOutput
}

type OceanLaunchSpecSchedulingTaskTaskHeadroomArgs struct {
	// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
	CpuPerUnit pulumi.IntPtrInput `pulumi:"cpuPerUnit"`
	// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
	MemoryPerUnit pulumi.IntPtrInput `pulumi:"memoryPerUnit"`
	// The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
	NumOfUnits pulumi.IntInput `pulumi:"numOfUnits"`
}

func (OceanLaunchSpecSchedulingTaskTaskHeadroomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecSchedulingTaskTaskHeadroom)(nil)).Elem()
}

func (i OceanLaunchSpecSchedulingTaskTaskHeadroomArgs) ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomOutput {
	return i.ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutputWithContext(context.Background())
}

func (i OceanLaunchSpecSchedulingTaskTaskHeadroomArgs) ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecSchedulingTaskTaskHeadroomOutput)
}

// OceanLaunchSpecSchedulingTaskTaskHeadroomArrayInput is an input type that accepts OceanLaunchSpecSchedulingTaskTaskHeadroomArray and OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecSchedulingTaskTaskHeadroomArrayInput` via:
//
//	OceanLaunchSpecSchedulingTaskTaskHeadroomArray{ OceanLaunchSpecSchedulingTaskTaskHeadroomArgs{...} }
type OceanLaunchSpecSchedulingTaskTaskHeadroomArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput
	ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutputWithContext(context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput
}

type OceanLaunchSpecSchedulingTaskTaskHeadroomArray []OceanLaunchSpecSchedulingTaskTaskHeadroomInput

func (OceanLaunchSpecSchedulingTaskTaskHeadroomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecSchedulingTaskTaskHeadroom)(nil)).Elem()
}

func (i OceanLaunchSpecSchedulingTaskTaskHeadroomArray) ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput {
	return i.ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecSchedulingTaskTaskHeadroomArray) ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput)
}

type OceanLaunchSpecSchedulingTaskTaskHeadroomOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecSchedulingTaskTaskHeadroom)(nil)).Elem()
}

func (o OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) ToOceanLaunchSpecSchedulingTaskTaskHeadroomOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomOutput {
	return o
}

// Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
func (o OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) CpuPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTaskTaskHeadroom) *int { return v.CpuPerUnit }).(pulumi.IntPtrOutput)
}

// Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
func (o OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) MemoryPerUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTaskTaskHeadroom) *int { return v.MemoryPerUnit }).(pulumi.IntPtrOutput)
}

// The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
func (o OceanLaunchSpecSchedulingTaskTaskHeadroomOutput) NumOfUnits() pulumi.IntOutput {
	return o.ApplyT(func(v OceanLaunchSpecSchedulingTaskTaskHeadroom) int { return v.NumOfUnits }).(pulumi.IntOutput)
}

type OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecSchedulingTaskTaskHeadroom)(nil)).Elem()
}

func (o OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput) ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput() OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput) ToOceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutputWithContext(ctx context.Context) OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput {
	return o
}

func (o OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecSchedulingTaskTaskHeadroomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecSchedulingTaskTaskHeadroom {
		return vs[0].([]OceanLaunchSpecSchedulingTaskTaskHeadroom)[vs[1].(int)]
	}).(OceanLaunchSpecSchedulingTaskTaskHeadroomOutput)
}

type OceanLaunchSpecStrategy struct {
	// When set, Ocean will proactively try to maintain as close as possible to the percentage of Spot instances out of all the Virtual Node Group instances.
	SpotPercentage *int `pulumi:"spotPercentage"`
}

// OceanLaunchSpecStrategyInput is an input type that accepts OceanLaunchSpecStrategyArgs and OceanLaunchSpecStrategyOutput values.
// You can construct a concrete instance of `OceanLaunchSpecStrategyInput` via:
//
//	OceanLaunchSpecStrategyArgs{...}
type OceanLaunchSpecStrategyInput interface {
	pulumi.Input

	ToOceanLaunchSpecStrategyOutput() OceanLaunchSpecStrategyOutput
	ToOceanLaunchSpecStrategyOutputWithContext(context.Context) OceanLaunchSpecStrategyOutput
}

type OceanLaunchSpecStrategyArgs struct {
	// When set, Ocean will proactively try to maintain as close as possible to the percentage of Spot instances out of all the Virtual Node Group instances.
	SpotPercentage pulumi.IntPtrInput `pulumi:"spotPercentage"`
}

func (OceanLaunchSpecStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecStrategy)(nil)).Elem()
}

func (i OceanLaunchSpecStrategyArgs) ToOceanLaunchSpecStrategyOutput() OceanLaunchSpecStrategyOutput {
	return i.ToOceanLaunchSpecStrategyOutputWithContext(context.Background())
}

func (i OceanLaunchSpecStrategyArgs) ToOceanLaunchSpecStrategyOutputWithContext(ctx context.Context) OceanLaunchSpecStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecStrategyOutput)
}

// OceanLaunchSpecStrategyArrayInput is an input type that accepts OceanLaunchSpecStrategyArray and OceanLaunchSpecStrategyArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecStrategyArrayInput` via:
//
//	OceanLaunchSpecStrategyArray{ OceanLaunchSpecStrategyArgs{...} }
type OceanLaunchSpecStrategyArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecStrategyArrayOutput() OceanLaunchSpecStrategyArrayOutput
	ToOceanLaunchSpecStrategyArrayOutputWithContext(context.Context) OceanLaunchSpecStrategyArrayOutput
}

type OceanLaunchSpecStrategyArray []OceanLaunchSpecStrategyInput

func (OceanLaunchSpecStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecStrategy)(nil)).Elem()
}

func (i OceanLaunchSpecStrategyArray) ToOceanLaunchSpecStrategyArrayOutput() OceanLaunchSpecStrategyArrayOutput {
	return i.ToOceanLaunchSpecStrategyArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecStrategyArray) ToOceanLaunchSpecStrategyArrayOutputWithContext(ctx context.Context) OceanLaunchSpecStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecStrategyArrayOutput)
}

type OceanLaunchSpecStrategyOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecStrategy)(nil)).Elem()
}

func (o OceanLaunchSpecStrategyOutput) ToOceanLaunchSpecStrategyOutput() OceanLaunchSpecStrategyOutput {
	return o
}

func (o OceanLaunchSpecStrategyOutput) ToOceanLaunchSpecStrategyOutputWithContext(ctx context.Context) OceanLaunchSpecStrategyOutput {
	return o
}

// When set, Ocean will proactively try to maintain as close as possible to the percentage of Spot instances out of all the Virtual Node Group instances.
func (o OceanLaunchSpecStrategyOutput) SpotPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanLaunchSpecStrategy) *int { return v.SpotPercentage }).(pulumi.IntPtrOutput)
}

type OceanLaunchSpecStrategyArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecStrategy)(nil)).Elem()
}

func (o OceanLaunchSpecStrategyArrayOutput) ToOceanLaunchSpecStrategyArrayOutput() OceanLaunchSpecStrategyArrayOutput {
	return o
}

func (o OceanLaunchSpecStrategyArrayOutput) ToOceanLaunchSpecStrategyArrayOutputWithContext(ctx context.Context) OceanLaunchSpecStrategyArrayOutput {
	return o
}

func (o OceanLaunchSpecStrategyArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecStrategy {
		return vs[0].([]OceanLaunchSpecStrategy)[vs[1].(int)]
	}).(OceanLaunchSpecStrategyOutput)
}

type OceanLaunchSpecTag struct {
	// The label key.
	Key string `pulumi:"key"`
	// The label value.
	Value string `pulumi:"value"`
}

// OceanLaunchSpecTagInput is an input type that accepts OceanLaunchSpecTagArgs and OceanLaunchSpecTagOutput values.
// You can construct a concrete instance of `OceanLaunchSpecTagInput` via:
//
//	OceanLaunchSpecTagArgs{...}
type OceanLaunchSpecTagInput interface {
	pulumi.Input

	ToOceanLaunchSpecTagOutput() OceanLaunchSpecTagOutput
	ToOceanLaunchSpecTagOutputWithContext(context.Context) OceanLaunchSpecTagOutput
}

type OceanLaunchSpecTagArgs struct {
	// The label key.
	Key pulumi.StringInput `pulumi:"key"`
	// The label value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OceanLaunchSpecTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecTag)(nil)).Elem()
}

func (i OceanLaunchSpecTagArgs) ToOceanLaunchSpecTagOutput() OceanLaunchSpecTagOutput {
	return i.ToOceanLaunchSpecTagOutputWithContext(context.Background())
}

func (i OceanLaunchSpecTagArgs) ToOceanLaunchSpecTagOutputWithContext(ctx context.Context) OceanLaunchSpecTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecTagOutput)
}

// OceanLaunchSpecTagArrayInput is an input type that accepts OceanLaunchSpecTagArray and OceanLaunchSpecTagArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecTagArrayInput` via:
//
//	OceanLaunchSpecTagArray{ OceanLaunchSpecTagArgs{...} }
type OceanLaunchSpecTagArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecTagArrayOutput() OceanLaunchSpecTagArrayOutput
	ToOceanLaunchSpecTagArrayOutputWithContext(context.Context) OceanLaunchSpecTagArrayOutput
}

type OceanLaunchSpecTagArray []OceanLaunchSpecTagInput

func (OceanLaunchSpecTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecTag)(nil)).Elem()
}

func (i OceanLaunchSpecTagArray) ToOceanLaunchSpecTagArrayOutput() OceanLaunchSpecTagArrayOutput {
	return i.ToOceanLaunchSpecTagArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecTagArray) ToOceanLaunchSpecTagArrayOutputWithContext(ctx context.Context) OceanLaunchSpecTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecTagArrayOutput)
}

type OceanLaunchSpecTagOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLaunchSpecTag)(nil)).Elem()
}

func (o OceanLaunchSpecTagOutput) ToOceanLaunchSpecTagOutput() OceanLaunchSpecTagOutput {
	return o
}

func (o OceanLaunchSpecTagOutput) ToOceanLaunchSpecTagOutputWithContext(ctx context.Context) OceanLaunchSpecTagOutput {
	return o
}

// The label key.
func (o OceanLaunchSpecTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecTag) string { return v.Key }).(pulumi.StringOutput)
}

// The label value.
func (o OceanLaunchSpecTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLaunchSpecTag) string { return v.Value }).(pulumi.StringOutput)
}

type OceanLaunchSpecTagArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLaunchSpecTag)(nil)).Elem()
}

func (o OceanLaunchSpecTagArrayOutput) ToOceanLaunchSpecTagArrayOutput() OceanLaunchSpecTagArrayOutput {
	return o
}

func (o OceanLaunchSpecTagArrayOutput) ToOceanLaunchSpecTagArrayOutputWithContext(ctx context.Context) OceanLaunchSpecTagArrayOutput {
	return o
}

func (o OceanLaunchSpecTagArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLaunchSpecTag {
		return vs[0].([]OceanLaunchSpecTag)[vs[1].(int)]
	}).(OceanLaunchSpecTagOutput)
}

type OceanLogging struct {
	// Logging Export configuration.
	Export *OceanLoggingExport `pulumi:"export"`
}

// OceanLoggingInput is an input type that accepts OceanLoggingArgs and OceanLoggingOutput values.
// You can construct a concrete instance of `OceanLoggingInput` via:
//
//	OceanLoggingArgs{...}
type OceanLoggingInput interface {
	pulumi.Input

	ToOceanLoggingOutput() OceanLoggingOutput
	ToOceanLoggingOutputWithContext(context.Context) OceanLoggingOutput
}

type OceanLoggingArgs struct {
	// Logging Export configuration.
	Export OceanLoggingExportPtrInput `pulumi:"export"`
}

func (OceanLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLogging)(nil)).Elem()
}

func (i OceanLoggingArgs) ToOceanLoggingOutput() OceanLoggingOutput {
	return i.ToOceanLoggingOutputWithContext(context.Background())
}

func (i OceanLoggingArgs) ToOceanLoggingOutputWithContext(ctx context.Context) OceanLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingOutput)
}

func (i OceanLoggingArgs) ToOceanLoggingPtrOutput() OceanLoggingPtrOutput {
	return i.ToOceanLoggingPtrOutputWithContext(context.Background())
}

func (i OceanLoggingArgs) ToOceanLoggingPtrOutputWithContext(ctx context.Context) OceanLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingOutput).ToOceanLoggingPtrOutputWithContext(ctx)
}

// OceanLoggingPtrInput is an input type that accepts OceanLoggingArgs, OceanLoggingPtr and OceanLoggingPtrOutput values.
// You can construct a concrete instance of `OceanLoggingPtrInput` via:
//
//	        OceanLoggingArgs{...}
//
//	or:
//
//	        nil
type OceanLoggingPtrInput interface {
	pulumi.Input

	ToOceanLoggingPtrOutput() OceanLoggingPtrOutput
	ToOceanLoggingPtrOutputWithContext(context.Context) OceanLoggingPtrOutput
}

type oceanLoggingPtrType OceanLoggingArgs

func OceanLoggingPtr(v *OceanLoggingArgs) OceanLoggingPtrInput {
	return (*oceanLoggingPtrType)(v)
}

func (*oceanLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLogging)(nil)).Elem()
}

func (i *oceanLoggingPtrType) ToOceanLoggingPtrOutput() OceanLoggingPtrOutput {
	return i.ToOceanLoggingPtrOutputWithContext(context.Background())
}

func (i *oceanLoggingPtrType) ToOceanLoggingPtrOutputWithContext(ctx context.Context) OceanLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingPtrOutput)
}

type OceanLoggingOutput struct{ *pulumi.OutputState }

func (OceanLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLogging)(nil)).Elem()
}

func (o OceanLoggingOutput) ToOceanLoggingOutput() OceanLoggingOutput {
	return o
}

func (o OceanLoggingOutput) ToOceanLoggingOutputWithContext(ctx context.Context) OceanLoggingOutput {
	return o
}

func (o OceanLoggingOutput) ToOceanLoggingPtrOutput() OceanLoggingPtrOutput {
	return o.ToOceanLoggingPtrOutputWithContext(context.Background())
}

func (o OceanLoggingOutput) ToOceanLoggingPtrOutputWithContext(ctx context.Context) OceanLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanLogging) *OceanLogging {
		return &v
	}).(OceanLoggingPtrOutput)
}

// Logging Export configuration.
func (o OceanLoggingOutput) Export() OceanLoggingExportPtrOutput {
	return o.ApplyT(func(v OceanLogging) *OceanLoggingExport { return v.Export }).(OceanLoggingExportPtrOutput)
}

type OceanLoggingPtrOutput struct{ *pulumi.OutputState }

func (OceanLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLogging)(nil)).Elem()
}

func (o OceanLoggingPtrOutput) ToOceanLoggingPtrOutput() OceanLoggingPtrOutput {
	return o
}

func (o OceanLoggingPtrOutput) ToOceanLoggingPtrOutputWithContext(ctx context.Context) OceanLoggingPtrOutput {
	return o
}

func (o OceanLoggingPtrOutput) Elem() OceanLoggingOutput {
	return o.ApplyT(func(v *OceanLogging) OceanLogging {
		if v != nil {
			return *v
		}
		var ret OceanLogging
		return ret
	}).(OceanLoggingOutput)
}

// Logging Export configuration.
func (o OceanLoggingPtrOutput) Export() OceanLoggingExportPtrOutput {
	return o.ApplyT(func(v *OceanLogging) *OceanLoggingExport {
		if v == nil {
			return nil
		}
		return v.Export
	}).(OceanLoggingExportPtrOutput)
}

type OceanLoggingExport struct {
	// Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
	S3s []OceanLoggingExportS3 `pulumi:"s3s"`
}

// OceanLoggingExportInput is an input type that accepts OceanLoggingExportArgs and OceanLoggingExportOutput values.
// You can construct a concrete instance of `OceanLoggingExportInput` via:
//
//	OceanLoggingExportArgs{...}
type OceanLoggingExportInput interface {
	pulumi.Input

	ToOceanLoggingExportOutput() OceanLoggingExportOutput
	ToOceanLoggingExportOutputWithContext(context.Context) OceanLoggingExportOutput
}

type OceanLoggingExportArgs struct {
	// Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
	S3s OceanLoggingExportS3ArrayInput `pulumi:"s3s"`
}

func (OceanLoggingExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLoggingExport)(nil)).Elem()
}

func (i OceanLoggingExportArgs) ToOceanLoggingExportOutput() OceanLoggingExportOutput {
	return i.ToOceanLoggingExportOutputWithContext(context.Background())
}

func (i OceanLoggingExportArgs) ToOceanLoggingExportOutputWithContext(ctx context.Context) OceanLoggingExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingExportOutput)
}

func (i OceanLoggingExportArgs) ToOceanLoggingExportPtrOutput() OceanLoggingExportPtrOutput {
	return i.ToOceanLoggingExportPtrOutputWithContext(context.Background())
}

func (i OceanLoggingExportArgs) ToOceanLoggingExportPtrOutputWithContext(ctx context.Context) OceanLoggingExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingExportOutput).ToOceanLoggingExportPtrOutputWithContext(ctx)
}

// OceanLoggingExportPtrInput is an input type that accepts OceanLoggingExportArgs, OceanLoggingExportPtr and OceanLoggingExportPtrOutput values.
// You can construct a concrete instance of `OceanLoggingExportPtrInput` via:
//
//	        OceanLoggingExportArgs{...}
//
//	or:
//
//	        nil
type OceanLoggingExportPtrInput interface {
	pulumi.Input

	ToOceanLoggingExportPtrOutput() OceanLoggingExportPtrOutput
	ToOceanLoggingExportPtrOutputWithContext(context.Context) OceanLoggingExportPtrOutput
}

type oceanLoggingExportPtrType OceanLoggingExportArgs

func OceanLoggingExportPtr(v *OceanLoggingExportArgs) OceanLoggingExportPtrInput {
	return (*oceanLoggingExportPtrType)(v)
}

func (*oceanLoggingExportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLoggingExport)(nil)).Elem()
}

func (i *oceanLoggingExportPtrType) ToOceanLoggingExportPtrOutput() OceanLoggingExportPtrOutput {
	return i.ToOceanLoggingExportPtrOutputWithContext(context.Background())
}

func (i *oceanLoggingExportPtrType) ToOceanLoggingExportPtrOutputWithContext(ctx context.Context) OceanLoggingExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingExportPtrOutput)
}

type OceanLoggingExportOutput struct{ *pulumi.OutputState }

func (OceanLoggingExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLoggingExport)(nil)).Elem()
}

func (o OceanLoggingExportOutput) ToOceanLoggingExportOutput() OceanLoggingExportOutput {
	return o
}

func (o OceanLoggingExportOutput) ToOceanLoggingExportOutputWithContext(ctx context.Context) OceanLoggingExportOutput {
	return o
}

func (o OceanLoggingExportOutput) ToOceanLoggingExportPtrOutput() OceanLoggingExportPtrOutput {
	return o.ToOceanLoggingExportPtrOutputWithContext(context.Background())
}

func (o OceanLoggingExportOutput) ToOceanLoggingExportPtrOutputWithContext(ctx context.Context) OceanLoggingExportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanLoggingExport) *OceanLoggingExport {
		return &v
	}).(OceanLoggingExportPtrOutput)
}

// Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
func (o OceanLoggingExportOutput) S3s() OceanLoggingExportS3ArrayOutput {
	return o.ApplyT(func(v OceanLoggingExport) []OceanLoggingExportS3 { return v.S3s }).(OceanLoggingExportS3ArrayOutput)
}

type OceanLoggingExportPtrOutput struct{ *pulumi.OutputState }

func (OceanLoggingExportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLoggingExport)(nil)).Elem()
}

func (o OceanLoggingExportPtrOutput) ToOceanLoggingExportPtrOutput() OceanLoggingExportPtrOutput {
	return o
}

func (o OceanLoggingExportPtrOutput) ToOceanLoggingExportPtrOutputWithContext(ctx context.Context) OceanLoggingExportPtrOutput {
	return o
}

func (o OceanLoggingExportPtrOutput) Elem() OceanLoggingExportOutput {
	return o.ApplyT(func(v *OceanLoggingExport) OceanLoggingExport {
		if v != nil {
			return *v
		}
		var ret OceanLoggingExport
		return ret
	}).(OceanLoggingExportOutput)
}

// Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
func (o OceanLoggingExportPtrOutput) S3s() OceanLoggingExportS3ArrayOutput {
	return o.ApplyT(func(v *OceanLoggingExport) []OceanLoggingExportS3 {
		if v == nil {
			return nil
		}
		return v.S3s
	}).(OceanLoggingExportS3ArrayOutput)
}

type OceanLoggingExportS3 struct {
	// The identifier of The S3 data integration to export the logs to.
	Id string `pulumi:"id"`
}

// OceanLoggingExportS3Input is an input type that accepts OceanLoggingExportS3Args and OceanLoggingExportS3Output values.
// You can construct a concrete instance of `OceanLoggingExportS3Input` via:
//
//	OceanLoggingExportS3Args{...}
type OceanLoggingExportS3Input interface {
	pulumi.Input

	ToOceanLoggingExportS3Output() OceanLoggingExportS3Output
	ToOceanLoggingExportS3OutputWithContext(context.Context) OceanLoggingExportS3Output
}

type OceanLoggingExportS3Args struct {
	// The identifier of The S3 data integration to export the logs to.
	Id pulumi.StringInput `pulumi:"id"`
}

func (OceanLoggingExportS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLoggingExportS3)(nil)).Elem()
}

func (i OceanLoggingExportS3Args) ToOceanLoggingExportS3Output() OceanLoggingExportS3Output {
	return i.ToOceanLoggingExportS3OutputWithContext(context.Background())
}

func (i OceanLoggingExportS3Args) ToOceanLoggingExportS3OutputWithContext(ctx context.Context) OceanLoggingExportS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingExportS3Output)
}

// OceanLoggingExportS3ArrayInput is an input type that accepts OceanLoggingExportS3Array and OceanLoggingExportS3ArrayOutput values.
// You can construct a concrete instance of `OceanLoggingExportS3ArrayInput` via:
//
//	OceanLoggingExportS3Array{ OceanLoggingExportS3Args{...} }
type OceanLoggingExportS3ArrayInput interface {
	pulumi.Input

	ToOceanLoggingExportS3ArrayOutput() OceanLoggingExportS3ArrayOutput
	ToOceanLoggingExportS3ArrayOutputWithContext(context.Context) OceanLoggingExportS3ArrayOutput
}

type OceanLoggingExportS3Array []OceanLoggingExportS3Input

func (OceanLoggingExportS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLoggingExportS3)(nil)).Elem()
}

func (i OceanLoggingExportS3Array) ToOceanLoggingExportS3ArrayOutput() OceanLoggingExportS3ArrayOutput {
	return i.ToOceanLoggingExportS3ArrayOutputWithContext(context.Background())
}

func (i OceanLoggingExportS3Array) ToOceanLoggingExportS3ArrayOutputWithContext(ctx context.Context) OceanLoggingExportS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLoggingExportS3ArrayOutput)
}

type OceanLoggingExportS3Output struct{ *pulumi.OutputState }

func (OceanLoggingExportS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanLoggingExportS3)(nil)).Elem()
}

func (o OceanLoggingExportS3Output) ToOceanLoggingExportS3Output() OceanLoggingExportS3Output {
	return o
}

func (o OceanLoggingExportS3Output) ToOceanLoggingExportS3OutputWithContext(ctx context.Context) OceanLoggingExportS3Output {
	return o
}

// The identifier of The S3 data integration to export the logs to.
func (o OceanLoggingExportS3Output) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OceanLoggingExportS3) string { return v.Id }).(pulumi.StringOutput)
}

type OceanLoggingExportS3ArrayOutput struct{ *pulumi.OutputState }

func (OceanLoggingExportS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanLoggingExportS3)(nil)).Elem()
}

func (o OceanLoggingExportS3ArrayOutput) ToOceanLoggingExportS3ArrayOutput() OceanLoggingExportS3ArrayOutput {
	return o
}

func (o OceanLoggingExportS3ArrayOutput) ToOceanLoggingExportS3ArrayOutputWithContext(ctx context.Context) OceanLoggingExportS3ArrayOutput {
	return o
}

func (o OceanLoggingExportS3ArrayOutput) Index(i pulumi.IntInput) OceanLoggingExportS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanLoggingExportS3 {
		return vs[0].([]OceanLoggingExportS3)[vs[1].(int)]
	}).(OceanLoggingExportS3Output)
}

type OceanOptimizeImages struct {
	// String. Valid values: "always" "never" "timeWindow".
	PerformAt string `pulumi:"performAt"`
	// Boolean. Enable auto image (AMI) update for the ECS container instances. The auto update applies for ECS-Optimized AMIs.
	ShouldOptimizeEcsAmi bool `pulumi:"shouldOptimizeEcsAmi"`
	// Array of strings. Set time windows for image update, at least one time window. Each string is in the format of ddd:hh:mm-ddd:hh:mm ddd. Time windows should not overlap.
	TimeWindows []string `pulumi:"timeWindows"`
}

// OceanOptimizeImagesInput is an input type that accepts OceanOptimizeImagesArgs and OceanOptimizeImagesOutput values.
// You can construct a concrete instance of `OceanOptimizeImagesInput` via:
//
//	OceanOptimizeImagesArgs{...}
type OceanOptimizeImagesInput interface {
	pulumi.Input

	ToOceanOptimizeImagesOutput() OceanOptimizeImagesOutput
	ToOceanOptimizeImagesOutputWithContext(context.Context) OceanOptimizeImagesOutput
}

type OceanOptimizeImagesArgs struct {
	// String. Valid values: "always" "never" "timeWindow".
	PerformAt pulumi.StringInput `pulumi:"performAt"`
	// Boolean. Enable auto image (AMI) update for the ECS container instances. The auto update applies for ECS-Optimized AMIs.
	ShouldOptimizeEcsAmi pulumi.BoolInput `pulumi:"shouldOptimizeEcsAmi"`
	// Array of strings. Set time windows for image update, at least one time window. Each string is in the format of ddd:hh:mm-ddd:hh:mm ddd. Time windows should not overlap.
	TimeWindows pulumi.StringArrayInput `pulumi:"timeWindows"`
}

func (OceanOptimizeImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanOptimizeImages)(nil)).Elem()
}

func (i OceanOptimizeImagesArgs) ToOceanOptimizeImagesOutput() OceanOptimizeImagesOutput {
	return i.ToOceanOptimizeImagesOutputWithContext(context.Background())
}

func (i OceanOptimizeImagesArgs) ToOceanOptimizeImagesOutputWithContext(ctx context.Context) OceanOptimizeImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOptimizeImagesOutput)
}

func (i OceanOptimizeImagesArgs) ToOceanOptimizeImagesPtrOutput() OceanOptimizeImagesPtrOutput {
	return i.ToOceanOptimizeImagesPtrOutputWithContext(context.Background())
}

func (i OceanOptimizeImagesArgs) ToOceanOptimizeImagesPtrOutputWithContext(ctx context.Context) OceanOptimizeImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOptimizeImagesOutput).ToOceanOptimizeImagesPtrOutputWithContext(ctx)
}

// OceanOptimizeImagesPtrInput is an input type that accepts OceanOptimizeImagesArgs, OceanOptimizeImagesPtr and OceanOptimizeImagesPtrOutput values.
// You can construct a concrete instance of `OceanOptimizeImagesPtrInput` via:
//
//	        OceanOptimizeImagesArgs{...}
//
//	or:
//
//	        nil
type OceanOptimizeImagesPtrInput interface {
	pulumi.Input

	ToOceanOptimizeImagesPtrOutput() OceanOptimizeImagesPtrOutput
	ToOceanOptimizeImagesPtrOutputWithContext(context.Context) OceanOptimizeImagesPtrOutput
}

type oceanOptimizeImagesPtrType OceanOptimizeImagesArgs

func OceanOptimizeImagesPtr(v *OceanOptimizeImagesArgs) OceanOptimizeImagesPtrInput {
	return (*oceanOptimizeImagesPtrType)(v)
}

func (*oceanOptimizeImagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanOptimizeImages)(nil)).Elem()
}

func (i *oceanOptimizeImagesPtrType) ToOceanOptimizeImagesPtrOutput() OceanOptimizeImagesPtrOutput {
	return i.ToOceanOptimizeImagesPtrOutputWithContext(context.Background())
}

func (i *oceanOptimizeImagesPtrType) ToOceanOptimizeImagesPtrOutputWithContext(ctx context.Context) OceanOptimizeImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOptimizeImagesPtrOutput)
}

type OceanOptimizeImagesOutput struct{ *pulumi.OutputState }

func (OceanOptimizeImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanOptimizeImages)(nil)).Elem()
}

func (o OceanOptimizeImagesOutput) ToOceanOptimizeImagesOutput() OceanOptimizeImagesOutput {
	return o
}

func (o OceanOptimizeImagesOutput) ToOceanOptimizeImagesOutputWithContext(ctx context.Context) OceanOptimizeImagesOutput {
	return o
}

func (o OceanOptimizeImagesOutput) ToOceanOptimizeImagesPtrOutput() OceanOptimizeImagesPtrOutput {
	return o.ToOceanOptimizeImagesPtrOutputWithContext(context.Background())
}

func (o OceanOptimizeImagesOutput) ToOceanOptimizeImagesPtrOutputWithContext(ctx context.Context) OceanOptimizeImagesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanOptimizeImages) *OceanOptimizeImages {
		return &v
	}).(OceanOptimizeImagesPtrOutput)
}

// String. Valid values: "always" "never" "timeWindow".
func (o OceanOptimizeImagesOutput) PerformAt() pulumi.StringOutput {
	return o.ApplyT(func(v OceanOptimizeImages) string { return v.PerformAt }).(pulumi.StringOutput)
}

// Boolean. Enable auto image (AMI) update for the ECS container instances. The auto update applies for ECS-Optimized AMIs.
func (o OceanOptimizeImagesOutput) ShouldOptimizeEcsAmi() pulumi.BoolOutput {
	return o.ApplyT(func(v OceanOptimizeImages) bool { return v.ShouldOptimizeEcsAmi }).(pulumi.BoolOutput)
}

// Array of strings. Set time windows for image update, at least one time window. Each string is in the format of ddd:hh:mm-ddd:hh:mm ddd. Time windows should not overlap.
func (o OceanOptimizeImagesOutput) TimeWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanOptimizeImages) []string { return v.TimeWindows }).(pulumi.StringArrayOutput)
}

type OceanOptimizeImagesPtrOutput struct{ *pulumi.OutputState }

func (OceanOptimizeImagesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanOptimizeImages)(nil)).Elem()
}

func (o OceanOptimizeImagesPtrOutput) ToOceanOptimizeImagesPtrOutput() OceanOptimizeImagesPtrOutput {
	return o
}

func (o OceanOptimizeImagesPtrOutput) ToOceanOptimizeImagesPtrOutputWithContext(ctx context.Context) OceanOptimizeImagesPtrOutput {
	return o
}

func (o OceanOptimizeImagesPtrOutput) Elem() OceanOptimizeImagesOutput {
	return o.ApplyT(func(v *OceanOptimizeImages) OceanOptimizeImages {
		if v != nil {
			return *v
		}
		var ret OceanOptimizeImages
		return ret
	}).(OceanOptimizeImagesOutput)
}

// String. Valid values: "always" "never" "timeWindow".
func (o OceanOptimizeImagesPtrOutput) PerformAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanOptimizeImages) *string {
		if v == nil {
			return nil
		}
		return &v.PerformAt
	}).(pulumi.StringPtrOutput)
}

// Boolean. Enable auto image (AMI) update for the ECS container instances. The auto update applies for ECS-Optimized AMIs.
func (o OceanOptimizeImagesPtrOutput) ShouldOptimizeEcsAmi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanOptimizeImages) *bool {
		if v == nil {
			return nil
		}
		return &v.ShouldOptimizeEcsAmi
	}).(pulumi.BoolPtrOutput)
}

// Array of strings. Set time windows for image update, at least one time window. Each string is in the format of ddd:hh:mm-ddd:hh:mm ddd. Time windows should not overlap.
func (o OceanOptimizeImagesPtrOutput) TimeWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanOptimizeImages) []string {
		if v == nil {
			return nil
		}
		return v.TimeWindows
	}).(pulumi.StringArrayOutput)
}

type OceanScheduledTask struct {
	// Set shutdown hours for cluster object.
	ShutdownHours *OceanScheduledTaskShutdownHours `pulumi:"shutdownHours"`
	// The scheduling tasks for the cluster.
	Tasks []OceanScheduledTaskTask `pulumi:"tasks"`
}

// OceanScheduledTaskInput is an input type that accepts OceanScheduledTaskArgs and OceanScheduledTaskOutput values.
// You can construct a concrete instance of `OceanScheduledTaskInput` via:
//
//	OceanScheduledTaskArgs{...}
type OceanScheduledTaskInput interface {
	pulumi.Input

	ToOceanScheduledTaskOutput() OceanScheduledTaskOutput
	ToOceanScheduledTaskOutputWithContext(context.Context) OceanScheduledTaskOutput
}

type OceanScheduledTaskArgs struct {
	// Set shutdown hours for cluster object.
	ShutdownHours OceanScheduledTaskShutdownHoursPtrInput `pulumi:"shutdownHours"`
	// The scheduling tasks for the cluster.
	Tasks OceanScheduledTaskTaskArrayInput `pulumi:"tasks"`
}

func (OceanScheduledTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTask)(nil)).Elem()
}

func (i OceanScheduledTaskArgs) ToOceanScheduledTaskOutput() OceanScheduledTaskOutput {
	return i.ToOceanScheduledTaskOutputWithContext(context.Background())
}

func (i OceanScheduledTaskArgs) ToOceanScheduledTaskOutputWithContext(ctx context.Context) OceanScheduledTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskOutput)
}

// OceanScheduledTaskArrayInput is an input type that accepts OceanScheduledTaskArray and OceanScheduledTaskArrayOutput values.
// You can construct a concrete instance of `OceanScheduledTaskArrayInput` via:
//
//	OceanScheduledTaskArray{ OceanScheduledTaskArgs{...} }
type OceanScheduledTaskArrayInput interface {
	pulumi.Input

	ToOceanScheduledTaskArrayOutput() OceanScheduledTaskArrayOutput
	ToOceanScheduledTaskArrayOutputWithContext(context.Context) OceanScheduledTaskArrayOutput
}

type OceanScheduledTaskArray []OceanScheduledTaskInput

func (OceanScheduledTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanScheduledTask)(nil)).Elem()
}

func (i OceanScheduledTaskArray) ToOceanScheduledTaskArrayOutput() OceanScheduledTaskArrayOutput {
	return i.ToOceanScheduledTaskArrayOutputWithContext(context.Background())
}

func (i OceanScheduledTaskArray) ToOceanScheduledTaskArrayOutputWithContext(ctx context.Context) OceanScheduledTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskArrayOutput)
}

type OceanScheduledTaskOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTask)(nil)).Elem()
}

func (o OceanScheduledTaskOutput) ToOceanScheduledTaskOutput() OceanScheduledTaskOutput {
	return o
}

func (o OceanScheduledTaskOutput) ToOceanScheduledTaskOutputWithContext(ctx context.Context) OceanScheduledTaskOutput {
	return o
}

// Set shutdown hours for cluster object.
func (o OceanScheduledTaskOutput) ShutdownHours() OceanScheduledTaskShutdownHoursPtrOutput {
	return o.ApplyT(func(v OceanScheduledTask) *OceanScheduledTaskShutdownHours { return v.ShutdownHours }).(OceanScheduledTaskShutdownHoursPtrOutput)
}

// The scheduling tasks for the cluster.
func (o OceanScheduledTaskOutput) Tasks() OceanScheduledTaskTaskArrayOutput {
	return o.ApplyT(func(v OceanScheduledTask) []OceanScheduledTaskTask { return v.Tasks }).(OceanScheduledTaskTaskArrayOutput)
}

type OceanScheduledTaskArrayOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanScheduledTask)(nil)).Elem()
}

func (o OceanScheduledTaskArrayOutput) ToOceanScheduledTaskArrayOutput() OceanScheduledTaskArrayOutput {
	return o
}

func (o OceanScheduledTaskArrayOutput) ToOceanScheduledTaskArrayOutputWithContext(ctx context.Context) OceanScheduledTaskArrayOutput {
	return o
}

func (o OceanScheduledTaskArrayOutput) Index(i pulumi.IntInput) OceanScheduledTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanScheduledTask {
		return vs[0].([]OceanScheduledTask)[vs[1].(int)]
	}).(OceanScheduledTaskOutput)
}

type OceanScheduledTaskShutdownHours struct {
	// Flag to enable / disable the shutdown hours.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of `ddd:hh:mm-ddd:hh:mm` (ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59). Time windows should not overlap. Required when `cluster.scheduling.isEnabled` is true. API Times are in UTC. Example: `Fri:15:30-Wed:14:30`.
	TimeWindows []string `pulumi:"timeWindows"`
}

// OceanScheduledTaskShutdownHoursInput is an input type that accepts OceanScheduledTaskShutdownHoursArgs and OceanScheduledTaskShutdownHoursOutput values.
// You can construct a concrete instance of `OceanScheduledTaskShutdownHoursInput` via:
//
//	OceanScheduledTaskShutdownHoursArgs{...}
type OceanScheduledTaskShutdownHoursInput interface {
	pulumi.Input

	ToOceanScheduledTaskShutdownHoursOutput() OceanScheduledTaskShutdownHoursOutput
	ToOceanScheduledTaskShutdownHoursOutputWithContext(context.Context) OceanScheduledTaskShutdownHoursOutput
}

type OceanScheduledTaskShutdownHoursArgs struct {
	// Flag to enable / disable the shutdown hours.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of `ddd:hh:mm-ddd:hh:mm` (ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59). Time windows should not overlap. Required when `cluster.scheduling.isEnabled` is true. API Times are in UTC. Example: `Fri:15:30-Wed:14:30`.
	TimeWindows pulumi.StringArrayInput `pulumi:"timeWindows"`
}

func (OceanScheduledTaskShutdownHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTaskShutdownHours)(nil)).Elem()
}

func (i OceanScheduledTaskShutdownHoursArgs) ToOceanScheduledTaskShutdownHoursOutput() OceanScheduledTaskShutdownHoursOutput {
	return i.ToOceanScheduledTaskShutdownHoursOutputWithContext(context.Background())
}

func (i OceanScheduledTaskShutdownHoursArgs) ToOceanScheduledTaskShutdownHoursOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskShutdownHoursOutput)
}

func (i OceanScheduledTaskShutdownHoursArgs) ToOceanScheduledTaskShutdownHoursPtrOutput() OceanScheduledTaskShutdownHoursPtrOutput {
	return i.ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(context.Background())
}

func (i OceanScheduledTaskShutdownHoursArgs) ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskShutdownHoursOutput).ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(ctx)
}

// OceanScheduledTaskShutdownHoursPtrInput is an input type that accepts OceanScheduledTaskShutdownHoursArgs, OceanScheduledTaskShutdownHoursPtr and OceanScheduledTaskShutdownHoursPtrOutput values.
// You can construct a concrete instance of `OceanScheduledTaskShutdownHoursPtrInput` via:
//
//	        OceanScheduledTaskShutdownHoursArgs{...}
//
//	or:
//
//	        nil
type OceanScheduledTaskShutdownHoursPtrInput interface {
	pulumi.Input

	ToOceanScheduledTaskShutdownHoursPtrOutput() OceanScheduledTaskShutdownHoursPtrOutput
	ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(context.Context) OceanScheduledTaskShutdownHoursPtrOutput
}

type oceanScheduledTaskShutdownHoursPtrType OceanScheduledTaskShutdownHoursArgs

func OceanScheduledTaskShutdownHoursPtr(v *OceanScheduledTaskShutdownHoursArgs) OceanScheduledTaskShutdownHoursPtrInput {
	return (*oceanScheduledTaskShutdownHoursPtrType)(v)
}

func (*oceanScheduledTaskShutdownHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanScheduledTaskShutdownHours)(nil)).Elem()
}

func (i *oceanScheduledTaskShutdownHoursPtrType) ToOceanScheduledTaskShutdownHoursPtrOutput() OceanScheduledTaskShutdownHoursPtrOutput {
	return i.ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(context.Background())
}

func (i *oceanScheduledTaskShutdownHoursPtrType) ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskShutdownHoursPtrOutput)
}

type OceanScheduledTaskShutdownHoursOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskShutdownHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTaskShutdownHours)(nil)).Elem()
}

func (o OceanScheduledTaskShutdownHoursOutput) ToOceanScheduledTaskShutdownHoursOutput() OceanScheduledTaskShutdownHoursOutput {
	return o
}

func (o OceanScheduledTaskShutdownHoursOutput) ToOceanScheduledTaskShutdownHoursOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursOutput {
	return o
}

func (o OceanScheduledTaskShutdownHoursOutput) ToOceanScheduledTaskShutdownHoursPtrOutput() OceanScheduledTaskShutdownHoursPtrOutput {
	return o.ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(context.Background())
}

func (o OceanScheduledTaskShutdownHoursOutput) ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanScheduledTaskShutdownHours) *OceanScheduledTaskShutdownHours {
		return &v
	}).(OceanScheduledTaskShutdownHoursPtrOutput)
}

// Flag to enable / disable the shutdown hours.
func (o OceanScheduledTaskShutdownHoursOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanScheduledTaskShutdownHours) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of `ddd:hh:mm-ddd:hh:mm` (ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59). Time windows should not overlap. Required when `cluster.scheduling.isEnabled` is true. API Times are in UTC. Example: `Fri:15:30-Wed:14:30`.
func (o OceanScheduledTaskShutdownHoursOutput) TimeWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OceanScheduledTaskShutdownHours) []string { return v.TimeWindows }).(pulumi.StringArrayOutput)
}

type OceanScheduledTaskShutdownHoursPtrOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskShutdownHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanScheduledTaskShutdownHours)(nil)).Elem()
}

func (o OceanScheduledTaskShutdownHoursPtrOutput) ToOceanScheduledTaskShutdownHoursPtrOutput() OceanScheduledTaskShutdownHoursPtrOutput {
	return o
}

func (o OceanScheduledTaskShutdownHoursPtrOutput) ToOceanScheduledTaskShutdownHoursPtrOutputWithContext(ctx context.Context) OceanScheduledTaskShutdownHoursPtrOutput {
	return o
}

func (o OceanScheduledTaskShutdownHoursPtrOutput) Elem() OceanScheduledTaskShutdownHoursOutput {
	return o.ApplyT(func(v *OceanScheduledTaskShutdownHours) OceanScheduledTaskShutdownHours {
		if v != nil {
			return *v
		}
		var ret OceanScheduledTaskShutdownHours
		return ret
	}).(OceanScheduledTaskShutdownHoursOutput)
}

// Flag to enable / disable the shutdown hours.
func (o OceanScheduledTaskShutdownHoursPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanScheduledTaskShutdownHours) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of `ddd:hh:mm-ddd:hh:mm` (ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59). Time windows should not overlap. Required when `cluster.scheduling.isEnabled` is true. API Times are in UTC. Example: `Fri:15:30-Wed:14:30`.
func (o OceanScheduledTaskShutdownHoursPtrOutput) TimeWindows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanScheduledTaskShutdownHours) []string {
		if v == nil {
			return nil
		}
		return v.TimeWindows
	}).(pulumi.StringArrayOutput)
}

type OceanScheduledTaskTask struct {
	// A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. Example: `0 1 * * *`.
	CronExpression string `pulumi:"cronExpression"`
	// Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
	IsEnabled bool `pulumi:"isEnabled"`
	// Valid values: "clusterRoll". Required for `cluster.scheduling.tasks object`. Example: `clusterRoll`.
	TaskType string `pulumi:"taskType"`
}

// OceanScheduledTaskTaskInput is an input type that accepts OceanScheduledTaskTaskArgs and OceanScheduledTaskTaskOutput values.
// You can construct a concrete instance of `OceanScheduledTaskTaskInput` via:
//
//	OceanScheduledTaskTaskArgs{...}
type OceanScheduledTaskTaskInput interface {
	pulumi.Input

	ToOceanScheduledTaskTaskOutput() OceanScheduledTaskTaskOutput
	ToOceanScheduledTaskTaskOutputWithContext(context.Context) OceanScheduledTaskTaskOutput
}

type OceanScheduledTaskTaskArgs struct {
	// A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. Example: `0 1 * * *`.
	CronExpression pulumi.StringInput `pulumi:"cronExpression"`
	// Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Valid values: "clusterRoll". Required for `cluster.scheduling.tasks object`. Example: `clusterRoll`.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (OceanScheduledTaskTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTaskTask)(nil)).Elem()
}

func (i OceanScheduledTaskTaskArgs) ToOceanScheduledTaskTaskOutput() OceanScheduledTaskTaskOutput {
	return i.ToOceanScheduledTaskTaskOutputWithContext(context.Background())
}

func (i OceanScheduledTaskTaskArgs) ToOceanScheduledTaskTaskOutputWithContext(ctx context.Context) OceanScheduledTaskTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskTaskOutput)
}

// OceanScheduledTaskTaskArrayInput is an input type that accepts OceanScheduledTaskTaskArray and OceanScheduledTaskTaskArrayOutput values.
// You can construct a concrete instance of `OceanScheduledTaskTaskArrayInput` via:
//
//	OceanScheduledTaskTaskArray{ OceanScheduledTaskTaskArgs{...} }
type OceanScheduledTaskTaskArrayInput interface {
	pulumi.Input

	ToOceanScheduledTaskTaskArrayOutput() OceanScheduledTaskTaskArrayOutput
	ToOceanScheduledTaskTaskArrayOutputWithContext(context.Context) OceanScheduledTaskTaskArrayOutput
}

type OceanScheduledTaskTaskArray []OceanScheduledTaskTaskInput

func (OceanScheduledTaskTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanScheduledTaskTask)(nil)).Elem()
}

func (i OceanScheduledTaskTaskArray) ToOceanScheduledTaskTaskArrayOutput() OceanScheduledTaskTaskArrayOutput {
	return i.ToOceanScheduledTaskTaskArrayOutputWithContext(context.Background())
}

func (i OceanScheduledTaskTaskArray) ToOceanScheduledTaskTaskArrayOutputWithContext(ctx context.Context) OceanScheduledTaskTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanScheduledTaskTaskArrayOutput)
}

type OceanScheduledTaskTaskOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanScheduledTaskTask)(nil)).Elem()
}

func (o OceanScheduledTaskTaskOutput) ToOceanScheduledTaskTaskOutput() OceanScheduledTaskTaskOutput {
	return o
}

func (o OceanScheduledTaskTaskOutput) ToOceanScheduledTaskTaskOutputWithContext(ctx context.Context) OceanScheduledTaskTaskOutput {
	return o
}

// A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. Example: `0 1 * * *`.
func (o OceanScheduledTaskTaskOutput) CronExpression() pulumi.StringOutput {
	return o.ApplyT(func(v OceanScheduledTaskTask) string { return v.CronExpression }).(pulumi.StringOutput)
}

// Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
func (o OceanScheduledTaskTaskOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v OceanScheduledTaskTask) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Valid values: "clusterRoll". Required for `cluster.scheduling.tasks object`. Example: `clusterRoll`.
func (o OceanScheduledTaskTaskOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v OceanScheduledTaskTask) string { return v.TaskType }).(pulumi.StringOutput)
}

type OceanScheduledTaskTaskArrayOutput struct{ *pulumi.OutputState }

func (OceanScheduledTaskTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanScheduledTaskTask)(nil)).Elem()
}

func (o OceanScheduledTaskTaskArrayOutput) ToOceanScheduledTaskTaskArrayOutput() OceanScheduledTaskTaskArrayOutput {
	return o
}

func (o OceanScheduledTaskTaskArrayOutput) ToOceanScheduledTaskTaskArrayOutputWithContext(ctx context.Context) OceanScheduledTaskTaskArrayOutput {
	return o
}

func (o OceanScheduledTaskTaskArrayOutput) Index(i pulumi.IntInput) OceanScheduledTaskTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanScheduledTaskTask {
		return vs[0].([]OceanScheduledTaskTask)[vs[1].(int)]
	}).(OceanScheduledTaskTaskOutput)
}

type OceanTag struct {
	// The tag key.
	Key string `pulumi:"key"`
	// The tag value.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	Value string `pulumi:"value"`
}

// OceanTagInput is an input type that accepts OceanTagArgs and OceanTagOutput values.
// You can construct a concrete instance of `OceanTagInput` via:
//
//	OceanTagArgs{...}
type OceanTagInput interface {
	pulumi.Input

	ToOceanTagOutput() OceanTagOutput
	ToOceanTagOutputWithContext(context.Context) OceanTagOutput
}

type OceanTagArgs struct {
	// The tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// The tag value.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	Value pulumi.StringInput `pulumi:"value"`
}

func (OceanTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanTag)(nil)).Elem()
}

func (i OceanTagArgs) ToOceanTagOutput() OceanTagOutput {
	return i.ToOceanTagOutputWithContext(context.Background())
}

func (i OceanTagArgs) ToOceanTagOutputWithContext(ctx context.Context) OceanTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanTagOutput)
}

// OceanTagArrayInput is an input type that accepts OceanTagArray and OceanTagArrayOutput values.
// You can construct a concrete instance of `OceanTagArrayInput` via:
//
//	OceanTagArray{ OceanTagArgs{...} }
type OceanTagArrayInput interface {
	pulumi.Input

	ToOceanTagArrayOutput() OceanTagArrayOutput
	ToOceanTagArrayOutputWithContext(context.Context) OceanTagArrayOutput
}

type OceanTagArray []OceanTagInput

func (OceanTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanTag)(nil)).Elem()
}

func (i OceanTagArray) ToOceanTagArrayOutput() OceanTagArrayOutput {
	return i.ToOceanTagArrayOutputWithContext(context.Background())
}

func (i OceanTagArray) ToOceanTagArrayOutputWithContext(ctx context.Context) OceanTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanTagArrayOutput)
}

type OceanTagOutput struct{ *pulumi.OutputState }

func (OceanTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanTag)(nil)).Elem()
}

func (o OceanTagOutput) ToOceanTagOutput() OceanTagOutput {
	return o
}

func (o OceanTagOutput) ToOceanTagOutputWithContext(ctx context.Context) OceanTagOutput {
	return o
}

// The tag key.
func (o OceanTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v OceanTag) string { return v.Key }).(pulumi.StringOutput)
}

// The tag value.
// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
func (o OceanTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v OceanTag) string { return v.Value }).(pulumi.StringOutput)
}

type OceanTagArrayOutput struct{ *pulumi.OutputState }

func (OceanTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OceanTag)(nil)).Elem()
}

func (o OceanTagArrayOutput) ToOceanTagArrayOutput() OceanTagArrayOutput {
	return o
}

func (o OceanTagArrayOutput) ToOceanTagArrayOutputWithContext(ctx context.Context) OceanTagArrayOutput {
	return o
}

func (o OceanTagArrayOutput) Index(i pulumi.IntInput) OceanTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OceanTag {
		return vs[0].([]OceanTag)[vs[1].(int)]
	}).(OceanTagOutput)
}

type OceanUpdatePolicy struct {
	// will update instance tags on the fly without rolling the cluster.
	AutoApplyTags *bool `pulumi:"autoApplyTags"`
	// Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
	ConditionedRoll *bool                        `pulumi:"conditionedRoll"`
	RollConfig      *OceanUpdatePolicyRollConfig `pulumi:"rollConfig"`
	// Enables the roll.
	ShouldRoll bool `pulumi:"shouldRoll"`
}

// OceanUpdatePolicyInput is an input type that accepts OceanUpdatePolicyArgs and OceanUpdatePolicyOutput values.
// You can construct a concrete instance of `OceanUpdatePolicyInput` via:
//
//	OceanUpdatePolicyArgs{...}
type OceanUpdatePolicyInput interface {
	pulumi.Input

	ToOceanUpdatePolicyOutput() OceanUpdatePolicyOutput
	ToOceanUpdatePolicyOutputWithContext(context.Context) OceanUpdatePolicyOutput
}

type OceanUpdatePolicyArgs struct {
	// will update instance tags on the fly without rolling the cluster.
	AutoApplyTags pulumi.BoolPtrInput `pulumi:"autoApplyTags"`
	// Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
	ConditionedRoll pulumi.BoolPtrInput                 `pulumi:"conditionedRoll"`
	RollConfig      OceanUpdatePolicyRollConfigPtrInput `pulumi:"rollConfig"`
	// Enables the roll.
	ShouldRoll pulumi.BoolInput `pulumi:"shouldRoll"`
}

func (OceanUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanUpdatePolicy)(nil)).Elem()
}

func (i OceanUpdatePolicyArgs) ToOceanUpdatePolicyOutput() OceanUpdatePolicyOutput {
	return i.ToOceanUpdatePolicyOutputWithContext(context.Background())
}

func (i OceanUpdatePolicyArgs) ToOceanUpdatePolicyOutputWithContext(ctx context.Context) OceanUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyOutput)
}

func (i OceanUpdatePolicyArgs) ToOceanUpdatePolicyPtrOutput() OceanUpdatePolicyPtrOutput {
	return i.ToOceanUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i OceanUpdatePolicyArgs) ToOceanUpdatePolicyPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyOutput).ToOceanUpdatePolicyPtrOutputWithContext(ctx)
}

// OceanUpdatePolicyPtrInput is an input type that accepts OceanUpdatePolicyArgs, OceanUpdatePolicyPtr and OceanUpdatePolicyPtrOutput values.
// You can construct a concrete instance of `OceanUpdatePolicyPtrInput` via:
//
//	        OceanUpdatePolicyArgs{...}
//
//	or:
//
//	        nil
type OceanUpdatePolicyPtrInput interface {
	pulumi.Input

	ToOceanUpdatePolicyPtrOutput() OceanUpdatePolicyPtrOutput
	ToOceanUpdatePolicyPtrOutputWithContext(context.Context) OceanUpdatePolicyPtrOutput
}

type oceanUpdatePolicyPtrType OceanUpdatePolicyArgs

func OceanUpdatePolicyPtr(v *OceanUpdatePolicyArgs) OceanUpdatePolicyPtrInput {
	return (*oceanUpdatePolicyPtrType)(v)
}

func (*oceanUpdatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanUpdatePolicy)(nil)).Elem()
}

func (i *oceanUpdatePolicyPtrType) ToOceanUpdatePolicyPtrOutput() OceanUpdatePolicyPtrOutput {
	return i.ToOceanUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *oceanUpdatePolicyPtrType) ToOceanUpdatePolicyPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyPtrOutput)
}

type OceanUpdatePolicyOutput struct{ *pulumi.OutputState }

func (OceanUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanUpdatePolicy)(nil)).Elem()
}

func (o OceanUpdatePolicyOutput) ToOceanUpdatePolicyOutput() OceanUpdatePolicyOutput {
	return o
}

func (o OceanUpdatePolicyOutput) ToOceanUpdatePolicyOutputWithContext(ctx context.Context) OceanUpdatePolicyOutput {
	return o
}

func (o OceanUpdatePolicyOutput) ToOceanUpdatePolicyPtrOutput() OceanUpdatePolicyPtrOutput {
	return o.ToOceanUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o OceanUpdatePolicyOutput) ToOceanUpdatePolicyPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanUpdatePolicy) *OceanUpdatePolicy {
		return &v
	}).(OceanUpdatePolicyPtrOutput)
}

// will update instance tags on the fly without rolling the cluster.
func (o OceanUpdatePolicyOutput) AutoApplyTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanUpdatePolicy) *bool { return v.AutoApplyTags }).(pulumi.BoolPtrOutput)
}

// Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
func (o OceanUpdatePolicyOutput) ConditionedRoll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OceanUpdatePolicy) *bool { return v.ConditionedRoll }).(pulumi.BoolPtrOutput)
}

func (o OceanUpdatePolicyOutput) RollConfig() OceanUpdatePolicyRollConfigPtrOutput {
	return o.ApplyT(func(v OceanUpdatePolicy) *OceanUpdatePolicyRollConfig { return v.RollConfig }).(OceanUpdatePolicyRollConfigPtrOutput)
}

// Enables the roll.
func (o OceanUpdatePolicyOutput) ShouldRoll() pulumi.BoolOutput {
	return o.ApplyT(func(v OceanUpdatePolicy) bool { return v.ShouldRoll }).(pulumi.BoolOutput)
}

type OceanUpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (OceanUpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanUpdatePolicy)(nil)).Elem()
}

func (o OceanUpdatePolicyPtrOutput) ToOceanUpdatePolicyPtrOutput() OceanUpdatePolicyPtrOutput {
	return o
}

func (o OceanUpdatePolicyPtrOutput) ToOceanUpdatePolicyPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyPtrOutput {
	return o
}

func (o OceanUpdatePolicyPtrOutput) Elem() OceanUpdatePolicyOutput {
	return o.ApplyT(func(v *OceanUpdatePolicy) OceanUpdatePolicy {
		if v != nil {
			return *v
		}
		var ret OceanUpdatePolicy
		return ret
	}).(OceanUpdatePolicyOutput)
}

// will update instance tags on the fly without rolling the cluster.
func (o OceanUpdatePolicyPtrOutput) AutoApplyTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AutoApplyTags
	}).(pulumi.BoolPtrOutput)
}

// Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
func (o OceanUpdatePolicyPtrOutput) ConditionedRoll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ConditionedRoll
	}).(pulumi.BoolPtrOutput)
}

func (o OceanUpdatePolicyPtrOutput) RollConfig() OceanUpdatePolicyRollConfigPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicy) *OceanUpdatePolicyRollConfig {
		if v == nil {
			return nil
		}
		return v.RollConfig
	}).(OceanUpdatePolicyRollConfigPtrOutput)
}

// Enables the roll.
func (o OceanUpdatePolicyPtrOutput) ShouldRoll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.ShouldRoll
	}).(pulumi.BoolPtrOutput)
}

type OceanUpdatePolicyRollConfig struct {
	// Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
	BatchMinHealthyPercentage *int `pulumi:"batchMinHealthyPercentage"`
	// Sets the percentage of the instances to deploy in each batch.
	BatchSizePercentage int `pulumi:"batchSizePercentage"`
}

// OceanUpdatePolicyRollConfigInput is an input type that accepts OceanUpdatePolicyRollConfigArgs and OceanUpdatePolicyRollConfigOutput values.
// You can construct a concrete instance of `OceanUpdatePolicyRollConfigInput` via:
//
//	OceanUpdatePolicyRollConfigArgs{...}
type OceanUpdatePolicyRollConfigInput interface {
	pulumi.Input

	ToOceanUpdatePolicyRollConfigOutput() OceanUpdatePolicyRollConfigOutput
	ToOceanUpdatePolicyRollConfigOutputWithContext(context.Context) OceanUpdatePolicyRollConfigOutput
}

type OceanUpdatePolicyRollConfigArgs struct {
	// Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
	BatchMinHealthyPercentage pulumi.IntPtrInput `pulumi:"batchMinHealthyPercentage"`
	// Sets the percentage of the instances to deploy in each batch.
	BatchSizePercentage pulumi.IntInput `pulumi:"batchSizePercentage"`
}

func (OceanUpdatePolicyRollConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanUpdatePolicyRollConfig)(nil)).Elem()
}

func (i OceanUpdatePolicyRollConfigArgs) ToOceanUpdatePolicyRollConfigOutput() OceanUpdatePolicyRollConfigOutput {
	return i.ToOceanUpdatePolicyRollConfigOutputWithContext(context.Background())
}

func (i OceanUpdatePolicyRollConfigArgs) ToOceanUpdatePolicyRollConfigOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyRollConfigOutput)
}

func (i OceanUpdatePolicyRollConfigArgs) ToOceanUpdatePolicyRollConfigPtrOutput() OceanUpdatePolicyRollConfigPtrOutput {
	return i.ToOceanUpdatePolicyRollConfigPtrOutputWithContext(context.Background())
}

func (i OceanUpdatePolicyRollConfigArgs) ToOceanUpdatePolicyRollConfigPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyRollConfigOutput).ToOceanUpdatePolicyRollConfigPtrOutputWithContext(ctx)
}

// OceanUpdatePolicyRollConfigPtrInput is an input type that accepts OceanUpdatePolicyRollConfigArgs, OceanUpdatePolicyRollConfigPtr and OceanUpdatePolicyRollConfigPtrOutput values.
// You can construct a concrete instance of `OceanUpdatePolicyRollConfigPtrInput` via:
//
//	        OceanUpdatePolicyRollConfigArgs{...}
//
//	or:
//
//	        nil
type OceanUpdatePolicyRollConfigPtrInput interface {
	pulumi.Input

	ToOceanUpdatePolicyRollConfigPtrOutput() OceanUpdatePolicyRollConfigPtrOutput
	ToOceanUpdatePolicyRollConfigPtrOutputWithContext(context.Context) OceanUpdatePolicyRollConfigPtrOutput
}

type oceanUpdatePolicyRollConfigPtrType OceanUpdatePolicyRollConfigArgs

func OceanUpdatePolicyRollConfigPtr(v *OceanUpdatePolicyRollConfigArgs) OceanUpdatePolicyRollConfigPtrInput {
	return (*oceanUpdatePolicyRollConfigPtrType)(v)
}

func (*oceanUpdatePolicyRollConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanUpdatePolicyRollConfig)(nil)).Elem()
}

func (i *oceanUpdatePolicyRollConfigPtrType) ToOceanUpdatePolicyRollConfigPtrOutput() OceanUpdatePolicyRollConfigPtrOutput {
	return i.ToOceanUpdatePolicyRollConfigPtrOutputWithContext(context.Background())
}

func (i *oceanUpdatePolicyRollConfigPtrType) ToOceanUpdatePolicyRollConfigPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanUpdatePolicyRollConfigPtrOutput)
}

type OceanUpdatePolicyRollConfigOutput struct{ *pulumi.OutputState }

func (OceanUpdatePolicyRollConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OceanUpdatePolicyRollConfig)(nil)).Elem()
}

func (o OceanUpdatePolicyRollConfigOutput) ToOceanUpdatePolicyRollConfigOutput() OceanUpdatePolicyRollConfigOutput {
	return o
}

func (o OceanUpdatePolicyRollConfigOutput) ToOceanUpdatePolicyRollConfigOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigOutput {
	return o
}

func (o OceanUpdatePolicyRollConfigOutput) ToOceanUpdatePolicyRollConfigPtrOutput() OceanUpdatePolicyRollConfigPtrOutput {
	return o.ToOceanUpdatePolicyRollConfigPtrOutputWithContext(context.Background())
}

func (o OceanUpdatePolicyRollConfigOutput) ToOceanUpdatePolicyRollConfigPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OceanUpdatePolicyRollConfig) *OceanUpdatePolicyRollConfig {
		return &v
	}).(OceanUpdatePolicyRollConfigPtrOutput)
}

// Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
func (o OceanUpdatePolicyRollConfigOutput) BatchMinHealthyPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OceanUpdatePolicyRollConfig) *int { return v.BatchMinHealthyPercentage }).(pulumi.IntPtrOutput)
}

// Sets the percentage of the instances to deploy in each batch.
func (o OceanUpdatePolicyRollConfigOutput) BatchSizePercentage() pulumi.IntOutput {
	return o.ApplyT(func(v OceanUpdatePolicyRollConfig) int { return v.BatchSizePercentage }).(pulumi.IntOutput)
}

type OceanUpdatePolicyRollConfigPtrOutput struct{ *pulumi.OutputState }

func (OceanUpdatePolicyRollConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanUpdatePolicyRollConfig)(nil)).Elem()
}

func (o OceanUpdatePolicyRollConfigPtrOutput) ToOceanUpdatePolicyRollConfigPtrOutput() OceanUpdatePolicyRollConfigPtrOutput {
	return o
}

func (o OceanUpdatePolicyRollConfigPtrOutput) ToOceanUpdatePolicyRollConfigPtrOutputWithContext(ctx context.Context) OceanUpdatePolicyRollConfigPtrOutput {
	return o
}

func (o OceanUpdatePolicyRollConfigPtrOutput) Elem() OceanUpdatePolicyRollConfigOutput {
	return o.ApplyT(func(v *OceanUpdatePolicyRollConfig) OceanUpdatePolicyRollConfig {
		if v != nil {
			return *v
		}
		var ret OceanUpdatePolicyRollConfig
		return ret
	}).(OceanUpdatePolicyRollConfigOutput)
}

// Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
func (o OceanUpdatePolicyRollConfigPtrOutput) BatchMinHealthyPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicyRollConfig) *int {
		if v == nil {
			return nil
		}
		return v.BatchMinHealthyPercentage
	}).(pulumi.IntPtrOutput)
}

// Sets the percentage of the instances to deploy in each batch.
func (o OceanUpdatePolicyRollConfigPtrOutput) BatchSizePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanUpdatePolicyRollConfig) *int {
		if v == nil {
			return nil
		}
		return &v.BatchSizePercentage
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerInput)(nil)).Elem(), OceanAutoscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerPtrInput)(nil)).Elem(), OceanAutoscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerDownInput)(nil)).Elem(), OceanAutoscalerDownArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerDownPtrInput)(nil)).Elem(), OceanAutoscalerDownArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerHeadroomInput)(nil)).Elem(), OceanAutoscalerHeadroomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerHeadroomPtrInput)(nil)).Elem(), OceanAutoscalerHeadroomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerResourceLimitsInput)(nil)).Elem(), OceanAutoscalerResourceLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanAutoscalerResourceLimitsPtrInput)(nil)).Elem(), OceanAutoscalerResourceLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingInput)(nil)).Elem(), OceanBlockDeviceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingArrayInput)(nil)).Elem(), OceanBlockDeviceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingEbsInput)(nil)).Elem(), OceanBlockDeviceMappingEbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingEbsPtrInput)(nil)).Elem(), OceanBlockDeviceMappingEbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingEbsDynamicVolumeSizeInput)(nil)).Elem(), OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanBlockDeviceMappingEbsDynamicVolumeSizePtrInput)(nil)).Elem(), OceanBlockDeviceMappingEbsDynamicVolumeSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanClusterOrientationInput)(nil)).Elem(), OceanClusterOrientationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanClusterOrientationArrayInput)(nil)).Elem(), OceanClusterOrientationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanFiltersInput)(nil)).Elem(), OceanFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanFiltersPtrInput)(nil)).Elem(), OceanFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanInstanceMetadataOptionsInput)(nil)).Elem(), OceanInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanInstanceMetadataOptionsPtrInput)(nil)).Elem(), OceanInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecAttributeInput)(nil)).Elem(), OceanLaunchSpecAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecAttributeArrayInput)(nil)).Elem(), OceanLaunchSpecAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecAutoscaleHeadroomInput)(nil)).Elem(), OceanLaunchSpecAutoscaleHeadroomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecAutoscaleHeadroomArrayInput)(nil)).Elem(), OceanLaunchSpecAutoscaleHeadroomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingArrayInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingEbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsPtrInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingEbsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrInput)(nil)).Elem(), OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecImageInput)(nil)).Elem(), OceanLaunchSpecImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecImageArrayInput)(nil)).Elem(), OceanLaunchSpecImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecInstanceMetadataOptionsInput)(nil)).Elem(), OceanLaunchSpecInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecInstanceMetadataOptionsPtrInput)(nil)).Elem(), OceanLaunchSpecInstanceMetadataOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecSchedulingTaskInput)(nil)).Elem(), OceanLaunchSpecSchedulingTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecSchedulingTaskArrayInput)(nil)).Elem(), OceanLaunchSpecSchedulingTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecSchedulingTaskTaskHeadroomInput)(nil)).Elem(), OceanLaunchSpecSchedulingTaskTaskHeadroomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecSchedulingTaskTaskHeadroomArrayInput)(nil)).Elem(), OceanLaunchSpecSchedulingTaskTaskHeadroomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecStrategyInput)(nil)).Elem(), OceanLaunchSpecStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecStrategyArrayInput)(nil)).Elem(), OceanLaunchSpecStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecTagInput)(nil)).Elem(), OceanLaunchSpecTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecTagArrayInput)(nil)).Elem(), OceanLaunchSpecTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingInput)(nil)).Elem(), OceanLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingPtrInput)(nil)).Elem(), OceanLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingExportInput)(nil)).Elem(), OceanLoggingExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingExportPtrInput)(nil)).Elem(), OceanLoggingExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingExportS3Input)(nil)).Elem(), OceanLoggingExportS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLoggingExportS3ArrayInput)(nil)).Elem(), OceanLoggingExportS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanOptimizeImagesInput)(nil)).Elem(), OceanOptimizeImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanOptimizeImagesPtrInput)(nil)).Elem(), OceanOptimizeImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskInput)(nil)).Elem(), OceanScheduledTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskArrayInput)(nil)).Elem(), OceanScheduledTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskShutdownHoursInput)(nil)).Elem(), OceanScheduledTaskShutdownHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskShutdownHoursPtrInput)(nil)).Elem(), OceanScheduledTaskShutdownHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskTaskInput)(nil)).Elem(), OceanScheduledTaskTaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanScheduledTaskTaskArrayInput)(nil)).Elem(), OceanScheduledTaskTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanTagInput)(nil)).Elem(), OceanTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanTagArrayInput)(nil)).Elem(), OceanTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanUpdatePolicyInput)(nil)).Elem(), OceanUpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanUpdatePolicyPtrInput)(nil)).Elem(), OceanUpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanUpdatePolicyRollConfigInput)(nil)).Elem(), OceanUpdatePolicyRollConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanUpdatePolicyRollConfigPtrInput)(nil)).Elem(), OceanUpdatePolicyRollConfigArgs{})
	pulumi.RegisterOutputType(OceanAutoscalerOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerPtrOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerDownOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerDownPtrOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerHeadroomOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerHeadroomPtrOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerResourceLimitsOutput{})
	pulumi.RegisterOutputType(OceanAutoscalerResourceLimitsPtrOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingEbsOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingEbsPtrOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingEbsDynamicVolumeSizeOutput{})
	pulumi.RegisterOutputType(OceanBlockDeviceMappingEbsDynamicVolumeSizePtrOutput{})
	pulumi.RegisterOutputType(OceanClusterOrientationOutput{})
	pulumi.RegisterOutputType(OceanClusterOrientationArrayOutput{})
	pulumi.RegisterOutputType(OceanFiltersOutput{})
	pulumi.RegisterOutputType(OceanFiltersPtrOutput{})
	pulumi.RegisterOutputType(OceanInstanceMetadataOptionsOutput{})
	pulumi.RegisterOutputType(OceanInstanceMetadataOptionsPtrOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecAttributeOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecAttributeArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecAutoscaleHeadroomOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecAutoscaleHeadroomArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingEbsOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingEbsPtrOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizePtrOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecImageOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecImageArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecInstanceMetadataOptionsOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecInstanceMetadataOptionsPtrOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecSchedulingTaskOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecSchedulingTaskArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecSchedulingTaskTaskHeadroomOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecSchedulingTaskTaskHeadroomArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecStrategyOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecStrategyArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecTagOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecTagArrayOutput{})
	pulumi.RegisterOutputType(OceanLoggingOutput{})
	pulumi.RegisterOutputType(OceanLoggingPtrOutput{})
	pulumi.RegisterOutputType(OceanLoggingExportOutput{})
	pulumi.RegisterOutputType(OceanLoggingExportPtrOutput{})
	pulumi.RegisterOutputType(OceanLoggingExportS3Output{})
	pulumi.RegisterOutputType(OceanLoggingExportS3ArrayOutput{})
	pulumi.RegisterOutputType(OceanOptimizeImagesOutput{})
	pulumi.RegisterOutputType(OceanOptimizeImagesPtrOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskArrayOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskShutdownHoursOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskShutdownHoursPtrOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskTaskOutput{})
	pulumi.RegisterOutputType(OceanScheduledTaskTaskArrayOutput{})
	pulumi.RegisterOutputType(OceanTagOutput{})
	pulumi.RegisterOutputType(OceanTagArrayOutput{})
	pulumi.RegisterOutputType(OceanUpdatePolicyOutput{})
	pulumi.RegisterOutputType(OceanUpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(OceanUpdatePolicyRollConfigOutput{})
	pulumi.RegisterOutputType(OceanUpdatePolicyRollConfigPtrOutput{})
}
