// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst AWS group resource using Elastic Beanstalk.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/elastigroup_aws_beanstalk.html.markdown.
type Beanstalk struct {
	s *pulumi.ResourceState
}

// NewBeanstalk registers a new resource with the given unique name, arguments, and options.
func NewBeanstalk(ctx *pulumi.Context,
	name string, args *BeanstalkArgs, opts ...pulumi.ResourceOpt) (*Beanstalk, error) {
	if args == nil || args.DesiredCapacity == nil {
		return nil, errors.New("missing required argument 'DesiredCapacity'")
	}
	if args == nil || args.InstanceTypesSpots == nil {
		return nil, errors.New("missing required argument 'InstanceTypesSpots'")
	}
	if args == nil || args.MaxSize == nil {
		return nil, errors.New("missing required argument 'MaxSize'")
	}
	if args == nil || args.MinSize == nil {
		return nil, errors.New("missing required argument 'MinSize'")
	}
	if args == nil || args.Product == nil {
		return nil, errors.New("missing required argument 'Product'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["beanstalkEnvironmentId"] = nil
		inputs["beanstalkEnvironmentName"] = nil
		inputs["deploymentPreferences"] = nil
		inputs["desiredCapacity"] = nil
		inputs["instanceTypesSpots"] = nil
		inputs["maintenance"] = nil
		inputs["managedActions"] = nil
		inputs["maxSize"] = nil
		inputs["minSize"] = nil
		inputs["name"] = nil
		inputs["product"] = nil
		inputs["region"] = nil
	} else {
		inputs["beanstalkEnvironmentId"] = args.BeanstalkEnvironmentId
		inputs["beanstalkEnvironmentName"] = args.BeanstalkEnvironmentName
		inputs["deploymentPreferences"] = args.DeploymentPreferences
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["instanceTypesSpots"] = args.InstanceTypesSpots
		inputs["maintenance"] = args.Maintenance
		inputs["managedActions"] = args.ManagedActions
		inputs["maxSize"] = args.MaxSize
		inputs["minSize"] = args.MinSize
		inputs["name"] = args.Name
		inputs["product"] = args.Product
		inputs["region"] = args.Region
	}
	s, err := ctx.RegisterResource("spotinst:aws/beanstalk:Beanstalk", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Beanstalk{s: s}, nil
}

// GetBeanstalk gets an existing Beanstalk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBeanstalk(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BeanstalkState, opts ...pulumi.ResourceOpt) (*Beanstalk, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["beanstalkEnvironmentId"] = state.BeanstalkEnvironmentId
		inputs["beanstalkEnvironmentName"] = state.BeanstalkEnvironmentName
		inputs["deploymentPreferences"] = state.DeploymentPreferences
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["instanceTypesSpots"] = state.InstanceTypesSpots
		inputs["maintenance"] = state.Maintenance
		inputs["managedActions"] = state.ManagedActions
		inputs["maxSize"] = state.MaxSize
		inputs["minSize"] = state.MinSize
		inputs["name"] = state.Name
		inputs["product"] = state.Product
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("spotinst:aws/beanstalk:Beanstalk", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Beanstalk{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Beanstalk) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Beanstalk) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The id of an existing Beanstalk environment. 
func (r *Beanstalk) BeanstalkEnvironmentId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["beanstalkEnvironmentId"])
}

// The name of an existing Beanstalk environment.
func (r *Beanstalk) BeanstalkEnvironmentName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["beanstalkEnvironmentName"])
}

// Preferences when performing a roll
func (r *Beanstalk) DeploymentPreferences() pulumi.Output {
	return r.s.State["deploymentPreferences"]
}

// The desired number of instances the group should have at any time.
func (r *Beanstalk) DesiredCapacity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
func (r *Beanstalk) InstanceTypesSpots() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceTypesSpots"])
}

func (r *Beanstalk) Maintenance() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["maintenance"])
}

// Managed Actions parameters
func (r *Beanstalk) ManagedActions() pulumi.Output {
	return r.s.State["managedActions"]
}

// The maximum number of instances the group should have at any time.
func (r *Beanstalk) MaxSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxSize"])
}

// The minimum number of instances the group should have at any time.
func (r *Beanstalk) MinSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minSize"])
}

// The group name.
func (r *Beanstalk) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
func (r *Beanstalk) Product() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["product"])
}

// The AWS region your group will be created in. Cannot be changed after the group has been created.
func (r *Beanstalk) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering Beanstalk resources.
type BeanstalkState struct {
	// The id of an existing Beanstalk environment. 
	BeanstalkEnvironmentId interface{}
	// The name of an existing Beanstalk environment.
	BeanstalkEnvironmentName interface{}
	// Preferences when performing a roll
	DeploymentPreferences interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
	InstanceTypesSpots interface{}
	Maintenance interface{}
	// Managed Actions parameters
	ManagedActions interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	// The group name.
	Name interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product interface{}
	// The AWS region your group will be created in. Cannot be changed after the group has been created.
	Region interface{}
}

// The set of arguments for constructing a Beanstalk resource.
type BeanstalkArgs struct {
	// The id of an existing Beanstalk environment. 
	BeanstalkEnvironmentId interface{}
	// The name of an existing Beanstalk environment.
	BeanstalkEnvironmentName interface{}
	// Preferences when performing a roll
	DeploymentPreferences interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	// One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
	InstanceTypesSpots interface{}
	Maintenance interface{}
	// Managed Actions parameters
	ManagedActions interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	// The group name.
	Name interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product interface{}
	// The AWS region your group will be created in. Cannot be changed after the group has been created.
	Region interface{}
}
