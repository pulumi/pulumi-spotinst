// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a custom Spotinst Ocean AWS Launch Spec resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/ocean_aws_launch_spec.html.markdown.
type OceanLaunchSpec struct {
	s *pulumi.ResourceState
}

// NewOceanLaunchSpec registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpec(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecArgs, opts ...pulumi.ResourceOpt) (*OceanLaunchSpec, error) {
	if args == nil || args.OceanId == nil {
		return nil, errors.New("missing required argument 'OceanId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["iamInstanceProfile"] = nil
		inputs["imageId"] = nil
		inputs["labels"] = nil
		inputs["oceanId"] = nil
		inputs["taints"] = nil
		inputs["userData"] = nil
	} else {
		inputs["iamInstanceProfile"] = args.IamInstanceProfile
		inputs["imageId"] = args.ImageId
		inputs["labels"] = args.Labels
		inputs["oceanId"] = args.OceanId
		inputs["taints"] = args.Taints
		inputs["userData"] = args.UserData
	}
	s, err := ctx.RegisterResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpec{s: s}, nil
}

// GetOceanLaunchSpec gets an existing OceanLaunchSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpec(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OceanLaunchSpecState, opts ...pulumi.ResourceOpt) (*OceanLaunchSpec, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["iamInstanceProfile"] = state.IamInstanceProfile
		inputs["imageId"] = state.ImageId
		inputs["labels"] = state.Labels
		inputs["oceanId"] = state.OceanId
		inputs["taints"] = state.Taints
		inputs["userData"] = state.UserData
	}
	s, err := ctx.ReadResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &OceanLaunchSpec{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *OceanLaunchSpec) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *OceanLaunchSpec) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ARN or name of an IAM instance profile to associate with launched instances.
func (r *OceanLaunchSpec) IamInstanceProfile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iamInstanceProfile"])
}

// ID of the image used to launch the instances.
func (r *OceanLaunchSpec) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// Optionally adds labels to instances launched in an Ocean cluster.
func (r *OceanLaunchSpec) Labels() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["labels"])
}

// The ocean cluster you wish to 
func (r *OceanLaunchSpec) OceanId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["oceanId"])
}

// Optionally adds labels to instances launched in an Ocean cluster.
func (r *OceanLaunchSpec) Taints() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["taints"])
}

// Base64-encoded MIME user data to make available to the instances.
func (r *OceanLaunchSpec) UserData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userData"])
}

// Input properties used for looking up and filtering OceanLaunchSpec resources.
type OceanLaunchSpecState struct {
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{}
	// ID of the image used to launch the instances.
	ImageId interface{}
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels interface{}
	// The ocean cluster you wish to 
	OceanId interface{}
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints interface{}
	// Base64-encoded MIME user data to make available to the instances.
	UserData interface{}
}

// The set of arguments for constructing a OceanLaunchSpec resource.
type OceanLaunchSpecArgs struct {
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{}
	// ID of the image used to launch the instances.
	ImageId interface{}
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels interface{}
	// The ocean cluster you wish to 
	OceanId interface{}
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints interface{}
	// Base64-encoded MIME user data to make available to the instances.
	UserData interface{}
}
