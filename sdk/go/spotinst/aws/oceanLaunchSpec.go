// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Spotinst Ocean AWS [Virtual Node Group](https://docs.spot.io/ocean/features/launch-specifications) resource.
type OceanLaunchSpec struct {
	pulumi.CustomResourceState

	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrOutput `pulumi:"associatePublicIpAddress"`
	// Auto Scaling scale down operations.
	AutoscaleDowns OceanLaunchSpecAutoscaleDownArrayOutput `pulumi:"autoscaleDowns"`
	// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayOutput `pulumi:"autoscaleHeadrooms"`
	// Set automatic headroom per launch spec.
	AutoscaleHeadroomsAutomatics OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayOutput `pulumi:"autoscaleHeadroomsAutomatics"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	CreateOptions       OceanLaunchSpecCreateOptionsPtrOutput        `pulumi:"createOptions"`
	DeleteOptions       OceanLaunchSpecDeleteOptionsPtrOutput        `pulumi:"deleteOptions"`
	// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
	ElasticIpPools    OceanLaunchSpecElasticIpPoolArrayOutput    `pulumi:"elasticIpPools"`
	EphemeralStorages OceanLaunchSpecEphemeralStorageArrayOutput `pulumi:"ephemeralStorages"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
	// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
	Images OceanLaunchSpecImageArrayOutput `pulumi:"images"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanLaunchSpecInstanceMetadataOptionsPtrOutput `pulumi:"instanceMetadataOptions"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
	InstanceTypes pulumi.StringArrayOutput `pulumi:"instanceTypes"`
	// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
	// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
	InstanceTypesFilters OceanLaunchSpecInstanceTypesFiltersPtrOutput `pulumi:"instanceTypesFilters"`
	// Optionally adds labels to instances launched in the cluster.
	Labels OceanLaunchSpecLabelArrayOutput `pulumi:"labels"`
	// The name of the Virtual Node Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Ocean cluster.
	OceanId pulumi.StringOutput `pulumi:"oceanId"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredOdTypes pulumi.StringArrayOutput `pulumi:"preferredOdTypes"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredSpotTypes pulumi.StringArrayOutput                `pulumi:"preferredSpotTypes"`
	ResourceLimits     OceanLaunchSpecResourceLimitArrayOutput `pulumi:"resourceLimits"`
	// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
	RestrictScaleDown pulumi.BoolPtrOutput `pulumi:"restrictScaleDown"`
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrOutput `pulumi:"rootVolumeSize"`
	// Used to specify times that the nodes in the virtual node group will be taken down.
	SchedulingShutdownHours OceanLaunchSpecSchedulingShutdownHoursPtrOutput `pulumi:"schedulingShutdownHours"`
	// Used to define scheduled tasks such as a manual headroom update.
	SchedulingTasks OceanLaunchSpecSchedulingTaskArrayOutput `pulumi:"schedulingTasks"`
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayOutput           `pulumi:"securityGroups"`
	Strategies     OceanLaunchSpecStrategyArrayOutput `pulumi:"strategies"`
	// A list of subnet IDs.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayOutput `pulumi:"tags"`
	// Optionally adds labels to instances launched in the cluster.
	Taints       OceanLaunchSpecTaintArrayOutput      `pulumi:"taints"`
	UpdatePolicy OceanLaunchSpecUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
}

// NewOceanLaunchSpec registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpec(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecArgs, opts ...pulumi.ResourceOption) (*OceanLaunchSpec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OceanId == nil {
		return nil, errors.New("invalid value for required argument 'OceanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OceanLaunchSpec
	err := ctx.RegisterResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOceanLaunchSpec gets an existing OceanLaunchSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanLaunchSpecState, opts ...pulumi.ResourceOption) (*OceanLaunchSpec, error) {
	var resource OceanLaunchSpec
	err := ctx.ReadResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OceanLaunchSpec resources.
type oceanLaunchSpecState struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Auto Scaling scale down operations.
	AutoscaleDowns []OceanLaunchSpecAutoscaleDown `pulumi:"autoscaleDowns"`
	// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
	AutoscaleHeadrooms []OceanLaunchSpecAutoscaleHeadroom `pulumi:"autoscaleHeadrooms"`
	// Set automatic headroom per launch spec.
	AutoscaleHeadroomsAutomatics []OceanLaunchSpecAutoscaleHeadroomsAutomatic `pulumi:"autoscaleHeadroomsAutomatics"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanLaunchSpecBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	CreateOptions       *OceanLaunchSpecCreateOptions       `pulumi:"createOptions"`
	DeleteOptions       *OceanLaunchSpecDeleteOptions       `pulumi:"deleteOptions"`
	// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
	ElasticIpPools    []OceanLaunchSpecElasticIpPool    `pulumi:"elasticIpPools"`
	EphemeralStorages []OceanLaunchSpecEphemeralStorage `pulumi:"ephemeralStorages"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
	// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
	Images []OceanLaunchSpecImage `pulumi:"images"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanLaunchSpecInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
	// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
	InstanceTypesFilters *OceanLaunchSpecInstanceTypesFilters `pulumi:"instanceTypesFilters"`
	// Optionally adds labels to instances launched in the cluster.
	Labels []OceanLaunchSpecLabel `pulumi:"labels"`
	// The name of the Virtual Node Group.
	Name *string `pulumi:"name"`
	// The ID of the Ocean cluster.
	OceanId *string `pulumi:"oceanId"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredOdTypes []string `pulumi:"preferredOdTypes"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredSpotTypes []string                       `pulumi:"preferredSpotTypes"`
	ResourceLimits     []OceanLaunchSpecResourceLimit `pulumi:"resourceLimits"`
	// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
	RestrictScaleDown *bool `pulumi:"restrictScaleDown"`
	// Set root volume size (in GB).
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Used to specify times that the nodes in the virtual node group will be taken down.
	SchedulingShutdownHours *OceanLaunchSpecSchedulingShutdownHours `pulumi:"schedulingShutdownHours"`
	// Used to define scheduled tasks such as a manual headroom update.
	SchedulingTasks []OceanLaunchSpecSchedulingTask `pulumi:"schedulingTasks"`
	// Optionally adds security group IDs.
	SecurityGroups []string                  `pulumi:"securityGroups"`
	Strategies     []OceanLaunchSpecStrategy `pulumi:"strategies"`
	// A list of subnet IDs.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags []OceanLaunchSpecTag `pulumi:"tags"`
	// Optionally adds labels to instances launched in the cluster.
	Taints       []OceanLaunchSpecTaint       `pulumi:"taints"`
	UpdatePolicy *OceanLaunchSpecUpdatePolicy `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
}

type OceanLaunchSpecState struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Auto Scaling scale down operations.
	AutoscaleDowns OceanLaunchSpecAutoscaleDownArrayInput
	// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayInput
	// Set automatic headroom per launch spec.
	AutoscaleHeadroomsAutomatics OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayInput
	CreateOptions       OceanLaunchSpecCreateOptionsPtrInput
	DeleteOptions       OceanLaunchSpecDeleteOptionsPtrInput
	// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
	ElasticIpPools    OceanLaunchSpecElasticIpPoolArrayInput
	EphemeralStorages OceanLaunchSpecEphemeralStorageArrayInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
	// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
	Images OceanLaunchSpecImageArrayInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanLaunchSpecInstanceMetadataOptionsPtrInput
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
	InstanceTypes pulumi.StringArrayInput
	// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
	// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
	InstanceTypesFilters OceanLaunchSpecInstanceTypesFiltersPtrInput
	// Optionally adds labels to instances launched in the cluster.
	Labels OceanLaunchSpecLabelArrayInput
	// The name of the Virtual Node Group.
	Name pulumi.StringPtrInput
	// The ID of the Ocean cluster.
	OceanId pulumi.StringPtrInput
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredOdTypes pulumi.StringArrayInput
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredSpotTypes pulumi.StringArrayInput
	ResourceLimits     OceanLaunchSpecResourceLimitArrayInput
	// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
	RestrictScaleDown pulumi.BoolPtrInput
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrInput
	// Used to specify times that the nodes in the virtual node group will be taken down.
	SchedulingShutdownHours OceanLaunchSpecSchedulingShutdownHoursPtrInput
	// Used to define scheduled tasks such as a manual headroom update.
	SchedulingTasks OceanLaunchSpecSchedulingTaskArrayInput
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayInput
	Strategies     OceanLaunchSpecStrategyArrayInput
	// A list of subnet IDs.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayInput
	// Optionally adds labels to instances launched in the cluster.
	Taints       OceanLaunchSpecTaintArrayInput
	UpdatePolicy OceanLaunchSpecUpdatePolicyPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
}

func (OceanLaunchSpecState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecState)(nil)).Elem()
}

type oceanLaunchSpecArgs struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Auto Scaling scale down operations.
	AutoscaleDowns []OceanLaunchSpecAutoscaleDown `pulumi:"autoscaleDowns"`
	// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
	AutoscaleHeadrooms []OceanLaunchSpecAutoscaleHeadroom `pulumi:"autoscaleHeadrooms"`
	// Set automatic headroom per launch spec.
	AutoscaleHeadroomsAutomatics []OceanLaunchSpecAutoscaleHeadroomsAutomatic `pulumi:"autoscaleHeadroomsAutomatics"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanLaunchSpecBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	CreateOptions       *OceanLaunchSpecCreateOptions       `pulumi:"createOptions"`
	DeleteOptions       *OceanLaunchSpecDeleteOptions       `pulumi:"deleteOptions"`
	// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
	ElasticIpPools    []OceanLaunchSpecElasticIpPool    `pulumi:"elasticIpPools"`
	EphemeralStorages []OceanLaunchSpecEphemeralStorage `pulumi:"ephemeralStorages"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
	// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
	Images []OceanLaunchSpecImage `pulumi:"images"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanLaunchSpecInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
	// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
	InstanceTypesFilters *OceanLaunchSpecInstanceTypesFilters `pulumi:"instanceTypesFilters"`
	// Optionally adds labels to instances launched in the cluster.
	Labels []OceanLaunchSpecLabel `pulumi:"labels"`
	// The name of the Virtual Node Group.
	Name *string `pulumi:"name"`
	// The ID of the Ocean cluster.
	OceanId string `pulumi:"oceanId"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredOdTypes []string `pulumi:"preferredOdTypes"`
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredSpotTypes []string                       `pulumi:"preferredSpotTypes"`
	ResourceLimits     []OceanLaunchSpecResourceLimit `pulumi:"resourceLimits"`
	// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
	RestrictScaleDown *bool `pulumi:"restrictScaleDown"`
	// Set root volume size (in GB).
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Used to specify times that the nodes in the virtual node group will be taken down.
	SchedulingShutdownHours *OceanLaunchSpecSchedulingShutdownHours `pulumi:"schedulingShutdownHours"`
	// Used to define scheduled tasks such as a manual headroom update.
	SchedulingTasks []OceanLaunchSpecSchedulingTask `pulumi:"schedulingTasks"`
	// Optionally adds security group IDs.
	SecurityGroups []string                  `pulumi:"securityGroups"`
	Strategies     []OceanLaunchSpecStrategy `pulumi:"strategies"`
	// A list of subnet IDs.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags []OceanLaunchSpecTag `pulumi:"tags"`
	// Optionally adds labels to instances launched in the cluster.
	Taints       []OceanLaunchSpecTaint       `pulumi:"taints"`
	UpdatePolicy *OceanLaunchSpecUpdatePolicy `pulumi:"updatePolicy"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a OceanLaunchSpec resource.
type OceanLaunchSpecArgs struct {
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Auto Scaling scale down operations.
	AutoscaleDowns OceanLaunchSpecAutoscaleDownArrayInput
	// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayInput
	// Set automatic headroom per launch spec.
	AutoscaleHeadroomsAutomatics OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayInput
	CreateOptions       OceanLaunchSpecCreateOptionsPtrInput
	DeleteOptions       OceanLaunchSpecDeleteOptionsPtrInput
	// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
	ElasticIpPools    OceanLaunchSpecElasticIpPoolArrayInput
	EphemeralStorages OceanLaunchSpecEphemeralStorageArrayInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
	// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
	Images OceanLaunchSpecImageArrayInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanLaunchSpecInstanceMetadataOptionsPtrInput
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
	InstanceTypes pulumi.StringArrayInput
	// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
	// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
	InstanceTypesFilters OceanLaunchSpecInstanceTypesFiltersPtrInput
	// Optionally adds labels to instances launched in the cluster.
	Labels OceanLaunchSpecLabelArrayInput
	// The name of the Virtual Node Group.
	Name pulumi.StringPtrInput
	// The ID of the Ocean cluster.
	OceanId pulumi.StringInput
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredOdTypes pulumi.StringArrayInput
	// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
	PreferredSpotTypes pulumi.StringArrayInput
	ResourceLimits     OceanLaunchSpecResourceLimitArrayInput
	// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
	RestrictScaleDown pulumi.BoolPtrInput
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrInput
	// Used to specify times that the nodes in the virtual node group will be taken down.
	SchedulingShutdownHours OceanLaunchSpecSchedulingShutdownHoursPtrInput
	// Used to define scheduled tasks such as a manual headroom update.
	SchedulingTasks OceanLaunchSpecSchedulingTaskArrayInput
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayInput
	Strategies     OceanLaunchSpecStrategyArrayInput
	// A list of subnet IDs.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayInput
	// Optionally adds labels to instances launched in the cluster.
	Taints       OceanLaunchSpecTaintArrayInput
	UpdatePolicy OceanLaunchSpecUpdatePolicyPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
}

func (OceanLaunchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecArgs)(nil)).Elem()
}

type OceanLaunchSpecInput interface {
	pulumi.Input

	ToOceanLaunchSpecOutput() OceanLaunchSpecOutput
	ToOceanLaunchSpecOutputWithContext(ctx context.Context) OceanLaunchSpecOutput
}

func (*OceanLaunchSpec) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpec)(nil)).Elem()
}

func (i *OceanLaunchSpec) ToOceanLaunchSpecOutput() OceanLaunchSpecOutput {
	return i.ToOceanLaunchSpecOutputWithContext(context.Background())
}

func (i *OceanLaunchSpec) ToOceanLaunchSpecOutputWithContext(ctx context.Context) OceanLaunchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecOutput)
}

// OceanLaunchSpecArrayInput is an input type that accepts OceanLaunchSpecArray and OceanLaunchSpecArrayOutput values.
// You can construct a concrete instance of `OceanLaunchSpecArrayInput` via:
//
//	OceanLaunchSpecArray{ OceanLaunchSpecArgs{...} }
type OceanLaunchSpecArrayInput interface {
	pulumi.Input

	ToOceanLaunchSpecArrayOutput() OceanLaunchSpecArrayOutput
	ToOceanLaunchSpecArrayOutputWithContext(context.Context) OceanLaunchSpecArrayOutput
}

type OceanLaunchSpecArray []OceanLaunchSpecInput

func (OceanLaunchSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OceanLaunchSpec)(nil)).Elem()
}

func (i OceanLaunchSpecArray) ToOceanLaunchSpecArrayOutput() OceanLaunchSpecArrayOutput {
	return i.ToOceanLaunchSpecArrayOutputWithContext(context.Background())
}

func (i OceanLaunchSpecArray) ToOceanLaunchSpecArrayOutputWithContext(ctx context.Context) OceanLaunchSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecArrayOutput)
}

// OceanLaunchSpecMapInput is an input type that accepts OceanLaunchSpecMap and OceanLaunchSpecMapOutput values.
// You can construct a concrete instance of `OceanLaunchSpecMapInput` via:
//
//	OceanLaunchSpecMap{ "key": OceanLaunchSpecArgs{...} }
type OceanLaunchSpecMapInput interface {
	pulumi.Input

	ToOceanLaunchSpecMapOutput() OceanLaunchSpecMapOutput
	ToOceanLaunchSpecMapOutputWithContext(context.Context) OceanLaunchSpecMapOutput
}

type OceanLaunchSpecMap map[string]OceanLaunchSpecInput

func (OceanLaunchSpecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OceanLaunchSpec)(nil)).Elem()
}

func (i OceanLaunchSpecMap) ToOceanLaunchSpecMapOutput() OceanLaunchSpecMapOutput {
	return i.ToOceanLaunchSpecMapOutputWithContext(context.Background())
}

func (i OceanLaunchSpecMap) ToOceanLaunchSpecMapOutputWithContext(ctx context.Context) OceanLaunchSpecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanLaunchSpecMapOutput)
}

type OceanLaunchSpecOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanLaunchSpec)(nil)).Elem()
}

func (o OceanLaunchSpecOutput) ToOceanLaunchSpecOutput() OceanLaunchSpecOutput {
	return o
}

func (o OceanLaunchSpecOutput) ToOceanLaunchSpecOutputWithContext(ctx context.Context) OceanLaunchSpecOutput {
	return o
}

// Configure public IP address allocation.
func (o OceanLaunchSpecOutput) AssociatePublicIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.BoolPtrOutput { return v.AssociatePublicIpAddress }).(pulumi.BoolPtrOutput)
}

// Auto Scaling scale down operations.
func (o OceanLaunchSpecOutput) AutoscaleDowns() OceanLaunchSpecAutoscaleDownArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecAutoscaleDownArrayOutput { return v.AutoscaleDowns }).(OceanLaunchSpecAutoscaleDownArrayOutput)
}

// Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
func (o OceanLaunchSpecOutput) AutoscaleHeadrooms() OceanLaunchSpecAutoscaleHeadroomArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecAutoscaleHeadroomArrayOutput { return v.AutoscaleHeadrooms }).(OceanLaunchSpecAutoscaleHeadroomArrayOutput)
}

// Set automatic headroom per launch spec.
func (o OceanLaunchSpecOutput) AutoscaleHeadroomsAutomatics() OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayOutput {
		return v.AutoscaleHeadroomsAutomatics
	}).(OceanLaunchSpecAutoscaleHeadroomsAutomaticArrayOutput)
}

// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
func (o OceanLaunchSpecOutput) BlockDeviceMappings() OceanLaunchSpecBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(OceanLaunchSpecBlockDeviceMappingArrayOutput)
}

func (o OceanLaunchSpecOutput) CreateOptions() OceanLaunchSpecCreateOptionsPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecCreateOptionsPtrOutput { return v.CreateOptions }).(OceanLaunchSpecCreateOptionsPtrOutput)
}

func (o OceanLaunchSpecOutput) DeleteOptions() OceanLaunchSpecDeleteOptionsPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecDeleteOptionsPtrOutput { return v.DeleteOptions }).(OceanLaunchSpecDeleteOptionsPtrOutput)
}

// Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
func (o OceanLaunchSpecOutput) ElasticIpPools() OceanLaunchSpecElasticIpPoolArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecElasticIpPoolArrayOutput { return v.ElasticIpPools }).(OceanLaunchSpecElasticIpPoolArrayOutput)
}

func (o OceanLaunchSpecOutput) EphemeralStorages() OceanLaunchSpecEphemeralStorageArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecEphemeralStorageArrayOutput { return v.EphemeralStorages }).(OceanLaunchSpecEphemeralStorageArrayOutput)
}

// The ARN or name of an IAM instance profile to associate with launched instances.
func (o OceanLaunchSpecOutput) IamInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringPtrOutput { return v.IamInstanceProfile }).(pulumi.StringPtrOutput)
}

// ID of the image used to launch the instances.
func (o OceanLaunchSpecOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
// For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
func (o OceanLaunchSpecOutput) Images() OceanLaunchSpecImageArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecImageArrayOutput { return v.Images }).(OceanLaunchSpecImageArrayOutput)
}

// Ocean instance metadata options object for IMDSv2.
func (o OceanLaunchSpecOutput) InstanceMetadataOptions() OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecInstanceMetadataOptionsPtrOutput {
		return v.InstanceMetadataOptions
	}).(OceanLaunchSpecInstanceMetadataOptionsPtrOutput)
}

// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
func (o OceanLaunchSpecOutput) InstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringArrayOutput { return v.InstanceTypes }).(pulumi.StringArrayOutput)
}

// The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
// The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
func (o OceanLaunchSpecOutput) InstanceTypesFilters() OceanLaunchSpecInstanceTypesFiltersPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecInstanceTypesFiltersPtrOutput { return v.InstanceTypesFilters }).(OceanLaunchSpecInstanceTypesFiltersPtrOutput)
}

// Optionally adds labels to instances launched in the cluster.
func (o OceanLaunchSpecOutput) Labels() OceanLaunchSpecLabelArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecLabelArrayOutput { return v.Labels }).(OceanLaunchSpecLabelArrayOutput)
}

// The name of the Virtual Node Group.
func (o OceanLaunchSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Ocean cluster.
func (o OceanLaunchSpecOutput) OceanId() pulumi.StringOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringOutput { return v.OceanId }).(pulumi.StringOutput)
}

// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
func (o OceanLaunchSpecOutput) PreferredOdTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringArrayOutput { return v.PreferredOdTypes }).(pulumi.StringArrayOutput)
}

// A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
func (o OceanLaunchSpecOutput) PreferredSpotTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringArrayOutput { return v.PreferredSpotTypes }).(pulumi.StringArrayOutput)
}

func (o OceanLaunchSpecOutput) ResourceLimits() OceanLaunchSpecResourceLimitArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecResourceLimitArrayOutput { return v.ResourceLimits }).(OceanLaunchSpecResourceLimitArrayOutput)
}

// Boolean. When set to `True`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
func (o OceanLaunchSpecOutput) RestrictScaleDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.BoolPtrOutput { return v.RestrictScaleDown }).(pulumi.BoolPtrOutput)
}

// Set root volume size (in GB).
func (o OceanLaunchSpecOutput) RootVolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.IntPtrOutput { return v.RootVolumeSize }).(pulumi.IntPtrOutput)
}

// Used to specify times that the nodes in the virtual node group will be taken down.
func (o OceanLaunchSpecOutput) SchedulingShutdownHours() OceanLaunchSpecSchedulingShutdownHoursPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecSchedulingShutdownHoursPtrOutput {
		return v.SchedulingShutdownHours
	}).(OceanLaunchSpecSchedulingShutdownHoursPtrOutput)
}

// Used to define scheduled tasks such as a manual headroom update.
func (o OceanLaunchSpecOutput) SchedulingTasks() OceanLaunchSpecSchedulingTaskArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecSchedulingTaskArrayOutput { return v.SchedulingTasks }).(OceanLaunchSpecSchedulingTaskArrayOutput)
}

// Optionally adds security group IDs.
func (o OceanLaunchSpecOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

func (o OceanLaunchSpecOutput) Strategies() OceanLaunchSpecStrategyArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecStrategyArrayOutput { return v.Strategies }).(OceanLaunchSpecStrategyArrayOutput)
}

// A list of subnet IDs.
func (o OceanLaunchSpecOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// A key/value mapping of tags to assign to the resource.
func (o OceanLaunchSpecOutput) Tags() OceanLaunchSpecTagArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecTagArrayOutput { return v.Tags }).(OceanLaunchSpecTagArrayOutput)
}

// Optionally adds labels to instances launched in the cluster.
func (o OceanLaunchSpecOutput) Taints() OceanLaunchSpecTaintArrayOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecTaintArrayOutput { return v.Taints }).(OceanLaunchSpecTaintArrayOutput)
}

func (o OceanLaunchSpecOutput) UpdatePolicy() OceanLaunchSpecUpdatePolicyPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) OceanLaunchSpecUpdatePolicyPtrOutput { return v.UpdatePolicy }).(OceanLaunchSpecUpdatePolicyPtrOutput)
}

// Base64-encoded MIME user data to make available to the instances.
func (o OceanLaunchSpecOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OceanLaunchSpec) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

type OceanLaunchSpecArrayOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OceanLaunchSpec)(nil)).Elem()
}

func (o OceanLaunchSpecArrayOutput) ToOceanLaunchSpecArrayOutput() OceanLaunchSpecArrayOutput {
	return o
}

func (o OceanLaunchSpecArrayOutput) ToOceanLaunchSpecArrayOutputWithContext(ctx context.Context) OceanLaunchSpecArrayOutput {
	return o
}

func (o OceanLaunchSpecArrayOutput) Index(i pulumi.IntInput) OceanLaunchSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OceanLaunchSpec {
		return vs[0].([]*OceanLaunchSpec)[vs[1].(int)]
	}).(OceanLaunchSpecOutput)
}

type OceanLaunchSpecMapOutput struct{ *pulumi.OutputState }

func (OceanLaunchSpecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OceanLaunchSpec)(nil)).Elem()
}

func (o OceanLaunchSpecMapOutput) ToOceanLaunchSpecMapOutput() OceanLaunchSpecMapOutput {
	return o
}

func (o OceanLaunchSpecMapOutput) ToOceanLaunchSpecMapOutputWithContext(ctx context.Context) OceanLaunchSpecMapOutput {
	return o
}

func (o OceanLaunchSpecMapOutput) MapIndex(k pulumi.StringInput) OceanLaunchSpecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OceanLaunchSpec {
		return vs[0].(map[string]*OceanLaunchSpec)[vs[1].(string)]
	}).(OceanLaunchSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecInput)(nil)).Elem(), &OceanLaunchSpec{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecArrayInput)(nil)).Elem(), OceanLaunchSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanLaunchSpecMapInput)(nil)).Elem(), OceanLaunchSpecMap{})
	pulumi.RegisterOutputType(OceanLaunchSpecOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecArrayOutput{})
	pulumi.RegisterOutputType(OceanLaunchSpecMapOutput{})
}
