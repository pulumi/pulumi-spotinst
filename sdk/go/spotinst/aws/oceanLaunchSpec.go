// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a custom Spotinst Ocean AWS Launch Spec resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v2/go/spotinst/aws"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aws.NewOceanLaunchSpec(ctx, "example", &aws.OceanLaunchSpecArgs{
// 			AutoscaleHeadrooms: aws.OceanLaunchSpecAutoscaleHeadroomArray{
// 				&aws.OceanLaunchSpecAutoscaleHeadroomArgs{
// 					CpuPerUnit:    pulumi.Int(1000),
// 					GpuPerUnit:    pulumi.Int(0),
// 					MemoryPerUnit: pulumi.Int(2048),
// 					NumOfUnits:    pulumi.Int(5),
// 				},
// 			},
// 			BlockDeviceMappings: aws.OceanLaunchSpecBlockDeviceMappingArray{
// 				&aws.OceanLaunchSpecBlockDeviceMappingArgs{
// 					DeviceName: pulumi.String("/dev/xvda1"),
// 					Ebs: &aws.OceanLaunchSpecBlockDeviceMappingEbsArgs{
// 						DeleteOnTermination: pulumi.Bool(true),
// 						DynamicVolumeSize: &aws.OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSizeArgs{
// 							BaseSize:            pulumi.Int(50),
// 							Resource:            pulumi.String("CPU"),
// 							SizePerResourceUnit: pulumi.Int(20),
// 						},
// 						Encrypted:  pulumi.Bool(false),
// 						VolumeSize: pulumi.Int(50),
// 						VolumeType: pulumi.String("gp2"),
// 					},
// 				},
// 			},
// 			ElasticIpPools: aws.OceanLaunchSpecElasticIpPoolArray{
// 				&aws.OceanLaunchSpecElasticIpPoolArgs{
// 					TagSelector: &aws.OceanLaunchSpecElasticIpPoolTagSelectorArgs{
// 						TagKey:   pulumi.String("key"),
// 						TagValue: pulumi.String("value"),
// 					},
// 				},
// 			},
// 			IamInstanceProfile: pulumi.String("iam-profile"),
// 			ImageId:            pulumi.String("ami-123456"),
// 			InstanceTypes: pulumi.StringArray{
// 				pulumi.String("m3.large"),
// 				pulumi.String("m3.xlarge"),
// 				pulumi.String("m3.2xlarge"),
// 				pulumi.String("m4.large"),
// 				pulumi.String("m4.xlarge"),
// 				pulumi.String("m4.4xlarge"),
// 				pulumi.String("m4.2xlarge"),
// 				pulumi.String("m4.10xlarge"),
// 				pulumi.String("m4.16xlarge"),
// 				pulumi.String("m5.large"),
// 				pulumi.String("m5.xlarge"),
// 				pulumi.String("m5.2xlarge"),
// 				pulumi.String("m5.4xlarge"),
// 				pulumi.String("m5.12xlarge"),
// 				pulumi.String("m5.24xlarge"),
// 			},
// 			Labels: aws.OceanLaunchSpecLabelArray{
// 				&aws.OceanLaunchSpecLabelArgs{
// 					Key:   pulumi.String("fakeKey"),
// 					Value: pulumi.String("fakeValue"),
// 				},
// 			},
// 			OceanId: pulumi.String("o-123456"),
// 			ResourceLimits: aws.OceanLaunchSpecResourceLimitArray{
// 				&aws.OceanLaunchSpecResourceLimitArgs{
// 					MaxInstanceCount: pulumi.Int(4),
// 				},
// 			},
// 			RootVolumeSize: pulumi.Int(30),
// 			SecurityGroups: pulumi.StringArray{
// 				pulumi.String("sg-987654321"),
// 			},
// 			SubnetIds: pulumi.StringArray{
// 				pulumi.String("subnet-1234"),
// 			},
// 			Tags: aws.OceanLaunchSpecTagArray{
// 				&aws.OceanLaunchSpecTagArgs{
// 					Key:   pulumi.String("Env"),
// 					Value: pulumi.String("production"),
// 				},
// 			},
// 			Taints: aws.OceanLaunchSpecTaintArray{
// 				&aws.OceanLaunchSpecTaintArgs{
// 					Effect: pulumi.String("NoExecute"),
// 					Key:    pulumi.String("taint key updated"),
// 					Value:  pulumi.String("taint value updated"),
// 				},
// 			},
// 			UserData: pulumi.String("echo hello world"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type OceanLaunchSpec struct {
	pulumi.CustomResourceState

	// Set custom headroom per launch spec. provide list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayOutput `pulumi:"autoscaleHeadrooms"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	// Assign an Elastic IP to the instances spun by the launch spec. Can be null.
	ElasticIpPools OceanLaunchSpecElasticIpPoolArrayOutput `pulumi:"elasticIpPools"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
	InstanceTypes pulumi.StringArrayOutput `pulumi:"instanceTypes"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels OceanLaunchSpecLabelArrayOutput `pulumi:"labels"`
	// Set Launch Specification name
	Name pulumi.StringOutput `pulumi:"name"`
	// The ocean cluster you wish to
	OceanId        pulumi.StringOutput                     `pulumi:"oceanId"`
	ResourceLimits OceanLaunchSpecResourceLimitArrayOutput `pulumi:"resourceLimits"`
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrOutput `pulumi:"rootVolumeSize"`
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Set subnets in launchSpec. Each element in array should be subnet ID.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayOutput `pulumi:"tags"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints OceanLaunchSpecTaintArrayOutput `pulumi:"taints"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
}

// NewOceanLaunchSpec registers a new resource with the given unique name, arguments, and options.
func NewOceanLaunchSpec(ctx *pulumi.Context,
	name string, args *OceanLaunchSpecArgs, opts ...pulumi.ResourceOption) (*OceanLaunchSpec, error) {
	if args == nil || args.OceanId == nil {
		return nil, errors.New("missing required argument 'OceanId'")
	}
	if args == nil {
		args = &OceanLaunchSpecArgs{}
	}
	var resource OceanLaunchSpec
	err := ctx.RegisterResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOceanLaunchSpec gets an existing OceanLaunchSpec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanLaunchSpec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanLaunchSpecState, opts ...pulumi.ResourceOption) (*OceanLaunchSpec, error) {
	var resource OceanLaunchSpec
	err := ctx.ReadResource("spotinst:aws/oceanLaunchSpec:OceanLaunchSpec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OceanLaunchSpec resources.
type oceanLaunchSpecState struct {
	// Set custom headroom per launch spec. provide list of headrooms object.
	AutoscaleHeadrooms []OceanLaunchSpecAutoscaleHeadroom `pulumi:"autoscaleHeadrooms"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanLaunchSpecBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// Assign an Elastic IP to the instances spun by the launch spec. Can be null.
	ElasticIpPools []OceanLaunchSpecElasticIpPool `pulumi:"elasticIpPools"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels []OceanLaunchSpecLabel `pulumi:"labels"`
	// Set Launch Specification name
	Name *string `pulumi:"name"`
	// The ocean cluster you wish to
	OceanId        *string                        `pulumi:"oceanId"`
	ResourceLimits []OceanLaunchSpecResourceLimit `pulumi:"resourceLimits"`
	// Set root volume size (in GB).
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Optionally adds security group IDs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Set subnets in launchSpec. Each element in array should be subnet ID.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags []OceanLaunchSpecTag `pulumi:"tags"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints []OceanLaunchSpecTaint `pulumi:"taints"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
}

type OceanLaunchSpecState struct {
	// Set custom headroom per launch spec. provide list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayInput
	// Assign an Elastic IP to the instances spun by the launch spec. Can be null.
	ElasticIpPools OceanLaunchSpecElasticIpPoolArrayInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
	InstanceTypes pulumi.StringArrayInput
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels OceanLaunchSpecLabelArrayInput
	// Set Launch Specification name
	Name pulumi.StringPtrInput
	// The ocean cluster you wish to
	OceanId        pulumi.StringPtrInput
	ResourceLimits OceanLaunchSpecResourceLimitArrayInput
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrInput
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayInput
	// Set subnets in launchSpec. Each element in array should be subnet ID.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayInput
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints OceanLaunchSpecTaintArrayInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
}

func (OceanLaunchSpecState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecState)(nil)).Elem()
}

type oceanLaunchSpecArgs struct {
	// Set custom headroom per launch spec. provide list of headrooms object.
	AutoscaleHeadrooms []OceanLaunchSpecAutoscaleHeadroom `pulumi:"autoscaleHeadrooms"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanLaunchSpecBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// Assign an Elastic IP to the instances spun by the launch spec. Can be null.
	ElasticIpPools []OceanLaunchSpecElasticIpPool `pulumi:"elasticIpPools"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
	InstanceTypes []string `pulumi:"instanceTypes"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels []OceanLaunchSpecLabel `pulumi:"labels"`
	// Set Launch Specification name
	Name *string `pulumi:"name"`
	// The ocean cluster you wish to
	OceanId        string                         `pulumi:"oceanId"`
	ResourceLimits []OceanLaunchSpecResourceLimit `pulumi:"resourceLimits"`
	// Set root volume size (in GB).
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Optionally adds security group IDs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Set subnets in launchSpec. Each element in array should be subnet ID.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags []OceanLaunchSpecTag `pulumi:"tags"`
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints []OceanLaunchSpecTaint `pulumi:"taints"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a OceanLaunchSpec resource.
type OceanLaunchSpecArgs struct {
	// Set custom headroom per launch spec. provide list of headrooms object.
	AutoscaleHeadrooms OceanLaunchSpecAutoscaleHeadroomArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanLaunchSpecBlockDeviceMappingArrayInput
	// Assign an Elastic IP to the instances spun by the launch spec. Can be null.
	ElasticIpPools OceanLaunchSpecElasticIpPoolArrayInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
	InstanceTypes pulumi.StringArrayInput
	// Optionally adds labels to instances launched in an Ocean cluster.
	Labels OceanLaunchSpecLabelArrayInput
	// Set Launch Specification name
	Name pulumi.StringPtrInput
	// The ocean cluster you wish to
	OceanId        pulumi.StringInput
	ResourceLimits OceanLaunchSpecResourceLimitArrayInput
	// Set root volume size (in GB).
	RootVolumeSize pulumi.IntPtrInput
	// Optionally adds security group IDs.
	SecurityGroups pulumi.StringArrayInput
	// Set subnets in launchSpec. Each element in array should be subnet ID.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags OceanLaunchSpecTagArrayInput
	// Optionally adds labels to instances launched in an Ocean cluster.
	Taints OceanLaunchSpecTaintArrayInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
}

func (OceanLaunchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanLaunchSpecArgs)(nil)).Elem()
}
