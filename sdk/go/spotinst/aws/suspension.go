// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Suspension struct {
	pulumi.CustomResourceState

	// Elastigroup ID to apply the suspensions on.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// block of single process to suspend.
	Suspensions SuspensionSuspensionArrayOutput `pulumi:"suspensions"`
}

// NewSuspension registers a new resource with the given unique name, arguments, and options.
func NewSuspension(ctx *pulumi.Context,
	name string, args *SuspensionArgs, opts ...pulumi.ResourceOption) (*Suspension, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.Suspensions == nil {
		return nil, errors.New("missing required argument 'Suspensions'")
	}
	if args == nil {
		args = &SuspensionArgs{}
	}
	var resource Suspension
	err := ctx.RegisterResource("spotinst:aws/suspension:Suspension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuspension gets an existing Suspension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuspension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuspensionState, opts ...pulumi.ResourceOption) (*Suspension, error) {
	var resource Suspension
	err := ctx.ReadResource("spotinst:aws/suspension:Suspension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Suspension resources.
type suspensionState struct {
	// Elastigroup ID to apply the suspensions on.
	GroupId *string `pulumi:"groupId"`
	// block of single process to suspend.
	Suspensions []SuspensionSuspension `pulumi:"suspensions"`
}

type SuspensionState struct {
	// Elastigroup ID to apply the suspensions on.
	GroupId pulumi.StringPtrInput
	// block of single process to suspend.
	Suspensions SuspensionSuspensionArrayInput
}

func (SuspensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*suspensionState)(nil)).Elem()
}

type suspensionArgs struct {
	// Elastigroup ID to apply the suspensions on.
	GroupId string `pulumi:"groupId"`
	// block of single process to suspend.
	Suspensions []SuspensionSuspension `pulumi:"suspensions"`
}

// The set of arguments for constructing a Suspension resource.
type SuspensionArgs struct {
	// Elastigroup ID to apply the suspensions on.
	GroupId pulumi.StringInput
	// block of single process to suspend.
	Suspensions SuspensionSuspensionArrayInput
}

func (SuspensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*suspensionArgs)(nil)).Elem()
}

type SuspensionInput interface {
	pulumi.Input

	ToSuspensionOutput() SuspensionOutput
	ToSuspensionOutputWithContext(ctx context.Context) SuspensionOutput
}

func (Suspension) ElementType() reflect.Type {
	return reflect.TypeOf((*Suspension)(nil)).Elem()
}

func (i Suspension) ToSuspensionOutput() SuspensionOutput {
	return i.ToSuspensionOutputWithContext(context.Background())
}

func (i Suspension) ToSuspensionOutputWithContext(ctx context.Context) SuspensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuspensionOutput)
}

type SuspensionOutput struct {
	*pulumi.OutputState
}

func (SuspensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuspensionOutput)(nil)).Elem()
}

func (o SuspensionOutput) ToSuspensionOutput() SuspensionOutput {
	return o
}

func (o SuspensionOutput) ToSuspensionOutputWithContext(ctx context.Context) SuspensionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SuspensionOutput{})
}
