// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Spotinst AWS group resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create an Elastigroup
//			_, err := aws.NewElastigroup(ctx, "default-elastigroup", &aws.ElastigroupArgs{
//				Name:            pulumi.String("default-elastigroup"),
//				Description:     pulumi.String("created by Pulumi"),
//				Product:         pulumi.String("Linux/UNIX"),
//				MaxSize:         pulumi.Int(0),
//				MinSize:         pulumi.Int(0),
//				DesiredCapacity: pulumi.Int(0),
//				CapacityUnit:    pulumi.String("weight"),
//				Region:          pulumi.String("us-west-2"),
//				SubnetIds: pulumi.StringArray{
//					pulumi.String("sb-123456"),
//					pulumi.String("sb-456789"),
//				},
//				ImageId:            pulumi.String("ami-a27d8fda"),
//				IamInstanceProfile: pulumi.String("iam-profile"),
//				KeyName:            pulumi.String("my-key.ssh"),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("sg-123456"),
//				},
//				UserData:         pulumi.String("echo hello world"),
//				EnableMonitoring: pulumi.Bool(false),
//				EbsOptimized:     pulumi.Bool(false),
//				PlacementTenancy: pulumi.String("default"),
//				MetadataOptions: &aws.ElastigroupMetadataOptionsArgs{
//					HttpTokens:              pulumi.String("optional"),
//					HttpPutResponseHopLimit: pulumi.Int(10),
//					InstanceMetadataTags:    pulumi.String("enabled"),
//				},
//				CpuOptions: &aws.ElastigroupCpuOptionsArgs{
//					ThreadsPerCore: pulumi.Int(1),
//				},
//				InstanceTypesOndemand: pulumi.String("m3.2xlarge"),
//				InstanceTypesSpots: pulumi.StringArray{
//					pulumi.String("m3.xlarge"),
//					pulumi.String("m3.2xlarge"),
//				},
//				InstanceTypesPreferredSpots: pulumi.StringArray{
//					pulumi.String("m3.xlarge"),
//				},
//				OnDemandTypes: pulumi.StringArray{
//					pulumi.String("c3.large"),
//				},
//				InstanceTypesWeights: aws.ElastigroupInstanceTypesWeightArray{
//					&aws.ElastigroupInstanceTypesWeightArgs{
//						InstanceType: pulumi.String("m3.xlarge"),
//						Weight:       pulumi.Int(10),
//					},
//					&aws.ElastigroupInstanceTypesWeightArgs{
//						InstanceType: pulumi.String("m3.2xlarge"),
//						Weight:       pulumi.Int(16),
//					},
//				},
//				ResourceRequirements: aws.ElastigroupResourceRequirementArray{
//					&aws.ElastigroupResourceRequirementArgs{
//						ExcludedInstanceFamilies: pulumi.StringArray{
//							pulumi.String("a"),
//							pulumi.String("m"),
//						},
//						ExcludedInstanceTypes: pulumi.StringArray{
//							pulumi.String("m3.large"),
//						},
//						ExcludedInstanceGenerations: pulumi.StringArray{
//							pulumi.String("1"),
//							pulumi.String("2"),
//						},
//						RequiredGpuMinimum:    pulumi.Int(1),
//						RequiredGpuMaximum:    pulumi.Int(16),
//						RequiredMemoryMinimum: pulumi.Int(1),
//						RequiredMemoryMaximum: pulumi.Int(512),
//						RequiredVcpuMinimum:   pulumi.Int(1),
//						RequiredVcpuMaximum:   pulumi.Int(64),
//					},
//				},
//				Orientation:             pulumi.String("balanced"),
//				FallbackToOndemand:      pulumi.Bool(false),
//				CpuCredits:              pulumi.String("unlimited"),
//				MinimumInstanceLifetime: pulumi.Int(12),
//				WaitForCapacity:         pulumi.Int(5),
//				WaitForCapacityTimeout:  pulumi.Int(300),
//				ScalingStrategies: aws.ElastigroupScalingStrategyArray{
//					&aws.ElastigroupScalingStrategyArgs{
//						TerminateAtEndOfBillingHour: pulumi.Bool(true),
//						TerminationPolicy:           pulumi.String("default"),
//					},
//				},
//				ScalingUpPolicies: aws.ElastigroupScalingUpPolicyArray{
//					&aws.ElastigroupScalingUpPolicyArgs{
//						PolicyName:        pulumi.String("Default Scaling Up Policy"),
//						MetricName:        pulumi.String("DefaultQueuesDepth"),
//						Statistic:         pulumi.String("average"),
//						Unit:              pulumi.String("none"),
//						Adjustment:        pulumi.String("1"),
//						Namespace:         pulumi.String("custom"),
//						Threshold:         pulumi.Float64(100),
//						Period:            pulumi.Int(60),
//						EvaluationPeriods: pulumi.Int(5),
//						Cooldown:          pulumi.Int(300),
//					},
//				},
//				ScalingDownPolicies: aws.ElastigroupScalingDownPolicyArray{
//					&aws.ElastigroupScalingDownPolicyArgs{
//						PolicyName:        pulumi.String("Default Scaling Down Policy"),
//						MetricName:        pulumi.String("DefaultQueuesDepth"),
//						Statistic:         pulumi.String("average"),
//						Unit:              pulumi.String("none"),
//						Adjustment:        pulumi.String("1"),
//						Namespace:         pulumi.String("custom"),
//						Threshold:         pulumi.Float64(10),
//						Period:            pulumi.Int(60),
//						EvaluationPeriods: pulumi.Int(10),
//						Cooldown:          pulumi.Int(300),
//					},
//				},
//				Tags: aws.ElastigroupTagArray{
//					&aws.ElastigroupTagArgs{
//						Key:   pulumi.String("Env"),
//						Value: pulumi.String("production"),
//					},
//					&aws.ElastigroupTagArgs{
//						Key:   pulumi.String("Name"),
//						Value: pulumi.String("default-production"),
//					},
//					&aws.ElastigroupTagArgs{
//						Key:   pulumi.String("Project"),
//						Value: pulumi.String("app_v2"),
//					},
//				},
//				ResourceTagSpecifications: aws.ElastigroupResourceTagSpecificationArray{
//					&aws.ElastigroupResourceTagSpecificationArgs{
//						ShouldTagEnis:      pulumi.Bool(true),
//						ShouldTagVolumes:   pulumi.Bool(true),
//						ShouldTagSnapshots: pulumi.Bool(true),
//						ShouldTagAmis:      pulumi.Bool(true),
//					},
//				},
//				Logging: &aws.ElastigroupLoggingArgs{
//					Export: &aws.ElastigroupLoggingExportArgs{
//						S3s: aws.ElastigroupLoggingExportS3Array{
//							&aws.ElastigroupLoggingExportS3Args{
//								Id: pulumi.String("di-123456"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Elastigroup struct {
	pulumi.CustomResourceState

	// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
	AutoHealing pulumi.BoolPtrOutput `pulumi:"autoHealing"`
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	BlockDevicesMode  pulumi.StringPtrOutput   `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
	CapacityUnit      pulumi.StringOutput  `pulumi:"capacityUnit"`
	ConsiderOdPricing pulumi.BoolPtrOutput `pulumi:"considerOdPricing"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrOutput `pulumi:"cpuCredits"`
	// The CPU options for the instances that are launched within the group:
	CpuOptions ElastigroupCpuOptionsPtrOutput `pulumi:"cpuOptions"`
	// The group description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrOutput `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntOutput                     `pulumi:"drainingTimeout"`
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayOutput `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolOutput `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayOutput `pulumi:"elasticIps"`
	ElasticLoadBalancers pulumi.StringArrayOutput `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrOutput                       `pulumi:"enableMonitoring"`
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayOutput `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolOutput `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrOutput `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrOutput `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// An array of image objects.
	// Note: Elastigroup can be configured with either imageId or images, but not both.
	Images                      ElastigroupImageArrayOutput `pulumi:"images"`
	ImmediateOdRecoverThreshold pulumi.IntPtrOutput         `pulumi:"immediateOdRecoverThreshold"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringPtrOutput `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayOutput `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
	InstanceTypesSpots pulumi.StringArrayOutput `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights   ElastigroupInstanceTypesWeightArrayOutput  `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk   ElastigroupIntegrationBeanstalkPtrOutput   `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy  ElastigroupIntegrationCodedeployPtrOutput  `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm ElastigroupIntegrationDockerSwarmPtrOutput `pulumi:"integrationDockerSwarm"`
	IntegrationEcs         ElastigroupIntegrationEcsPtrOutput         `pulumi:"integrationEcs"`
	IntegrationGitlab      ElastigroupIntegrationGitlabPtrOutput      `pulumi:"integrationGitlab"`
	IntegrationKubernetes  ElastigroupIntegrationKubernetesPtrOutput  `pulumi:"integrationKubernetes"`
	IntegrationMesosphere  ElastigroupIntegrationMesospherePtrOutput  `pulumi:"integrationMesosphere"`
	IntegrationNomad       ElastigroupIntegrationNomadPtrOutput       `pulumi:"integrationNomad"`
	IntegrationRancher     ElastigroupIntegrationRancherPtrOutput     `pulumi:"integrationRancher"`
	IntegrationRoute53     ElastigroupIntegrationRoute53PtrOutput     `pulumi:"integrationRoute53"`
	Itfs                   ElastigroupItfArrayOutput                  `pulumi:"itfs"`
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrOutput `pulumi:"keyName"`
	LifetimePeriod pulumi.StringPtrOutput `pulumi:"lifetimePeriod"`
	// Logging configuration.
	Logging ElastigroupLoggingPtrOutput `pulumi:"logging"`
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrOutput `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
	MinimumInstanceLifetime pulumi.IntPtrOutput                 `pulumi:"minimumInstanceLifetime"`
	MultipleMetrics         ElastigroupMultipleMetricsPtrOutput `pulumi:"multipleMetrics"`
	// The group name.
	Name              pulumi.StringOutput                    `pulumi:"name"`
	NetworkInterfaces ElastigroupNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
	OnDemandTypes pulumi.StringArrayOutput `pulumi:"onDemandTypes"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrOutput `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
	Orientation         pulumi.StringOutput  `pulumi:"orientation"`
	PersistBlockDevices pulumi.BoolPtrOutput `pulumi:"persistBlockDevices"`
	PersistPrivateIp    pulumi.BoolPtrOutput `pulumi:"persistPrivateIp"`
	PersistRootDevice   pulumi.BoolPtrOutput `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
	PlacementTenancy pulumi.StringPtrOutput `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayOutput `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 pulumi.StringArrayOutput `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringOutput `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Required instance attributes. Instance types will be selected based on these requirements.
	ResourceRequirements ElastigroupResourceRequirementArrayOutput `pulumi:"resourceRequirements"`
	// User will specify which resources should be tagged with group tags.
	ResourceTagSpecifications ElastigroupResourceTagSpecificationArrayOutput `pulumi:"resourceTagSpecifications"`
	// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
	RestrictSingleAz pulumi.BoolPtrOutput `pulumi:"restrictSingleAz"`
	// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrOutput        `pulumi:"revertToSpot"`
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayOutput `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayOutput     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayOutput `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayOutput     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        ElastigroupScheduledTaskArrayOutput       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrOutput       `pulumi:"shutdownScript"`
	Signals        ElastigroupSignalArrayOutput `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage          pulumi.IntPtrOutput                          `pulumi:"spotPercentage"`
	StatefulDeallocation    ElastigroupStatefulDeallocationPtrOutput     `pulumi:"statefulDeallocation"`
	StatefulInstanceActions ElastigroupStatefulInstanceActionArrayOutput `pulumi:"statefulInstanceActions"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayOutput        `pulumi:"tags"`
	TargetGroupArns pulumi.StringArrayOutput         `pulumi:"targetGroupArns"`
	UpdatePolicy    ElastigroupUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrOutput `pulumi:"userData"`
	UtilizeCommitments pulumi.BoolPtrOutput   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrOutput `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrOutput `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrOutput `pulumi:"waitForCapacityTimeout"`
}

// NewElastigroup registers a new resource with the given unique name, arguments, and options.
func NewElastigroup(ctx *pulumi.Context,
	name string, args *ElastigroupArgs, opts ...pulumi.ResourceOption) (*Elastigroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FallbackToOndemand == nil {
		return nil, errors.New("invalid value for required argument 'FallbackToOndemand'")
	}
	if args.Orientation == nil {
		return nil, errors.New("invalid value for required argument 'Orientation'")
	}
	if args.Product == nil {
		return nil, errors.New("invalid value for required argument 'Product'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Elastigroup
	err := ctx.RegisterResource("spotinst:aws/elastigroup:Elastigroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElastigroup gets an existing Elastigroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElastigroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElastigroupState, opts ...pulumi.ResourceOption) (*Elastigroup, error) {
	var resource Elastigroup
	err := ctx.ReadResource("spotinst:aws/elastigroup:Elastigroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elastigroup resources.
type elastigroupState struct {
	// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
	AutoHealing *bool `pulumi:"autoHealing"`
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	BlockDevicesMode  *string  `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
	CapacityUnit      *string `pulumi:"capacityUnit"`
	ConsiderOdPricing *bool   `pulumi:"considerOdPricing"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits *string `pulumi:"cpuCredits"`
	// The CPU options for the instances that are launched within the group:
	CpuOptions *ElastigroupCpuOptions `pulumi:"cpuOptions"`
	// The group description.
	Description *string `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int                        `pulumi:"drainingTimeout"`
	EbsBlockDevices []ElastigroupEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           []string `pulumi:"elasticIps"`
	ElasticLoadBalancers []string `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      *bool                             `pulumi:"enableMonitoring"`
	EphemeralBlockDevices []ElastigroupEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand *bool `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId *string `pulumi:"imageId"`
	// An array of image objects.
	// Note: Elastigroup can be configured with either imageId or images, but not both.
	Images                      []ElastigroupImage `pulumi:"images"`
	ImmediateOdRecoverThreshold *int               `pulumi:"immediateOdRecoverThreshold"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand *string `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots []string `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
	InstanceTypesSpots []string `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights   []ElastigroupInstanceTypesWeight   `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk   *ElastigroupIntegrationBeanstalk   `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy  *ElastigroupIntegrationCodedeploy  `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm *ElastigroupIntegrationDockerSwarm `pulumi:"integrationDockerSwarm"`
	IntegrationEcs         *ElastigroupIntegrationEcs         `pulumi:"integrationEcs"`
	IntegrationGitlab      *ElastigroupIntegrationGitlab      `pulumi:"integrationGitlab"`
	IntegrationKubernetes  *ElastigroupIntegrationKubernetes  `pulumi:"integrationKubernetes"`
	IntegrationMesosphere  *ElastigroupIntegrationMesosphere  `pulumi:"integrationMesosphere"`
	IntegrationNomad       *ElastigroupIntegrationNomad       `pulumi:"integrationNomad"`
	IntegrationRancher     *ElastigroupIntegrationRancher     `pulumi:"integrationRancher"`
	IntegrationRoute53     *ElastigroupIntegrationRoute53     `pulumi:"integrationRoute53"`
	Itfs                   []ElastigroupItf                   `pulumi:"itfs"`
	// The key name that should be used for the instance.
	KeyName        *string `pulumi:"keyName"`
	LifetimePeriod *string `pulumi:"lifetimePeriod"`
	// Logging configuration.
	Logging *ElastigroupLogging `pulumi:"logging"`
	// The maximum number of instances the group should have at any time.
	MaxSize *int `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions *ElastigroupMetadataOptions `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize *int `pulumi:"minSize"`
	// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
	MinimumInstanceLifetime *int                        `pulumi:"minimumInstanceLifetime"`
	MultipleMetrics         *ElastigroupMultipleMetrics `pulumi:"multipleMetrics"`
	// The group name.
	Name              *string                       `pulumi:"name"`
	NetworkInterfaces []ElastigroupNetworkInterface `pulumi:"networkInterfaces"`
	// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
	OnDemandTypes []string `pulumi:"onDemandTypes"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount *int `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
	Orientation         *string `pulumi:"orientation"`
	PersistBlockDevices *bool   `pulumi:"persistBlockDevices"`
	PersistPrivateIp    *bool   `pulumi:"persistPrivateIp"`
	PersistRootDevice   *bool   `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 []string `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product *string `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region *string `pulumi:"region"`
	// Required instance attributes. Instance types will be selected based on these requirements.
	ResourceRequirements []ElastigroupResourceRequirement `pulumi:"resourceRequirements"`
	// User will specify which resources should be tagged with group tags.
	ResourceTagSpecifications []ElastigroupResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
	RestrictSingleAz *bool `pulumi:"restrictSingleAz"`
	// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        *ElastigroupRevertToSpot       `pulumi:"revertToSpot"`
	ScalingDownPolicies []ElastigroupScalingDownPolicy `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     []ElastigroupScalingStrategy     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies []ElastigroupScalingTargetPolicy `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     []ElastigroupScalingUpPolicy     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        []ElastigroupScheduledTask       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript *string             `pulumi:"shutdownScript"`
	Signals        []ElastigroupSignal `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage          *int                                `pulumi:"spotPercentage"`
	StatefulDeallocation    *ElastigroupStatefulDeallocation    `pulumi:"statefulDeallocation"`
	StatefulInstanceActions []ElastigroupStatefulInstanceAction `pulumi:"statefulInstanceActions"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            []ElastigroupTag         `pulumi:"tags"`
	TargetGroupArns []string                 `pulumi:"targetGroupArns"`
	UpdatePolicy    *ElastigroupUpdatePolicy `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity *int `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout *int `pulumi:"waitForCapacityTimeout"`
}

type ElastigroupState struct {
	// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
	AutoHealing pulumi.BoolPtrInput
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayInput
	BlockDevicesMode  pulumi.StringPtrInput
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
	CapacityUnit      pulumi.StringPtrInput
	ConsiderOdPricing pulumi.BoolPtrInput
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrInput
	// The CPU options for the instances that are launched within the group:
	CpuOptions ElastigroupCpuOptionsPtrInput
	// The group description.
	Description pulumi.StringPtrInput
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayInput
	// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayInput
	ElasticLoadBalancers pulumi.StringArrayInput
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrInput
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayInput
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrInput
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrInput
	// An array of image objects.
	// Note: Elastigroup can be configured with either imageId or images, but not both.
	Images                      ElastigroupImageArrayInput
	ImmediateOdRecoverThreshold pulumi.IntPtrInput
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringPtrInput
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayInput
	// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
	InstanceTypesSpots pulumi.StringArrayInput
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights   ElastigroupInstanceTypesWeightArrayInput
	IntegrationBeanstalk   ElastigroupIntegrationBeanstalkPtrInput
	IntegrationCodedeploy  ElastigroupIntegrationCodedeployPtrInput
	IntegrationDockerSwarm ElastigroupIntegrationDockerSwarmPtrInput
	IntegrationEcs         ElastigroupIntegrationEcsPtrInput
	IntegrationGitlab      ElastigroupIntegrationGitlabPtrInput
	IntegrationKubernetes  ElastigroupIntegrationKubernetesPtrInput
	IntegrationMesosphere  ElastigroupIntegrationMesospherePtrInput
	IntegrationNomad       ElastigroupIntegrationNomadPtrInput
	IntegrationRancher     ElastigroupIntegrationRancherPtrInput
	IntegrationRoute53     ElastigroupIntegrationRoute53PtrInput
	Itfs                   ElastigroupItfArrayInput
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrInput
	LifetimePeriod pulumi.StringPtrInput
	// Logging configuration.
	Logging ElastigroupLoggingPtrInput
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntPtrInput
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrInput
	// The minimum number of instances the group should have at any time.
	MinSize pulumi.IntPtrInput
	// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
	MinimumInstanceLifetime pulumi.IntPtrInput
	MultipleMetrics         ElastigroupMultipleMetricsPtrInput
	// The group name.
	Name              pulumi.StringPtrInput
	NetworkInterfaces ElastigroupNetworkInterfaceArrayInput
	// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
	OnDemandTypes pulumi.StringArrayInput
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrInput
	// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
	Orientation         pulumi.StringPtrInput
	PersistBlockDevices pulumi.BoolPtrInput
	PersistPrivateIp    pulumi.BoolPtrInput
	PersistRootDevice   pulumi.BoolPtrInput
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
	PlacementTenancy pulumi.StringPtrInput
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayInput
	PrivateIps                 pulumi.StringArrayInput
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringPtrInput
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrInput
	// Required instance attributes. Instance types will be selected based on these requirements.
	ResourceRequirements ElastigroupResourceRequirementArrayInput
	// User will specify which resources should be tagged with group tags.
	ResourceTagSpecifications ElastigroupResourceTagSpecificationArrayInput
	// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
	RestrictSingleAz pulumi.BoolPtrInput
	// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrInput
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayInput
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayInput
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayInput
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayInput
	ScheduledTasks        ElastigroupScheduledTaskArrayInput
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayInput
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrInput
	Signals        ElastigroupSignalArrayInput
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage          pulumi.IntPtrInput
	StatefulDeallocation    ElastigroupStatefulDeallocationPtrInput
	StatefulInstanceActions ElastigroupStatefulInstanceActionArrayInput
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayInput
	TargetGroupArns pulumi.StringArrayInput
	UpdatePolicy    ElastigroupUpdatePolicyPtrInput
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrInput
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrInput
}

func (ElastigroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*elastigroupState)(nil)).Elem()
}

type elastigroupArgs struct {
	// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
	AutoHealing *bool `pulumi:"autoHealing"`
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	BlockDevicesMode  *string  `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
	CapacityUnit      *string `pulumi:"capacityUnit"`
	ConsiderOdPricing *bool   `pulumi:"considerOdPricing"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits *string `pulumi:"cpuCredits"`
	// The CPU options for the instances that are launched within the group:
	CpuOptions *ElastigroupCpuOptions `pulumi:"cpuOptions"`
	// The group description.
	Description *string `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int                        `pulumi:"drainingTimeout"`
	EbsBlockDevices []ElastigroupEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           []string `pulumi:"elasticIps"`
	ElasticLoadBalancers []string `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      *bool                             `pulumi:"enableMonitoring"`
	EphemeralBlockDevices []ElastigroupEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand bool `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId *string `pulumi:"imageId"`
	// An array of image objects.
	// Note: Elastigroup can be configured with either imageId or images, but not both.
	Images                      []ElastigroupImage `pulumi:"images"`
	ImmediateOdRecoverThreshold *int               `pulumi:"immediateOdRecoverThreshold"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand *string `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots []string `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
	InstanceTypesSpots []string `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights   []ElastigroupInstanceTypesWeight   `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk   *ElastigroupIntegrationBeanstalk   `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy  *ElastigroupIntegrationCodedeploy  `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm *ElastigroupIntegrationDockerSwarm `pulumi:"integrationDockerSwarm"`
	IntegrationEcs         *ElastigroupIntegrationEcs         `pulumi:"integrationEcs"`
	IntegrationGitlab      *ElastigroupIntegrationGitlab      `pulumi:"integrationGitlab"`
	IntegrationKubernetes  *ElastigroupIntegrationKubernetes  `pulumi:"integrationKubernetes"`
	IntegrationMesosphere  *ElastigroupIntegrationMesosphere  `pulumi:"integrationMesosphere"`
	IntegrationNomad       *ElastigroupIntegrationNomad       `pulumi:"integrationNomad"`
	IntegrationRancher     *ElastigroupIntegrationRancher     `pulumi:"integrationRancher"`
	IntegrationRoute53     *ElastigroupIntegrationRoute53     `pulumi:"integrationRoute53"`
	Itfs                   []ElastigroupItf                   `pulumi:"itfs"`
	// The key name that should be used for the instance.
	KeyName        *string `pulumi:"keyName"`
	LifetimePeriod *string `pulumi:"lifetimePeriod"`
	// Logging configuration.
	Logging *ElastigroupLogging `pulumi:"logging"`
	// The maximum number of instances the group should have at any time.
	MaxSize *int `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions *ElastigroupMetadataOptions `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize *int `pulumi:"minSize"`
	// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
	MinimumInstanceLifetime *int                        `pulumi:"minimumInstanceLifetime"`
	MultipleMetrics         *ElastigroupMultipleMetrics `pulumi:"multipleMetrics"`
	// The group name.
	Name              *string                       `pulumi:"name"`
	NetworkInterfaces []ElastigroupNetworkInterface `pulumi:"networkInterfaces"`
	// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
	OnDemandTypes []string `pulumi:"onDemandTypes"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount *int `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
	Orientation         string `pulumi:"orientation"`
	PersistBlockDevices *bool  `pulumi:"persistBlockDevices"`
	PersistPrivateIp    *bool  `pulumi:"persistPrivateIp"`
	PersistRootDevice   *bool  `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 []string `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product string `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region *string `pulumi:"region"`
	// Required instance attributes. Instance types will be selected based on these requirements.
	ResourceRequirements []ElastigroupResourceRequirement `pulumi:"resourceRequirements"`
	// User will specify which resources should be tagged with group tags.
	ResourceTagSpecifications []ElastigroupResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
	RestrictSingleAz *bool `pulumi:"restrictSingleAz"`
	// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        *ElastigroupRevertToSpot       `pulumi:"revertToSpot"`
	ScalingDownPolicies []ElastigroupScalingDownPolicy `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     []ElastigroupScalingStrategy     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies []ElastigroupScalingTargetPolicy `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     []ElastigroupScalingUpPolicy     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        []ElastigroupScheduledTask       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript *string             `pulumi:"shutdownScript"`
	Signals        []ElastigroupSignal `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage          *int                                `pulumi:"spotPercentage"`
	StatefulDeallocation    *ElastigroupStatefulDeallocation    `pulumi:"statefulDeallocation"`
	StatefulInstanceActions []ElastigroupStatefulInstanceAction `pulumi:"statefulInstanceActions"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            []ElastigroupTag         `pulumi:"tags"`
	TargetGroupArns []string                 `pulumi:"targetGroupArns"`
	UpdatePolicy    *ElastigroupUpdatePolicy `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity *int `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout *int `pulumi:"waitForCapacityTimeout"`
}

// The set of arguments for constructing a Elastigroup resource.
type ElastigroupArgs struct {
	// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
	AutoHealing pulumi.BoolPtrInput
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayInput
	BlockDevicesMode  pulumi.StringPtrInput
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
	CapacityUnit      pulumi.StringPtrInput
	ConsiderOdPricing pulumi.BoolPtrInput
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrInput
	// The CPU options for the instances that are launched within the group:
	CpuOptions ElastigroupCpuOptionsPtrInput
	// The group description.
	Description pulumi.StringPtrInput
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayInput
	// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayInput
	ElasticLoadBalancers pulumi.StringArrayInput
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrInput
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayInput
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolInput
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrInput
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrInput
	// An array of image objects.
	// Note: Elastigroup can be configured with either imageId or images, but not both.
	Images                      ElastigroupImageArrayInput
	ImmediateOdRecoverThreshold pulumi.IntPtrInput
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringPtrInput
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayInput
	// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
	InstanceTypesSpots pulumi.StringArrayInput
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights   ElastigroupInstanceTypesWeightArrayInput
	IntegrationBeanstalk   ElastigroupIntegrationBeanstalkPtrInput
	IntegrationCodedeploy  ElastigroupIntegrationCodedeployPtrInput
	IntegrationDockerSwarm ElastigroupIntegrationDockerSwarmPtrInput
	IntegrationEcs         ElastigroupIntegrationEcsPtrInput
	IntegrationGitlab      ElastigroupIntegrationGitlabPtrInput
	IntegrationKubernetes  ElastigroupIntegrationKubernetesPtrInput
	IntegrationMesosphere  ElastigroupIntegrationMesospherePtrInput
	IntegrationNomad       ElastigroupIntegrationNomadPtrInput
	IntegrationRancher     ElastigroupIntegrationRancherPtrInput
	IntegrationRoute53     ElastigroupIntegrationRoute53PtrInput
	Itfs                   ElastigroupItfArrayInput
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrInput
	LifetimePeriod pulumi.StringPtrInput
	// Logging configuration.
	Logging ElastigroupLoggingPtrInput
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntPtrInput
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrInput
	// The minimum number of instances the group should have at any time.
	MinSize pulumi.IntPtrInput
	// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
	MinimumInstanceLifetime pulumi.IntPtrInput
	MultipleMetrics         ElastigroupMultipleMetricsPtrInput
	// The group name.
	Name              pulumi.StringPtrInput
	NetworkInterfaces ElastigroupNetworkInterfaceArrayInput
	// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
	OnDemandTypes pulumi.StringArrayInput
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrInput
	// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
	Orientation         pulumi.StringInput
	PersistBlockDevices pulumi.BoolPtrInput
	PersistPrivateIp    pulumi.BoolPtrInput
	PersistRootDevice   pulumi.BoolPtrInput
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
	PlacementTenancy pulumi.StringPtrInput
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayInput
	PrivateIps                 pulumi.StringArrayInput
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringInput
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrInput
	// Required instance attributes. Instance types will be selected based on these requirements.
	ResourceRequirements ElastigroupResourceRequirementArrayInput
	// User will specify which resources should be tagged with group tags.
	ResourceTagSpecifications ElastigroupResourceTagSpecificationArrayInput
	// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
	RestrictSingleAz pulumi.BoolPtrInput
	// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrInput
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayInput
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayInput
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayInput
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayInput
	ScheduledTasks        ElastigroupScheduledTaskArrayInput
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayInput
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrInput
	Signals        ElastigroupSignalArrayInput
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage          pulumi.IntPtrInput
	StatefulDeallocation    ElastigroupStatefulDeallocationPtrInput
	StatefulInstanceActions ElastigroupStatefulInstanceActionArrayInput
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayInput
	TargetGroupArns pulumi.StringArrayInput
	UpdatePolicy    ElastigroupUpdatePolicyPtrInput
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrInput
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrInput
}

func (ElastigroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elastigroupArgs)(nil)).Elem()
}

type ElastigroupInput interface {
	pulumi.Input

	ToElastigroupOutput() ElastigroupOutput
	ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput
}

func (*Elastigroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Elastigroup)(nil)).Elem()
}

func (i *Elastigroup) ToElastigroupOutput() ElastigroupOutput {
	return i.ToElastigroupOutputWithContext(context.Background())
}

func (i *Elastigroup) ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElastigroupOutput)
}

// ElastigroupArrayInput is an input type that accepts ElastigroupArray and ElastigroupArrayOutput values.
// You can construct a concrete instance of `ElastigroupArrayInput` via:
//
//	ElastigroupArray{ ElastigroupArgs{...} }
type ElastigroupArrayInput interface {
	pulumi.Input

	ToElastigroupArrayOutput() ElastigroupArrayOutput
	ToElastigroupArrayOutputWithContext(context.Context) ElastigroupArrayOutput
}

type ElastigroupArray []ElastigroupInput

func (ElastigroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elastigroup)(nil)).Elem()
}

func (i ElastigroupArray) ToElastigroupArrayOutput() ElastigroupArrayOutput {
	return i.ToElastigroupArrayOutputWithContext(context.Background())
}

func (i ElastigroupArray) ToElastigroupArrayOutputWithContext(ctx context.Context) ElastigroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElastigroupArrayOutput)
}

// ElastigroupMapInput is an input type that accepts ElastigroupMap and ElastigroupMapOutput values.
// You can construct a concrete instance of `ElastigroupMapInput` via:
//
//	ElastigroupMap{ "key": ElastigroupArgs{...} }
type ElastigroupMapInput interface {
	pulumi.Input

	ToElastigroupMapOutput() ElastigroupMapOutput
	ToElastigroupMapOutputWithContext(context.Context) ElastigroupMapOutput
}

type ElastigroupMap map[string]ElastigroupInput

func (ElastigroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elastigroup)(nil)).Elem()
}

func (i ElastigroupMap) ToElastigroupMapOutput() ElastigroupMapOutput {
	return i.ToElastigroupMapOutputWithContext(context.Background())
}

func (i ElastigroupMap) ToElastigroupMapOutputWithContext(ctx context.Context) ElastigroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElastigroupMapOutput)
}

type ElastigroupOutput struct{ *pulumi.OutputState }

func (ElastigroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Elastigroup)(nil)).Elem()
}

func (o ElastigroupOutput) ToElastigroupOutput() ElastigroupOutput {
	return o
}

func (o ElastigroupOutput) ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput {
	return o
}

// Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
func (o ElastigroupOutput) AutoHealing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.AutoHealing }).(pulumi.BoolPtrOutput)
}

// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
func (o ElastigroupOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o ElastigroupOutput) BlockDevicesMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.BlockDevicesMode }).(pulumi.StringPtrOutput)
}

// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
func (o ElastigroupOutput) CapacityUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringOutput { return v.CapacityUnit }).(pulumi.StringOutput)
}

func (o ElastigroupOutput) ConsiderOdPricing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.ConsiderOdPricing }).(pulumi.BoolPtrOutput)
}

// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
func (o ElastigroupOutput) CpuCredits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.CpuCredits }).(pulumi.StringPtrOutput)
}

// The CPU options for the instances that are launched within the group:
func (o ElastigroupOutput) CpuOptions() ElastigroupCpuOptionsPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupCpuOptionsPtrOutput { return v.CpuOptions }).(ElastigroupCpuOptionsPtrOutput)
}

// The group description.
func (o ElastigroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The desired number of instances the group should have at any time.
func (o ElastigroupOutput) DesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.DesiredCapacity }).(pulumi.IntPtrOutput)
}

// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
func (o ElastigroupOutput) DrainingTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntOutput { return v.DrainingTimeout }).(pulumi.IntOutput)
}

func (o ElastigroupOutput) EbsBlockDevices() ElastigroupEbsBlockDeviceArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupEbsBlockDeviceArrayOutput { return v.EbsBlockDevices }).(ElastigroupEbsBlockDeviceArrayOutput)
}

// Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
func (o ElastigroupOutput) EbsOptimized() pulumi.BoolOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolOutput { return v.EbsOptimized }).(pulumi.BoolOutput)
}

// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
func (o ElastigroupOutput) ElasticIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.ElasticIps }).(pulumi.StringArrayOutput)
}

func (o ElastigroupOutput) ElasticLoadBalancers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.ElasticLoadBalancers }).(pulumi.StringArrayOutput)
}

// Indicates whether monitoring is enabled for the instance.
func (o ElastigroupOutput) EnableMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.EnableMonitoring }).(pulumi.BoolPtrOutput)
}

func (o ElastigroupOutput) EphemeralBlockDevices() ElastigroupEphemeralBlockDeviceArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupEphemeralBlockDeviceArrayOutput { return v.EphemeralBlockDevices }).(ElastigroupEphemeralBlockDeviceArrayOutput)
}

// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
func (o ElastigroupOutput) FallbackToOndemand() pulumi.BoolOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolOutput { return v.FallbackToOndemand }).(pulumi.BoolOutput)
}

// The amount of time, in seconds, after the instance has launched to starts and check its health.
func (o ElastigroupOutput) HealthCheckGracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.HealthCheckGracePeriod }).(pulumi.IntPtrOutput)
}

// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
func (o ElastigroupOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
func (o ElastigroupOutput) HealthCheckUnhealthyDurationBeforeReplacement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.HealthCheckUnhealthyDurationBeforeReplacement }).(pulumi.IntPtrOutput)
}

// The ARN or name of an IAM instance profile to associate with launched instances.
func (o ElastigroupOutput) IamInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.IamInstanceProfile }).(pulumi.StringPtrOutput)
}

// The ID of the AMI used to launch the instance.
func (o ElastigroupOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// An array of image objects.
// Note: Elastigroup can be configured with either imageId or images, but not both.
func (o ElastigroupOutput) Images() ElastigroupImageArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupImageArrayOutput { return v.Images }).(ElastigroupImageArrayOutput)
}

func (o ElastigroupOutput) ImmediateOdRecoverThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.ImmediateOdRecoverThreshold }).(pulumi.IntPtrOutput)
}

// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
func (o ElastigroupOutput) InstanceTypesOndemand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.InstanceTypesOndemand }).(pulumi.StringPtrOutput)
}

// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
func (o ElastigroupOutput) InstanceTypesPreferredSpots() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.InstanceTypesPreferredSpots }).(pulumi.StringArrayOutput)
}

// One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
func (o ElastigroupOutput) InstanceTypesSpots() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.InstanceTypesSpots }).(pulumi.StringArrayOutput)
}

// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
func (o ElastigroupOutput) InstanceTypesWeights() ElastigroupInstanceTypesWeightArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupInstanceTypesWeightArrayOutput { return v.InstanceTypesWeights }).(ElastigroupInstanceTypesWeightArrayOutput)
}

func (o ElastigroupOutput) IntegrationBeanstalk() ElastigroupIntegrationBeanstalkPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationBeanstalkPtrOutput { return v.IntegrationBeanstalk }).(ElastigroupIntegrationBeanstalkPtrOutput)
}

func (o ElastigroupOutput) IntegrationCodedeploy() ElastigroupIntegrationCodedeployPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationCodedeployPtrOutput { return v.IntegrationCodedeploy }).(ElastigroupIntegrationCodedeployPtrOutput)
}

func (o ElastigroupOutput) IntegrationDockerSwarm() ElastigroupIntegrationDockerSwarmPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationDockerSwarmPtrOutput { return v.IntegrationDockerSwarm }).(ElastigroupIntegrationDockerSwarmPtrOutput)
}

func (o ElastigroupOutput) IntegrationEcs() ElastigroupIntegrationEcsPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationEcsPtrOutput { return v.IntegrationEcs }).(ElastigroupIntegrationEcsPtrOutput)
}

func (o ElastigroupOutput) IntegrationGitlab() ElastigroupIntegrationGitlabPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationGitlabPtrOutput { return v.IntegrationGitlab }).(ElastigroupIntegrationGitlabPtrOutput)
}

func (o ElastigroupOutput) IntegrationKubernetes() ElastigroupIntegrationKubernetesPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationKubernetesPtrOutput { return v.IntegrationKubernetes }).(ElastigroupIntegrationKubernetesPtrOutput)
}

func (o ElastigroupOutput) IntegrationMesosphere() ElastigroupIntegrationMesospherePtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationMesospherePtrOutput { return v.IntegrationMesosphere }).(ElastigroupIntegrationMesospherePtrOutput)
}

func (o ElastigroupOutput) IntegrationNomad() ElastigroupIntegrationNomadPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationNomadPtrOutput { return v.IntegrationNomad }).(ElastigroupIntegrationNomadPtrOutput)
}

func (o ElastigroupOutput) IntegrationRancher() ElastigroupIntegrationRancherPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationRancherPtrOutput { return v.IntegrationRancher }).(ElastigroupIntegrationRancherPtrOutput)
}

func (o ElastigroupOutput) IntegrationRoute53() ElastigroupIntegrationRoute53PtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupIntegrationRoute53PtrOutput { return v.IntegrationRoute53 }).(ElastigroupIntegrationRoute53PtrOutput)
}

func (o ElastigroupOutput) Itfs() ElastigroupItfArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupItfArrayOutput { return v.Itfs }).(ElastigroupItfArrayOutput)
}

// The key name that should be used for the instance.
func (o ElastigroupOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.KeyName }).(pulumi.StringPtrOutput)
}

func (o ElastigroupOutput) LifetimePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.LifetimePeriod }).(pulumi.StringPtrOutput)
}

// Logging configuration.
func (o ElastigroupOutput) Logging() ElastigroupLoggingPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupLoggingPtrOutput { return v.Logging }).(ElastigroupLoggingPtrOutput)
}

// The maximum number of instances the group should have at any time.
func (o ElastigroupOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// Data that used to configure or manage the running instances:
func (o ElastigroupOutput) MetadataOptions() ElastigroupMetadataOptionsPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupMetadataOptionsPtrOutput { return v.MetadataOptions }).(ElastigroupMetadataOptionsPtrOutput)
}

// The minimum number of instances the group should have at any time.
func (o ElastigroupOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
func (o ElastigroupOutput) MinimumInstanceLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.MinimumInstanceLifetime }).(pulumi.IntPtrOutput)
}

func (o ElastigroupOutput) MultipleMetrics() ElastigroupMultipleMetricsPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupMultipleMetricsPtrOutput { return v.MultipleMetrics }).(ElastigroupMultipleMetricsPtrOutput)
}

// The group name.
func (o ElastigroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ElastigroupOutput) NetworkInterfaces() ElastigroupNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupNetworkInterfaceArrayOutput { return v.NetworkInterfaces }).(ElastigroupNetworkInterfaceArrayOutput)
}

// Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
func (o ElastigroupOutput) OnDemandTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.OnDemandTypes }).(pulumi.StringArrayOutput)
}

// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
func (o ElastigroupOutput) OndemandCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.OndemandCount }).(pulumi.IntPtrOutput)
}

// Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
func (o ElastigroupOutput) Orientation() pulumi.StringOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringOutput { return v.Orientation }).(pulumi.StringOutput)
}

func (o ElastigroupOutput) PersistBlockDevices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.PersistBlockDevices }).(pulumi.BoolPtrOutput)
}

func (o ElastigroupOutput) PersistPrivateIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.PersistPrivateIp }).(pulumi.BoolPtrOutput)
}

func (o ElastigroupOutput) PersistRootDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.PersistRootDevice }).(pulumi.BoolPtrOutput)
}

// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
func (o ElastigroupOutput) PlacementTenancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.PlacementTenancy }).(pulumi.StringPtrOutput)
}

// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
func (o ElastigroupOutput) PreferredAvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.PreferredAvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o ElastigroupOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
// For EC2 Classic instances: `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
func (o ElastigroupOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

// The AWS region your group will be created in.
// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
func (o ElastigroupOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Required instance attributes. Instance types will be selected based on these requirements.
func (o ElastigroupOutput) ResourceRequirements() ElastigroupResourceRequirementArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupResourceRequirementArrayOutput { return v.ResourceRequirements }).(ElastigroupResourceRequirementArrayOutput)
}

// User will specify which resources should be tagged with group tags.
func (o ElastigroupOutput) ResourceTagSpecifications() ElastigroupResourceTagSpecificationArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupResourceTagSpecificationArrayOutput {
		return v.ResourceTagSpecifications
	}).(ElastigroupResourceTagSpecificationArrayOutput)
}

// Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
func (o ElastigroupOutput) RestrictSingleAz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.RestrictSingleAz }).(pulumi.BoolPtrOutput)
}

// Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
func (o ElastigroupOutput) RevertToSpot() ElastigroupRevertToSpotPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupRevertToSpotPtrOutput { return v.RevertToSpot }).(ElastigroupRevertToSpotPtrOutput)
}

func (o ElastigroupOutput) ScalingDownPolicies() ElastigroupScalingDownPolicyArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupScalingDownPolicyArrayOutput { return v.ScalingDownPolicies }).(ElastigroupScalingDownPolicyArrayOutput)
}

// Set termination policy.
func (o ElastigroupOutput) ScalingStrategies() ElastigroupScalingStrategyArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupScalingStrategyArrayOutput { return v.ScalingStrategies }).(ElastigroupScalingStrategyArrayOutput)
}

func (o ElastigroupOutput) ScalingTargetPolicies() ElastigroupScalingTargetPolicyArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupScalingTargetPolicyArrayOutput { return v.ScalingTargetPolicies }).(ElastigroupScalingTargetPolicyArrayOutput)
}

func (o ElastigroupOutput) ScalingUpPolicies() ElastigroupScalingUpPolicyArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupScalingUpPolicyArrayOutput { return v.ScalingUpPolicies }).(ElastigroupScalingUpPolicyArrayOutput)
}

func (o ElastigroupOutput) ScheduledTasks() ElastigroupScheduledTaskArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupScheduledTaskArrayOutput { return v.ScheduledTasks }).(ElastigroupScheduledTaskArrayOutput)
}

// A list of associated security group IDS.
func (o ElastigroupOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
func (o ElastigroupOutput) ShutdownScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.ShutdownScript }).(pulumi.StringPtrOutput)
}

func (o ElastigroupOutput) Signals() ElastigroupSignalArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupSignalArrayOutput { return v.Signals }).(ElastigroupSignalArrayOutput)
}

// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
func (o ElastigroupOutput) SpotPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.SpotPercentage }).(pulumi.IntPtrOutput)
}

func (o ElastigroupOutput) StatefulDeallocation() ElastigroupStatefulDeallocationPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupStatefulDeallocationPtrOutput { return v.StatefulDeallocation }).(ElastigroupStatefulDeallocationPtrOutput)
}

func (o ElastigroupOutput) StatefulInstanceActions() ElastigroupStatefulInstanceActionArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupStatefulInstanceActionArrayOutput { return v.StatefulInstanceActions }).(ElastigroupStatefulInstanceActionArrayOutput)
}

// List of Strings of subnet identifiers.
// Note: When this parameter is set, `availabilityZones` should be left unused.
func (o ElastigroupOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// A key/value mapping of tags to assign to the resource.
func (o ElastigroupOutput) Tags() ElastigroupTagArrayOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupTagArrayOutput { return v.Tags }).(ElastigroupTagArrayOutput)
}

func (o ElastigroupOutput) TargetGroupArns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringArrayOutput { return v.TargetGroupArns }).(pulumi.StringArrayOutput)
}

func (o ElastigroupOutput) UpdatePolicy() ElastigroupUpdatePolicyPtrOutput {
	return o.ApplyT(func(v *Elastigroup) ElastigroupUpdatePolicyPtrOutput { return v.UpdatePolicy }).(ElastigroupUpdatePolicyPtrOutput)
}

// The user data to provide when launching the instance.
func (o ElastigroupOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

func (o ElastigroupOutput) UtilizeCommitments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.UtilizeCommitments }).(pulumi.BoolPtrOutput)
}

// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
func (o ElastigroupOutput) UtilizeReservedInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.BoolPtrOutput { return v.UtilizeReservedInstances }).(pulumi.BoolPtrOutput)
}

// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
func (o ElastigroupOutput) WaitForCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.WaitForCapacity }).(pulumi.IntPtrOutput)
}

// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
func (o ElastigroupOutput) WaitForCapacityTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Elastigroup) pulumi.IntPtrOutput { return v.WaitForCapacityTimeout }).(pulumi.IntPtrOutput)
}

type ElastigroupArrayOutput struct{ *pulumi.OutputState }

func (ElastigroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elastigroup)(nil)).Elem()
}

func (o ElastigroupArrayOutput) ToElastigroupArrayOutput() ElastigroupArrayOutput {
	return o
}

func (o ElastigroupArrayOutput) ToElastigroupArrayOutputWithContext(ctx context.Context) ElastigroupArrayOutput {
	return o
}

func (o ElastigroupArrayOutput) Index(i pulumi.IntInput) ElastigroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Elastigroup {
		return vs[0].([]*Elastigroup)[vs[1].(int)]
	}).(ElastigroupOutput)
}

type ElastigroupMapOutput struct{ *pulumi.OutputState }

func (ElastigroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elastigroup)(nil)).Elem()
}

func (o ElastigroupMapOutput) ToElastigroupMapOutput() ElastigroupMapOutput {
	return o
}

func (o ElastigroupMapOutput) ToElastigroupMapOutputWithContext(ctx context.Context) ElastigroupMapOutput {
	return o
}

func (o ElastigroupMapOutput) MapIndex(k pulumi.StringInput) ElastigroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Elastigroup {
		return vs[0].(map[string]*Elastigroup)[vs[1].(string)]
	}).(ElastigroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElastigroupInput)(nil)).Elem(), &Elastigroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElastigroupArrayInput)(nil)).Elem(), ElastigroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElastigroupMapInput)(nil)).Elem(), ElastigroupMap{})
	pulumi.RegisterOutputType(ElastigroupOutput{})
	pulumi.RegisterOutputType(ElastigroupArrayOutput{})
	pulumi.RegisterOutputType(ElastigroupMapOutput{})
}
