// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Elastigroup struct {
	pulumi.CustomResourceState

	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	BlockDevicesMode  pulumi.StringPtrOutput   `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit pulumi.StringOutput `pulumi:"capacityUnit"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrOutput `pulumi:"cpuCredits"`
	// The group description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrOutput `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntOutput                     `pulumi:"drainingTimeout"`
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayOutput `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolOutput `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayOutput `pulumi:"elasticIps"`
	ElasticLoadBalancers pulumi.StringArrayOutput `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrOutput                       `pulumi:"enableMonitoring"`
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayOutput `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolOutput `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrOutput `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrOutput `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringOutput `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayOutput `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types.
	InstanceTypesSpots pulumi.StringArrayOutput `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights     ElastigroupInstanceTypesWeightArrayOutput    `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk     ElastigroupIntegrationBeanstalkPtrOutput     `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy    ElastigroupIntegrationCodedeployPtrOutput    `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm   ElastigroupIntegrationDockerSwarmPtrOutput   `pulumi:"integrationDockerSwarm"`
	IntegrationEcs           ElastigroupIntegrationEcsPtrOutput           `pulumi:"integrationEcs"`
	IntegrationGitlab        ElastigroupIntegrationGitlabPtrOutput        `pulumi:"integrationGitlab"`
	IntegrationKubernetes    ElastigroupIntegrationKubernetesPtrOutput    `pulumi:"integrationKubernetes"`
	IntegrationMesosphere    ElastigroupIntegrationMesospherePtrOutput    `pulumi:"integrationMesosphere"`
	IntegrationMultaiRuntime ElastigroupIntegrationMultaiRuntimePtrOutput `pulumi:"integrationMultaiRuntime"`
	IntegrationNomad         ElastigroupIntegrationNomadPtrOutput         `pulumi:"integrationNomad"`
	IntegrationRancher       ElastigroupIntegrationRancherPtrOutput       `pulumi:"integrationRancher"`
	IntegrationRoute53       ElastigroupIntegrationRoute53PtrOutput       `pulumi:"integrationRoute53"`
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrOutput `pulumi:"keyName"`
	LifetimePeriod pulumi.StringPtrOutput `pulumi:"lifetimePeriod"`
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrOutput `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize          pulumi.IntOutput                      `pulumi:"minSize"`
	MultaiTargetSets ElastigroupMultaiTargetSetArrayOutput `pulumi:"multaiTargetSets"`
	// The group name.
	Name              pulumi.StringOutput                    `pulumi:"name"`
	NetworkInterfaces ElastigroupNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrOutput `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.
	Orientation         pulumi.StringOutput  `pulumi:"orientation"`
	PersistBlockDevices pulumi.BoolPtrOutput `pulumi:"persistBlockDevices"`
	PersistPrivateIp    pulumi.BoolPtrOutput `pulumi:"persistPrivateIp"`
	PersistRootDevice   pulumi.BoolPtrOutput `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy pulumi.StringPtrOutput `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayOutput `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 pulumi.StringArrayOutput `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringOutput `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrOutput        `pulumi:"revertToSpot"`
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayOutput `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayOutput     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayOutput `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayOutput     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        ElastigroupScheduledTaskArrayOutput       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrOutput       `pulumi:"shutdownScript"`
	Signals        ElastigroupSignalArrayOutput `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage       pulumi.IntPtrOutput                      `pulumi:"spotPercentage"`
	StatefulDeallocation ElastigroupStatefulDeallocationPtrOutput `pulumi:"statefulDeallocation"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayOutput        `pulumi:"tags"`
	TargetGroupArns pulumi.StringArrayOutput         `pulumi:"targetGroupArns"`
	UpdatePolicy    ElastigroupUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrOutput `pulumi:"userData"`
	UtilizeCommitments pulumi.BoolPtrOutput   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrOutput `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrOutput `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrOutput `pulumi:"waitForCapacityTimeout"`
}

// NewElastigroup registers a new resource with the given unique name, arguments, and options.
func NewElastigroup(ctx *pulumi.Context,
	name string, args *ElastigroupArgs, opts ...pulumi.ResourceOption) (*Elastigroup, error) {
	if args == nil || args.FallbackToOndemand == nil {
		return nil, errors.New("missing required argument 'FallbackToOndemand'")
	}
	if args == nil || args.InstanceTypesOndemand == nil {
		return nil, errors.New("missing required argument 'InstanceTypesOndemand'")
	}
	if args == nil || args.InstanceTypesSpots == nil {
		return nil, errors.New("missing required argument 'InstanceTypesSpots'")
	}
	if args == nil || args.Orientation == nil {
		return nil, errors.New("missing required argument 'Orientation'")
	}
	if args == nil || args.Product == nil {
		return nil, errors.New("missing required argument 'Product'")
	}
	if args == nil || args.SecurityGroups == nil {
		return nil, errors.New("missing required argument 'SecurityGroups'")
	}
	if args == nil {
		args = &ElastigroupArgs{}
	}
	var resource Elastigroup
	err := ctx.RegisterResource("spotinst:aws/elastigroup:Elastigroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElastigroup gets an existing Elastigroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElastigroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElastigroupState, opts ...pulumi.ResourceOption) (*Elastigroup, error) {
	var resource Elastigroup
	err := ctx.ReadResource("spotinst:aws/elastigroup:Elastigroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elastigroup resources.
type elastigroupState struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	BlockDevicesMode  *string  `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit *string `pulumi:"capacityUnit"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits *string `pulumi:"cpuCredits"`
	// The group description.
	Description *string `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int                        `pulumi:"drainingTimeout"`
	EbsBlockDevices []ElastigroupEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           []string `pulumi:"elasticIps"`
	ElasticLoadBalancers []string `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      *bool                             `pulumi:"enableMonitoring"`
	EphemeralBlockDevices []ElastigroupEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand *bool `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId *string `pulumi:"imageId"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand *string `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots []string `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types.
	InstanceTypesSpots []string `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights     []ElastigroupInstanceTypesWeight     `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk     *ElastigroupIntegrationBeanstalk     `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy    *ElastigroupIntegrationCodedeploy    `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm   *ElastigroupIntegrationDockerSwarm   `pulumi:"integrationDockerSwarm"`
	IntegrationEcs           *ElastigroupIntegrationEcs           `pulumi:"integrationEcs"`
	IntegrationGitlab        *ElastigroupIntegrationGitlab        `pulumi:"integrationGitlab"`
	IntegrationKubernetes    *ElastigroupIntegrationKubernetes    `pulumi:"integrationKubernetes"`
	IntegrationMesosphere    *ElastigroupIntegrationMesosphere    `pulumi:"integrationMesosphere"`
	IntegrationMultaiRuntime *ElastigroupIntegrationMultaiRuntime `pulumi:"integrationMultaiRuntime"`
	IntegrationNomad         *ElastigroupIntegrationNomad         `pulumi:"integrationNomad"`
	IntegrationRancher       *ElastigroupIntegrationRancher       `pulumi:"integrationRancher"`
	IntegrationRoute53       *ElastigroupIntegrationRoute53       `pulumi:"integrationRoute53"`
	// The key name that should be used for the instance.
	KeyName        *string `pulumi:"keyName"`
	LifetimePeriod *string `pulumi:"lifetimePeriod"`
	// The maximum number of instances the group should have at any time.
	MaxSize *int `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions *ElastigroupMetadataOptions `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize          *int                         `pulumi:"minSize"`
	MultaiTargetSets []ElastigroupMultaiTargetSet `pulumi:"multaiTargetSets"`
	// The group name.
	Name              *string                       `pulumi:"name"`
	NetworkInterfaces []ElastigroupNetworkInterface `pulumi:"networkInterfaces"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount *int `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.
	Orientation         *string `pulumi:"orientation"`
	PersistBlockDevices *bool   `pulumi:"persistBlockDevices"`
	PersistPrivateIp    *bool   `pulumi:"persistPrivateIp"`
	PersistRootDevice   *bool   `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 []string `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product *string `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region *string `pulumi:"region"`
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        *ElastigroupRevertToSpot       `pulumi:"revertToSpot"`
	ScalingDownPolicies []ElastigroupScalingDownPolicy `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     []ElastigroupScalingStrategy     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies []ElastigroupScalingTargetPolicy `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     []ElastigroupScalingUpPolicy     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        []ElastigroupScheduledTask       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript *string             `pulumi:"shutdownScript"`
	Signals        []ElastigroupSignal `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage       *int                             `pulumi:"spotPercentage"`
	StatefulDeallocation *ElastigroupStatefulDeallocation `pulumi:"statefulDeallocation"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            []ElastigroupTag         `pulumi:"tags"`
	TargetGroupArns []string                 `pulumi:"targetGroupArns"`
	UpdatePolicy    *ElastigroupUpdatePolicy `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity *int `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout *int `pulumi:"waitForCapacityTimeout"`
}

type ElastigroupState struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayInput
	BlockDevicesMode  pulumi.StringPtrInput
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit pulumi.StringPtrInput
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrInput
	// The group description.
	Description pulumi.StringPtrInput
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayInput
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayInput
	ElasticLoadBalancers pulumi.StringArrayInput
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrInput
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayInput
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrInput
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrInput
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringPtrInput
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayInput
	// One or more instance types.
	InstanceTypesSpots pulumi.StringArrayInput
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights     ElastigroupInstanceTypesWeightArrayInput
	IntegrationBeanstalk     ElastigroupIntegrationBeanstalkPtrInput
	IntegrationCodedeploy    ElastigroupIntegrationCodedeployPtrInput
	IntegrationDockerSwarm   ElastigroupIntegrationDockerSwarmPtrInput
	IntegrationEcs           ElastigroupIntegrationEcsPtrInput
	IntegrationGitlab        ElastigroupIntegrationGitlabPtrInput
	IntegrationKubernetes    ElastigroupIntegrationKubernetesPtrInput
	IntegrationMesosphere    ElastigroupIntegrationMesospherePtrInput
	IntegrationMultaiRuntime ElastigroupIntegrationMultaiRuntimePtrInput
	IntegrationNomad         ElastigroupIntegrationNomadPtrInput
	IntegrationRancher       ElastigroupIntegrationRancherPtrInput
	IntegrationRoute53       ElastigroupIntegrationRoute53PtrInput
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrInput
	LifetimePeriod pulumi.StringPtrInput
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntPtrInput
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrInput
	// The minimum number of instances the group should have at any time.
	MinSize          pulumi.IntPtrInput
	MultaiTargetSets ElastigroupMultaiTargetSetArrayInput
	// The group name.
	Name              pulumi.StringPtrInput
	NetworkInterfaces ElastigroupNetworkInterfaceArrayInput
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrInput
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.
	Orientation         pulumi.StringPtrInput
	PersistBlockDevices pulumi.BoolPtrInput
	PersistPrivateIp    pulumi.BoolPtrInput
	PersistRootDevice   pulumi.BoolPtrInput
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy pulumi.StringPtrInput
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayInput
	PrivateIps                 pulumi.StringArrayInput
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringPtrInput
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrInput
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrInput
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayInput
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayInput
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayInput
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayInput
	ScheduledTasks        ElastigroupScheduledTaskArrayInput
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayInput
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrInput
	Signals        ElastigroupSignalArrayInput
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage       pulumi.IntPtrInput
	StatefulDeallocation ElastigroupStatefulDeallocationPtrInput
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayInput
	TargetGroupArns pulumi.StringArrayInput
	UpdatePolicy    ElastigroupUpdatePolicyPtrInput
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrInput
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrInput
}

func (ElastigroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*elastigroupState)(nil)).Elem()
}

type elastigroupArgs struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	BlockDevicesMode  *string  `pulumi:"blockDevicesMode"`
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit *string `pulumi:"capacityUnit"`
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits *string `pulumi:"cpuCredits"`
	// The group description.
	Description *string `pulumi:"description"`
	// The desired number of instances the group should have at any time.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int                        `pulumi:"drainingTimeout"`
	EbsBlockDevices []ElastigroupEbsBlockDevice `pulumi:"ebsBlockDevices"`
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           []string `pulumi:"elasticIps"`
	ElasticLoadBalancers []string `pulumi:"elasticLoadBalancers"`
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      *bool                             `pulumi:"enableMonitoring"`
	EphemeralBlockDevices []ElastigroupEphemeralBlockDevice `pulumi:"ephemeralBlockDevices"`
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand bool `pulumi:"fallbackToOndemand"`
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod *int `pulumi:"healthCheckGracePeriod"`
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// The ID of the AMI used to launch the instance.
	ImageId *string `pulumi:"imageId"`
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand string `pulumi:"instanceTypesOndemand"`
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots []string `pulumi:"instanceTypesPreferredSpots"`
	// One or more instance types.
	InstanceTypesSpots []string `pulumi:"instanceTypesSpots"`
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights     []ElastigroupInstanceTypesWeight     `pulumi:"instanceTypesWeights"`
	IntegrationBeanstalk     *ElastigroupIntegrationBeanstalk     `pulumi:"integrationBeanstalk"`
	IntegrationCodedeploy    *ElastigroupIntegrationCodedeploy    `pulumi:"integrationCodedeploy"`
	IntegrationDockerSwarm   *ElastigroupIntegrationDockerSwarm   `pulumi:"integrationDockerSwarm"`
	IntegrationEcs           *ElastigroupIntegrationEcs           `pulumi:"integrationEcs"`
	IntegrationGitlab        *ElastigroupIntegrationGitlab        `pulumi:"integrationGitlab"`
	IntegrationKubernetes    *ElastigroupIntegrationKubernetes    `pulumi:"integrationKubernetes"`
	IntegrationMesosphere    *ElastigroupIntegrationMesosphere    `pulumi:"integrationMesosphere"`
	IntegrationMultaiRuntime *ElastigroupIntegrationMultaiRuntime `pulumi:"integrationMultaiRuntime"`
	IntegrationNomad         *ElastigroupIntegrationNomad         `pulumi:"integrationNomad"`
	IntegrationRancher       *ElastigroupIntegrationRancher       `pulumi:"integrationRancher"`
	IntegrationRoute53       *ElastigroupIntegrationRoute53       `pulumi:"integrationRoute53"`
	// The key name that should be used for the instance.
	KeyName        *string `pulumi:"keyName"`
	LifetimePeriod *string `pulumi:"lifetimePeriod"`
	// The maximum number of instances the group should have at any time.
	MaxSize *int `pulumi:"maxSize"`
	// Data that used to configure or manage the running instances:
	MetadataOptions *ElastigroupMetadataOptions `pulumi:"metadataOptions"`
	// The minimum number of instances the group should have at any time.
	MinSize          *int                         `pulumi:"minSize"`
	MultaiTargetSets []ElastigroupMultaiTargetSet `pulumi:"multaiTargetSets"`
	// The group name.
	Name              *string                       `pulumi:"name"`
	NetworkInterfaces []ElastigroupNetworkInterface `pulumi:"networkInterfaces"`
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount *int `pulumi:"ondemandCount"`
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.
	Orientation         string `pulumi:"orientation"`
	PersistBlockDevices *bool  `pulumi:"persistBlockDevices"`
	PersistPrivateIp    *bool  `pulumi:"persistPrivateIp"`
	PersistRootDevice   *bool  `pulumi:"persistRootDevice"`
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones []string `pulumi:"preferredAvailabilityZones"`
	PrivateIps                 []string `pulumi:"privateIps"`
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product string `pulumi:"product"`
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region *string `pulumi:"region"`
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        *ElastigroupRevertToSpot       `pulumi:"revertToSpot"`
	ScalingDownPolicies []ElastigroupScalingDownPolicy `pulumi:"scalingDownPolicies"`
	// Set termination policy.
	ScalingStrategies     []ElastigroupScalingStrategy     `pulumi:"scalingStrategies"`
	ScalingTargetPolicies []ElastigroupScalingTargetPolicy `pulumi:"scalingTargetPolicies"`
	ScalingUpPolicies     []ElastigroupScalingUpPolicy     `pulumi:"scalingUpPolicies"`
	ScheduledTasks        []ElastigroupScheduledTask       `pulumi:"scheduledTasks"`
	// A list of associated security group IDS.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript *string             `pulumi:"shutdownScript"`
	Signals        []ElastigroupSignal `pulumi:"signals"`
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage       *int                             `pulumi:"spotPercentage"`
	StatefulDeallocation *ElastigroupStatefulDeallocation `pulumi:"statefulDeallocation"`
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds []string `pulumi:"subnetIds"`
	// A key/value mapping of tags to assign to the resource.
	Tags            []ElastigroupTag         `pulumi:"tags"`
	TargetGroupArns []string                 `pulumi:"targetGroupArns"`
	UpdatePolicy    *ElastigroupUpdatePolicy `pulumi:"updatePolicy"`
	// The user data to provide when launching the instance.
	UserData           *string `pulumi:"userData"`
	UtilizeCommitments *bool   `pulumi:"utilizeCommitments"`
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity *int `pulumi:"waitForCapacity"`
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout *int `pulumi:"waitForCapacityTimeout"`
}

// The set of arguments for constructing a Elastigroup resource.
type ElastigroupArgs struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones pulumi.StringArrayInput
	BlockDevicesMode  pulumi.StringPtrInput
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit pulumi.StringPtrInput
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits pulumi.StringPtrInput
	// The group description.
	Description pulumi.StringPtrInput
	// The desired number of instances the group should have at any time.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	EbsBlockDevices ElastigroupEbsBlockDeviceArrayInput
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps           pulumi.StringArrayInput
	ElasticLoadBalancers pulumi.StringArrayInput
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring      pulumi.BoolPtrInput
	EphemeralBlockDevices ElastigroupEphemeralBlockDeviceArrayInput
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand pulumi.BoolInput
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod pulumi.IntPtrInput
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType pulumi.StringPtrInput
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile pulumi.StringPtrInput
	// The ID of the AMI used to launch the instance.
	ImageId pulumi.StringPtrInput
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand pulumi.StringInput
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots pulumi.StringArrayInput
	// One or more instance types.
	InstanceTypesSpots pulumi.StringArrayInput
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights     ElastigroupInstanceTypesWeightArrayInput
	IntegrationBeanstalk     ElastigroupIntegrationBeanstalkPtrInput
	IntegrationCodedeploy    ElastigroupIntegrationCodedeployPtrInput
	IntegrationDockerSwarm   ElastigroupIntegrationDockerSwarmPtrInput
	IntegrationEcs           ElastigroupIntegrationEcsPtrInput
	IntegrationGitlab        ElastigroupIntegrationGitlabPtrInput
	IntegrationKubernetes    ElastigroupIntegrationKubernetesPtrInput
	IntegrationMesosphere    ElastigroupIntegrationMesospherePtrInput
	IntegrationMultaiRuntime ElastigroupIntegrationMultaiRuntimePtrInput
	IntegrationNomad         ElastigroupIntegrationNomadPtrInput
	IntegrationRancher       ElastigroupIntegrationRancherPtrInput
	IntegrationRoute53       ElastigroupIntegrationRoute53PtrInput
	// The key name that should be used for the instance.
	KeyName        pulumi.StringPtrInput
	LifetimePeriod pulumi.StringPtrInput
	// The maximum number of instances the group should have at any time.
	MaxSize pulumi.IntPtrInput
	// Data that used to configure or manage the running instances:
	MetadataOptions ElastigroupMetadataOptionsPtrInput
	// The minimum number of instances the group should have at any time.
	MinSize          pulumi.IntPtrInput
	MultaiTargetSets ElastigroupMultaiTargetSetArrayInput
	// The group name.
	Name              pulumi.StringPtrInput
	NetworkInterfaces ElastigroupNetworkInterfaceArrayInput
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount pulumi.IntPtrInput
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.
	Orientation         pulumi.StringInput
	PersistBlockDevices pulumi.BoolPtrInput
	PersistPrivateIp    pulumi.BoolPtrInput
	PersistRootDevice   pulumi.BoolPtrInput
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy pulumi.StringPtrInput
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones pulumi.StringArrayInput
	PrivateIps                 pulumi.StringArrayInput
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product pulumi.StringInput
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region pulumi.StringPtrInput
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot        ElastigroupRevertToSpotPtrInput
	ScalingDownPolicies ElastigroupScalingDownPolicyArrayInput
	// Set termination policy.
	ScalingStrategies     ElastigroupScalingStrategyArrayInput
	ScalingTargetPolicies ElastigroupScalingTargetPolicyArrayInput
	ScalingUpPolicies     ElastigroupScalingUpPolicyArrayInput
	ScheduledTasks        ElastigroupScheduledTaskArrayInput
	// A list of associated security group IDS.
	SecurityGroups pulumi.StringArrayInput
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript pulumi.StringPtrInput
	Signals        ElastigroupSignalArrayInput
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage       pulumi.IntPtrInput
	StatefulDeallocation ElastigroupStatefulDeallocationPtrInput
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds pulumi.StringArrayInput
	// A key/value mapping of tags to assign to the resource.
	Tags            ElastigroupTagArrayInput
	TargetGroupArns pulumi.StringArrayInput
	UpdatePolicy    ElastigroupUpdatePolicyPtrInput
	// The user data to provide when launching the instance.
	UserData           pulumi.StringPtrInput
	UtilizeCommitments pulumi.BoolPtrInput
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity pulumi.IntPtrInput
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
	WaitForCapacityTimeout pulumi.IntPtrInput
}

func (ElastigroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elastigroupArgs)(nil)).Elem()
}

type ElastigroupInput interface {
	pulumi.Input

	ToElastigroupOutput() ElastigroupOutput
	ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput
}

func (Elastigroup) ElementType() reflect.Type {
	return reflect.TypeOf((*Elastigroup)(nil)).Elem()
}

func (i Elastigroup) ToElastigroupOutput() ElastigroupOutput {
	return i.ToElastigroupOutputWithContext(context.Background())
}

func (i Elastigroup) ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElastigroupOutput)
}

type ElastigroupOutput struct {
	*pulumi.OutputState
}

func (ElastigroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElastigroupOutput)(nil)).Elem()
}

func (o ElastigroupOutput) ToElastigroupOutput() ElastigroupOutput {
	return o
}

func (o ElastigroupOutput) ToElastigroupOutputWithContext(ctx context.Context) ElastigroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ElastigroupOutput{})
}
