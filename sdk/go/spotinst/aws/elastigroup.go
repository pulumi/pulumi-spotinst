// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst AWS group resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/elastigroup_aws.html.markdown.
type Elastigroup struct {
	s *pulumi.ResourceState
}

// NewElastigroup registers a new resource with the given unique name, arguments, and options.
func NewElastigroup(ctx *pulumi.Context,
	name string, args *ElastigroupArgs, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	if args == nil || args.FallbackToOndemand == nil {
		return nil, errors.New("missing required argument 'FallbackToOndemand'")
	}
	if args == nil || args.InstanceTypesOndemand == nil {
		return nil, errors.New("missing required argument 'InstanceTypesOndemand'")
	}
	if args == nil || args.InstanceTypesSpots == nil {
		return nil, errors.New("missing required argument 'InstanceTypesSpots'")
	}
	if args == nil || args.Orientation == nil {
		return nil, errors.New("missing required argument 'Orientation'")
	}
	if args == nil || args.Product == nil {
		return nil, errors.New("missing required argument 'Product'")
	}
	if args == nil || args.SecurityGroups == nil {
		return nil, errors.New("missing required argument 'SecurityGroups'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZones"] = nil
		inputs["blockDevicesMode"] = nil
		inputs["capacityUnit"] = nil
		inputs["cpuCredits"] = nil
		inputs["description"] = nil
		inputs["desiredCapacity"] = nil
		inputs["drainingTimeout"] = nil
		inputs["ebsBlockDevices"] = nil
		inputs["ebsOptimized"] = nil
		inputs["elasticIps"] = nil
		inputs["elasticLoadBalancers"] = nil
		inputs["enableMonitoring"] = nil
		inputs["ephemeralBlockDevices"] = nil
		inputs["fallbackToOndemand"] = nil
		inputs["healthCheckGracePeriod"] = nil
		inputs["healthCheckType"] = nil
		inputs["healthCheckUnhealthyDurationBeforeReplacement"] = nil
		inputs["iamInstanceProfile"] = nil
		inputs["imageId"] = nil
		inputs["instanceTypesOndemand"] = nil
		inputs["instanceTypesPreferredSpots"] = nil
		inputs["instanceTypesSpots"] = nil
		inputs["instanceTypesWeights"] = nil
		inputs["integrationBeanstalk"] = nil
		inputs["integrationCodedeploy"] = nil
		inputs["integrationDockerSwarm"] = nil
		inputs["integrationEcs"] = nil
		inputs["integrationGitlab"] = nil
		inputs["integrationKubernetes"] = nil
		inputs["integrationMesosphere"] = nil
		inputs["integrationMultaiRuntime"] = nil
		inputs["integrationNomad"] = nil
		inputs["integrationRancher"] = nil
		inputs["integrationRoute53"] = nil
		inputs["keyName"] = nil
		inputs["lifetimePeriod"] = nil
		inputs["maxSize"] = nil
		inputs["minSize"] = nil
		inputs["multaiTargetSets"] = nil
		inputs["name"] = nil
		inputs["networkInterfaces"] = nil
		inputs["ondemandCount"] = nil
		inputs["orientation"] = nil
		inputs["persistBlockDevices"] = nil
		inputs["persistPrivateIp"] = nil
		inputs["persistRootDevice"] = nil
		inputs["placementTenancy"] = nil
		inputs["preferredAvailabilityZones"] = nil
		inputs["privateIps"] = nil
		inputs["product"] = nil
		inputs["region"] = nil
		inputs["revertToSpot"] = nil
		inputs["scalingDownPolicies"] = nil
		inputs["scalingStrategies"] = nil
		inputs["scalingTargetPolicies"] = nil
		inputs["scalingUpPolicies"] = nil
		inputs["scheduledTasks"] = nil
		inputs["securityGroups"] = nil
		inputs["shutdownScript"] = nil
		inputs["signals"] = nil
		inputs["spotPercentage"] = nil
		inputs["statefulDeallocation"] = nil
		inputs["subnetIds"] = nil
		inputs["tags"] = nil
		inputs["targetGroupArns"] = nil
		inputs["updatePolicy"] = nil
		inputs["userData"] = nil
		inputs["utilizeReservedInstances"] = nil
		inputs["waitForCapacity"] = nil
		inputs["waitForCapacityTimeout"] = nil
	} else {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["blockDevicesMode"] = args.BlockDevicesMode
		inputs["capacityUnit"] = args.CapacityUnit
		inputs["cpuCredits"] = args.CpuCredits
		inputs["description"] = args.Description
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["drainingTimeout"] = args.DrainingTimeout
		inputs["ebsBlockDevices"] = args.EbsBlockDevices
		inputs["ebsOptimized"] = args.EbsOptimized
		inputs["elasticIps"] = args.ElasticIps
		inputs["elasticLoadBalancers"] = args.ElasticLoadBalancers
		inputs["enableMonitoring"] = args.EnableMonitoring
		inputs["ephemeralBlockDevices"] = args.EphemeralBlockDevices
		inputs["fallbackToOndemand"] = args.FallbackToOndemand
		inputs["healthCheckGracePeriod"] = args.HealthCheckGracePeriod
		inputs["healthCheckType"] = args.HealthCheckType
		inputs["healthCheckUnhealthyDurationBeforeReplacement"] = args.HealthCheckUnhealthyDurationBeforeReplacement
		inputs["iamInstanceProfile"] = args.IamInstanceProfile
		inputs["imageId"] = args.ImageId
		inputs["instanceTypesOndemand"] = args.InstanceTypesOndemand
		inputs["instanceTypesPreferredSpots"] = args.InstanceTypesPreferredSpots
		inputs["instanceTypesSpots"] = args.InstanceTypesSpots
		inputs["instanceTypesWeights"] = args.InstanceTypesWeights
		inputs["integrationBeanstalk"] = args.IntegrationBeanstalk
		inputs["integrationCodedeploy"] = args.IntegrationCodedeploy
		inputs["integrationDockerSwarm"] = args.IntegrationDockerSwarm
		inputs["integrationEcs"] = args.IntegrationEcs
		inputs["integrationGitlab"] = args.IntegrationGitlab
		inputs["integrationKubernetes"] = args.IntegrationKubernetes
		inputs["integrationMesosphere"] = args.IntegrationMesosphere
		inputs["integrationMultaiRuntime"] = args.IntegrationMultaiRuntime
		inputs["integrationNomad"] = args.IntegrationNomad
		inputs["integrationRancher"] = args.IntegrationRancher
		inputs["integrationRoute53"] = args.IntegrationRoute53
		inputs["keyName"] = args.KeyName
		inputs["lifetimePeriod"] = args.LifetimePeriod
		inputs["maxSize"] = args.MaxSize
		inputs["minSize"] = args.MinSize
		inputs["multaiTargetSets"] = args.MultaiTargetSets
		inputs["name"] = args.Name
		inputs["networkInterfaces"] = args.NetworkInterfaces
		inputs["ondemandCount"] = args.OndemandCount
		inputs["orientation"] = args.Orientation
		inputs["persistBlockDevices"] = args.PersistBlockDevices
		inputs["persistPrivateIp"] = args.PersistPrivateIp
		inputs["persistRootDevice"] = args.PersistRootDevice
		inputs["placementTenancy"] = args.PlacementTenancy
		inputs["preferredAvailabilityZones"] = args.PreferredAvailabilityZones
		inputs["privateIps"] = args.PrivateIps
		inputs["product"] = args.Product
		inputs["region"] = args.Region
		inputs["revertToSpot"] = args.RevertToSpot
		inputs["scalingDownPolicies"] = args.ScalingDownPolicies
		inputs["scalingStrategies"] = args.ScalingStrategies
		inputs["scalingTargetPolicies"] = args.ScalingTargetPolicies
		inputs["scalingUpPolicies"] = args.ScalingUpPolicies
		inputs["scheduledTasks"] = args.ScheduledTasks
		inputs["securityGroups"] = args.SecurityGroups
		inputs["shutdownScript"] = args.ShutdownScript
		inputs["signals"] = args.Signals
		inputs["spotPercentage"] = args.SpotPercentage
		inputs["statefulDeallocation"] = args.StatefulDeallocation
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
		inputs["targetGroupArns"] = args.TargetGroupArns
		inputs["updatePolicy"] = args.UpdatePolicy
		inputs["userData"] = args.UserData
		inputs["utilizeReservedInstances"] = args.UtilizeReservedInstances
		inputs["waitForCapacity"] = args.WaitForCapacity
		inputs["waitForCapacityTimeout"] = args.WaitForCapacityTimeout
	}
	s, err := ctx.RegisterResource("spotinst:aws/elastigroup:Elastigroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// GetElastigroup gets an existing Elastigroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElastigroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ElastigroupState, opts ...pulumi.ResourceOpt) (*Elastigroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["blockDevicesMode"] = state.BlockDevicesMode
		inputs["capacityUnit"] = state.CapacityUnit
		inputs["cpuCredits"] = state.CpuCredits
		inputs["description"] = state.Description
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["drainingTimeout"] = state.DrainingTimeout
		inputs["ebsBlockDevices"] = state.EbsBlockDevices
		inputs["ebsOptimized"] = state.EbsOptimized
		inputs["elasticIps"] = state.ElasticIps
		inputs["elasticLoadBalancers"] = state.ElasticLoadBalancers
		inputs["enableMonitoring"] = state.EnableMonitoring
		inputs["ephemeralBlockDevices"] = state.EphemeralBlockDevices
		inputs["fallbackToOndemand"] = state.FallbackToOndemand
		inputs["healthCheckGracePeriod"] = state.HealthCheckGracePeriod
		inputs["healthCheckType"] = state.HealthCheckType
		inputs["healthCheckUnhealthyDurationBeforeReplacement"] = state.HealthCheckUnhealthyDurationBeforeReplacement
		inputs["iamInstanceProfile"] = state.IamInstanceProfile
		inputs["imageId"] = state.ImageId
		inputs["instanceTypesOndemand"] = state.InstanceTypesOndemand
		inputs["instanceTypesPreferredSpots"] = state.InstanceTypesPreferredSpots
		inputs["instanceTypesSpots"] = state.InstanceTypesSpots
		inputs["instanceTypesWeights"] = state.InstanceTypesWeights
		inputs["integrationBeanstalk"] = state.IntegrationBeanstalk
		inputs["integrationCodedeploy"] = state.IntegrationCodedeploy
		inputs["integrationDockerSwarm"] = state.IntegrationDockerSwarm
		inputs["integrationEcs"] = state.IntegrationEcs
		inputs["integrationGitlab"] = state.IntegrationGitlab
		inputs["integrationKubernetes"] = state.IntegrationKubernetes
		inputs["integrationMesosphere"] = state.IntegrationMesosphere
		inputs["integrationMultaiRuntime"] = state.IntegrationMultaiRuntime
		inputs["integrationNomad"] = state.IntegrationNomad
		inputs["integrationRancher"] = state.IntegrationRancher
		inputs["integrationRoute53"] = state.IntegrationRoute53
		inputs["keyName"] = state.KeyName
		inputs["lifetimePeriod"] = state.LifetimePeriod
		inputs["maxSize"] = state.MaxSize
		inputs["minSize"] = state.MinSize
		inputs["multaiTargetSets"] = state.MultaiTargetSets
		inputs["name"] = state.Name
		inputs["networkInterfaces"] = state.NetworkInterfaces
		inputs["ondemandCount"] = state.OndemandCount
		inputs["orientation"] = state.Orientation
		inputs["persistBlockDevices"] = state.PersistBlockDevices
		inputs["persistPrivateIp"] = state.PersistPrivateIp
		inputs["persistRootDevice"] = state.PersistRootDevice
		inputs["placementTenancy"] = state.PlacementTenancy
		inputs["preferredAvailabilityZones"] = state.PreferredAvailabilityZones
		inputs["privateIps"] = state.PrivateIps
		inputs["product"] = state.Product
		inputs["region"] = state.Region
		inputs["revertToSpot"] = state.RevertToSpot
		inputs["scalingDownPolicies"] = state.ScalingDownPolicies
		inputs["scalingStrategies"] = state.ScalingStrategies
		inputs["scalingTargetPolicies"] = state.ScalingTargetPolicies
		inputs["scalingUpPolicies"] = state.ScalingUpPolicies
		inputs["scheduledTasks"] = state.ScheduledTasks
		inputs["securityGroups"] = state.SecurityGroups
		inputs["shutdownScript"] = state.ShutdownScript
		inputs["signals"] = state.Signals
		inputs["spotPercentage"] = state.SpotPercentage
		inputs["statefulDeallocation"] = state.StatefulDeallocation
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["targetGroupArns"] = state.TargetGroupArns
		inputs["updatePolicy"] = state.UpdatePolicy
		inputs["userData"] = state.UserData
		inputs["utilizeReservedInstances"] = state.UtilizeReservedInstances
		inputs["waitForCapacity"] = state.WaitForCapacity
		inputs["waitForCapacityTimeout"] = state.WaitForCapacityTimeout
	}
	s, err := ctx.ReadResource("spotinst:aws/elastigroup:Elastigroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Elastigroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Elastigroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Elastigroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
func (r *Elastigroup) AvailabilityZones() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["availabilityZones"])
}

func (r *Elastigroup) BlockDevicesMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["blockDevicesMode"])
}

// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
func (r *Elastigroup) CapacityUnit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["capacityUnit"])
}

// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
func (r *Elastigroup) CpuCredits() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cpuCredits"])
}

// The group description.
func (r *Elastigroup) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The desired number of instances the group should have at any time.
func (r *Elastigroup) DesiredCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["desiredCapacity"])
}

// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
func (r *Elastigroup) DrainingTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["drainingTimeout"])
}

func (r *Elastigroup) EbsBlockDevices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ebsBlockDevices"])
}

// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
func (r *Elastigroup) EbsOptimized() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ebsOptimized"])
}

// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
func (r *Elastigroup) ElasticIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["elasticIps"])
}

func (r *Elastigroup) ElasticLoadBalancers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["elasticLoadBalancers"])
}

// Indicates whether monitoring is enabled for the instance.
func (r *Elastigroup) EnableMonitoring() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableMonitoring"])
}

func (r *Elastigroup) EphemeralBlockDevices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ephemeralBlockDevices"])
}

// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
func (r *Elastigroup) FallbackToOndemand() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["fallbackToOndemand"])
}

// The amount of time, in seconds, after the instance has launched to starts and check its health.
func (r *Elastigroup) HealthCheckGracePeriod() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthCheckGracePeriod"])
}

// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
func (r *Elastigroup) HealthCheckType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["healthCheckType"])
}

// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
func (r *Elastigroup) HealthCheckUnhealthyDurationBeforeReplacement() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthCheckUnhealthyDurationBeforeReplacement"])
}

// The ARN or name of an IAM instance profile to associate with launched instances.
func (r *Elastigroup) IamInstanceProfile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iamInstanceProfile"])
}

// The ID of the AMI used to launch the instance.
func (r *Elastigroup) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
func (r *Elastigroup) InstanceTypesOndemand() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instanceTypesOndemand"])
}

// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
func (r *Elastigroup) InstanceTypesPreferredSpots() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceTypesPreferredSpots"])
}

// One or more instance types.
func (r *Elastigroup) InstanceTypesSpots() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceTypesSpots"])
}

// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
func (r *Elastigroup) InstanceTypesWeights() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["instanceTypesWeights"])
}

func (r *Elastigroup) IntegrationBeanstalk() *pulumi.Output {
	return r.s.State["integrationBeanstalk"]
}

func (r *Elastigroup) IntegrationCodedeploy() *pulumi.Output {
	return r.s.State["integrationCodedeploy"]
}

func (r *Elastigroup) IntegrationDockerSwarm() *pulumi.Output {
	return r.s.State["integrationDockerSwarm"]
}

func (r *Elastigroup) IntegrationEcs() *pulumi.Output {
	return r.s.State["integrationEcs"]
}

func (r *Elastigroup) IntegrationGitlab() *pulumi.Output {
	return r.s.State["integrationGitlab"]
}

func (r *Elastigroup) IntegrationKubernetes() *pulumi.Output {
	return r.s.State["integrationKubernetes"]
}

func (r *Elastigroup) IntegrationMesosphere() *pulumi.Output {
	return r.s.State["integrationMesosphere"]
}

func (r *Elastigroup) IntegrationMultaiRuntime() *pulumi.Output {
	return r.s.State["integrationMultaiRuntime"]
}

func (r *Elastigroup) IntegrationNomad() *pulumi.Output {
	return r.s.State["integrationNomad"]
}

func (r *Elastigroup) IntegrationRancher() *pulumi.Output {
	return r.s.State["integrationRancher"]
}

func (r *Elastigroup) IntegrationRoute53() *pulumi.Output {
	return r.s.State["integrationRoute53"]
}

// The key name that should be used for the instance.
func (r *Elastigroup) KeyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keyName"])
}

func (r *Elastigroup) LifetimePeriod() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lifetimePeriod"])
}

// The maximum number of instances the group should have at any time.
func (r *Elastigroup) MaxSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxSize"])
}

// The minimum number of instances the group should have at any time.
func (r *Elastigroup) MinSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minSize"])
}

func (r *Elastigroup) MultaiTargetSets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["multaiTargetSets"])
}

// The group name.
func (r *Elastigroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Elastigroup) NetworkInterfaces() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networkInterfaces"])
}

// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
func (r *Elastigroup) OndemandCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ondemandCount"])
}

// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.    
func (r *Elastigroup) Orientation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["orientation"])
}

func (r *Elastigroup) PersistBlockDevices() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["persistBlockDevices"])
}

func (r *Elastigroup) PersistPrivateIp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["persistPrivateIp"])
}

func (r *Elastigroup) PersistRootDevice() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["persistRootDevice"])
}

// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
func (r *Elastigroup) PlacementTenancy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["placementTenancy"])
}

// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs. 
// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
func (r *Elastigroup) PreferredAvailabilityZones() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["preferredAvailabilityZones"])
}

func (r *Elastigroup) PrivateIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["privateIps"])
}

// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`. 
// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
func (r *Elastigroup) Product() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["product"])
}

// The AWS region your group will be created in.
// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
func (r *Elastigroup) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
func (r *Elastigroup) RevertToSpot() *pulumi.Output {
	return r.s.State["revertToSpot"]
}

func (r *Elastigroup) ScalingDownPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingDownPolicies"])
}

// Set termination policy.
func (r *Elastigroup) ScalingStrategies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingStrategies"])
}

func (r *Elastigroup) ScalingTargetPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingTargetPolicies"])
}

func (r *Elastigroup) ScalingUpPolicies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scalingUpPolicies"])
}

func (r *Elastigroup) ScheduledTasks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["scheduledTasks"])
}

// A list of associated security group IDS.
func (r *Elastigroup) SecurityGroups() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["securityGroups"])
}

// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
func (r *Elastigroup) ShutdownScript() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["shutdownScript"])
}

func (r *Elastigroup) Signals() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["signals"])
}

// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
func (r *Elastigroup) SpotPercentage() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["spotPercentage"])
}

func (r *Elastigroup) StatefulDeallocation() *pulumi.Output {
	return r.s.State["statefulDeallocation"]
}

// List of Strings of subnet identifiers.
// Note: When this parameter is set, `availabilityZones` should be left unused.
func (r *Elastigroup) SubnetIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnetIds"])
}

// A key/value mapping of tags to assign to the resource.
func (r *Elastigroup) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

func (r *Elastigroup) TargetGroupArns() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetGroupArns"])
}

func (r *Elastigroup) UpdatePolicy() *pulumi.Output {
	return r.s.State["updatePolicy"]
}

// The user data to provide when launching the instance.
func (r *Elastigroup) UserData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userData"])
}

// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
func (r *Elastigroup) UtilizeReservedInstances() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["utilizeReservedInstances"])
}

// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
func (r *Elastigroup) WaitForCapacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["waitForCapacity"])
}

// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment. 
func (r *Elastigroup) WaitForCapacityTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["waitForCapacityTimeout"])
}

// Input properties used for looking up and filtering Elastigroup resources.
type ElastigroupState struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones interface{}
	BlockDevicesMode interface{}
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit interface{}
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits interface{}
	// The group description.
	Description interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout interface{}
	EbsBlockDevices interface{}
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized interface{}
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps interface{}
	ElasticLoadBalancers interface{}
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring interface{}
	EphemeralBlockDevices interface{}
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand interface{}
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod interface{}
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType interface{}
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement interface{}
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{}
	// The ID of the AMI used to launch the instance.
	ImageId interface{}
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand interface{}
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots interface{}
	// One or more instance types.
	InstanceTypesSpots interface{}
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights interface{}
	IntegrationBeanstalk interface{}
	IntegrationCodedeploy interface{}
	IntegrationDockerSwarm interface{}
	IntegrationEcs interface{}
	IntegrationGitlab interface{}
	IntegrationKubernetes interface{}
	IntegrationMesosphere interface{}
	IntegrationMultaiRuntime interface{}
	IntegrationNomad interface{}
	IntegrationRancher interface{}
	IntegrationRoute53 interface{}
	// The key name that should be used for the instance.
	KeyName interface{}
	LifetimePeriod interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	MultaiTargetSets interface{}
	// The group name.
	Name interface{}
	NetworkInterfaces interface{}
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount interface{}
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.    
	Orientation interface{}
	PersistBlockDevices interface{}
	PersistPrivateIp interface{}
	PersistRootDevice interface{}
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy interface{}
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs. 
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones interface{}
	PrivateIps interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`. 
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product interface{}
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region interface{}
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot interface{}
	ScalingDownPolicies interface{}
	// Set termination policy.
	ScalingStrategies interface{}
	ScalingTargetPolicies interface{}
	ScalingUpPolicies interface{}
	ScheduledTasks interface{}
	// A list of associated security group IDS.
	SecurityGroups interface{}
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript interface{}
	Signals interface{}
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage interface{}
	StatefulDeallocation interface{}
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds interface{}
	// A key/value mapping of tags to assign to the resource.
	Tags interface{}
	TargetGroupArns interface{}
	UpdatePolicy interface{}
	// The user data to provide when launching the instance.
	UserData interface{}
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances interface{}
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity interface{}
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment. 
	WaitForCapacityTimeout interface{}
}

// The set of arguments for constructing a Elastigroup resource.
type ElastigroupArgs struct {
	// List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
	// Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
	// `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
	AvailabilityZones interface{}
	BlockDevicesMode interface{}
	// The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs.
	CapacityUnit interface{}
	// Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
	CpuCredits interface{}
	// The group description.
	Description interface{}
	// The desired number of instances the group should have at any time.
	DesiredCapacity interface{}
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout interface{}
	EbsBlockDevices interface{}
	// Enable high bandwidth connectivity between instances and AWS’s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
	EbsOptimized interface{}
	// A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
	ElasticIps interface{}
	ElasticLoadBalancers interface{}
	// Indicates whether monitoring is enabled for the instance.
	EnableMonitoring interface{}
	EphemeralBlockDevices interface{}
	// In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
	FallbackToOndemand interface{}
	// The amount of time, in seconds, after the instance has launched to starts and check its health.
	HealthCheckGracePeriod interface{}
	// The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"MLB"`, `"EC2"`, `"MULTAI_TARGET_SET"`, `"MLB_RUNTIME"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
	HealthCheckType interface{}
	// The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
	HealthCheckUnhealthyDurationBeforeReplacement interface{}
	// The ARN or name of an IAM instance profile to associate with launched instances.
	IamInstanceProfile interface{}
	// The ID of the AMI used to launch the instance.
	ImageId interface{}
	// The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
	InstanceTypesOndemand interface{}
	// Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
	InstanceTypesPreferredSpots interface{}
	// One or more instance types.
	InstanceTypesSpots interface{}
	// List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
	InstanceTypesWeights interface{}
	IntegrationBeanstalk interface{}
	IntegrationCodedeploy interface{}
	IntegrationDockerSwarm interface{}
	IntegrationEcs interface{}
	IntegrationGitlab interface{}
	IntegrationKubernetes interface{}
	IntegrationMesosphere interface{}
	IntegrationMultaiRuntime interface{}
	IntegrationNomad interface{}
	IntegrationRancher interface{}
	IntegrationRoute53 interface{}
	// The key name that should be used for the instance.
	KeyName interface{}
	LifetimePeriod interface{}
	// The maximum number of instances the group should have at any time.
	MaxSize interface{}
	// The minimum number of instances the group should have at any time.
	MinSize interface{}
	MultaiTargetSets interface{}
	// The group name.
	Name interface{}
	NetworkInterfaces interface{}
	// Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
	OndemandCount interface{}
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"equalAzDistribution"`, `"availabilityOriented"`.    
	Orientation interface{}
	PersistBlockDevices interface{}
	PersistPrivateIp interface{}
	PersistRootDevice interface{}
	// Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used.
	PlacementTenancy interface{}
	// The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs. 
	// Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
	PreferredAvailabilityZones interface{}
	PrivateIps interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`. 
	// For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
	Product interface{}
	// The AWS region your group will be created in.
	// Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
	Region interface{}
	// Hold settings for strategy correction – replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
	RevertToSpot interface{}
	ScalingDownPolicies interface{}
	// Set termination policy.
	ScalingStrategies interface{}
	ScalingTargetPolicies interface{}
	ScalingUpPolicies interface{}
	ScheduledTasks interface{}
	// A list of associated security group IDS.
	SecurityGroups interface{}
	// The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
	ShutdownScript interface{}
	Signals interface{}
	// The percentage of Spot instances that would spin up from the `desiredCapacity` number.
	SpotPercentage interface{}
	StatefulDeallocation interface{}
	// List of Strings of subnet identifiers.
	// Note: When this parameter is set, `availabilityZones` should be left unused.
	SubnetIds interface{}
	// A key/value mapping of tags to assign to the resource.
	Tags interface{}
	TargetGroupArns interface{}
	UpdatePolicy interface{}
	// The user data to provide when launching the instance.
	UserData interface{}
	// In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
	UtilizeReservedInstances interface{}
	// Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
	WaitForCapacity interface{}
	// Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment. 
	WaitForCapacityTimeout interface{}
}
