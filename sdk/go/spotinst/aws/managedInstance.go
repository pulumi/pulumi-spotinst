// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst AWS ManagedInstance resource.
// 
// ## Load Balancers
// 
//    * `loadBalancersConfig` - (Optional) LB integration object.
//        * `loadBalancers` - (Optional) List of load balancers configs.
//             * `name` - The AWS resource name. Required for Classic Load Balancer. Optional for Application Load Balancer.
//             * `arn` - The AWS resource ARN (Required only for ALB target groups).
//             * `balancerId` - The Multai load balancer ID.
//             Default: lb-123456
//             * `targetSetId` - The Multai load target set ID.
//             Default: ts-123456
//             * `autoWeight` - “Auto Weight” will automatically provide a higher weight for instances that are larger as appropriate. For example, if you have configured your Elastigroup with m4.large and m4.xlarge instances the m4.large will have half the weight of an m4.xlarge. This ensures that larger instances receive a higher number of MLB requests.
//             * `zoneAwareness` - “AZ Awareness” will ensure that instances within the same AZ are using the corresponding MLB runtime instance in the same AZ. This feature reduces multi-zone data transfer fees.
//             * `type` - The resource type. Valid Values: CLASSIC, TARGET_GROUP, MULTAI_TARGET_SET.
// 
// Usage:
// 
//    ```hcl
//    loadBalancers {
//        arn  = "arn"
//        type = "CLASSIC"
//        balancerId   = "lb-123"
//        targetSetId = "ts-123"
//        autoWeight   = "true"
//        azAwareness = "true"
//      }
//    ```
// 
// <a id="route53"></a>
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/managed_instance_aws.html.markdown.
type ManagedInstance struct {
	s *pulumi.ResourceState
}

// NewManagedInstance registers a new resource with the given unique name, arguments, and options.
func NewManagedInstance(ctx *pulumi.Context,
	name string, args *ManagedInstanceArgs, opts ...pulumi.ResourceOpt) (*ManagedInstance, error) {
	if args == nil || args.ImageId == nil {
		return nil, errors.New("missing required argument 'ImageId'")
	}
	if args == nil || args.InstanceTypes == nil {
		return nil, errors.New("missing required argument 'InstanceTypes'")
	}
	if args == nil || args.PersistBlockDevices == nil {
		return nil, errors.New("missing required argument 'PersistBlockDevices'")
	}
	if args == nil || args.Product == nil {
		return nil, errors.New("missing required argument 'Product'")
	}
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	if args == nil || args.VpcId == nil {
		return nil, errors.New("missing required argument 'VpcId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoHealing"] = nil
		inputs["blockDevicesMode"] = nil
		inputs["cpuCredits"] = nil
		inputs["description"] = nil
		inputs["drainingTimeout"] = nil
		inputs["ebsOptimized"] = nil
		inputs["elasticIp"] = nil
		inputs["enableMonitoring"] = nil
		inputs["fallBackToOd"] = nil
		inputs["gracePeriod"] = nil
		inputs["healthCheckType"] = nil
		inputs["iamInstanceProfile"] = nil
		inputs["imageId"] = nil
		inputs["instanceTypes"] = nil
		inputs["integrationRoute53"] = nil
		inputs["keyPair"] = nil
		inputs["lifeCycle"] = nil
		inputs["loadBalancers"] = nil
		inputs["name"] = nil
		inputs["networkInterfaces"] = nil
		inputs["optimizationWindows"] = nil
		inputs["orientation"] = nil
		inputs["persistBlockDevices"] = nil
		inputs["persistPrivateIp"] = nil
		inputs["persistRootDevice"] = nil
		inputs["placementTenancy"] = nil
		inputs["preferredType"] = nil
		inputs["privateIp"] = nil
		inputs["product"] = nil
		inputs["region"] = nil
		inputs["revertToSpot"] = nil
		inputs["scheduledTasks"] = nil
		inputs["securityGroupIds"] = nil
		inputs["shutdownScript"] = nil
		inputs["subnetIds"] = nil
		inputs["tags"] = nil
		inputs["unhealthyDuration"] = nil
		inputs["userData"] = nil
		inputs["utilizeReservedInstances"] = nil
		inputs["vpcId"] = nil
	} else {
		inputs["autoHealing"] = args.AutoHealing
		inputs["blockDevicesMode"] = args.BlockDevicesMode
		inputs["cpuCredits"] = args.CpuCredits
		inputs["description"] = args.Description
		inputs["drainingTimeout"] = args.DrainingTimeout
		inputs["ebsOptimized"] = args.EbsOptimized
		inputs["elasticIp"] = args.ElasticIp
		inputs["enableMonitoring"] = args.EnableMonitoring
		inputs["fallBackToOd"] = args.FallBackToOd
		inputs["gracePeriod"] = args.GracePeriod
		inputs["healthCheckType"] = args.HealthCheckType
		inputs["iamInstanceProfile"] = args.IamInstanceProfile
		inputs["imageId"] = args.ImageId
		inputs["instanceTypes"] = args.InstanceTypes
		inputs["integrationRoute53"] = args.IntegrationRoute53
		inputs["keyPair"] = args.KeyPair
		inputs["lifeCycle"] = args.LifeCycle
		inputs["loadBalancers"] = args.LoadBalancers
		inputs["name"] = args.Name
		inputs["networkInterfaces"] = args.NetworkInterfaces
		inputs["optimizationWindows"] = args.OptimizationWindows
		inputs["orientation"] = args.Orientation
		inputs["persistBlockDevices"] = args.PersistBlockDevices
		inputs["persistPrivateIp"] = args.PersistPrivateIp
		inputs["persistRootDevice"] = args.PersistRootDevice
		inputs["placementTenancy"] = args.PlacementTenancy
		inputs["preferredType"] = args.PreferredType
		inputs["privateIp"] = args.PrivateIp
		inputs["product"] = args.Product
		inputs["region"] = args.Region
		inputs["revertToSpot"] = args.RevertToSpot
		inputs["scheduledTasks"] = args.ScheduledTasks
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["shutdownScript"] = args.ShutdownScript
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
		inputs["unhealthyDuration"] = args.UnhealthyDuration
		inputs["userData"] = args.UserData
		inputs["utilizeReservedInstances"] = args.UtilizeReservedInstances
		inputs["vpcId"] = args.VpcId
	}
	s, err := ctx.RegisterResource("spotinst:aws/managedInstance:ManagedInstance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ManagedInstance{s: s}, nil
}

// GetManagedInstance gets an existing ManagedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ManagedInstanceState, opts ...pulumi.ResourceOpt) (*ManagedInstance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoHealing"] = state.AutoHealing
		inputs["blockDevicesMode"] = state.BlockDevicesMode
		inputs["cpuCredits"] = state.CpuCredits
		inputs["description"] = state.Description
		inputs["drainingTimeout"] = state.DrainingTimeout
		inputs["ebsOptimized"] = state.EbsOptimized
		inputs["elasticIp"] = state.ElasticIp
		inputs["enableMonitoring"] = state.EnableMonitoring
		inputs["fallBackToOd"] = state.FallBackToOd
		inputs["gracePeriod"] = state.GracePeriod
		inputs["healthCheckType"] = state.HealthCheckType
		inputs["iamInstanceProfile"] = state.IamInstanceProfile
		inputs["imageId"] = state.ImageId
		inputs["instanceTypes"] = state.InstanceTypes
		inputs["integrationRoute53"] = state.IntegrationRoute53
		inputs["keyPair"] = state.KeyPair
		inputs["lifeCycle"] = state.LifeCycle
		inputs["loadBalancers"] = state.LoadBalancers
		inputs["name"] = state.Name
		inputs["networkInterfaces"] = state.NetworkInterfaces
		inputs["optimizationWindows"] = state.OptimizationWindows
		inputs["orientation"] = state.Orientation
		inputs["persistBlockDevices"] = state.PersistBlockDevices
		inputs["persistPrivateIp"] = state.PersistPrivateIp
		inputs["persistRootDevice"] = state.PersistRootDevice
		inputs["placementTenancy"] = state.PlacementTenancy
		inputs["preferredType"] = state.PreferredType
		inputs["privateIp"] = state.PrivateIp
		inputs["product"] = state.Product
		inputs["region"] = state.Region
		inputs["revertToSpot"] = state.RevertToSpot
		inputs["scheduledTasks"] = state.ScheduledTasks
		inputs["securityGroupIds"] = state.SecurityGroupIds
		inputs["shutdownScript"] = state.ShutdownScript
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["unhealthyDuration"] = state.UnhealthyDuration
		inputs["userData"] = state.UserData
		inputs["utilizeReservedInstances"] = state.UtilizeReservedInstances
		inputs["vpcId"] = state.VpcId
	}
	s, err := ctx.ReadResource("spotinst:aws/managedInstance:ManagedInstance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ManagedInstance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ManagedInstance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ManagedInstance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Enable the auto healing which auto replaces the instance in case the health check fails, default: `“true”`. 
func (r *ManagedInstance) AutoHealing() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoHealing"])
}

// Determine the way we attach the data volumes to the data devices. Valid values: `"reattach"`, `"onLaunch"`.
// Default: `"onLaunch"`.
func (r *ManagedInstance) BlockDevicesMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["blockDevicesMode"])
}

// cpuCredits can have one of two values: “unlimited”, “standard”.
// Default: unlimited
func (r *ManagedInstance) CpuCredits() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cpuCredits"])
}

// The ManagedInstance description.
func (r *ManagedInstance) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The time in seconds to allow the instance be drained from incoming TCP connections and detached from ELB before terminating it, during a scale down operation.
func (r *ManagedInstance) DrainingTimeout() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["drainingTimeout"])
}

// Enable EBS optimization for supported instance which is not enabled by default. Note - additional charges will be applied.
// Default: false
func (r *ManagedInstance) EbsOptimized() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["ebsOptimized"])
}

// Elastic IP Allocation Id to associate to the instance.
func (r *ManagedInstance) ElasticIp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["elasticIp"])
}

// Describes whether instance Enhanced Monitoring is enabled.
// Default: false
func (r *ManagedInstance) EnableMonitoring() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableMonitoring"])
}

func (r *ManagedInstance) FallBackToOd() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["fallBackToOd"])
}

// The amount of time, in seconds, after the instance has launched to starts and check its health, default `“120"`.
func (r *ManagedInstance) GracePeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["gracePeriod"])
}

// The service to use for the health check. Valid values: `“EC2”`, `“ELB”`, `“TARGET_GROUP”`, `“MULTAI_TARGET_SET”`.
// Default: `“EC2”`.
func (r *ManagedInstance) HealthCheckType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["healthCheckType"])
}

// Set IAM profile to instance. Set only one of ARN or Name.
func (r *ManagedInstance) IamInstanceProfile() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamInstanceProfile"])
}

// The ID of the image used to launch the instance.
func (r *ManagedInstance) ImageId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["imageId"])
}

// Comma separated list of available instance types for instance.
func (r *ManagedInstance) InstanceTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceTypes"])
}

func (r *ManagedInstance) IntegrationRoute53() pulumi.Output {
	return r.s.State["integrationRoute53"]
}

// Specify a Key Pair to attach to the instances.
func (r *ManagedInstance) KeyPair() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyPair"])
}

// Set lifecycle, valid values: `“spot”`, `“on_demand”`.
// Default `"spot"`.
func (r *ManagedInstance) LifeCycle() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["lifeCycle"])
}

func (r *ManagedInstance) LoadBalancers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["loadBalancers"])
}

// The ManagedInstance name.
func (r *ManagedInstance) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *ManagedInstance) NetworkInterfaces() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkInterfaces"])
}

// When performAt is 'timeWindow': must specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59.
func (r *ManagedInstance) OptimizationWindows() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["optimizationWindows"])
}

// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"availabilityOriented"`, `"cheapest"`.
// Default: `"availabilityOriented"`.
func (r *ManagedInstance) Orientation() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["orientation"])
}

// Should the instance maintain its Data volumes. 
func (r *ManagedInstance) PersistBlockDevices() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["persistBlockDevices"])
}

// Should the instance maintain its private IP.  
func (r *ManagedInstance) PersistPrivateIp() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["persistPrivateIp"])
}

// Should the instance maintain its root device volumes.
func (r *ManagedInstance) PersistRootDevice() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["persistRootDevice"])
}

// Valid values: "default", "dedicated"
// Default: default
func (r *ManagedInstance) PlacementTenancy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["placementTenancy"])
}

// Preferred instance types for the instance. We will automatically select optional similar instance types to ensure optimized cost efficiency
func (r *ManagedInstance) PreferredType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["preferredType"])
}

// Private IP Allocation Id to associate to the instance. 
func (r *ManagedInstance) PrivateIp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateIp"])
}

// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`, `"Red Hat Enterprise Linux"`, `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`,  `"Red Hat Enterprise Linux (Amazon VPC)"`.    
func (r *ManagedInstance) Product() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["product"])
}

// The AWS region your group will be created in.
func (r *ManagedInstance) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

func (r *ManagedInstance) RevertToSpot() pulumi.Output {
	return r.s.State["revertToSpot"]
}

func (r *ManagedInstance) ScheduledTasks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["scheduledTasks"])
}

// One or more security group IDs.
func (r *ManagedInstance) SecurityGroupIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["securityGroupIds"])
}

// The Base64-encoded shutdown script to execute prior to instance termination.
func (r *ManagedInstance) ShutdownScript() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["shutdownScript"])
}

// A comma-separated list of subnet identifiers for your instance.
func (r *ManagedInstance) SubnetIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["subnetIds"])
}

// Set tags for the instance. Items should be unique.
func (r *ManagedInstance) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced, default `“120"`.
func (r *ManagedInstance) UnhealthyDuration() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["unhealthyDuration"])
}

// The Base64-encoded MIME user data to make available to the instances.
func (r *ManagedInstance) UserData() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userData"])
}

// In case of any available Reserved Instances, Managed Instance will utilize them before purchasing Spot instances.
// Default: `"false"`.
func (r *ManagedInstance) UtilizeReservedInstances() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["utilizeReservedInstances"])
}

func (r *ManagedInstance) VpcId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vpcId"])
}

// Input properties used for looking up and filtering ManagedInstance resources.
type ManagedInstanceState struct {
	// Enable the auto healing which auto replaces the instance in case the health check fails, default: `“true”`. 
	AutoHealing interface{}
	// Determine the way we attach the data volumes to the data devices. Valid values: `"reattach"`, `"onLaunch"`.
	// Default: `"onLaunch"`.
	BlockDevicesMode interface{}
	// cpuCredits can have one of two values: “unlimited”, “standard”.
	// Default: unlimited
	CpuCredits interface{}
	// The ManagedInstance description.
	Description interface{}
	// The time in seconds to allow the instance be drained from incoming TCP connections and detached from ELB before terminating it, during a scale down operation.
	DrainingTimeout interface{}
	// Enable EBS optimization for supported instance which is not enabled by default. Note - additional charges will be applied.
	// Default: false
	EbsOptimized interface{}
	// Elastic IP Allocation Id to associate to the instance.
	ElasticIp interface{}
	// Describes whether instance Enhanced Monitoring is enabled.
	// Default: false
	EnableMonitoring interface{}
	FallBackToOd interface{}
	// The amount of time, in seconds, after the instance has launched to starts and check its health, default `“120"`.
	GracePeriod interface{}
	// The service to use for the health check. Valid values: `“EC2”`, `“ELB”`, `“TARGET_GROUP”`, `“MULTAI_TARGET_SET”`.
	// Default: `“EC2”`.
	HealthCheckType interface{}
	// Set IAM profile to instance. Set only one of ARN or Name.
	IamInstanceProfile interface{}
	// The ID of the image used to launch the instance.
	ImageId interface{}
	// Comma separated list of available instance types for instance.
	InstanceTypes interface{}
	IntegrationRoute53 interface{}
	// Specify a Key Pair to attach to the instances.
	KeyPair interface{}
	// Set lifecycle, valid values: `“spot”`, `“on_demand”`.
	// Default `"spot"`.
	LifeCycle interface{}
	LoadBalancers interface{}
	// The ManagedInstance name.
	Name interface{}
	NetworkInterfaces interface{}
	// When performAt is 'timeWindow': must specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59.
	OptimizationWindows interface{}
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"availabilityOriented"`, `"cheapest"`.
	// Default: `"availabilityOriented"`.
	Orientation interface{}
	// Should the instance maintain its Data volumes. 
	PersistBlockDevices interface{}
	// Should the instance maintain its private IP.  
	PersistPrivateIp interface{}
	// Should the instance maintain its root device volumes.
	PersistRootDevice interface{}
	// Valid values: "default", "dedicated"
	// Default: default
	PlacementTenancy interface{}
	// Preferred instance types for the instance. We will automatically select optional similar instance types to ensure optimized cost efficiency
	PreferredType interface{}
	// Private IP Allocation Id to associate to the instance. 
	PrivateIp interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`, `"Red Hat Enterprise Linux"`, `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`,  `"Red Hat Enterprise Linux (Amazon VPC)"`.    
	Product interface{}
	// The AWS region your group will be created in.
	Region interface{}
	RevertToSpot interface{}
	ScheduledTasks interface{}
	// One or more security group IDs.
	SecurityGroupIds interface{}
	// The Base64-encoded shutdown script to execute prior to instance termination.
	ShutdownScript interface{}
	// A comma-separated list of subnet identifiers for your instance.
	SubnetIds interface{}
	// Set tags for the instance. Items should be unique.
	Tags interface{}
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced, default `“120"`.
	UnhealthyDuration interface{}
	// The Base64-encoded MIME user data to make available to the instances.
	UserData interface{}
	// In case of any available Reserved Instances, Managed Instance will utilize them before purchasing Spot instances.
	// Default: `"false"`.
	UtilizeReservedInstances interface{}
	VpcId interface{}
}

// The set of arguments for constructing a ManagedInstance resource.
type ManagedInstanceArgs struct {
	// Enable the auto healing which auto replaces the instance in case the health check fails, default: `“true”`. 
	AutoHealing interface{}
	// Determine the way we attach the data volumes to the data devices. Valid values: `"reattach"`, `"onLaunch"`.
	// Default: `"onLaunch"`.
	BlockDevicesMode interface{}
	// cpuCredits can have one of two values: “unlimited”, “standard”.
	// Default: unlimited
	CpuCredits interface{}
	// The ManagedInstance description.
	Description interface{}
	// The time in seconds to allow the instance be drained from incoming TCP connections and detached from ELB before terminating it, during a scale down operation.
	DrainingTimeout interface{}
	// Enable EBS optimization for supported instance which is not enabled by default. Note - additional charges will be applied.
	// Default: false
	EbsOptimized interface{}
	// Elastic IP Allocation Id to associate to the instance.
	ElasticIp interface{}
	// Describes whether instance Enhanced Monitoring is enabled.
	// Default: false
	EnableMonitoring interface{}
	FallBackToOd interface{}
	// The amount of time, in seconds, after the instance has launched to starts and check its health, default `“120"`.
	GracePeriod interface{}
	// The service to use for the health check. Valid values: `“EC2”`, `“ELB”`, `“TARGET_GROUP”`, `“MULTAI_TARGET_SET”`.
	// Default: `“EC2”`.
	HealthCheckType interface{}
	// Set IAM profile to instance. Set only one of ARN or Name.
	IamInstanceProfile interface{}
	// The ID of the image used to launch the instance.
	ImageId interface{}
	// Comma separated list of available instance types for instance.
	InstanceTypes interface{}
	IntegrationRoute53 interface{}
	// Specify a Key Pair to attach to the instances.
	KeyPair interface{}
	// Set lifecycle, valid values: `“spot”`, `“on_demand”`.
	// Default `"spot"`.
	LifeCycle interface{}
	LoadBalancers interface{}
	// The ManagedInstance name.
	Name interface{}
	NetworkInterfaces interface{}
	// When performAt is 'timeWindow': must specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59.
	OptimizationWindows interface{}
	// Select a prediction strategy. Valid values: `"balanced"`, `"costOriented"`, `"availabilityOriented"`, `"cheapest"`.
	// Default: `"availabilityOriented"`.
	Orientation interface{}
	// Should the instance maintain its Data volumes. 
	PersistBlockDevices interface{}
	// Should the instance maintain its private IP.  
	PersistPrivateIp interface{}
	// Should the instance maintain its root device volumes.
	PersistRootDevice interface{}
	// Valid values: "default", "dedicated"
	// Default: default
	PlacementTenancy interface{}
	// Preferred instance types for the instance. We will automatically select optional similar instance types to ensure optimized cost efficiency
	PreferredType interface{}
	// Private IP Allocation Id to associate to the instance. 
	PrivateIp interface{}
	// Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`, `"Red Hat Enterprise Linux"`, `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`,  `"Red Hat Enterprise Linux (Amazon VPC)"`.    
	Product interface{}
	// The AWS region your group will be created in.
	Region interface{}
	RevertToSpot interface{}
	ScheduledTasks interface{}
	// One or more security group IDs.
	SecurityGroupIds interface{}
	// The Base64-encoded shutdown script to execute prior to instance termination.
	ShutdownScript interface{}
	// A comma-separated list of subnet identifiers for your instance.
	SubnetIds interface{}
	// Set tags for the instance. Items should be unique.
	Tags interface{}
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced, default `“120"`.
	UnhealthyDuration interface{}
	// The Base64-encoded MIME user data to make available to the instances.
	UserData interface{}
	// In case of any available Reserved Instances, Managed Instance will utilize them before purchasing Spot instances.
	// Default: `"false"`.
	UtilizeReservedInstances interface{}
	VpcId interface{}
}
