// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Spotinst AWS MrScaler resource.
//
// ## Example Usage
//
// ### New Strategy
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a Mr Scaler with New strategy
//			_, err := aws.NewMrScalar(ctx, "sample-MrScaler-01", &aws.MrScalarArgs{
//				Name:         pulumi.String("sample-MrScaler-01"),
//				Description:  pulumi.String("Testing MrScaler creation"),
//				Region:       pulumi.String("us-west-2"),
//				Strategy:     pulumi.String("new"),
//				ReleaseLabel: pulumi.String("emr-5.17.0"),
//				Retries:      pulumi.Int(2),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-west-2a:subnet-123456"),
//				},
//				ProvisioningTimeout: &aws.MrScalarProvisioningTimeoutArgs{
//					Timeout:       pulumi.Int(15),
//					TimeoutAction: pulumi.String("terminateAndRetry"),
//				},
//				LogUri:                      pulumi.String("s3://example-logs"),
//				AdditionalInfo:              pulumi.String("{'test':'more information'}"),
//				JobFlowRole:                 pulumi.String("EMR_EC2_ExampleRole"),
//				SecurityConfig:              pulumi.String("example-config"),
//				ServiceRole:                 pulumi.String("example-role"),
//				TerminationProtected:        pulumi.Bool(false),
//				KeepJobFlowAlive:            pulumi.Bool(true),
//				CustomAmiId:                 pulumi.String("ami-123456"),
//				RepoUpgradeOnBoot:           pulumi.String("NONE"),
//				Ec2KeyName:                  pulumi.String("test-key"),
//				ManagedPrimarySecurityGroup: pulumi.String("sg-123456"),
//				ManagedReplicaSecurityGroup: pulumi.String("sg-987654"),
//				ServiceAccessSecurityGroup:  pulumi.String("access-example"),
//				AdditionalPrimarySecurityGroups: pulumi.StringArray{
//					pulumi.String("sg-456321"),
//				},
//				AdditionalReplicaSecurityGroups: pulumi.StringArray{
//					pulumi.String("sg-123654"),
//				},
//				Applications: aws.MrScalarApplicationArray{
//					&aws.MrScalarApplicationArgs{
//						Name:    pulumi.String("Ganglia"),
//						Version: pulumi.String("1.0"),
//					},
//					&aws.MrScalarApplicationArgs{
//						Name: pulumi.String("Hadoop"),
//					},
//					&aws.MrScalarApplicationArgs{
//						Name: pulumi.String("Pig"),
//						Args: pulumi.StringArray{
//							pulumi.String("fake"),
//							pulumi.String("args"),
//						},
//					},
//				},
//				InstanceWeights: aws.MrScalarInstanceWeightArray{
//					&aws.MrScalarInstanceWeightArgs{
//						InstanceType:     pulumi.String("t2.small"),
//						WeightedCapacity: pulumi.Int(10),
//					},
//					&aws.MrScalarInstanceWeightArgs{
//						InstanceType:     pulumi.String("t2.medium"),
//						WeightedCapacity: pulumi.Int(90),
//					},
//				},
//				StepsFiles: aws.MrScalarStepsFileArray{
//					&aws.MrScalarStepsFileArgs{
//						Bucket: pulumi.String("example-bucket"),
//						Key:    pulumi.String("steps.json"),
//					},
//				},
//				ConfigurationsFiles: aws.MrScalarConfigurationsFileArray{
//					&aws.MrScalarConfigurationsFileArgs{
//						Bucket: pulumi.String("example-bucket"),
//						Key:    pulumi.String("configurations.json"),
//					},
//				},
//				BootstrapActionsFiles: aws.MrScalarBootstrapActionsFileArray{
//					&aws.MrScalarBootstrapActionsFileArgs{
//						Bucket: pulumi.String("sample-emr-test"),
//						Key:    pulumi.String("bootstrap-actions.json"),
//					},
//				},
//				MasterInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//				},
//				MasterLifecycle:    pulumi.String("SPOT"),
//				MasterEbsOptimized: pulumi.Bool(true),
//				MasterTarget:       pulumi.Int(1),
//				MasterEbsBlockDevices: aws.MrScalarMasterEbsBlockDeviceArray{
//					&aws.MrScalarMasterEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(1),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(30),
//					},
//				},
//				CoreInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//					pulumi.String("c4.xlarge"),
//				},
//				CoreMinSize:         pulumi.Int(1),
//				CoreMaxSize:         pulumi.Int(1),
//				CoreDesiredCapacity: pulumi.Int(1),
//				CoreLifecycle:       pulumi.String("ON_DEMAND"),
//				CoreEbsOptimized:    pulumi.Bool(false),
//				CoreUnit:            pulumi.String("instance"),
//				CoreEbsBlockDevices: aws.MrScalarCoreEbsBlockDeviceArray{
//					&aws.MrScalarCoreEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(2),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(40),
//					},
//				},
//				TaskInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//					pulumi.String("c4.xlarge"),
//				},
//				TaskMinSize:         pulumi.Int(0),
//				TaskMaxSize:         pulumi.Int(30),
//				TaskDesiredCapacity: pulumi.Int(1),
//				TaskLifecycle:       pulumi.String("SPOT"),
//				TaskEbsOptimized:    pulumi.Bool(false),
//				TaskUnit:            pulumi.String("instance"),
//				TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
//					&aws.MrScalarTaskEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(2),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(40),
//					},
//				},
//				Tags: aws.MrScalarTagArray{
//					&aws.MrScalarTagArgs{
//						Key:   pulumi.String("Creator"),
//						Value: pulumi.String("Pulumi"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Clone Strategy
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aws.NewMrScalar(ctx, "sample-MrScaler-01", &aws.MrScalarArgs{
//				Name:            pulumi.String("sample-MrScaler-01"),
//				Description:     pulumi.String("Testing MrScaler creation"),
//				Region:          pulumi.String("us-west-2"),
//				Strategy:        pulumi.String("clone"),
//				ClusterId:       pulumi.String("j-123456789"),
//				ExposeClusterId: pulumi.Bool(true),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String("us-west-2a:subnet-12345678"),
//				},
//				MasterInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//				},
//				MasterLifecycle:    pulumi.String("SPOT"),
//				MasterEbsOptimized: pulumi.Bool(true),
//				MasterTarget:       pulumi.Int(1),
//				MasterEbsBlockDevices: aws.MrScalarMasterEbsBlockDeviceArray{
//					&aws.MrScalarMasterEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(1),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(30),
//					},
//				},
//				CoreInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//					pulumi.String("c4.xlarge"),
//				},
//				CoreMinSize:         pulumi.Int(1),
//				CoreMaxSize:         pulumi.Int(1),
//				CoreDesiredCapacity: pulumi.Int(1),
//				CoreLifecycle:       pulumi.String("ON_DEMAND"),
//				CoreEbsOptimized:    pulumi.Bool(false),
//				CoreUnit:            pulumi.String("instance"),
//				CoreEbsBlockDevices: aws.MrScalarCoreEbsBlockDeviceArray{
//					&aws.MrScalarCoreEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(2),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(40),
//					},
//				},
//				TaskInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//					pulumi.String("c4.xlarge"),
//				},
//				TaskMinSize:         pulumi.Int(0),
//				TaskMaxSize:         pulumi.Int(30),
//				TaskDesiredCapacity: pulumi.Int(1),
//				TaskLifecycle:       pulumi.String("SPOT"),
//				TaskEbsOptimized:    pulumi.Bool(false),
//				TaskUnit:            pulumi.String("instance"),
//				TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
//					&aws.MrScalarTaskEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(2),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(40),
//					},
//				},
//				Tags: aws.MrScalarTagArray{
//					&aws.MrScalarTagArgs{
//						Key:   pulumi.String("Creator"),
//						Value: pulumi.String("Pulumi"),
//					},
//				},
//				TaskScalingDownPolicies: aws.MrScalarTaskScalingDownPolicyArray{
//					&aws.MrScalarTaskScalingDownPolicyArgs{
//						PolicyName: pulumi.String("policy-name"),
//						MetricName: pulumi.String("CPUUtilization"),
//						Namespace:  pulumi.String("AWS/EC2"),
//						Statistic:  pulumi.String("average"),
//						Unit:       pulumi.String(""),
//						Threshold:  pulumi.Float64(10),
//						Adjustment: pulumi.String("1"),
//						Cooldown:   pulumi.Int(60),
//						Dimensions: pulumi.Map{
//							pulumi.Any(map[string]interface{}{
//								"name":  "name-1",
//								"value": "value-1",
//							}),
//						},
//						Operator:          pulumi.String("gt"),
//						EvaluationPeriods: pulumi.Int(10),
//						Period:            pulumi.Int(60),
//						ActionType:        pulumi.String(""),
//						Minimum:           pulumi.String("0"),
//						Maximum:           pulumi.String("10"),
//						Target:            pulumi.String("5"),
//						MaxTargetCapacity: pulumi.String("1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("mrscaler-name", sample_MrScaler_01.Name)
//			ctx.Export("mrscaler-created-cluster-id", sample_MrScaler_01.OutputClusterId)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Wrap Strategy
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a Mr Scaler with Wrap strategy
//			_, err := aws.NewMrScalar(ctx, "example-scaler-2", &aws.MrScalarArgs{
//				Name:        pulumi.String("spotinst-mr-scaler-2"),
//				Description: pulumi.String("created by Pulumi"),
//				Region:      pulumi.String("us-west-2"),
//				Strategy:    pulumi.String("wrap"),
//				ClusterId:   pulumi.String("j-27UVDEHXL4OQM"),
//				TaskInstanceTypes: pulumi.StringArray{
//					pulumi.String("c3.xlarge"),
//					pulumi.String("c4.xlarge"),
//				},
//				TaskDesiredCapacity: pulumi.Int(2),
//				TaskMinSize:         pulumi.Int(0),
//				TaskMaxSize:         pulumi.Int(4),
//				TaskLifecycle:       pulumi.String("SPOT"),
//				TaskUnit:            pulumi.String("instance"),
//				TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
//					&aws.MrScalarTaskEbsBlockDeviceArgs{
//						VolumesPerInstance: pulumi.Int(1),
//						VolumeType:         pulumi.String("gp2"),
//						SizeInGb:           pulumi.Int(20),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type MrScalar struct {
	pulumi.CustomResourceState

	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrOutput `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayOutput `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayOutput `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayOutput `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayOutput `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayOutput `pulumi:"configurationsFiles"`
	// amount of instances in core group.
	CoreDesiredCapacity pulumi.IntPtrOutput `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayOutput `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrOutput `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayOutput `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle pulumi.StringPtrOutput `pulumi:"coreLifecycle"`
	// maximal amount of instances in core group.
	CoreMaxSize pulumi.IntPtrOutput `pulumi:"coreMaxSize"`
	// The minimal amount of instances in core group.
	CoreMinSize pulumi.IntPtrOutput `pulumi:"coreMinSize"`
	// Each `*_scaling_*_policy` supports the following:
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayOutput `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayOutput   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrOutput `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrOutput `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       pulumi.StringPtrOutput `pulumi:"description"`
	EbsRootVolumeSize pulumi.IntPtrOutput    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrOutput `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrOutput `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayOutput `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrOutput `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrOutput `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrOutput `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrOutput `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrOutput `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayOutput `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrOutput `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayOutput `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrOutput `pulumi:"masterLifecycle"`
	// Number of instances in the master group.
	MasterTarget pulumi.IntPtrOutput `pulumi:"masterTarget"`
	// The MrScaler name.
	Name                pulumi.StringOutput                  `pulumi:"name"`
	OutputClusterId     pulumi.StringOutput                  `pulumi:"outputClusterId"`
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrOutput `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       pulumi.StringPtrOutput `pulumi:"region"`
	ReleaseLabel pulumi.StringPtrOutput `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrOutput `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrOutput `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrOutput `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrOutput `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayOutput `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringOutput `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags MrScalarTagArrayOutput `pulumi:"tags"`
	// amount of instances in task group.
	TaskDesiredCapacity pulumi.IntPtrOutput `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayOutput `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrOutput `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayOutput `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle pulumi.StringPtrOutput `pulumi:"taskLifecycle"`
	// maximal amount of instances in task group.
	TaskMaxSize pulumi.IntPtrOutput `pulumi:"taskMaxSize"`
	// The minimal amount of instances in task group.
	TaskMinSize pulumi.IntPtrOutput `pulumi:"taskMinSize"`
	// Possible core group scaling policies (Clone, New strategies):
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayOutput `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayOutput   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrOutput `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayOutput `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrOutput `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrOutput `pulumi:"visibleToAllUsers"`
}

// NewMrScalar registers a new resource with the given unique name, arguments, and options.
func NewMrScalar(ctx *pulumi.Context,
	name string, args *MrScalarArgs, opts ...pulumi.ResourceOption) (*MrScalar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MrScalar
	err := ctx.RegisterResource("spotinst:aws/mrScalar:MrScalar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMrScalar gets an existing MrScalar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMrScalar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MrScalarState, opts ...pulumi.ResourceOption) (*MrScalar, error) {
	var resource MrScalar
	err := ctx.ReadResource("spotinst:aws/mrScalar:MrScalar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MrScalar resources.
type mrScalarState struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo *string `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups []string `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups []string `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications []MrScalarApplication `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles []MrScalarBootstrapActionsFile `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles []MrScalarConfigurationsFile `pulumi:"configurationsFiles"`
	// amount of instances in core group.
	CoreDesiredCapacity *int `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices []MrScalarCoreEbsBlockDevice `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized *bool `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes []string `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle *string `pulumi:"coreLifecycle"`
	// maximal amount of instances in core group.
	CoreMaxSize *int `pulumi:"coreMaxSize"`
	// The minimal amount of instances in core group.
	CoreMinSize *int `pulumi:"coreMinSize"`
	// Each `*_scaling_*_policy` supports the following:
	CoreScalingDownPolicies []MrScalarCoreScalingDownPolicy `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   []MrScalarCoreScalingUpPolicy   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit *string `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId *string `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       *string `pulumi:"description"`
	EbsRootVolumeSize *int    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName *string `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId *bool `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights []MrScalarInstanceWeight `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole *string `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive *bool `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri *string `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup *string `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup *string `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices []MrScalarMasterEbsBlockDevice `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized *bool `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes []string `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle *string `pulumi:"masterLifecycle"`
	// Number of instances in the master group.
	MasterTarget *int `pulumi:"masterTarget"`
	// The MrScaler name.
	Name                *string                      `pulumi:"name"`
	OutputClusterId     *string                      `pulumi:"outputClusterId"`
	ProvisioningTimeout *MrScalarProvisioningTimeout `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       *string `pulumi:"region"`
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot *string `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries *int `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks []MrScalarScheduledTask `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig *string `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup *string `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles []MrScalarStepsFile `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy *string `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags []MrScalarTag `pulumi:"tags"`
	// amount of instances in task group.
	TaskDesiredCapacity *int `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices []MrScalarTaskEbsBlockDevice `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized *bool `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes []string `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle *string `pulumi:"taskLifecycle"`
	// maximal amount of instances in task group.
	TaskMaxSize *int `pulumi:"taskMaxSize"`
	// The minimal amount of instances in task group.
	TaskMinSize *int `pulumi:"taskMinSize"`
	// Possible core group scaling policies (Clone, New strategies):
	TaskScalingDownPolicies []MrScalarTaskScalingDownPolicy `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   []MrScalarTaskScalingUpPolicy   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit *string `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies []MrScalarTerminationPolicy `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected *bool `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

type MrScalarState struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrInput
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayInput
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayInput
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayInput
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayInput
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayInput
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrInput
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayInput
	// amount of instances in core group.
	CoreDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle pulumi.StringPtrInput
	// maximal amount of instances in core group.
	CoreMaxSize pulumi.IntPtrInput
	// The minimal amount of instances in core group.
	CoreMinSize pulumi.IntPtrInput
	// Each `*_scaling_*_policy` supports the following:
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayInput
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrInput
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrInput
	// The MrScaler description.
	Description       pulumi.StringPtrInput
	EbsRootVolumeSize pulumi.IntPtrInput
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrInput
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrInput
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayInput
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrInput
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrInput
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrInput
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrInput
	// Number of instances in the master group.
	MasterTarget pulumi.IntPtrInput
	// The MrScaler name.
	Name                pulumi.StringPtrInput
	OutputClusterId     pulumi.StringPtrInput
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrInput
	// The MrScaler region.
	Region       pulumi.StringPtrInput
	ReleaseLabel pulumi.StringPtrInput
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrInput
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrInput
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayInput
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrInput
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrInput
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrInput
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayInput
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringPtrInput
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags MrScalarTagArrayInput
	// amount of instances in task group.
	TaskDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle pulumi.StringPtrInput
	// maximal amount of instances in task group.
	TaskMaxSize pulumi.IntPtrInput
	// The minimal amount of instances in task group.
	TaskMinSize pulumi.IntPtrInput
	// Possible core group scaling policies (Clone, New strategies):
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayInput
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrInput
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayInput
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrInput
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (MrScalarState) ElementType() reflect.Type {
	return reflect.TypeOf((*mrScalarState)(nil)).Elem()
}

type mrScalarArgs struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo *string `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups []string `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups []string `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications []MrScalarApplication `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles []MrScalarBootstrapActionsFile `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles []MrScalarConfigurationsFile `pulumi:"configurationsFiles"`
	// amount of instances in core group.
	CoreDesiredCapacity *int `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices []MrScalarCoreEbsBlockDevice `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized *bool `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes []string `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle *string `pulumi:"coreLifecycle"`
	// maximal amount of instances in core group.
	CoreMaxSize *int `pulumi:"coreMaxSize"`
	// The minimal amount of instances in core group.
	CoreMinSize *int `pulumi:"coreMinSize"`
	// Each `*_scaling_*_policy` supports the following:
	CoreScalingDownPolicies []MrScalarCoreScalingDownPolicy `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   []MrScalarCoreScalingUpPolicy   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit *string `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId *string `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       *string `pulumi:"description"`
	EbsRootVolumeSize *int    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName *string `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId *bool `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights []MrScalarInstanceWeight `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole *string `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive *bool `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri *string `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup *string `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup *string `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices []MrScalarMasterEbsBlockDevice `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized *bool `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes []string `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle *string `pulumi:"masterLifecycle"`
	// Number of instances in the master group.
	MasterTarget *int `pulumi:"masterTarget"`
	// The MrScaler name.
	Name                *string                      `pulumi:"name"`
	ProvisioningTimeout *MrScalarProvisioningTimeout `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       *string `pulumi:"region"`
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot *string `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries *int `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks []MrScalarScheduledTask `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig *string `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup *string `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles []MrScalarStepsFile `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy string `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags []MrScalarTag `pulumi:"tags"`
	// amount of instances in task group.
	TaskDesiredCapacity *int `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices []MrScalarTaskEbsBlockDevice `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized *bool `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes []string `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle *string `pulumi:"taskLifecycle"`
	// maximal amount of instances in task group.
	TaskMaxSize *int `pulumi:"taskMaxSize"`
	// The minimal amount of instances in task group.
	TaskMinSize *int `pulumi:"taskMinSize"`
	// Possible core group scaling policies (Clone, New strategies):
	TaskScalingDownPolicies []MrScalarTaskScalingDownPolicy `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   []MrScalarTaskScalingUpPolicy   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit *string `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies []MrScalarTerminationPolicy `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected *bool `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

// The set of arguments for constructing a MrScalar resource.
type MrScalarArgs struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrInput
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayInput
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayInput
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayInput
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayInput
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayInput
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrInput
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayInput
	// amount of instances in core group.
	CoreDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle pulumi.StringPtrInput
	// maximal amount of instances in core group.
	CoreMaxSize pulumi.IntPtrInput
	// The minimal amount of instances in core group.
	CoreMinSize pulumi.IntPtrInput
	// Each `*_scaling_*_policy` supports the following:
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayInput
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrInput
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrInput
	// The MrScaler description.
	Description       pulumi.StringPtrInput
	EbsRootVolumeSize pulumi.IntPtrInput
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrInput
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrInput
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayInput
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrInput
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrInput
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrInput
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrInput
	// Number of instances in the master group.
	MasterTarget pulumi.IntPtrInput
	// The MrScaler name.
	Name                pulumi.StringPtrInput
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrInput
	// The MrScaler region.
	Region       pulumi.StringPtrInput
	ReleaseLabel pulumi.StringPtrInput
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrInput
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrInput
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayInput
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrInput
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrInput
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrInput
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayInput
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringInput
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags MrScalarTagArrayInput
	// amount of instances in task group.
	TaskDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle pulumi.StringPtrInput
	// maximal amount of instances in task group.
	TaskMaxSize pulumi.IntPtrInput
	// The minimal amount of instances in task group.
	TaskMinSize pulumi.IntPtrInput
	// Possible core group scaling policies (Clone, New strategies):
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayInput
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrInput
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayInput
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrInput
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (MrScalarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mrScalarArgs)(nil)).Elem()
}

type MrScalarInput interface {
	pulumi.Input

	ToMrScalarOutput() MrScalarOutput
	ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput
}

func (*MrScalar) ElementType() reflect.Type {
	return reflect.TypeOf((**MrScalar)(nil)).Elem()
}

func (i *MrScalar) ToMrScalarOutput() MrScalarOutput {
	return i.ToMrScalarOutputWithContext(context.Background())
}

func (i *MrScalar) ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarOutput)
}

// MrScalarArrayInput is an input type that accepts MrScalarArray and MrScalarArrayOutput values.
// You can construct a concrete instance of `MrScalarArrayInput` via:
//
//	MrScalarArray{ MrScalarArgs{...} }
type MrScalarArrayInput interface {
	pulumi.Input

	ToMrScalarArrayOutput() MrScalarArrayOutput
	ToMrScalarArrayOutputWithContext(context.Context) MrScalarArrayOutput
}

type MrScalarArray []MrScalarInput

func (MrScalarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MrScalar)(nil)).Elem()
}

func (i MrScalarArray) ToMrScalarArrayOutput() MrScalarArrayOutput {
	return i.ToMrScalarArrayOutputWithContext(context.Background())
}

func (i MrScalarArray) ToMrScalarArrayOutputWithContext(ctx context.Context) MrScalarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarArrayOutput)
}

// MrScalarMapInput is an input type that accepts MrScalarMap and MrScalarMapOutput values.
// You can construct a concrete instance of `MrScalarMapInput` via:
//
//	MrScalarMap{ "key": MrScalarArgs{...} }
type MrScalarMapInput interface {
	pulumi.Input

	ToMrScalarMapOutput() MrScalarMapOutput
	ToMrScalarMapOutputWithContext(context.Context) MrScalarMapOutput
}

type MrScalarMap map[string]MrScalarInput

func (MrScalarMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MrScalar)(nil)).Elem()
}

func (i MrScalarMap) ToMrScalarMapOutput() MrScalarMapOutput {
	return i.ToMrScalarMapOutputWithContext(context.Background())
}

func (i MrScalarMap) ToMrScalarMapOutputWithContext(ctx context.Context) MrScalarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarMapOutput)
}

type MrScalarOutput struct{ *pulumi.OutputState }

func (MrScalarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MrScalar)(nil)).Elem()
}

func (o MrScalarOutput) ToMrScalarOutput() MrScalarOutput {
	return o
}

func (o MrScalarOutput) ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput {
	return o
}

// This is meta information about third-party applications that third-party vendors use for testing purposes.
func (o MrScalarOutput) AdditionalInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.AdditionalInfo }).(pulumi.StringPtrOutput)
}

// A list of additional Amazon EC2 security group IDs for the master node.
func (o MrScalarOutput) AdditionalPrimarySecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.AdditionalPrimarySecurityGroups }).(pulumi.StringArrayOutput)
}

// A list of additional Amazon EC2 security group IDs for the core and task nodes.
func (o MrScalarOutput) AdditionalReplicaSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.AdditionalReplicaSecurityGroups }).(pulumi.StringArrayOutput)
}

// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
func (o MrScalarOutput) Applications() MrScalarApplicationArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarApplicationArrayOutput { return v.Applications }).(MrScalarApplicationArrayOutput)
}

// List of AZs and their subnet Ids. See example above for usage.
func (o MrScalarOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
func (o MrScalarOutput) BootstrapActionsFiles() MrScalarBootstrapActionsFileArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarBootstrapActionsFileArrayOutput { return v.BootstrapActionsFiles }).(MrScalarBootstrapActionsFileArrayOutput)
}

// The MrScaler cluster id.
func (o MrScalarOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
func (o MrScalarOutput) ConfigurationsFiles() MrScalarConfigurationsFileArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarConfigurationsFileArrayOutput { return v.ConfigurationsFiles }).(MrScalarConfigurationsFileArrayOutput)
}

// amount of instances in core group.
func (o MrScalarOutput) CoreDesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.CoreDesiredCapacity }).(pulumi.IntPtrOutput)
}

// This determines the ebs configuration for your core group instances. Only a single block is allowed.
func (o MrScalarOutput) CoreEbsBlockDevices() MrScalarCoreEbsBlockDeviceArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarCoreEbsBlockDeviceArrayOutput { return v.CoreEbsBlockDevices }).(MrScalarCoreEbsBlockDeviceArrayOutput)
}

// EBS Optimization setting for instances in group.
func (o MrScalarOutput) CoreEbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.CoreEbsOptimized }).(pulumi.BoolPtrOutput)
}

// The MrScaler instance types for the core nodes.
func (o MrScalarOutput) CoreInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.CoreInstanceTypes }).(pulumi.StringArrayOutput)
}

// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
func (o MrScalarOutput) CoreLifecycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.CoreLifecycle }).(pulumi.StringPtrOutput)
}

// maximal amount of instances in core group.
func (o MrScalarOutput) CoreMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.CoreMaxSize }).(pulumi.IntPtrOutput)
}

// The minimal amount of instances in core group.
func (o MrScalarOutput) CoreMinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.CoreMinSize }).(pulumi.IntPtrOutput)
}

// Each `*_scaling_*_policy` supports the following:
func (o MrScalarOutput) CoreScalingDownPolicies() MrScalarCoreScalingDownPolicyArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarCoreScalingDownPolicyArrayOutput { return v.CoreScalingDownPolicies }).(MrScalarCoreScalingDownPolicyArrayOutput)
}

func (o MrScalarOutput) CoreScalingUpPolicies() MrScalarCoreScalingUpPolicyArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarCoreScalingUpPolicyArrayOutput { return v.CoreScalingUpPolicies }).(MrScalarCoreScalingUpPolicyArrayOutput)
}

// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
func (o MrScalarOutput) CoreUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.CoreUnit }).(pulumi.StringPtrOutput)
}

// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
func (o MrScalarOutput) CustomAmiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.CustomAmiId }).(pulumi.StringPtrOutput)
}

// The MrScaler description.
func (o MrScalarOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MrScalarOutput) EbsRootVolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.EbsRootVolumeSize }).(pulumi.IntPtrOutput)
}

// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
func (o MrScalarOutput) Ec2KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.Ec2KeyName }).(pulumi.StringPtrOutput)
}

// Allow the `clusterId` to set a provider output variable.
func (o MrScalarOutput) ExposeClusterId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.ExposeClusterId }).(pulumi.BoolPtrOutput)
}

// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
func (o MrScalarOutput) InstanceWeights() MrScalarInstanceWeightArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarInstanceWeightArrayOutput { return v.InstanceWeights }).(MrScalarInstanceWeightArrayOutput)
}

// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
func (o MrScalarOutput) JobFlowRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.JobFlowRole }).(pulumi.StringPtrOutput)
}

// Specifies whether the cluster should remain available after completing all steps.
func (o MrScalarOutput) KeepJobFlowAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.KeepJobFlowAlive }).(pulumi.BoolPtrOutput)
}

// The path to the Amazon S3 location where logs for this cluster are stored.
func (o MrScalarOutput) LogUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.LogUri }).(pulumi.StringPtrOutput)
}

// EMR Managed Security group that will be set to the primary instance group.
func (o MrScalarOutput) ManagedPrimarySecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ManagedPrimarySecurityGroup }).(pulumi.StringPtrOutput)
}

// EMR Managed Security group that will be set to the replica instance group.
func (o MrScalarOutput) ManagedReplicaSecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ManagedReplicaSecurityGroup }).(pulumi.StringPtrOutput)
}

// This determines the ebs configuration for your master group instances. Only a single block is allowed.
func (o MrScalarOutput) MasterEbsBlockDevices() MrScalarMasterEbsBlockDeviceArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarMasterEbsBlockDeviceArrayOutput { return v.MasterEbsBlockDevices }).(MrScalarMasterEbsBlockDeviceArrayOutput)
}

// EBS Optimization setting for instances in group.
func (o MrScalarOutput) MasterEbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.MasterEbsOptimized }).(pulumi.BoolPtrOutput)
}

// The MrScaler instance types for the master nodes.
func (o MrScalarOutput) MasterInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.MasterInstanceTypes }).(pulumi.StringArrayOutput)
}

// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
func (o MrScalarOutput) MasterLifecycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.MasterLifecycle }).(pulumi.StringPtrOutput)
}

// Number of instances in the master group.
func (o MrScalarOutput) MasterTarget() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.MasterTarget }).(pulumi.IntPtrOutput)
}

// The MrScaler name.
func (o MrScalarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MrScalarOutput) OutputClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringOutput { return v.OutputClusterId }).(pulumi.StringOutput)
}

func (o MrScalarOutput) ProvisioningTimeout() MrScalarProvisioningTimeoutPtrOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarProvisioningTimeoutPtrOutput { return v.ProvisioningTimeout }).(MrScalarProvisioningTimeoutPtrOutput)
}

// The MrScaler region.
func (o MrScalarOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o MrScalarOutput) ReleaseLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ReleaseLabel }).(pulumi.StringPtrOutput)
}

// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
func (o MrScalarOutput) RepoUpgradeOnBoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.RepoUpgradeOnBoot }).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
func (o MrScalarOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// An array of scheduled tasks.
func (o MrScalarOutput) ScheduledTasks() MrScalarScheduledTaskArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarScheduledTaskArrayOutput { return v.ScheduledTasks }).(MrScalarScheduledTaskArrayOutput)
}

// The name of the security configuration applied to the cluster.
func (o MrScalarOutput) SecurityConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.SecurityConfig }).(pulumi.StringPtrOutput)
}

// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
func (o MrScalarOutput) ServiceAccessSecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ServiceAccessSecurityGroup }).(pulumi.StringPtrOutput)
}

// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
func (o MrScalarOutput) ServiceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.ServiceRole }).(pulumi.StringPtrOutput)
}

// Steps from S3.
func (o MrScalarOutput) StepsFiles() MrScalarStepsFileArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarStepsFileArrayOutput { return v.StepsFiles }).(MrScalarStepsFileArrayOutput)
}

// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
func (o MrScalarOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringOutput { return v.Strategy }).(pulumi.StringOutput)
}

// A list of tags to assign to the resource. You may define multiple tags.
func (o MrScalarOutput) Tags() MrScalarTagArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarTagArrayOutput { return v.Tags }).(MrScalarTagArrayOutput)
}

// amount of instances in task group.
func (o MrScalarOutput) TaskDesiredCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.TaskDesiredCapacity }).(pulumi.IntPtrOutput)
}

// This determines the ebs configuration for your task group instances. Only a single block is allowed.
func (o MrScalarOutput) TaskEbsBlockDevices() MrScalarTaskEbsBlockDeviceArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarTaskEbsBlockDeviceArrayOutput { return v.TaskEbsBlockDevices }).(MrScalarTaskEbsBlockDeviceArrayOutput)
}

// EBS Optimization setting for instances in group.
func (o MrScalarOutput) TaskEbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.TaskEbsOptimized }).(pulumi.BoolPtrOutput)
}

// The MrScaler instance types for the task nodes.
func (o MrScalarOutput) TaskInstanceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringArrayOutput { return v.TaskInstanceTypes }).(pulumi.StringArrayOutput)
}

// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
func (o MrScalarOutput) TaskLifecycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.TaskLifecycle }).(pulumi.StringPtrOutput)
}

// maximal amount of instances in task group.
func (o MrScalarOutput) TaskMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.TaskMaxSize }).(pulumi.IntPtrOutput)
}

// The minimal amount of instances in task group.
func (o MrScalarOutput) TaskMinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.IntPtrOutput { return v.TaskMinSize }).(pulumi.IntPtrOutput)
}

// Possible core group scaling policies (Clone, New strategies):
func (o MrScalarOutput) TaskScalingDownPolicies() MrScalarTaskScalingDownPolicyArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarTaskScalingDownPolicyArrayOutput { return v.TaskScalingDownPolicies }).(MrScalarTaskScalingDownPolicyArrayOutput)
}

func (o MrScalarOutput) TaskScalingUpPolicies() MrScalarTaskScalingUpPolicyArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarTaskScalingUpPolicyArrayOutput { return v.TaskScalingUpPolicies }).(MrScalarTaskScalingUpPolicyArrayOutput)
}

// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
func (o MrScalarOutput) TaskUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.StringPtrOutput { return v.TaskUnit }).(pulumi.StringPtrOutput)
}

// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
func (o MrScalarOutput) TerminationPolicies() MrScalarTerminationPolicyArrayOutput {
	return o.ApplyT(func(v *MrScalar) MrScalarTerminationPolicyArrayOutput { return v.TerminationPolicies }).(MrScalarTerminationPolicyArrayOutput)
}

// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
func (o MrScalarOutput) TerminationProtected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.TerminationProtected }).(pulumi.BoolPtrOutput)
}

// Deprecated: This field has been removed from our API and is no longer functional.
func (o MrScalarOutput) VisibleToAllUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MrScalar) pulumi.BoolPtrOutput { return v.VisibleToAllUsers }).(pulumi.BoolPtrOutput)
}

type MrScalarArrayOutput struct{ *pulumi.OutputState }

func (MrScalarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MrScalar)(nil)).Elem()
}

func (o MrScalarArrayOutput) ToMrScalarArrayOutput() MrScalarArrayOutput {
	return o
}

func (o MrScalarArrayOutput) ToMrScalarArrayOutputWithContext(ctx context.Context) MrScalarArrayOutput {
	return o
}

func (o MrScalarArrayOutput) Index(i pulumi.IntInput) MrScalarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MrScalar {
		return vs[0].([]*MrScalar)[vs[1].(int)]
	}).(MrScalarOutput)
}

type MrScalarMapOutput struct{ *pulumi.OutputState }

func (MrScalarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MrScalar)(nil)).Elem()
}

func (o MrScalarMapOutput) ToMrScalarMapOutput() MrScalarMapOutput {
	return o
}

func (o MrScalarMapOutput) ToMrScalarMapOutputWithContext(ctx context.Context) MrScalarMapOutput {
	return o
}

func (o MrScalarMapOutput) MapIndex(k pulumi.StringInput) MrScalarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MrScalar {
		return vs[0].(map[string]*MrScalar)[vs[1].(string)]
	}).(MrScalarOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MrScalarInput)(nil)).Elem(), &MrScalar{})
	pulumi.RegisterInputType(reflect.TypeOf((*MrScalarArrayInput)(nil)).Elem(), MrScalarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MrScalarMapInput)(nil)).Elem(), MrScalarMap{})
	pulumi.RegisterOutputType(MrScalarOutput{})
	pulumi.RegisterOutputType(MrScalarArrayOutput{})
	pulumi.RegisterOutputType(MrScalarMapOutput{})
}
