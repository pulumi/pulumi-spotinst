// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Spotinst AWS MrScaler resource.
//
// ## Example Usage
// ### New Strategy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aws.NewMrScalar(ctx, "sample_MrScaler_01", &aws.MrScalarArgs{
// 			AdditionalInfo: pulumi.String("{'test':'more information'}"),
// 			AdditionalPrimarySecurityGroups: pulumi.StringArray{
// 				pulumi.String("sg-456321"),
// 			},
// 			AdditionalReplicaSecurityGroups: pulumi.StringArray{
// 				pulumi.String("sg-123654"),
// 			},
// 			Applications: aws.MrScalarApplicationArray{
// 				&aws.MrScalarApplicationArgs{
// 					Name:    pulumi.String("Ganglia"),
// 					Version: pulumi.String("1.0"),
// 				},
// 				&aws.MrScalarApplicationArgs{
// 					Name: pulumi.String("Hadoop"),
// 				},
// 				&aws.MrScalarApplicationArgs{
// 					Args: pulumi.StringArray{
// 						pulumi.String("fake"),
// 						pulumi.String("args"),
// 					},
// 					Name: pulumi.String("Pig"),
// 				},
// 			},
// 			AvailabilityZones: pulumi.StringArray{
// 				pulumi.String("us-west-2a:subnet-123456"),
// 			},
// 			BootstrapActionsFiles: aws.MrScalarBootstrapActionsFileArray{
// 				&aws.MrScalarBootstrapActionsFileArgs{
// 					Bucket: pulumi.String("sample-emr-test"),
// 					Key:    pulumi.String("bootstrap-actions.json"),
// 				},
// 			},
// 			ConfigurationsFiles: aws.MrScalarConfigurationsFileArray{
// 				&aws.MrScalarConfigurationsFileArgs{
// 					Bucket: pulumi.String("example-bucket"),
// 					Key:    pulumi.String("configurations.json"),
// 				},
// 			},
// 			CoreDesiredCapacity: pulumi.Int(1),
// 			CoreEbsBlockDevices: aws.MrScalarCoreEbsBlockDeviceArray{
// 				&aws.MrScalarCoreEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(40),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(2),
// 				},
// 			},
// 			CoreEbsOptimized: pulumi.Bool(false),
// 			CoreInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 				pulumi.String("c4.xlarge"),
// 			},
// 			CoreLifecycle: pulumi.String("ON_DEMAND"),
// 			CoreMaxSize:   pulumi.Int(1),
// 			CoreMinSize:   pulumi.Int(1),
// 			CoreUnit:      pulumi.String("instance"),
// 			CustomAmiId:   pulumi.String("ami-123456"),
// 			Description:   pulumi.String("Testing MrScaler creation"),
// 			Ec2KeyName:    pulumi.String("test-key"),
// 			InstanceWeights: aws.MrScalarInstanceWeightArray{
// 				&aws.MrScalarInstanceWeightArgs{
// 					InstanceType:     pulumi.String("t2.small"),
// 					WeightedCapacity: pulumi.Int(10),
// 				},
// 				&aws.MrScalarInstanceWeightArgs{
// 					InstanceType:     pulumi.String("t2.medium"),
// 					WeightedCapacity: pulumi.Int(90),
// 				},
// 			},
// 			JobFlowRole:                 pulumi.String("EMR_EC2_ExampleRole"),
// 			KeepJobFlowAlive:            pulumi.Bool(true),
// 			LogUri:                      pulumi.String("s3://example-logs"),
// 			ManagedPrimarySecurityGroup: pulumi.String("sg-123456"),
// 			ManagedReplicaSecurityGroup: pulumi.String("sg-987654"),
// 			MasterEbsBlockDevices: aws.MrScalarMasterEbsBlockDeviceArray{
// 				&aws.MrScalarMasterEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(30),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(1),
// 				},
// 			},
// 			MasterEbsOptimized: pulumi.Bool(true),
// 			MasterInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 			},
// 			MasterLifecycle: pulumi.String("SPOT"),
// 			ProvisioningTimeout: &aws.MrScalarProvisioningTimeoutArgs{
// 				Timeout:       pulumi.Int(15),
// 				TimeoutAction: pulumi.String("terminateAndRetry"),
// 			},
// 			Region:                     pulumi.String("us-west-2"),
// 			ReleaseLabel:               pulumi.String("emr-5.17.0"),
// 			RepoUpgradeOnBoot:          pulumi.String("NONE"),
// 			Retries:                    pulumi.Int(2),
// 			SecurityConfig:             pulumi.String("example-config"),
// 			ServiceAccessSecurityGroup: pulumi.String("access-example"),
// 			ServiceRole:                pulumi.String("example-role"),
// 			StepsFiles: aws.MrScalarStepsFileArray{
// 				&aws.MrScalarStepsFileArgs{
// 					Bucket: pulumi.String("example-bucket"),
// 					Key:    pulumi.String("steps.json"),
// 				},
// 			},
// 			Strategy: pulumi.String("new"),
// 			Tags: aws.MrScalarTagArray{
// 				&aws.MrScalarTagArgs{
// 					Key:   pulumi.String("Creator"),
// 					Value: pulumi.String("Pulumi"),
// 				},
// 			},
// 			TaskDesiredCapacity: pulumi.Int(1),
// 			TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
// 				&aws.MrScalarTaskEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(40),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(2),
// 				},
// 			},
// 			TaskEbsOptimized: pulumi.Bool(false),
// 			TaskInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 				pulumi.String("c4.xlarge"),
// 			},
// 			TaskLifecycle:        pulumi.String("SPOT"),
// 			TaskMaxSize:          pulumi.Int(30),
// 			TaskMinSize:          pulumi.Int(0),
// 			TaskUnit:             pulumi.String("instance"),
// 			TerminationProtected: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Clone Strategy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aws.NewMrScalar(ctx, "sample_MrScaler_01", &aws.MrScalarArgs{
// 			AvailabilityZones: pulumi.StringArray{
// 				pulumi.String("us-west-2a:subnet-12345678"),
// 			},
// 			ClusterId:           pulumi.String("j-123456789"),
// 			CoreDesiredCapacity: pulumi.Int(1),
// 			CoreEbsBlockDevices: aws.MrScalarCoreEbsBlockDeviceArray{
// 				&aws.MrScalarCoreEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(40),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(2),
// 				},
// 			},
// 			CoreEbsOptimized: pulumi.Bool(false),
// 			CoreInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 				pulumi.String("c4.xlarge"),
// 			},
// 			CoreLifecycle:   pulumi.String("ON_DEMAND"),
// 			CoreMaxSize:     pulumi.Int(1),
// 			CoreMinSize:     pulumi.Int(1),
// 			CoreUnit:        pulumi.String("instance"),
// 			Description:     pulumi.String("Testing MrScaler creation"),
// 			ExposeClusterId: pulumi.Bool(true),
// 			MasterEbsBlockDevices: aws.MrScalarMasterEbsBlockDeviceArray{
// 				&aws.MrScalarMasterEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(30),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(1),
// 				},
// 			},
// 			MasterEbsOptimized: pulumi.Bool(true),
// 			MasterInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 			},
// 			MasterLifecycle: pulumi.String("SPOT"),
// 			Region:          pulumi.String("us-west-2"),
// 			Strategy:        pulumi.String("clone"),
// 			Tags: aws.MrScalarTagArray{
// 				&aws.MrScalarTagArgs{
// 					Key:   pulumi.String("Creator"),
// 					Value: pulumi.String("Pulumi"),
// 				},
// 			},
// 			TaskDesiredCapacity: pulumi.Int(1),
// 			TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
// 				&aws.MrScalarTaskEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(40),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(2),
// 				},
// 			},
// 			TaskEbsOptimized: pulumi.Bool(false),
// 			TaskInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 				pulumi.String("c4.xlarge"),
// 			},
// 			TaskLifecycle: pulumi.String("SPOT"),
// 			TaskMaxSize:   pulumi.Int(30),
// 			TaskMinSize:   pulumi.Int(0),
// 			TaskScalingDownPolicies: aws.MrScalarTaskScalingDownPolicyArray{
// 				&aws.MrScalarTaskScalingDownPolicyArgs{
// 					ActionType: pulumi.String(""),
// 					Adjustment: pulumi.String("1"),
// 					Cooldown:   pulumi.Int(60),
// 					Dimensions: pulumi.StringMap{
// 						"name":  pulumi.String("name-1"),
// 						"value": pulumi.String("value-1"),
// 					},
// 					EvaluationPeriods: pulumi.Int(10),
// 					MaxTargetCapacity: pulumi.String("1"),
// 					Maximum:           pulumi.String("10"),
// 					MetricName:        pulumi.String("CPUUtilization"),
// 					Minimum:           pulumi.String("0"),
// 					Namespace:         pulumi.String("AWS/EC2"),
// 					Operator:          pulumi.String("gt"),
// 					Period:            pulumi.Int(60),
// 					PolicyName:        pulumi.String("policy-name"),
// 					Statistic:         pulumi.String("average"),
// 					Target:            pulumi.String("5"),
// 					Threshold:         pulumi.Float64(10),
// 					Unit:              pulumi.String(""),
// 				},
// 			},
// 			TaskUnit: pulumi.String("instance"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("mrscaler-name", sample_MrScaler_01.Name)
// 		ctx.Export("mrscaler-created-cluster-id", sample_MrScaler_01.OutputClusterId)
// 		return nil
// 	})
// }
// ```
// ### Wrap Strategy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/aws"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aws.NewMrScalar(ctx, "example_scaler_2", &aws.MrScalarArgs{
// 			ClusterId:           pulumi.String("j-27UVDEHXL4OQM"),
// 			Description:         pulumi.String("created by Pulumi"),
// 			Region:              pulumi.String("us-west-2"),
// 			Strategy:            pulumi.String("wrap"),
// 			TaskDesiredCapacity: pulumi.Int(2),
// 			TaskEbsBlockDevices: aws.MrScalarTaskEbsBlockDeviceArray{
// 				&aws.MrScalarTaskEbsBlockDeviceArgs{
// 					SizeInGb:           pulumi.Int(20),
// 					VolumeType:         pulumi.String("gp2"),
// 					VolumesPerInstance: pulumi.Int(1),
// 				},
// 			},
// 			TaskInstanceTypes: pulumi.StringArray{
// 				pulumi.String("c3.xlarge"),
// 				pulumi.String("c4.xlarge"),
// 			},
// 			TaskLifecycle: pulumi.String("SPOT"),
// 			TaskMaxSize:   pulumi.Int(4),
// 			TaskMinSize:   pulumi.Int(0),
// 			TaskUnit:      pulumi.String("instance"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type MrScalar struct {
	pulumi.CustomResourceState

	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrOutput `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayOutput `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayOutput `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayOutput `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayOutput `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayOutput `pulumi:"configurationsFiles"`
	CoreDesiredCapacity pulumi.IntPtrOutput                   `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayOutput `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrOutput `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayOutput `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle           pulumi.StringPtrOutput                   `pulumi:"coreLifecycle"`
	CoreMaxSize             pulumi.IntPtrOutput                      `pulumi:"coreMaxSize"`
	CoreMinSize             pulumi.IntPtrOutput                      `pulumi:"coreMinSize"`
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayOutput `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayOutput   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrOutput `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrOutput `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       pulumi.StringPtrOutput `pulumi:"description"`
	EbsRootVolumeSize pulumi.IntPtrOutput    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrOutput `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrOutput `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayOutput `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrOutput `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrOutput `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrOutput `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrOutput `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrOutput `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayOutput `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrOutput `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayOutput `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrOutput `pulumi:"masterLifecycle"`
	// The application name.
	Name                pulumi.StringOutput                  `pulumi:"name"`
	OutputClusterId     pulumi.StringOutput                  `pulumi:"outputClusterId"`
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrOutput `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       pulumi.StringPtrOutput `pulumi:"region"`
	ReleaseLabel pulumi.StringPtrOutput `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrOutput `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrOutput `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrOutput `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrOutput `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayOutput `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringOutput `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags                MrScalarTagArrayOutput `pulumi:"tags"`
	TaskDesiredCapacity pulumi.IntPtrOutput    `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayOutput `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrOutput `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayOutput `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle           pulumi.StringPtrOutput                   `pulumi:"taskLifecycle"`
	TaskMaxSize             pulumi.IntPtrOutput                      `pulumi:"taskMaxSize"`
	TaskMinSize             pulumi.IntPtrOutput                      `pulumi:"taskMinSize"`
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayOutput `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayOutput   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrOutput `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayOutput `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrOutput `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrOutput `pulumi:"visibleToAllUsers"`
}

// NewMrScalar registers a new resource with the given unique name, arguments, and options.
func NewMrScalar(ctx *pulumi.Context,
	name string, args *MrScalarArgs, opts ...pulumi.ResourceOption) (*MrScalar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	var resource MrScalar
	err := ctx.RegisterResource("spotinst:aws/mrScalar:MrScalar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMrScalar gets an existing MrScalar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMrScalar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MrScalarState, opts ...pulumi.ResourceOption) (*MrScalar, error) {
	var resource MrScalar
	err := ctx.ReadResource("spotinst:aws/mrScalar:MrScalar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MrScalar resources.
type mrScalarState struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo *string `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups []string `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups []string `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications []MrScalarApplication `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles []MrScalarBootstrapActionsFile `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles []MrScalarConfigurationsFile `pulumi:"configurationsFiles"`
	CoreDesiredCapacity *int                         `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices []MrScalarCoreEbsBlockDevice `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized *bool `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes []string `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle           *string                         `pulumi:"coreLifecycle"`
	CoreMaxSize             *int                            `pulumi:"coreMaxSize"`
	CoreMinSize             *int                            `pulumi:"coreMinSize"`
	CoreScalingDownPolicies []MrScalarCoreScalingDownPolicy `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   []MrScalarCoreScalingUpPolicy   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit *string `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId *string `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       *string `pulumi:"description"`
	EbsRootVolumeSize *int    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName *string `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId *bool `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights []MrScalarInstanceWeight `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole *string `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive *bool `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri *string `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup *string `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup *string `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices []MrScalarMasterEbsBlockDevice `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized *bool `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes []string `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle *string `pulumi:"masterLifecycle"`
	// The application name.
	Name                *string                      `pulumi:"name"`
	OutputClusterId     *string                      `pulumi:"outputClusterId"`
	ProvisioningTimeout *MrScalarProvisioningTimeout `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       *string `pulumi:"region"`
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot *string `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries *int `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks []MrScalarScheduledTask `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig *string `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup *string `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles []MrScalarStepsFile `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy *string `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags                []MrScalarTag `pulumi:"tags"`
	TaskDesiredCapacity *int          `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices []MrScalarTaskEbsBlockDevice `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized *bool `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes []string `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle           *string                         `pulumi:"taskLifecycle"`
	TaskMaxSize             *int                            `pulumi:"taskMaxSize"`
	TaskMinSize             *int                            `pulumi:"taskMinSize"`
	TaskScalingDownPolicies []MrScalarTaskScalingDownPolicy `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   []MrScalarTaskScalingUpPolicy   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit *string `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies []MrScalarTerminationPolicy `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected *bool `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

type MrScalarState struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrInput
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayInput
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayInput
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayInput
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayInput
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayInput
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrInput
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayInput
	CoreDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle           pulumi.StringPtrInput
	CoreMaxSize             pulumi.IntPtrInput
	CoreMinSize             pulumi.IntPtrInput
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayInput
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrInput
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrInput
	// The MrScaler description.
	Description       pulumi.StringPtrInput
	EbsRootVolumeSize pulumi.IntPtrInput
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrInput
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrInput
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayInput
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrInput
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrInput
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrInput
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrInput
	// The application name.
	Name                pulumi.StringPtrInput
	OutputClusterId     pulumi.StringPtrInput
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrInput
	// The MrScaler region.
	Region       pulumi.StringPtrInput
	ReleaseLabel pulumi.StringPtrInput
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrInput
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrInput
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayInput
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrInput
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrInput
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrInput
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayInput
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringPtrInput
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags                MrScalarTagArrayInput
	TaskDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle           pulumi.StringPtrInput
	TaskMaxSize             pulumi.IntPtrInput
	TaskMinSize             pulumi.IntPtrInput
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayInput
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrInput
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayInput
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrInput
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (MrScalarState) ElementType() reflect.Type {
	return reflect.TypeOf((*mrScalarState)(nil)).Elem()
}

type mrScalarArgs struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo *string `pulumi:"additionalInfo"`
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups []string `pulumi:"additionalPrimarySecurityGroups"`
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups []string `pulumi:"additionalReplicaSecurityGroups"`
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications []MrScalarApplication `pulumi:"applications"`
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles []MrScalarBootstrapActionsFile `pulumi:"bootstrapActionsFiles"`
	// The MrScaler cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles []MrScalarConfigurationsFile `pulumi:"configurationsFiles"`
	CoreDesiredCapacity *int                         `pulumi:"coreDesiredCapacity"`
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices []MrScalarCoreEbsBlockDevice `pulumi:"coreEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized *bool `pulumi:"coreEbsOptimized"`
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes []string `pulumi:"coreInstanceTypes"`
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle           *string                         `pulumi:"coreLifecycle"`
	CoreMaxSize             *int                            `pulumi:"coreMaxSize"`
	CoreMinSize             *int                            `pulumi:"coreMinSize"`
	CoreScalingDownPolicies []MrScalarCoreScalingDownPolicy `pulumi:"coreScalingDownPolicies"`
	CoreScalingUpPolicies   []MrScalarCoreScalingUpPolicy   `pulumi:"coreScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit *string `pulumi:"coreUnit"`
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId *string `pulumi:"customAmiId"`
	// The MrScaler description.
	Description       *string `pulumi:"description"`
	EbsRootVolumeSize *int    `pulumi:"ebsRootVolumeSize"`
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName *string `pulumi:"ec2KeyName"`
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId *bool `pulumi:"exposeClusterId"`
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights []MrScalarInstanceWeight `pulumi:"instanceWeights"`
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole *string `pulumi:"jobFlowRole"`
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive *bool `pulumi:"keepJobFlowAlive"`
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri *string `pulumi:"logUri"`
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup *string `pulumi:"managedPrimarySecurityGroup"`
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup *string `pulumi:"managedReplicaSecurityGroup"`
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices []MrScalarMasterEbsBlockDevice `pulumi:"masterEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized *bool `pulumi:"masterEbsOptimized"`
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes []string `pulumi:"masterInstanceTypes"`
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle *string `pulumi:"masterLifecycle"`
	// The application name.
	Name                *string                      `pulumi:"name"`
	ProvisioningTimeout *MrScalarProvisioningTimeout `pulumi:"provisioningTimeout"`
	// The MrScaler region.
	Region       *string `pulumi:"region"`
	ReleaseLabel *string `pulumi:"releaseLabel"`
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot *string `pulumi:"repoUpgradeOnBoot"`
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries *int `pulumi:"retries"`
	// An array of scheduled tasks.
	ScheduledTasks []MrScalarScheduledTask `pulumi:"scheduledTasks"`
	// The name of the security configuration applied to the cluster.
	SecurityConfig *string `pulumi:"securityConfig"`
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup *string `pulumi:"serviceAccessSecurityGroup"`
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole *string `pulumi:"serviceRole"`
	// Steps from S3.
	StepsFiles []MrScalarStepsFile `pulumi:"stepsFiles"`
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy string `pulumi:"strategy"`
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags                []MrScalarTag `pulumi:"tags"`
	TaskDesiredCapacity *int          `pulumi:"taskDesiredCapacity"`
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices []MrScalarTaskEbsBlockDevice `pulumi:"taskEbsBlockDevices"`
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized *bool `pulumi:"taskEbsOptimized"`
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes []string `pulumi:"taskInstanceTypes"`
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle           *string                         `pulumi:"taskLifecycle"`
	TaskMaxSize             *int                            `pulumi:"taskMaxSize"`
	TaskMinSize             *int                            `pulumi:"taskMinSize"`
	TaskScalingDownPolicies []MrScalarTaskScalingDownPolicy `pulumi:"taskScalingDownPolicies"`
	TaskScalingUpPolicies   []MrScalarTaskScalingUpPolicy   `pulumi:"taskScalingUpPolicies"`
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit *string `pulumi:"taskUnit"`
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies []MrScalarTerminationPolicy `pulumi:"terminationPolicies"`
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected *bool `pulumi:"terminationProtected"`
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers *bool `pulumi:"visibleToAllUsers"`
}

// The set of arguments for constructing a MrScalar resource.
type MrScalarArgs struct {
	// This is meta information about third-party applications that third-party vendors use for testing purposes.
	AdditionalInfo pulumi.StringPtrInput
	// A list of additional Amazon EC2 security group IDs for the master node.
	AdditionalPrimarySecurityGroups pulumi.StringArrayInput
	// A list of additional Amazon EC2 security group IDs for the core and task nodes.
	AdditionalReplicaSecurityGroups pulumi.StringArrayInput
	// A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
	Applications MrScalarApplicationArrayInput
	// List of AZs and their subnet Ids. See example above for usage.
	AvailabilityZones pulumi.StringArrayInput
	// Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	BootstrapActionsFiles MrScalarBootstrapActionsFileArrayInput
	// The MrScaler cluster id.
	ClusterId pulumi.StringPtrInput
	// Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
	ConfigurationsFiles MrScalarConfigurationsFileArrayInput
	CoreDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your core group instances. Only a single block is allowed.
	CoreEbsBlockDevices MrScalarCoreEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	CoreEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the core nodes.
	CoreInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	CoreLifecycle           pulumi.StringPtrInput
	CoreMaxSize             pulumi.IntPtrInput
	CoreMinSize             pulumi.IntPtrInput
	CoreScalingDownPolicies MrScalarCoreScalingDownPolicyArrayInput
	CoreScalingUpPolicies   MrScalarCoreScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	CoreUnit pulumi.StringPtrInput
	// The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
	CustomAmiId pulumi.StringPtrInput
	// The MrScaler description.
	Description       pulumi.StringPtrInput
	EbsRootVolumeSize pulumi.IntPtrInput
	// The name of an Amazon EC2 key pair that can be used to ssh to the master node.
	Ec2KeyName pulumi.StringPtrInput
	// Allow the `clusterId` to set a provider output variable.
	ExposeClusterId pulumi.BoolPtrInput
	// Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
	InstanceWeights MrScalarInstanceWeightArrayInput
	// The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
	JobFlowRole pulumi.StringPtrInput
	// Specifies whether the cluster should remain available after completing all steps.
	KeepJobFlowAlive pulumi.BoolPtrInput
	// The path to the Amazon S3 location where logs for this cluster are stored.
	LogUri pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the primary instance group.
	ManagedPrimarySecurityGroup pulumi.StringPtrInput
	// EMR Managed Security group that will be set to the replica instance group.
	ManagedReplicaSecurityGroup pulumi.StringPtrInput
	// This determines the ebs configuration for your master group instances. Only a single block is allowed.
	MasterEbsBlockDevices MrScalarMasterEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	MasterEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the master nodes.
	MasterInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	MasterLifecycle pulumi.StringPtrInput
	// The application name.
	Name                pulumi.StringPtrInput
	ProvisioningTimeout MrScalarProvisioningTimeoutPtrInput
	// The MrScaler region.
	Region       pulumi.StringPtrInput
	ReleaseLabel pulumi.StringPtrInput
	// Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
	RepoUpgradeOnBoot pulumi.StringPtrInput
	// Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
	Retries pulumi.IntPtrInput
	// An array of scheduled tasks.
	ScheduledTasks MrScalarScheduledTaskArrayInput
	// The name of the security configuration applied to the cluster.
	SecurityConfig pulumi.StringPtrInput
	// The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
	ServiceAccessSecurityGroup pulumi.StringPtrInput
	// The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
	ServiceRole pulumi.StringPtrInput
	// Steps from S3.
	StepsFiles MrScalarStepsFileArrayInput
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy pulumi.StringInput
	// A list of tags to assign to the resource. You may define multiple tags.
	Tags                MrScalarTagArrayInput
	TaskDesiredCapacity pulumi.IntPtrInput
	// This determines the ebs configuration for your task group instances. Only a single block is allowed.
	TaskEbsBlockDevices MrScalarTaskEbsBlockDeviceArrayInput
	// EBS Optimization setting for instances in group.
	TaskEbsOptimized pulumi.BoolPtrInput
	// The MrScaler instance types for the task nodes.
	TaskInstanceTypes pulumi.StringArrayInput
	// The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
	TaskLifecycle           pulumi.StringPtrInput
	TaskMaxSize             pulumi.IntPtrInput
	TaskMinSize             pulumi.IntPtrInput
	TaskScalingDownPolicies MrScalarTaskScalingDownPolicyArrayInput
	TaskScalingUpPolicies   MrScalarTaskScalingUpPolicyArrayInput
	// Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
	TaskUnit pulumi.StringPtrInput
	// Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
	TerminationPolicies MrScalarTerminationPolicyArrayInput
	// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
	TerminationProtected pulumi.BoolPtrInput
	// Deprecated: This field has been removed from our API and is no longer functional.
	VisibleToAllUsers pulumi.BoolPtrInput
}

func (MrScalarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mrScalarArgs)(nil)).Elem()
}

type MrScalarInput interface {
	pulumi.Input

	ToMrScalarOutput() MrScalarOutput
	ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput
}

func (*MrScalar) ElementType() reflect.Type {
	return reflect.TypeOf((*MrScalar)(nil))
}

func (i *MrScalar) ToMrScalarOutput() MrScalarOutput {
	return i.ToMrScalarOutputWithContext(context.Background())
}

func (i *MrScalar) ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarOutput)
}

func (i *MrScalar) ToMrScalarPtrOutput() MrScalarPtrOutput {
	return i.ToMrScalarPtrOutputWithContext(context.Background())
}

func (i *MrScalar) ToMrScalarPtrOutputWithContext(ctx context.Context) MrScalarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarPtrOutput)
}

type MrScalarPtrInput interface {
	pulumi.Input

	ToMrScalarPtrOutput() MrScalarPtrOutput
	ToMrScalarPtrOutputWithContext(ctx context.Context) MrScalarPtrOutput
}

type mrScalarPtrType MrScalarArgs

func (*mrScalarPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MrScalar)(nil))
}

func (i *mrScalarPtrType) ToMrScalarPtrOutput() MrScalarPtrOutput {
	return i.ToMrScalarPtrOutputWithContext(context.Background())
}

func (i *mrScalarPtrType) ToMrScalarPtrOutputWithContext(ctx context.Context) MrScalarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarPtrOutput)
}

// MrScalarArrayInput is an input type that accepts MrScalarArray and MrScalarArrayOutput values.
// You can construct a concrete instance of `MrScalarArrayInput` via:
//
//          MrScalarArray{ MrScalarArgs{...} }
type MrScalarArrayInput interface {
	pulumi.Input

	ToMrScalarArrayOutput() MrScalarArrayOutput
	ToMrScalarArrayOutputWithContext(context.Context) MrScalarArrayOutput
}

type MrScalarArray []MrScalarInput

func (MrScalarArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*MrScalar)(nil))
}

func (i MrScalarArray) ToMrScalarArrayOutput() MrScalarArrayOutput {
	return i.ToMrScalarArrayOutputWithContext(context.Background())
}

func (i MrScalarArray) ToMrScalarArrayOutputWithContext(ctx context.Context) MrScalarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarArrayOutput)
}

// MrScalarMapInput is an input type that accepts MrScalarMap and MrScalarMapOutput values.
// You can construct a concrete instance of `MrScalarMapInput` via:
//
//          MrScalarMap{ "key": MrScalarArgs{...} }
type MrScalarMapInput interface {
	pulumi.Input

	ToMrScalarMapOutput() MrScalarMapOutput
	ToMrScalarMapOutputWithContext(context.Context) MrScalarMapOutput
}

type MrScalarMap map[string]MrScalarInput

func (MrScalarMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*MrScalar)(nil))
}

func (i MrScalarMap) ToMrScalarMapOutput() MrScalarMapOutput {
	return i.ToMrScalarMapOutputWithContext(context.Background())
}

func (i MrScalarMap) ToMrScalarMapOutputWithContext(ctx context.Context) MrScalarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MrScalarMapOutput)
}

type MrScalarOutput struct {
	*pulumi.OutputState
}

func (MrScalarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MrScalar)(nil))
}

func (o MrScalarOutput) ToMrScalarOutput() MrScalarOutput {
	return o
}

func (o MrScalarOutput) ToMrScalarOutputWithContext(ctx context.Context) MrScalarOutput {
	return o
}

func (o MrScalarOutput) ToMrScalarPtrOutput() MrScalarPtrOutput {
	return o.ToMrScalarPtrOutputWithContext(context.Background())
}

func (o MrScalarOutput) ToMrScalarPtrOutputWithContext(ctx context.Context) MrScalarPtrOutput {
	return o.ApplyT(func(v MrScalar) *MrScalar {
		return &v
	}).(MrScalarPtrOutput)
}

type MrScalarPtrOutput struct {
	*pulumi.OutputState
}

func (MrScalarPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MrScalar)(nil))
}

func (o MrScalarPtrOutput) ToMrScalarPtrOutput() MrScalarPtrOutput {
	return o
}

func (o MrScalarPtrOutput) ToMrScalarPtrOutputWithContext(ctx context.Context) MrScalarPtrOutput {
	return o
}

type MrScalarArrayOutput struct{ *pulumi.OutputState }

func (MrScalarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MrScalar)(nil))
}

func (o MrScalarArrayOutput) ToMrScalarArrayOutput() MrScalarArrayOutput {
	return o
}

func (o MrScalarArrayOutput) ToMrScalarArrayOutputWithContext(ctx context.Context) MrScalarArrayOutput {
	return o
}

func (o MrScalarArrayOutput) Index(i pulumi.IntInput) MrScalarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MrScalar {
		return vs[0].([]MrScalar)[vs[1].(int)]
	}).(MrScalarOutput)
}

type MrScalarMapOutput struct{ *pulumi.OutputState }

func (MrScalarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MrScalar)(nil))
}

func (o MrScalarMapOutput) ToMrScalarMapOutput() MrScalarMapOutput {
	return o
}

func (o MrScalarMapOutput) ToMrScalarMapOutputWithContext(ctx context.Context) MrScalarMapOutput {
	return o
}

func (o MrScalarMapOutput) MapIndex(k pulumi.StringInput) MrScalarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MrScalar {
		return vs[0].(map[string]MrScalar)[vs[1].(string)]
	}).(MrScalarOutput)
}

func init() {
	pulumi.RegisterOutputType(MrScalarOutput{})
	pulumi.RegisterOutputType(MrScalarPtrOutput{})
	pulumi.RegisterOutputType(MrScalarArrayOutput{})
	pulumi.RegisterOutputType(MrScalarMapOutput{})
}
