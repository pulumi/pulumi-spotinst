// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Spotinst AWS MrScaler resource.
// 
// ## Provisioning Timeout (Clone, New strategies)
// 
// * `timeout` - (Optional) The amount of time (minutes) after which the cluster is automatically terminated if it's still in provisioning status. Minimum: '15'.
// * `timeoutAction` - (Optional) The action to take if the timeout is exceeded. Valid values: `terminate`, `terminateAndRetry`.
// 
// <a id="cluster-config"></a>
// ## Cluster Configuration (New strategy only)
// 
// * `logUri` - (Optional) The path to the Amazon S3 location where logs for this cluster are stored.
// * `additionalInfo` - (Optional) This is meta information about third-party applications that third-party vendors use for testing purposes.
// * `securityConfig` - (Optional) The name of the security configuration applied to the cluster.
// * `serviceRole` - (Optional) The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
// * `jobFlowRole` - (Optional) The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
// * `terminationProtected` - (Optional) Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
// * `keepJobFlowAlive` - (Optional) Specifies whether the cluster should remain available after completing all steps.
// 
// <a id="task-group"></a>
// ## Task Group (Wrap, Clone, and New strategies)
// 
// * `taskInstanceTypes` - (Required) The MrScaler instance types for the task nodes.
// * `taskTarget` - (Required) amount of instances in task group.
// * `taskMaximum` - (Optional) maximal amount of instances in task group.
// * `taskMinimum` - (Optional) The minimal amount of instances in task group.
// * `taskLifecycle` - (Required) The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
// * `taskEbsOptimized` - (Optional) EBS Optimization setting for instances in group.
// * `taskEbsBlockDevice` - (Required) This determines the ebs configuration for your task group instances. Only a single block is allowed.
//     * `volumesPerInstance` - (Optional; Default 1) Amount of volumes per instance in the task group.
//     * `volumeType` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
//     * `sizeInGb` - (Required) Size of the volume, in GBs.
//     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
// 
// <a id="core-group"></a>
// ## Core Group (Clone, New strategies)
// 
// * `coreInstanceTypes` - (Required) The MrScaler instance types for the core nodes.
// * `coreTarget` - (Required) amount of instances in core group.
// * `coreMaximum` - (Optional) maximal amount of instances in core group.
// * `coreMinimum` - (Optional) The minimal amount of instances in core group.
// * `coreLifecycle` - (Required) The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
// * `coreEbsOptimized` - (Optional) EBS Optimization setting for instances in group.
// * `coreEbsBlockDevice` - (Required) This determines the ebs configuration for your core group instances. Only a single block is allowed.
//     * `volumesPerInstance` - (Optional; Default 1) Amount of volumes per instance in the core group.
//     * `volumeType` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
//     * `sizeInGb` - (Required) Size of the volume, in GBs.
//     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
// 
// <a id="master-group"></a>
// ## Master Group (Clone, New strategies)
// 
// * `masterInstanceTypes` - (Required) The MrScaler instance types for the master nodes.
// * `masterLifecycle` - (Required) The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
// * `masterEbsOptimized` - (Optional) EBS Optimization setting for instances in group.
// * `masterEbsBlockDevice` - (Required) This determines the ebs configuration for your master group instances. Only a single block is allowed.
//     * `volumesPerInstance` - (Optional; Default 1) Amount of volumes per instance in the master group.
//     * `volumeType` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
//     * `sizeInGb` - (Required) Size of the volume, in GBs.
//     * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.
// 
// <a id="tags"></a>
// ## Tags (Clone, New strategies)
// 
// * `tags` - (Optional) A list of tags to assign to the resource. You may define multiple tags.
//     * `key` - (Required) Tag key.
//     * `value` - (Required) Tag value.
// 
// <a id="Optional Compute Parameters"></a>  
// ## Optional Compute Parameters (New strategy)
// 
// * `managedPrimarySecurityGroup` - (Optional) EMR Managed Security group that will be set to the primary instance group.
// * `managedReplicaSecurityGroup` - (Optional) EMR Managed Security group that will be set to the replica instance group.
// * `serviceAccessSecurityGroup` - (Optional) The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
// * `additionalPrimarySecurityGroups` - (Optional) A list of additional Amazon EC2 security group IDs for the master node.
// * `additionalReplicaSecurityGroups` - (Optional) A list of additional Amazon EC2 security group IDs for the core and task nodes.
// * `customAmiId` - (Optional) The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
// * `repoUpgradeOnBoot` - (Optional) Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
// * `ec2KeyName` - (Optional) The name of an Amazon EC2 key pair that can be used to ssh to the master node.
// * `applications` - (Optional) A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
//     * `args` - (Optional) Arguments for EMR to pass to the application.
//     * `name` - (Required) The application name.
//     * `version`- (Optional)T he version of the application.
// * `instanceWeights` - (Optional) Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
//     * `instanceType` - (Required) The type of the instance.
//     * `weightedCapacity` - (Required) The weight given to the associated instance type. 
// 
// <a id="availability-zone"></a>
// ## Availability Zones (Clone, New strategies)
// 
// * `availabilityZones` - (Required in Clone) List of AZs and their subnet Ids. See example above for usage.
// 
// <a id="configurations"></a>
// ## Configurations (Clone, New strategies)
// 
// * `configurationsFile` - (Optional) Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
//     * `bucket` - (Required) S3 Bucket name for configurations.
//     * `key`- (Required) S3 key for configurations.
//     
// <a id="steps"></a>
// ## Steps (Clone, New strategies)
// 
// * `stepsFile` - (Optional) Steps from S3.
//     * `bucket` - (Required) S3 Bucket name for steps.
//     * `key`- (Required) S3 key for steps.
//     
// <a id="boostrap-actions"></a>
// ## Bootstrap Actions (Clone, New strategies)   
// 
// * `bootstrapActionsFile` - (Optional) Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
//     * `bucket` - (Required) S3 Bucket name for bootstrap actions.
//     * `key`- (Required) S3 key for bootstrap actions.
// 
// <a id="scaling-policy"></a>
// ## Scaling Policies
// 
// Possible task group scaling policies (Wrap, Clone, and New strategies):
// * `taskScalingUpPolicy`
// * `taskScalingDownPolicy`
// 
// Possible core group scaling policies (Clone, New strategies):
// * `coreScalingUpPolicy`
// * `coreScalingDownPolicy`
// 
// Each `*_scaling_*_policy` supports the following:
// 
// * `policyName` - (Required) The name of the policy.
// * `metricName` - (Required) The name of the metric, with or without spaces.
// * `statistic` - (Required) The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
// * `unit` - (Required) The unit for the metric.
// * `threshold` - (Required) The value against which the specified statistic is compared.
// * `adjustment` - (Optional) The number of instances to add/remove to/from the target capacity when scale is needed.
// * `minTargetCapacity` - (Optional) Min target capacity for scale up.
// * `maxTargetCapacity` - (Optional) Max target capacity for scale down.
// * `namespace` - (Required) The namespace for the metric.
// * `operator` - (Required) The operator to use. Allowed values are : 'gt', 'gte', 'lt' , 'lte'.
// * `evaluationPeriods` - (Required) The number of periods over which data is compared to the specified threshold.
// * `period` - (Required) The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
// * `cooldown` - (Required) The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
// * `dimensions` - (Optional) A mapping of dimensions describing qualities of the metric.
// * `minimum` - (Optional) The minimum to set when scale is needed.
// * `maximum` - (Optional) The maximum to set when scale is needed.
// * `target` - (Optional) The number of instances to set when scale is needed.
// * `actionType` - (Required) The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
// 
// <a id="scheduled-task"></a>
// ## Scheduled Tasks
// 
// * `scheduledTask` - (Optional) An array of scheduled tasks.
// * `isEnabled` - (Optional) Enable/Disable the specified scheduling task.
// * `taskType` - (Required) The type of task to be scheduled. Valid values: `setCapacity`.
// * `instanceGroupType` - (Required) Select the EMR instance groups to execute the scheduled task on. Valid values: `task`.
// * `cron` - (Required) A cron expression representing the schedule for the task.
// * `desiredCapacity` - (Optional) New desired capacity for the elastigroup.
// * `minCapacity` - (Optional) New min capacity for the elastigroup.
// * `maxCapacity` - (Optional) New max capacity for the elastigroup.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-spotinst/blob/master/website/docs/r/mrscaler_aws.html.markdown.
type MrScalar struct {
	s *pulumi.ResourceState
}

// NewMrScalar registers a new resource with the given unique name, arguments, and options.
func NewMrScalar(ctx *pulumi.Context,
	name string, args *MrScalarArgs, opts ...pulumi.ResourceOpt) (*MrScalar, error) {
	if args == nil || args.Strategy == nil {
		return nil, errors.New("missing required argument 'Strategy'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["additionalInfo"] = nil
		inputs["additionalPrimarySecurityGroups"] = nil
		inputs["additionalReplicaSecurityGroups"] = nil
		inputs["applications"] = nil
		inputs["availabilityZones"] = nil
		inputs["bootstrapActionsFiles"] = nil
		inputs["clusterId"] = nil
		inputs["configurationsFiles"] = nil
		inputs["coreDesiredCapacity"] = nil
		inputs["coreEbsBlockDevices"] = nil
		inputs["coreEbsOptimized"] = nil
		inputs["coreInstanceTypes"] = nil
		inputs["coreLifecycle"] = nil
		inputs["coreMaxSize"] = nil
		inputs["coreMinSize"] = nil
		inputs["coreScalingDownPolicies"] = nil
		inputs["coreScalingUpPolicies"] = nil
		inputs["customAmiId"] = nil
		inputs["description"] = nil
		inputs["ebsRootVolumeSize"] = nil
		inputs["ec2KeyName"] = nil
		inputs["exposeClusterId"] = nil
		inputs["instanceWeights"] = nil
		inputs["jobFlowRole"] = nil
		inputs["keepJobFlowAlive"] = nil
		inputs["logUri"] = nil
		inputs["managedPrimarySecurityGroup"] = nil
		inputs["managedReplicaSecurityGroup"] = nil
		inputs["masterEbsBlockDevices"] = nil
		inputs["masterEbsOptimized"] = nil
		inputs["masterInstanceTypes"] = nil
		inputs["masterLifecycle"] = nil
		inputs["name"] = nil
		inputs["provisioningTimeout"] = nil
		inputs["region"] = nil
		inputs["releaseLabel"] = nil
		inputs["repoUpgradeOnBoot"] = nil
		inputs["retries"] = nil
		inputs["scheduledTasks"] = nil
		inputs["securityConfig"] = nil
		inputs["serviceAccessSecurityGroup"] = nil
		inputs["serviceRole"] = nil
		inputs["stepsFiles"] = nil
		inputs["strategy"] = nil
		inputs["tags"] = nil
		inputs["taskDesiredCapacity"] = nil
		inputs["taskEbsBlockDevices"] = nil
		inputs["taskEbsOptimized"] = nil
		inputs["taskInstanceTypes"] = nil
		inputs["taskLifecycle"] = nil
		inputs["taskMaxSize"] = nil
		inputs["taskMinSize"] = nil
		inputs["taskScalingDownPolicies"] = nil
		inputs["taskScalingUpPolicies"] = nil
		inputs["terminationProtected"] = nil
		inputs["visibleToAllUsers"] = nil
	} else {
		inputs["additionalInfo"] = args.AdditionalInfo
		inputs["additionalPrimarySecurityGroups"] = args.AdditionalPrimarySecurityGroups
		inputs["additionalReplicaSecurityGroups"] = args.AdditionalReplicaSecurityGroups
		inputs["applications"] = args.Applications
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["bootstrapActionsFiles"] = args.BootstrapActionsFiles
		inputs["clusterId"] = args.ClusterId
		inputs["configurationsFiles"] = args.ConfigurationsFiles
		inputs["coreDesiredCapacity"] = args.CoreDesiredCapacity
		inputs["coreEbsBlockDevices"] = args.CoreEbsBlockDevices
		inputs["coreEbsOptimized"] = args.CoreEbsOptimized
		inputs["coreInstanceTypes"] = args.CoreInstanceTypes
		inputs["coreLifecycle"] = args.CoreLifecycle
		inputs["coreMaxSize"] = args.CoreMaxSize
		inputs["coreMinSize"] = args.CoreMinSize
		inputs["coreScalingDownPolicies"] = args.CoreScalingDownPolicies
		inputs["coreScalingUpPolicies"] = args.CoreScalingUpPolicies
		inputs["customAmiId"] = args.CustomAmiId
		inputs["description"] = args.Description
		inputs["ebsRootVolumeSize"] = args.EbsRootVolumeSize
		inputs["ec2KeyName"] = args.Ec2KeyName
		inputs["exposeClusterId"] = args.ExposeClusterId
		inputs["instanceWeights"] = args.InstanceWeights
		inputs["jobFlowRole"] = args.JobFlowRole
		inputs["keepJobFlowAlive"] = args.KeepJobFlowAlive
		inputs["logUri"] = args.LogUri
		inputs["managedPrimarySecurityGroup"] = args.ManagedPrimarySecurityGroup
		inputs["managedReplicaSecurityGroup"] = args.ManagedReplicaSecurityGroup
		inputs["masterEbsBlockDevices"] = args.MasterEbsBlockDevices
		inputs["masterEbsOptimized"] = args.MasterEbsOptimized
		inputs["masterInstanceTypes"] = args.MasterInstanceTypes
		inputs["masterLifecycle"] = args.MasterLifecycle
		inputs["name"] = args.Name
		inputs["provisioningTimeout"] = args.ProvisioningTimeout
		inputs["region"] = args.Region
		inputs["releaseLabel"] = args.ReleaseLabel
		inputs["repoUpgradeOnBoot"] = args.RepoUpgradeOnBoot
		inputs["retries"] = args.Retries
		inputs["scheduledTasks"] = args.ScheduledTasks
		inputs["securityConfig"] = args.SecurityConfig
		inputs["serviceAccessSecurityGroup"] = args.ServiceAccessSecurityGroup
		inputs["serviceRole"] = args.ServiceRole
		inputs["stepsFiles"] = args.StepsFiles
		inputs["strategy"] = args.Strategy
		inputs["tags"] = args.Tags
		inputs["taskDesiredCapacity"] = args.TaskDesiredCapacity
		inputs["taskEbsBlockDevices"] = args.TaskEbsBlockDevices
		inputs["taskEbsOptimized"] = args.TaskEbsOptimized
		inputs["taskInstanceTypes"] = args.TaskInstanceTypes
		inputs["taskLifecycle"] = args.TaskLifecycle
		inputs["taskMaxSize"] = args.TaskMaxSize
		inputs["taskMinSize"] = args.TaskMinSize
		inputs["taskScalingDownPolicies"] = args.TaskScalingDownPolicies
		inputs["taskScalingUpPolicies"] = args.TaskScalingUpPolicies
		inputs["terminationProtected"] = args.TerminationProtected
		inputs["visibleToAllUsers"] = args.VisibleToAllUsers
	}
	inputs["outputClusterId"] = nil
	s, err := ctx.RegisterResource("spotinst:aws/mrScalar:MrScalar", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MrScalar{s: s}, nil
}

// GetMrScalar gets an existing MrScalar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMrScalar(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MrScalarState, opts ...pulumi.ResourceOpt) (*MrScalar, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["additionalInfo"] = state.AdditionalInfo
		inputs["additionalPrimarySecurityGroups"] = state.AdditionalPrimarySecurityGroups
		inputs["additionalReplicaSecurityGroups"] = state.AdditionalReplicaSecurityGroups
		inputs["applications"] = state.Applications
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["bootstrapActionsFiles"] = state.BootstrapActionsFiles
		inputs["clusterId"] = state.ClusterId
		inputs["configurationsFiles"] = state.ConfigurationsFiles
		inputs["coreDesiredCapacity"] = state.CoreDesiredCapacity
		inputs["coreEbsBlockDevices"] = state.CoreEbsBlockDevices
		inputs["coreEbsOptimized"] = state.CoreEbsOptimized
		inputs["coreInstanceTypes"] = state.CoreInstanceTypes
		inputs["coreLifecycle"] = state.CoreLifecycle
		inputs["coreMaxSize"] = state.CoreMaxSize
		inputs["coreMinSize"] = state.CoreMinSize
		inputs["coreScalingDownPolicies"] = state.CoreScalingDownPolicies
		inputs["coreScalingUpPolicies"] = state.CoreScalingUpPolicies
		inputs["customAmiId"] = state.CustomAmiId
		inputs["description"] = state.Description
		inputs["ebsRootVolumeSize"] = state.EbsRootVolumeSize
		inputs["ec2KeyName"] = state.Ec2KeyName
		inputs["exposeClusterId"] = state.ExposeClusterId
		inputs["instanceWeights"] = state.InstanceWeights
		inputs["jobFlowRole"] = state.JobFlowRole
		inputs["keepJobFlowAlive"] = state.KeepJobFlowAlive
		inputs["logUri"] = state.LogUri
		inputs["managedPrimarySecurityGroup"] = state.ManagedPrimarySecurityGroup
		inputs["managedReplicaSecurityGroup"] = state.ManagedReplicaSecurityGroup
		inputs["masterEbsBlockDevices"] = state.MasterEbsBlockDevices
		inputs["masterEbsOptimized"] = state.MasterEbsOptimized
		inputs["masterInstanceTypes"] = state.MasterInstanceTypes
		inputs["masterLifecycle"] = state.MasterLifecycle
		inputs["name"] = state.Name
		inputs["outputClusterId"] = state.OutputClusterId
		inputs["provisioningTimeout"] = state.ProvisioningTimeout
		inputs["region"] = state.Region
		inputs["releaseLabel"] = state.ReleaseLabel
		inputs["repoUpgradeOnBoot"] = state.RepoUpgradeOnBoot
		inputs["retries"] = state.Retries
		inputs["scheduledTasks"] = state.ScheduledTasks
		inputs["securityConfig"] = state.SecurityConfig
		inputs["serviceAccessSecurityGroup"] = state.ServiceAccessSecurityGroup
		inputs["serviceRole"] = state.ServiceRole
		inputs["stepsFiles"] = state.StepsFiles
		inputs["strategy"] = state.Strategy
		inputs["tags"] = state.Tags
		inputs["taskDesiredCapacity"] = state.TaskDesiredCapacity
		inputs["taskEbsBlockDevices"] = state.TaskEbsBlockDevices
		inputs["taskEbsOptimized"] = state.TaskEbsOptimized
		inputs["taskInstanceTypes"] = state.TaskInstanceTypes
		inputs["taskLifecycle"] = state.TaskLifecycle
		inputs["taskMaxSize"] = state.TaskMaxSize
		inputs["taskMinSize"] = state.TaskMinSize
		inputs["taskScalingDownPolicies"] = state.TaskScalingDownPolicies
		inputs["taskScalingUpPolicies"] = state.TaskScalingUpPolicies
		inputs["terminationProtected"] = state.TerminationProtected
		inputs["visibleToAllUsers"] = state.VisibleToAllUsers
	}
	s, err := ctx.ReadResource("spotinst:aws/mrScalar:MrScalar", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MrScalar{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MrScalar) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MrScalar) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *MrScalar) AdditionalInfo() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["additionalInfo"])
}

func (r *MrScalar) AdditionalPrimarySecurityGroups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["additionalPrimarySecurityGroups"])
}

func (r *MrScalar) AdditionalReplicaSecurityGroups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["additionalReplicaSecurityGroups"])
}

func (r *MrScalar) Applications() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["applications"])
}

func (r *MrScalar) AvailabilityZones() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["availabilityZones"])
}

func (r *MrScalar) BootstrapActionsFiles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["bootstrapActionsFiles"])
}

// The MrScaler cluster id.
func (r *MrScalar) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

func (r *MrScalar) ConfigurationsFiles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["configurationsFiles"])
}

func (r *MrScalar) CoreDesiredCapacity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["coreDesiredCapacity"])
}

func (r *MrScalar) CoreEbsBlockDevices() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["coreEbsBlockDevices"])
}

func (r *MrScalar) CoreEbsOptimized() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["coreEbsOptimized"])
}

func (r *MrScalar) CoreInstanceTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["coreInstanceTypes"])
}

func (r *MrScalar) CoreLifecycle() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["coreLifecycle"])
}

func (r *MrScalar) CoreMaxSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["coreMaxSize"])
}

func (r *MrScalar) CoreMinSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["coreMinSize"])
}

func (r *MrScalar) CoreScalingDownPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["coreScalingDownPolicies"])
}

func (r *MrScalar) CoreScalingUpPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["coreScalingUpPolicies"])
}

func (r *MrScalar) CustomAmiId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["customAmiId"])
}

// The MrScaler description.
func (r *MrScalar) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *MrScalar) EbsRootVolumeSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ebsRootVolumeSize"])
}

func (r *MrScalar) Ec2KeyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ec2KeyName"])
}

func (r *MrScalar) ExposeClusterId() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["exposeClusterId"])
}

func (r *MrScalar) InstanceWeights() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["instanceWeights"])
}

func (r *MrScalar) JobFlowRole() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["jobFlowRole"])
}

func (r *MrScalar) KeepJobFlowAlive() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["keepJobFlowAlive"])
}

func (r *MrScalar) LogUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["logUri"])
}

func (r *MrScalar) ManagedPrimarySecurityGroup() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["managedPrimarySecurityGroup"])
}

func (r *MrScalar) ManagedReplicaSecurityGroup() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["managedReplicaSecurityGroup"])
}

func (r *MrScalar) MasterEbsBlockDevices() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["masterEbsBlockDevices"])
}

func (r *MrScalar) MasterEbsOptimized() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["masterEbsOptimized"])
}

func (r *MrScalar) MasterInstanceTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["masterInstanceTypes"])
}

func (r *MrScalar) MasterLifecycle() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["masterLifecycle"])
}

// The MrScaler name.
func (r *MrScalar) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *MrScalar) OutputClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["outputClusterId"])
}

func (r *MrScalar) ProvisioningTimeout() pulumi.Output {
	return r.s.State["provisioningTimeout"]
}

// The MrScaler region.
func (r *MrScalar) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

func (r *MrScalar) ReleaseLabel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["releaseLabel"])
}

func (r *MrScalar) RepoUpgradeOnBoot() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["repoUpgradeOnBoot"])
}

func (r *MrScalar) Retries() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retries"])
}

func (r *MrScalar) ScheduledTasks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["scheduledTasks"])
}

func (r *MrScalar) SecurityConfig() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["securityConfig"])
}

func (r *MrScalar) ServiceAccessSecurityGroup() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccessSecurityGroup"])
}

func (r *MrScalar) ServiceRole() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceRole"])
}

func (r *MrScalar) StepsFiles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["stepsFiles"])
}

// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
func (r *MrScalar) Strategy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["strategy"])
}

func (r *MrScalar) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

func (r *MrScalar) TaskDesiredCapacity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["taskDesiredCapacity"])
}

func (r *MrScalar) TaskEbsBlockDevices() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["taskEbsBlockDevices"])
}

func (r *MrScalar) TaskEbsOptimized() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["taskEbsOptimized"])
}

func (r *MrScalar) TaskInstanceTypes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["taskInstanceTypes"])
}

func (r *MrScalar) TaskLifecycle() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["taskLifecycle"])
}

func (r *MrScalar) TaskMaxSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["taskMaxSize"])
}

func (r *MrScalar) TaskMinSize() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["taskMinSize"])
}

func (r *MrScalar) TaskScalingDownPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["taskScalingDownPolicies"])
}

func (r *MrScalar) TaskScalingUpPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["taskScalingUpPolicies"])
}

func (r *MrScalar) TerminationProtected() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["terminationProtected"])
}

func (r *MrScalar) VisibleToAllUsers() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["visibleToAllUsers"])
}

// Input properties used for looking up and filtering MrScalar resources.
type MrScalarState struct {
	AdditionalInfo interface{}
	AdditionalPrimarySecurityGroups interface{}
	AdditionalReplicaSecurityGroups interface{}
	Applications interface{}
	AvailabilityZones interface{}
	BootstrapActionsFiles interface{}
	// The MrScaler cluster id.
	ClusterId interface{}
	ConfigurationsFiles interface{}
	CoreDesiredCapacity interface{}
	CoreEbsBlockDevices interface{}
	CoreEbsOptimized interface{}
	CoreInstanceTypes interface{}
	CoreLifecycle interface{}
	CoreMaxSize interface{}
	CoreMinSize interface{}
	CoreScalingDownPolicies interface{}
	CoreScalingUpPolicies interface{}
	CustomAmiId interface{}
	// The MrScaler description.
	Description interface{}
	EbsRootVolumeSize interface{}
	Ec2KeyName interface{}
	ExposeClusterId interface{}
	InstanceWeights interface{}
	JobFlowRole interface{}
	KeepJobFlowAlive interface{}
	LogUri interface{}
	ManagedPrimarySecurityGroup interface{}
	ManagedReplicaSecurityGroup interface{}
	MasterEbsBlockDevices interface{}
	MasterEbsOptimized interface{}
	MasterInstanceTypes interface{}
	MasterLifecycle interface{}
	// The MrScaler name.
	Name interface{}
	OutputClusterId interface{}
	ProvisioningTimeout interface{}
	// The MrScaler region.
	Region interface{}
	ReleaseLabel interface{}
	RepoUpgradeOnBoot interface{}
	Retries interface{}
	ScheduledTasks interface{}
	SecurityConfig interface{}
	ServiceAccessSecurityGroup interface{}
	ServiceRole interface{}
	StepsFiles interface{}
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy interface{}
	Tags interface{}
	TaskDesiredCapacity interface{}
	TaskEbsBlockDevices interface{}
	TaskEbsOptimized interface{}
	TaskInstanceTypes interface{}
	TaskLifecycle interface{}
	TaskMaxSize interface{}
	TaskMinSize interface{}
	TaskScalingDownPolicies interface{}
	TaskScalingUpPolicies interface{}
	TerminationProtected interface{}
	VisibleToAllUsers interface{}
}

// The set of arguments for constructing a MrScalar resource.
type MrScalarArgs struct {
	AdditionalInfo interface{}
	AdditionalPrimarySecurityGroups interface{}
	AdditionalReplicaSecurityGroups interface{}
	Applications interface{}
	AvailabilityZones interface{}
	BootstrapActionsFiles interface{}
	// The MrScaler cluster id.
	ClusterId interface{}
	ConfigurationsFiles interface{}
	CoreDesiredCapacity interface{}
	CoreEbsBlockDevices interface{}
	CoreEbsOptimized interface{}
	CoreInstanceTypes interface{}
	CoreLifecycle interface{}
	CoreMaxSize interface{}
	CoreMinSize interface{}
	CoreScalingDownPolicies interface{}
	CoreScalingUpPolicies interface{}
	CustomAmiId interface{}
	// The MrScaler description.
	Description interface{}
	EbsRootVolumeSize interface{}
	Ec2KeyName interface{}
	ExposeClusterId interface{}
	InstanceWeights interface{}
	JobFlowRole interface{}
	KeepJobFlowAlive interface{}
	LogUri interface{}
	ManagedPrimarySecurityGroup interface{}
	ManagedReplicaSecurityGroup interface{}
	MasterEbsBlockDevices interface{}
	MasterEbsOptimized interface{}
	MasterInstanceTypes interface{}
	MasterLifecycle interface{}
	// The MrScaler name.
	Name interface{}
	ProvisioningTimeout interface{}
	// The MrScaler region.
	Region interface{}
	ReleaseLabel interface{}
	RepoUpgradeOnBoot interface{}
	Retries interface{}
	ScheduledTasks interface{}
	SecurityConfig interface{}
	ServiceAccessSecurityGroup interface{}
	ServiceRole interface{}
	StepsFiles interface{}
	// The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
	Strategy interface{}
	Tags interface{}
	TaskDesiredCapacity interface{}
	TaskEbsBlockDevices interface{}
	TaskEbsOptimized interface{}
	TaskInstanceTypes interface{}
	TaskLifecycle interface{}
	TaskMaxSize interface{}
	TaskMinSize interface{}
	TaskScalingDownPolicies interface{}
	TaskScalingUpPolicies interface{}
	TerminationProtected interface{}
	VisibleToAllUsers interface{}
}
