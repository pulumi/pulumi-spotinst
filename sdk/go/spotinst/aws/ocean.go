// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// Clusters can be imported using the Ocean `id`, e.g.,
//
// hcl
//
// ```sh
// $ pulumi import spotinst:aws/ocean:Ocean nameOfTheResource o-12345678
// ```
type Ocean struct {
	pulumi.CustomResourceState

	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrOutput `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrOutput `pulumi:"associatePublicIpAddress"`
	// Attach load balancers to the cluster.
	AttachLoadBalancers OceanAttachLoadBalancerArrayOutput `pulumi:"attachLoadBalancers"`
	// Describes the Ocean Kubernetes Auto Scaler.
	Autoscaler OceanAutoscalerPtrOutput `pulumi:"autoscaler"`
	Blacklists pulumi.StringArrayOutput `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	ClusterOrientations OceanClusterOrientationArrayOutput `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrOutput `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// Detach load balancers from the cluster.
	DetachLoadBalancers OceanDetachLoadBalancerArrayOutput `pulumi:"detachLoadBalancers"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrOutput `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrOutput `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrOutput  `pulumi:"fallbackToOndemand"`
	Filters            OceanFiltersPtrOutput `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrOutput `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrOutput `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrOutput `pulumi:"instanceMetadataOptions"`
	// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
	InstanceStorePolicy OceanInstanceStorePolicyPtrOutput `pulumi:"instanceStorePolicy"`
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging OceanLoggingPtrOutput `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrOutput `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrOutput `pulumi:"monitoring"`
	// The cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region the cluster will run in.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Specifies the count of ENIs to reserve per instance type for scaling purposes.
	ReservedEnis pulumi.IntPtrOutput `pulumi:"reservedEnis"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayOutput `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrOutput `pulumi:"rootVolumeSize"`
	// Set scheduling object.
	ScheduledTasks OceanScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrOutput `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrOutput `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayOutput        `pulumi:"tags"`
	UpdatePolicy OceanUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrOutput `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrOutput `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrOutput     `pulumi:"utilizeReservedInstances"`
	Whitelists               pulumi.StringArrayOutput `pulumi:"whitelists"`
}

// NewOcean registers a new resource with the given unique name, arguments, and options.
func NewOcean(ctx *pulumi.Context,
	name string, args *OceanArgs, opts ...pulumi.ResourceOption) (*Ocean, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ocean
	err := ctx.RegisterResource("spotinst:aws/ocean:Ocean", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOcean gets an existing Ocean resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOcean(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanState, opts ...pulumi.ResourceOption) (*Ocean, error) {
	var resource Ocean
	err := ctx.ReadResource("spotinst:aws/ocean:Ocean", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ocean resources.
type oceanState struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address *bool `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Attach load balancers to the cluster.
	AttachLoadBalancers []OceanAttachLoadBalancer `pulumi:"attachLoadBalancers"`
	// Describes the Ocean Kubernetes Auto Scaler.
	Autoscaler *OceanAutoscaler `pulumi:"autoscaler"`
	Blacklists []string         `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	ClusterOrientations []OceanClusterOrientation `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId *string `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// Detach load balancers from the cluster.
	DetachLoadBalancers []OceanDetachLoadBalancer `pulumi:"detachLoadBalancers"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand *bool         `pulumi:"fallbackToOndemand"`
	Filters            *OceanFilters `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod *int `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
	InstanceStorePolicy *OceanInstanceStorePolicy `pulumi:"instanceStorePolicy"`
	// The key pair to attach the instances.
	KeyName *string `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers []OceanLoadBalancer `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging *OceanLogging `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The region the cluster will run in.
	Region *string `pulumi:"region"`
	// Specifies the count of ENIs to reserve per instance type for scaling purposes.
	ReservedEnis *int `pulumi:"reservedEnis"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications []OceanResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Set scheduling object.
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage *int `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy *string `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         []OceanTag         `pulumi:"tags"`
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly *bool `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments *bool `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool    `pulumi:"utilizeReservedInstances"`
	Whitelists               []string `pulumi:"whitelists"`
}

type OceanState struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrInput
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Attach load balancers to the cluster.
	AttachLoadBalancers OceanAttachLoadBalancerArrayInput
	// Describes the Ocean Kubernetes Auto Scaler.
	Autoscaler OceanAutoscalerPtrInput
	Blacklists pulumi.StringArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	ClusterOrientations OceanClusterOrientationArrayInput
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// Detach load balancers from the cluster.
	DetachLoadBalancers OceanDetachLoadBalancerArrayInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	Filters            OceanFiltersPtrInput
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrInput
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrInput
	// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
	InstanceStorePolicy OceanInstanceStorePolicyPtrInput
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrInput
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayInput
	// Logging configuration.
	Logging OceanLoggingPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The region the cluster will run in.
	Region pulumi.StringPtrInput
	// Specifies the count of ENIs to reserve per instance type for scaling purposes.
	ReservedEnis pulumi.IntPtrInput
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayInput
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrInput
	// Set scheduling object.
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayInput
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrInput
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayInput
	UpdatePolicy OceanUpdatePolicyPtrInput
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	Whitelists               pulumi.StringArrayInput
}

func (OceanState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanState)(nil)).Elem()
}

type oceanArgs struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address *bool `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool `pulumi:"associatePublicIpAddress"`
	// Attach load balancers to the cluster.
	AttachLoadBalancers []OceanAttachLoadBalancer `pulumi:"attachLoadBalancers"`
	// Describes the Ocean Kubernetes Auto Scaler.
	Autoscaler *OceanAutoscaler `pulumi:"autoscaler"`
	Blacklists []string         `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	ClusterOrientations []OceanClusterOrientation `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId *string `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// Detach load balancers from the cluster.
	DetachLoadBalancers []OceanDetachLoadBalancer `pulumi:"detachLoadBalancers"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand *bool         `pulumi:"fallbackToOndemand"`
	Filters            *OceanFilters `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod *int `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId string `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
	InstanceStorePolicy *OceanInstanceStorePolicy `pulumi:"instanceStorePolicy"`
	// The key pair to attach the instances.
	KeyName *string `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers []OceanLoadBalancer `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging *OceanLogging `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The region the cluster will run in.
	Region *string `pulumi:"region"`
	// Specifies the count of ENIs to reserve per instance type for scaling purposes.
	ReservedEnis *int `pulumi:"reservedEnis"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications []OceanResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize *int `pulumi:"rootVolumeSize"`
	// Set scheduling object.
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage *int `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy *string `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         []OceanTag         `pulumi:"tags"`
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly *bool `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments *bool `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool    `pulumi:"utilizeReservedInstances"`
	Whitelists               []string `pulumi:"whitelists"`
}

// The set of arguments for constructing a Ocean resource.
type OceanArgs struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrInput
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	// Attach load balancers to the cluster.
	AttachLoadBalancers OceanAttachLoadBalancerArrayInput
	// Describes the Ocean Kubernetes Auto Scaler.
	Autoscaler OceanAutoscalerPtrInput
	Blacklists pulumi.StringArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	ClusterOrientations OceanClusterOrientationArrayInput
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// Detach load balancers from the cluster.
	DetachLoadBalancers OceanDetachLoadBalancerArrayInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	Filters            OceanFiltersPtrInput
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrInput
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrInput
	// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
	InstanceStorePolicy OceanInstanceStorePolicyPtrInput
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrInput
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayInput
	// Logging configuration.
	Logging OceanLoggingPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The region the cluster will run in.
	Region pulumi.StringPtrInput
	// Specifies the count of ENIs to reserve per instance type for scaling purposes.
	ReservedEnis pulumi.IntPtrInput
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayInput
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrInput
	// Set scheduling object.
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayInput
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrInput
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayInput
	UpdatePolicy OceanUpdatePolicyPtrInput
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	Whitelists               pulumi.StringArrayInput
}

func (OceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanArgs)(nil)).Elem()
}

type OceanInput interface {
	pulumi.Input

	ToOceanOutput() OceanOutput
	ToOceanOutputWithContext(ctx context.Context) OceanOutput
}

func (*Ocean) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil)).Elem()
}

func (i *Ocean) ToOceanOutput() OceanOutput {
	return i.ToOceanOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOutput)
}

// OceanArrayInput is an input type that accepts OceanArray and OceanArrayOutput values.
// You can construct a concrete instance of `OceanArrayInput` via:
//
//	OceanArray{ OceanArgs{...} }
type OceanArrayInput interface {
	pulumi.Input

	ToOceanArrayOutput() OceanArrayOutput
	ToOceanArrayOutputWithContext(context.Context) OceanArrayOutput
}

type OceanArray []OceanInput

func (OceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ocean)(nil)).Elem()
}

func (i OceanArray) ToOceanArrayOutput() OceanArrayOutput {
	return i.ToOceanArrayOutputWithContext(context.Background())
}

func (i OceanArray) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanArrayOutput)
}

// OceanMapInput is an input type that accepts OceanMap and OceanMapOutput values.
// You can construct a concrete instance of `OceanMapInput` via:
//
//	OceanMap{ "key": OceanArgs{...} }
type OceanMapInput interface {
	pulumi.Input

	ToOceanMapOutput() OceanMapOutput
	ToOceanMapOutputWithContext(context.Context) OceanMapOutput
}

type OceanMap map[string]OceanInput

func (OceanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ocean)(nil)).Elem()
}

func (i OceanMap) ToOceanMapOutput() OceanMapOutput {
	return i.ToOceanMapOutputWithContext(context.Background())
}

func (i OceanMap) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanMapOutput)
}

type OceanOutput struct{ *pulumi.OutputState }

func (OceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil)).Elem()
}

func (o OceanOutput) ToOceanOutput() OceanOutput {
	return o
}

func (o OceanOutput) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return o
}

// Configure IPv6 address allocation.
func (o OceanOutput) AssociateIpv6Address() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.AssociateIpv6Address }).(pulumi.BoolPtrOutput)
}

// Configure public IP address allocation.
func (o OceanOutput) AssociatePublicIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.AssociatePublicIpAddress }).(pulumi.BoolPtrOutput)
}

// Attach load balancers to the cluster.
func (o OceanOutput) AttachLoadBalancers() OceanAttachLoadBalancerArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanAttachLoadBalancerArrayOutput { return v.AttachLoadBalancers }).(OceanAttachLoadBalancerArrayOutput)
}

// Describes the Ocean Kubernetes Auto Scaler.
func (o OceanOutput) Autoscaler() OceanAutoscalerPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanAutoscalerPtrOutput { return v.Autoscaler }).(OceanAutoscalerPtrOutput)
}

func (o OceanOutput) Blacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.Blacklists }).(pulumi.StringArrayOutput)
}

// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
func (o OceanOutput) BlockDeviceMappings() OceanBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(OceanBlockDeviceMappingArrayOutput)
}

func (o OceanOutput) ClusterOrientations() OceanClusterOrientationArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanClusterOrientationArrayOutput { return v.ClusterOrientations }).(OceanClusterOrientationArrayOutput)
}

// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
func (o OceanOutput) ControllerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.ControllerId }).(pulumi.StringPtrOutput)
}

// The number of instances to launch and maintain in the cluster.
func (o OceanOutput) DesiredCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntOutput { return v.DesiredCapacity }).(pulumi.IntOutput)
}

// Detach load balancers from the cluster.
func (o OceanOutput) DetachLoadBalancers() OceanDetachLoadBalancerArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanDetachLoadBalancerArrayOutput { return v.DetachLoadBalancers }).(OceanDetachLoadBalancerArrayOutput)
}

// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
func (o OceanOutput) DrainingTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.DrainingTimeout }).(pulumi.IntPtrOutput)
}

// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
func (o OceanOutput) EbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.EbsOptimized }).(pulumi.BoolPtrOutput)
}

// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
func (o OceanOutput) FallbackToOndemand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.FallbackToOndemand }).(pulumi.BoolPtrOutput)
}

func (o OceanOutput) Filters() OceanFiltersPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanFiltersPtrOutput { return v.Filters }).(OceanFiltersPtrOutput)
}

// The amount of time, in seconds, after the instance has launched to start checking its health.
func (o OceanOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.GracePeriod }).(pulumi.IntPtrOutput)
}

// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
func (o OceanOutput) HealthCheckUnhealthyDurationBeforeReplacement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.HealthCheckUnhealthyDurationBeforeReplacement }).(pulumi.IntPtrOutput)
}

// The instance profile iam role.
func (o OceanOutput) IamInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.IamInstanceProfile }).(pulumi.StringPtrOutput)
}

// ID of the image used to launch the instances.
func (o OceanOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Ocean instance metadata options object for IMDSv2.
func (o OceanOutput) InstanceMetadataOptions() OceanInstanceMetadataOptionsPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanInstanceMetadataOptionsPtrOutput { return v.InstanceMetadataOptions }).(OceanInstanceMetadataOptionsPtrOutput)
}

// Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
func (o OceanOutput) InstanceStorePolicy() OceanInstanceStorePolicyPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanInstanceStorePolicyPtrOutput { return v.InstanceStorePolicy }).(OceanInstanceStorePolicyPtrOutput)
}

// The key pair to attach the instances.
func (o OceanOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Array of load balancer objects to add to ocean cluster
func (o OceanOutput) LoadBalancers() OceanLoadBalancerArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanLoadBalancerArrayOutput { return v.LoadBalancers }).(OceanLoadBalancerArrayOutput)
}

// Logging configuration.
func (o OceanOutput) Logging() OceanLoggingPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanLoggingPtrOutput { return v.Logging }).(OceanLoggingPtrOutput)
}

// The upper limit of instances the cluster can scale up to.
func (o OceanOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// The lower limit of instances the cluster can scale down to.
func (o OceanOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
func (o OceanOutput) Monitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.Monitoring }).(pulumi.BoolPtrOutput)
}

// The cluster name.
func (o OceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region the cluster will run in.
func (o OceanOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Specifies the count of ENIs to reserve per instance type for scaling purposes.
func (o OceanOutput) ReservedEnis() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.ReservedEnis }).(pulumi.IntPtrOutput)
}

// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
func (o OceanOutput) ResourceTagSpecifications() OceanResourceTagSpecificationArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanResourceTagSpecificationArrayOutput { return v.ResourceTagSpecifications }).(OceanResourceTagSpecificationArrayOutput)
}

// The size (in Gb) to allocate for the root volume. Minimum `20`.
func (o OceanOutput) RootVolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.RootVolumeSize }).(pulumi.IntPtrOutput)
}

// Set scheduling object.
func (o OceanOutput) ScheduledTasks() OceanScheduledTaskArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanScheduledTaskArrayOutput { return v.ScheduledTasks }).(OceanScheduledTaskArrayOutput)
}

// One or more security group ids.
func (o OceanOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
func (o OceanOutput) SpotPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.SpotPercentage }).(pulumi.IntPtrOutput)
}

// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
func (o OceanOutput) SpreadNodesBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.SpreadNodesBy }).(pulumi.StringPtrOutput)
}

// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
// * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
func (o OceanOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Optionally adds tags to instances launched in an Ocean cluster.
func (o OceanOutput) Tags() OceanTagArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanTagArrayOutput { return v.Tags }).(OceanTagArrayOutput)
}

func (o OceanOutput) UpdatePolicy() OceanUpdatePolicyPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanUpdatePolicyPtrOutput { return v.UpdatePolicy }).(OceanUpdatePolicyPtrOutput)
}

// launch specification defined on the Ocean object will function only as a template for virtual node groups.
// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
func (o OceanOutput) UseAsTemplateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UseAsTemplateOnly }).(pulumi.BoolPtrOutput)
}

// Base64-encoded MIME user data to make available to the instances.
func (o OceanOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// If savings plans exist, Ocean will utilize them before launching Spot instances.
func (o OceanOutput) UtilizeCommitments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UtilizeCommitments }).(pulumi.BoolPtrOutput)
}

// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
func (o OceanOutput) UtilizeReservedInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UtilizeReservedInstances }).(pulumi.BoolPtrOutput)
}

func (o OceanOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.Whitelists }).(pulumi.StringArrayOutput)
}

type OceanArrayOutput struct{ *pulumi.OutputState }

func (OceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ocean)(nil)).Elem()
}

func (o OceanArrayOutput) ToOceanArrayOutput() OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) Index(i pulumi.IntInput) OceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ocean {
		return vs[0].([]*Ocean)[vs[1].(int)]
	}).(OceanOutput)
}

type OceanMapOutput struct{ *pulumi.OutputState }

func (OceanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ocean)(nil)).Elem()
}

func (o OceanMapOutput) ToOceanMapOutput() OceanMapOutput {
	return o
}

func (o OceanMapOutput) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return o
}

func (o OceanMapOutput) MapIndex(k pulumi.StringInput) OceanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ocean {
		return vs[0].(map[string]*Ocean)[vs[1].(string)]
	}).(OceanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OceanInput)(nil)).Elem(), &Ocean{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanArrayInput)(nil)).Elem(), OceanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanMapInput)(nil)).Elem(), OceanMap{})
	pulumi.RegisterOutputType(OceanOutput{})
	pulumi.RegisterOutputType(OceanArrayOutput{})
	pulumi.RegisterOutputType(OceanMapOutput{})
}
