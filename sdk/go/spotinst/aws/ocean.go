// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Auto Scaler
//
// * `autoscaler` - (Optional) Describes the Ocean Kubernetes Auto Scaler.
//   - `autoscaleIsEnabled` - (Optional, Default: `true`) Enable the Ocean Kubernetes Auto Scaler.
//   - `autoscaleIsAutoConfig` - (Optional, Default: `true`) Automatically configure and optimize headroom resources.
//   - `autoscaleCooldown` - (Optional, Default: `null`) Cooldown period between scaling actions.
//   - `autoHeadroomPercentage` - (Optional) Set the auto headroom percentage (a number in the range [0, 200]) which controls the percentage of headroom from the cluster. Relevant only when `autoscaleIsAutoConfig` toggled on.
//   - `enableAutomaticAndManualHeadroom` - (Optional, Default: `false`) enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
//   - `autoscaleHeadroom` - (Optional) Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
//   - `cpuPerUnit` - (Optional) Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
//   - `gpuPerUnit` - (Optional) Optionally configure the number of GPUs to allocate the headroom.
//   - `memoryPerUnit` - (Optional) Optionally configure the amount of memory (MB) to allocate the headroom.
//   - `numOfUnits` - (Optional) The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
//   - `autoscaleDown` - (Optional) Auto Scaling scale down operations.
//   - `maxScaleDownPercentage` - (Optional) Would represent the maximum % to scale-down. Number between 1-100.
//   - `isAggressiveScaleDownEnabled` - (Optional, Default: `false`) When set to 'true', the Aggressive Scale Down feature is enabled.
//   - `resourceLimits` - (Optional) Optionally set upper and lower bounds on the resource usage of the cluster.
//   - `maxVcpu` - (Optional) The maximum cpu in vCPU units that can be allocated to the cluster.
//   - `maxMemoryGib` - (Optional) The maximum memory in GiB units that can be allocated to the cluster.
//   - `extendedResourceDefinitions` - (Optional) List of Ocean extended resource definitions to use in this cluster.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Update Policy
//
// * `updatePolicy` - (Optional)
//   - `shouldRoll` - (Required) Enables the roll.
//   - `conditionedRoll` - (Optional, Default: false) Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
//   - `conditionedRollParams` - (Optional) A custom list of attributes will trigger the cluster roll operation (overrides the predefined list of parameters). Valid only when the `conditionedRoll` parameter is set to true. (Valid values: `"subnetIds"`,`"whitelist"`,`"blacklist"`,`"userData"`,`"imageId"`,`"securityGroups"`,`"keyName"`,`"iamInstanceProfile"`,`"associatePublicIpAddress"`,`"loadBalancers"`,`"instanceMetadataOptions"`,`"ebsOptimized"`,`"rootVolumeSize"`)
//   - `autoApplyTags` - (Optional, Default: false) will update instance tags on the fly without rolling the cluster.
//   - `rollConfig` - (Required) While used, you can control whether the group should perform a deployment after an update to the configuration.
//   - `batchSizePercentage` - (Required) Sets the percentage of the instances to deploy in each batch.
//   - `launchSpecIds` - (Optional) List of virtual node group identifiers to be rolled.
//   - `batchMinHealthyPercentage` - (Optional) Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
//   - `respectPdb` - (Optional, Default: false) During the roll, if the parameter is set to True we honor PDB during the instance replacement.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// <a id="scheduled-task"></a>
// ## Scheduled Task
//
// * `scheduledTask` - (Optional) Set scheduling object.
//   - `shutdownHours` - (Optional) Set shutdown hours for cluster object.
//   - `isEnabled` - (Optional) Toggle the shutdown hours task. (Example: `true`).
//   - `timeWindows` - (Required) Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of: `ddd:hh:mm-ddd:hh:mm` where `ddd` = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat, `hh` = hour 24 = 0 -23, `mm` = minute = 0 - 59. Time windows should not overlap. Required if `cluster.scheduling.isEnabled` is `true`. (Example: `Fri:15:30-Wed:14:30`).
//   - `tasks` - (Optional) The scheduling tasks for the cluster.
//   - `isEnabled` - (Required)  Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
//   - `cronExpression` - (Required) A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. (Example: `0 1 * * *`).
//   - `taskType` - (Required) Valid values: `clusterRoll` `amiAutoUpdate`. Required for `cluster.scheduling.tasks`
//   - `parameters` - (Optional) This filed will be compatible to the `taskType` field. If `taskType` is defined as `clusterRoll`, user cluster roll object in parameters.
//   - `amiAutoUpdate` - (Optional) Set amiAutoUpdate object
//   - `applyRoll` - (Optional, Default:false) When the AMI is updated according to the configuration set, a cluster roll can be triggered
//   - `amiAutoUpdateClusterRoll` - (Optional) Set clusterRoll object
//   - `batchMinHealthyPercentage` - (Optional, Default:50) Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
//   - `batchSizePercentage` - (Optional) Value as a percent to set the size of a batch in a roll. Valid values are 0-100.
//   - `comment` - (Optional) Add a `comment` description for the roll. The `comment` is limited to 256 chars
//   - `respectPdb` - (Optional, Default:false) During the roll, if the parameter is set to true we honor PDB during the instance replacement.
//   - `minorVersion` - (Optional, Default:false) When set to 'true', the auto-update process will update the VNGs’ AMI with the AMI to match the Kubernetes control plane version. either "patch" or "minorVersion" must be true.
//   - `patch` - (Optional, Default:false) When set to 'true', the auto-update process will update the VNGs’ images with the latest security patches. either "patch" or "minorVersion" must be true.
//   - `parametersClusterRoll` - (Optional) Set clusterRoll object
//   - `batchMinHealthyPercentage` - (Optional, Default:50) Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
//   - `batchSizePercentage` - (Optional) Value as a percent to set the size of a batch in a roll. Valid values are 0-100.
//   - `comment` - (Optional) Add a `comment` description for the roll. The `comment` is limited to 256 chars
//   - `respectPdb` - (Optional, Default:false) During the roll, if the parameter is set to true we honor PDB during the instance replacement.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// <a id="attributes-reference"></a>
//
// ## Import
//
// Clusters can be imported using the Ocean `id`, e.g.,
//
// hcl
//
// ```sh
// $ pulumi import spotinst:aws/ocean:Ocean this o-12345678
// ```
type Ocean struct {
	pulumi.CustomResourceState

	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrOutput `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrOutput     `pulumi:"associatePublicIpAddress"`
	Autoscaler               OceanAutoscalerPtrOutput `pulumi:"autoscaler"`
	// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
	Blacklists pulumi.StringArrayOutput `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	ClusterOrientations OceanClusterOrientationArrayOutput `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrOutput `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrOutput `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrOutput `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrOutput `pulumi:"fallbackToOndemand"`
	// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
	Filters OceanFiltersPtrOutput `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrOutput `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrOutput `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrOutput `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrOutput `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrOutput `pulumi:"instanceMetadataOptions"`
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrOutput `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayOutput `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging OceanLoggingPtrOutput `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrOutput `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrOutput `pulumi:"monitoring"`
	// Required if type is set to `CLASSIC`
	Name pulumi.StringOutput `pulumi:"name"`
	// The region the cluster will run in.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayOutput `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrOutput           `pulumi:"rootVolumeSize"`
	ScheduledTasks OceanScheduledTaskArrayOutput `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrOutput `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrOutput `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayOutput        `pulumi:"tags"`
	UpdatePolicy OceanUpdatePolicyPtrOutput `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrOutput `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrOutput `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrOutput `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
	Whitelists pulumi.StringArrayOutput `pulumi:"whitelists"`
}

// NewOcean registers a new resource with the given unique name, arguments, and options.
func NewOcean(ctx *pulumi.Context,
	name string, args *OceanArgs, opts ...pulumi.ResourceOption) (*Ocean, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityGroups == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroups'")
	}
	if args.SubnetIds == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ocean
	err := ctx.RegisterResource("spotinst:aws/ocean:Ocean", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOcean gets an existing Ocean resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOcean(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanState, opts ...pulumi.ResourceOption) (*Ocean, error) {
	var resource Ocean
	err := ctx.ReadResource("spotinst:aws/ocean:Ocean", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ocean resources.
type oceanState struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address *bool `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool            `pulumi:"associatePublicIpAddress"`
	Autoscaler               *OceanAutoscaler `pulumi:"autoscaler"`
	// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
	Blacklists []string `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	ClusterOrientations []OceanClusterOrientation `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId *string `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand *bool `pulumi:"fallbackToOndemand"`
	// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
	Filters *OceanFilters `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod *int `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// The key pair to attach the instances.
	KeyName *string `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers []OceanLoadBalancer `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging *OceanLogging `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// Required if type is set to `CLASSIC`
	Name *string `pulumi:"name"`
	// The region the cluster will run in.
	Region *string `pulumi:"region"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications []OceanResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize *int                 `pulumi:"rootVolumeSize"`
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage *int `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy *string `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         []OceanTag         `pulumi:"tags"`
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly *bool `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments *bool `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
	Whitelists []string `pulumi:"whitelists"`
}

type OceanState struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrInput
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	Autoscaler               OceanAutoscalerPtrInput
	// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
	Blacklists pulumi.StringArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	ClusterOrientations OceanClusterOrientationArrayInput
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
	Filters OceanFiltersPtrInput
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrInput
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrInput
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrInput
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayInput
	// Logging configuration.
	Logging OceanLoggingPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// Required if type is set to `CLASSIC`
	Name pulumi.StringPtrInput
	// The region the cluster will run in.
	Region pulumi.StringPtrInput
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayInput
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrInput
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayInput
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrInput
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayInput
	UpdatePolicy OceanUpdatePolicyPtrInput
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
	Whitelists pulumi.StringArrayInput
}

func (OceanState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanState)(nil)).Elem()
}

type oceanArgs struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address *bool `pulumi:"associateIpv6Address"`
	// Configure public IP address allocation.
	AssociatePublicIpAddress *bool            `pulumi:"associatePublicIpAddress"`
	Autoscaler               *OceanAutoscaler `pulumi:"autoscaler"`
	// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
	Blacklists []string `pulumi:"blacklists"`
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings []OceanBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	ClusterOrientations []OceanClusterOrientation `pulumi:"clusterOrientations"`
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId *string `pulumi:"controllerId"`
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity *int `pulumi:"desiredCapacity"`
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout *int `pulumi:"drainingTimeout"`
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized *bool `pulumi:"ebsOptimized"`
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand *bool `pulumi:"fallbackToOndemand"`
	// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
	Filters *OceanFilters `pulumi:"filters"`
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod *int `pulumi:"gracePeriod"`
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement *int `pulumi:"healthCheckUnhealthyDurationBeforeReplacement"`
	// The instance profile iam role.
	IamInstanceProfile *string `pulumi:"iamInstanceProfile"`
	// ID of the image used to launch the instances.
	ImageId *string `pulumi:"imageId"`
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions *OceanInstanceMetadataOptions `pulumi:"instanceMetadataOptions"`
	// The key pair to attach the instances.
	KeyName *string `pulumi:"keyName"`
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers []OceanLoadBalancer `pulumi:"loadBalancers"`
	// Logging configuration.
	Logging *OceanLogging `pulumi:"logging"`
	// The upper limit of instances the cluster can scale up to.
	MaxSize *int `pulumi:"maxSize"`
	// The lower limit of instances the cluster can scale down to.
	MinSize *int `pulumi:"minSize"`
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring *bool `pulumi:"monitoring"`
	// Required if type is set to `CLASSIC`
	Name *string `pulumi:"name"`
	// The region the cluster will run in.
	Region *string `pulumi:"region"`
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications []OceanResourceTagSpecification `pulumi:"resourceTagSpecifications"`
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize *int                 `pulumi:"rootVolumeSize"`
	ScheduledTasks []OceanScheduledTask `pulumi:"scheduledTasks"`
	// One or more security group ids.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage *int `pulumi:"spotPercentage"`
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy *string `pulumi:"spreadNodesBy"`
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	SubnetIds []string `pulumi:"subnetIds"`
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         []OceanTag         `pulumi:"tags"`
	UpdatePolicy *OceanUpdatePolicy `pulumi:"updatePolicy"`
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly *bool `pulumi:"useAsTemplateOnly"`
	// Base64-encoded MIME user data to make available to the instances.
	UserData *string `pulumi:"userData"`
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments *bool `pulumi:"utilizeCommitments"`
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances *bool `pulumi:"utilizeReservedInstances"`
	// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
	Whitelists []string `pulumi:"whitelists"`
}

// The set of arguments for constructing a Ocean resource.
type OceanArgs struct {
	// Configure IPv6 address allocation.
	AssociateIpv6Address pulumi.BoolPtrInput
	// Configure public IP address allocation.
	AssociatePublicIpAddress pulumi.BoolPtrInput
	Autoscaler               OceanAutoscalerPtrInput
	// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
	Blacklists pulumi.StringArrayInput
	// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
	BlockDeviceMappings OceanBlockDeviceMappingArrayInput
	ClusterOrientations OceanClusterOrientationArrayInput
	// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
	ControllerId pulumi.StringPtrInput
	// The number of instances to launch and maintain in the cluster.
	DesiredCapacity pulumi.IntPtrInput
	// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
	DrainingTimeout pulumi.IntPtrInput
	// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
	EbsOptimized pulumi.BoolPtrInput
	// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
	FallbackToOndemand pulumi.BoolPtrInput
	// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
	Filters OceanFiltersPtrInput
	// The amount of time, in seconds, after the instance has launched to start checking its health.
	GracePeriod pulumi.IntPtrInput
	// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
	HealthCheckUnhealthyDurationBeforeReplacement pulumi.IntPtrInput
	// The instance profile iam role.
	IamInstanceProfile pulumi.StringPtrInput
	// ID of the image used to launch the instances.
	ImageId pulumi.StringPtrInput
	// Ocean instance metadata options object for IMDSv2.
	InstanceMetadataOptions OceanInstanceMetadataOptionsPtrInput
	// The key pair to attach the instances.
	KeyName pulumi.StringPtrInput
	// Array of load balancer objects to add to ocean cluster
	LoadBalancers OceanLoadBalancerArrayInput
	// Logging configuration.
	Logging OceanLoggingPtrInput
	// The upper limit of instances the cluster can scale up to.
	MaxSize pulumi.IntPtrInput
	// The lower limit of instances the cluster can scale down to.
	MinSize pulumi.IntPtrInput
	// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
	Monitoring pulumi.BoolPtrInput
	// Required if type is set to `CLASSIC`
	Name pulumi.StringPtrInput
	// The region the cluster will run in.
	Region pulumi.StringPtrInput
	// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
	ResourceTagSpecifications OceanResourceTagSpecificationArrayInput
	// The size (in Gb) to allocate for the root volume. Minimum `20`.
	RootVolumeSize pulumi.IntPtrInput
	ScheduledTasks OceanScheduledTaskArrayInput
	// One or more security group ids.
	SecurityGroups pulumi.StringArrayInput
	// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
	SpotPercentage pulumi.IntPtrInput
	// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
	SpreadNodesBy pulumi.StringPtrInput
	// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
	SubnetIds pulumi.StringArrayInput
	// Optionally adds tags to instances launched in an Ocean cluster.
	Tags         OceanTagArrayInput
	UpdatePolicy OceanUpdatePolicyPtrInput
	// launch specification defined on the Ocean object will function only as a template for virtual node groups.
	// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
	UseAsTemplateOnly pulumi.BoolPtrInput
	// Base64-encoded MIME user data to make available to the instances.
	UserData pulumi.StringPtrInput
	// If savings plans exist, Ocean will utilize them before launching Spot instances.
	UtilizeCommitments pulumi.BoolPtrInput
	// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
	UtilizeReservedInstances pulumi.BoolPtrInput
	// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
	Whitelists pulumi.StringArrayInput
}

func (OceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanArgs)(nil)).Elem()
}

type OceanInput interface {
	pulumi.Input

	ToOceanOutput() OceanOutput
	ToOceanOutputWithContext(ctx context.Context) OceanOutput
}

func (*Ocean) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil)).Elem()
}

func (i *Ocean) ToOceanOutput() OceanOutput {
	return i.ToOceanOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOutput)
}

// OceanArrayInput is an input type that accepts OceanArray and OceanArrayOutput values.
// You can construct a concrete instance of `OceanArrayInput` via:
//
//	OceanArray{ OceanArgs{...} }
type OceanArrayInput interface {
	pulumi.Input

	ToOceanArrayOutput() OceanArrayOutput
	ToOceanArrayOutputWithContext(context.Context) OceanArrayOutput
}

type OceanArray []OceanInput

func (OceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ocean)(nil)).Elem()
}

func (i OceanArray) ToOceanArrayOutput() OceanArrayOutput {
	return i.ToOceanArrayOutputWithContext(context.Background())
}

func (i OceanArray) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanArrayOutput)
}

// OceanMapInput is an input type that accepts OceanMap and OceanMapOutput values.
// You can construct a concrete instance of `OceanMapInput` via:
//
//	OceanMap{ "key": OceanArgs{...} }
type OceanMapInput interface {
	pulumi.Input

	ToOceanMapOutput() OceanMapOutput
	ToOceanMapOutputWithContext(context.Context) OceanMapOutput
}

type OceanMap map[string]OceanInput

func (OceanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ocean)(nil)).Elem()
}

func (i OceanMap) ToOceanMapOutput() OceanMapOutput {
	return i.ToOceanMapOutputWithContext(context.Background())
}

func (i OceanMap) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanMapOutput)
}

type OceanOutput struct{ *pulumi.OutputState }

func (OceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil)).Elem()
}

func (o OceanOutput) ToOceanOutput() OceanOutput {
	return o
}

func (o OceanOutput) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return o
}

// Configure IPv6 address allocation.
func (o OceanOutput) AssociateIpv6Address() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.AssociateIpv6Address }).(pulumi.BoolPtrOutput)
}

// Configure public IP address allocation.
func (o OceanOutput) AssociatePublicIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.AssociatePublicIpAddress }).(pulumi.BoolPtrOutput)
}

func (o OceanOutput) Autoscaler() OceanAutoscalerPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanAutoscalerPtrOutput { return v.Autoscaler }).(OceanAutoscalerPtrOutput)
}

// Instance types not allowed in the Ocean cluster. Cannot be configured if `whitelist` is configured.
func (o OceanOutput) Blacklists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.Blacklists }).(pulumi.StringArrayOutput)
}

// Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
func (o OceanOutput) BlockDeviceMappings() OceanBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(OceanBlockDeviceMappingArrayOutput)
}

func (o OceanOutput) ClusterOrientations() OceanClusterOrientationArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanClusterOrientationArrayOutput { return v.ClusterOrientations }).(OceanClusterOrientationArrayOutput)
}

// A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
func (o OceanOutput) ControllerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.ControllerId }).(pulumi.StringPtrOutput)
}

// The number of instances to launch and maintain in the cluster.
func (o OceanOutput) DesiredCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntOutput { return v.DesiredCapacity }).(pulumi.IntOutput)
}

// The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
func (o OceanOutput) DrainingTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.DrainingTimeout }).(pulumi.IntPtrOutput)
}

// Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
func (o OceanOutput) EbsOptimized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.EbsOptimized }).(pulumi.BoolPtrOutput)
}

// If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
func (o OceanOutput) FallbackToOndemand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.FallbackToOndemand }).(pulumi.BoolPtrOutput)
}

// List of filters. The Instance types that match with all filters compose the Ocean's whitelist parameter. Cannot be configured together with whitelist/blacklist.
func (o OceanOutput) Filters() OceanFiltersPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanFiltersPtrOutput { return v.Filters }).(OceanFiltersPtrOutput)
}

// The amount of time, in seconds, after the instance has launched to start checking its health.
func (o OceanOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.GracePeriod }).(pulumi.IntPtrOutput)
}

// The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
func (o OceanOutput) HealthCheckUnhealthyDurationBeforeReplacement() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.HealthCheckUnhealthyDurationBeforeReplacement }).(pulumi.IntPtrOutput)
}

// The instance profile iam role.
func (o OceanOutput) IamInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.IamInstanceProfile }).(pulumi.StringPtrOutput)
}

// ID of the image used to launch the instances.
func (o OceanOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

// Ocean instance metadata options object for IMDSv2.
func (o OceanOutput) InstanceMetadataOptions() OceanInstanceMetadataOptionsPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanInstanceMetadataOptionsPtrOutput { return v.InstanceMetadataOptions }).(OceanInstanceMetadataOptionsPtrOutput)
}

// The key pair to attach the instances.
func (o OceanOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Array of load balancer objects to add to ocean cluster
func (o OceanOutput) LoadBalancers() OceanLoadBalancerArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanLoadBalancerArrayOutput { return v.LoadBalancers }).(OceanLoadBalancerArrayOutput)
}

// Logging configuration.
func (o OceanOutput) Logging() OceanLoggingPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanLoggingPtrOutput { return v.Logging }).(OceanLoggingPtrOutput)
}

// The upper limit of instances the cluster can scale up to.
func (o OceanOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// The lower limit of instances the cluster can scale down to.
func (o OceanOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
func (o OceanOutput) Monitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.Monitoring }).(pulumi.BoolPtrOutput)
}

// Required if type is set to `CLASSIC`
func (o OceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region the cluster will run in.
func (o OceanOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
func (o OceanOutput) ResourceTagSpecifications() OceanResourceTagSpecificationArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanResourceTagSpecificationArrayOutput { return v.ResourceTagSpecifications }).(OceanResourceTagSpecificationArrayOutput)
}

// The size (in Gb) to allocate for the root volume. Minimum `20`.
func (o OceanOutput) RootVolumeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.RootVolumeSize }).(pulumi.IntPtrOutput)
}

func (o OceanOutput) ScheduledTasks() OceanScheduledTaskArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanScheduledTaskArrayOutput { return v.ScheduledTasks }).(OceanScheduledTaskArrayOutput)
}

// One or more security group ids.
func (o OceanOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
func (o OceanOutput) SpotPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.IntPtrOutput { return v.SpotPercentage }).(pulumi.IntPtrOutput)
}

// Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
func (o OceanOutput) SpreadNodesBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.SpreadNodesBy }).(pulumi.StringPtrOutput)
}

// A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
func (o OceanOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Optionally adds tags to instances launched in an Ocean cluster.
func (o OceanOutput) Tags() OceanTagArrayOutput {
	return o.ApplyT(func(v *Ocean) OceanTagArrayOutput { return v.Tags }).(OceanTagArrayOutput)
}

func (o OceanOutput) UpdatePolicy() OceanUpdatePolicyPtrOutput {
	return o.ApplyT(func(v *Ocean) OceanUpdatePolicyPtrOutput { return v.UpdatePolicy }).(OceanUpdatePolicyPtrOutput)
}

// launch specification defined on the Ocean object will function only as a template for virtual node groups.
// When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
func (o OceanOutput) UseAsTemplateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UseAsTemplateOnly }).(pulumi.BoolPtrOutput)
}

// Base64-encoded MIME user data to make available to the instances.
func (o OceanOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// If savings plans exist, Ocean will utilize them before launching Spot instances.
func (o OceanOutput) UtilizeCommitments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UtilizeCommitments }).(pulumi.BoolPtrOutput)
}

// If Reserved instances exist, Ocean will utilize them before launching Spot instances.
func (o OceanOutput) UtilizeReservedInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ocean) pulumi.BoolPtrOutput { return v.UtilizeReservedInstances }).(pulumi.BoolPtrOutput)
}

// Instance types allowed in the Ocean cluster. Cannot be configured if `blacklist` is configured.
func (o OceanOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ocean) pulumi.StringArrayOutput { return v.Whitelists }).(pulumi.StringArrayOutput)
}

type OceanArrayOutput struct{ *pulumi.OutputState }

func (OceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ocean)(nil)).Elem()
}

func (o OceanArrayOutput) ToOceanArrayOutput() OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) Index(i pulumi.IntInput) OceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ocean {
		return vs[0].([]*Ocean)[vs[1].(int)]
	}).(OceanOutput)
}

type OceanMapOutput struct{ *pulumi.OutputState }

func (OceanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ocean)(nil)).Elem()
}

func (o OceanMapOutput) ToOceanMapOutput() OceanMapOutput {
	return o
}

func (o OceanMapOutput) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return o
}

func (o OceanMapOutput) MapIndex(k pulumi.StringInput) OceanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ocean {
		return vs[0].(map[string]*Ocean)[vs[1].(string)]
	}).(OceanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OceanInput)(nil)).Elem(), &Ocean{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanArrayInput)(nil)).Elem(), OceanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanMapInput)(nil)).Elem(), OceanMap{})
	pulumi.RegisterOutputType(OceanOutput{})
	pulumi.RegisterOutputType(OceanArrayOutput{})
	pulumi.RegisterOutputType(OceanMapOutput{})
}
