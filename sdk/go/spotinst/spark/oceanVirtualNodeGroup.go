// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package spark

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a dedicated Spotinst Ocean Spark Virtual Node Group resource
//
// ## Prerequisites
//
// # An existing Ocean cluster and Ocean VNG is required by this resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-spotinst/sdk/v3/go/spotinst/spark"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := spark.NewOceanVirtualNodeGroup(ctx, "example", &spark.OceanVirtualNodeGroupArgs{
//				VirtualNodeGroupId:  pulumi.String("vng_id"),
//				OceanSparkClusterId: pulumi.String("cluster_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OceanVirtualNodeGroup struct {
	pulumi.CustomResourceState

	OceanSparkClusterId pulumi.StringOutput `pulumi:"oceanSparkClusterId"`
	VirtualNodeGroupId  pulumi.StringOutput `pulumi:"virtualNodeGroupId"`
}

// NewOceanVirtualNodeGroup registers a new resource with the given unique name, arguments, and options.
func NewOceanVirtualNodeGroup(ctx *pulumi.Context,
	name string, args *OceanVirtualNodeGroupArgs, opts ...pulumi.ResourceOption) (*OceanVirtualNodeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OceanSparkClusterId == nil {
		return nil, errors.New("invalid value for required argument 'OceanSparkClusterId'")
	}
	if args.VirtualNodeGroupId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNodeGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OceanVirtualNodeGroup
	err := ctx.RegisterResource("spotinst:spark/oceanVirtualNodeGroup:OceanVirtualNodeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOceanVirtualNodeGroup gets an existing OceanVirtualNodeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOceanVirtualNodeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanVirtualNodeGroupState, opts ...pulumi.ResourceOption) (*OceanVirtualNodeGroup, error) {
	var resource OceanVirtualNodeGroup
	err := ctx.ReadResource("spotinst:spark/oceanVirtualNodeGroup:OceanVirtualNodeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OceanVirtualNodeGroup resources.
type oceanVirtualNodeGroupState struct {
	OceanSparkClusterId *string `pulumi:"oceanSparkClusterId"`
	VirtualNodeGroupId  *string `pulumi:"virtualNodeGroupId"`
}

type OceanVirtualNodeGroupState struct {
	OceanSparkClusterId pulumi.StringPtrInput
	VirtualNodeGroupId  pulumi.StringPtrInput
}

func (OceanVirtualNodeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanVirtualNodeGroupState)(nil)).Elem()
}

type oceanVirtualNodeGroupArgs struct {
	OceanSparkClusterId string `pulumi:"oceanSparkClusterId"`
	VirtualNodeGroupId  string `pulumi:"virtualNodeGroupId"`
}

// The set of arguments for constructing a OceanVirtualNodeGroup resource.
type OceanVirtualNodeGroupArgs struct {
	OceanSparkClusterId pulumi.StringInput
	VirtualNodeGroupId  pulumi.StringInput
}

func (OceanVirtualNodeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanVirtualNodeGroupArgs)(nil)).Elem()
}

type OceanVirtualNodeGroupInput interface {
	pulumi.Input

	ToOceanVirtualNodeGroupOutput() OceanVirtualNodeGroupOutput
	ToOceanVirtualNodeGroupOutputWithContext(ctx context.Context) OceanVirtualNodeGroupOutput
}

func (*OceanVirtualNodeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanVirtualNodeGroup)(nil)).Elem()
}

func (i *OceanVirtualNodeGroup) ToOceanVirtualNodeGroupOutput() OceanVirtualNodeGroupOutput {
	return i.ToOceanVirtualNodeGroupOutputWithContext(context.Background())
}

func (i *OceanVirtualNodeGroup) ToOceanVirtualNodeGroupOutputWithContext(ctx context.Context) OceanVirtualNodeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanVirtualNodeGroupOutput)
}

// OceanVirtualNodeGroupArrayInput is an input type that accepts OceanVirtualNodeGroupArray and OceanVirtualNodeGroupArrayOutput values.
// You can construct a concrete instance of `OceanVirtualNodeGroupArrayInput` via:
//
//	OceanVirtualNodeGroupArray{ OceanVirtualNodeGroupArgs{...} }
type OceanVirtualNodeGroupArrayInput interface {
	pulumi.Input

	ToOceanVirtualNodeGroupArrayOutput() OceanVirtualNodeGroupArrayOutput
	ToOceanVirtualNodeGroupArrayOutputWithContext(context.Context) OceanVirtualNodeGroupArrayOutput
}

type OceanVirtualNodeGroupArray []OceanVirtualNodeGroupInput

func (OceanVirtualNodeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OceanVirtualNodeGroup)(nil)).Elem()
}

func (i OceanVirtualNodeGroupArray) ToOceanVirtualNodeGroupArrayOutput() OceanVirtualNodeGroupArrayOutput {
	return i.ToOceanVirtualNodeGroupArrayOutputWithContext(context.Background())
}

func (i OceanVirtualNodeGroupArray) ToOceanVirtualNodeGroupArrayOutputWithContext(ctx context.Context) OceanVirtualNodeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanVirtualNodeGroupArrayOutput)
}

// OceanVirtualNodeGroupMapInput is an input type that accepts OceanVirtualNodeGroupMap and OceanVirtualNodeGroupMapOutput values.
// You can construct a concrete instance of `OceanVirtualNodeGroupMapInput` via:
//
//	OceanVirtualNodeGroupMap{ "key": OceanVirtualNodeGroupArgs{...} }
type OceanVirtualNodeGroupMapInput interface {
	pulumi.Input

	ToOceanVirtualNodeGroupMapOutput() OceanVirtualNodeGroupMapOutput
	ToOceanVirtualNodeGroupMapOutputWithContext(context.Context) OceanVirtualNodeGroupMapOutput
}

type OceanVirtualNodeGroupMap map[string]OceanVirtualNodeGroupInput

func (OceanVirtualNodeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OceanVirtualNodeGroup)(nil)).Elem()
}

func (i OceanVirtualNodeGroupMap) ToOceanVirtualNodeGroupMapOutput() OceanVirtualNodeGroupMapOutput {
	return i.ToOceanVirtualNodeGroupMapOutputWithContext(context.Background())
}

func (i OceanVirtualNodeGroupMap) ToOceanVirtualNodeGroupMapOutputWithContext(ctx context.Context) OceanVirtualNodeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanVirtualNodeGroupMapOutput)
}

type OceanVirtualNodeGroupOutput struct{ *pulumi.OutputState }

func (OceanVirtualNodeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OceanVirtualNodeGroup)(nil)).Elem()
}

func (o OceanVirtualNodeGroupOutput) ToOceanVirtualNodeGroupOutput() OceanVirtualNodeGroupOutput {
	return o
}

func (o OceanVirtualNodeGroupOutput) ToOceanVirtualNodeGroupOutputWithContext(ctx context.Context) OceanVirtualNodeGroupOutput {
	return o
}

func (o OceanVirtualNodeGroupOutput) OceanSparkClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *OceanVirtualNodeGroup) pulumi.StringOutput { return v.OceanSparkClusterId }).(pulumi.StringOutput)
}

func (o OceanVirtualNodeGroupOutput) VirtualNodeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OceanVirtualNodeGroup) pulumi.StringOutput { return v.VirtualNodeGroupId }).(pulumi.StringOutput)
}

type OceanVirtualNodeGroupArrayOutput struct{ *pulumi.OutputState }

func (OceanVirtualNodeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OceanVirtualNodeGroup)(nil)).Elem()
}

func (o OceanVirtualNodeGroupArrayOutput) ToOceanVirtualNodeGroupArrayOutput() OceanVirtualNodeGroupArrayOutput {
	return o
}

func (o OceanVirtualNodeGroupArrayOutput) ToOceanVirtualNodeGroupArrayOutputWithContext(ctx context.Context) OceanVirtualNodeGroupArrayOutput {
	return o
}

func (o OceanVirtualNodeGroupArrayOutput) Index(i pulumi.IntInput) OceanVirtualNodeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OceanVirtualNodeGroup {
		return vs[0].([]*OceanVirtualNodeGroup)[vs[1].(int)]
	}).(OceanVirtualNodeGroupOutput)
}

type OceanVirtualNodeGroupMapOutput struct{ *pulumi.OutputState }

func (OceanVirtualNodeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OceanVirtualNodeGroup)(nil)).Elem()
}

func (o OceanVirtualNodeGroupMapOutput) ToOceanVirtualNodeGroupMapOutput() OceanVirtualNodeGroupMapOutput {
	return o
}

func (o OceanVirtualNodeGroupMapOutput) ToOceanVirtualNodeGroupMapOutputWithContext(ctx context.Context) OceanVirtualNodeGroupMapOutput {
	return o
}

func (o OceanVirtualNodeGroupMapOutput) MapIndex(k pulumi.StringInput) OceanVirtualNodeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OceanVirtualNodeGroup {
		return vs[0].(map[string]*OceanVirtualNodeGroup)[vs[1].(string)]
	}).(OceanVirtualNodeGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OceanVirtualNodeGroupInput)(nil)).Elem(), &OceanVirtualNodeGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanVirtualNodeGroupArrayInput)(nil)).Elem(), OceanVirtualNodeGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OceanVirtualNodeGroupMapInput)(nil)).Elem(), OceanVirtualNodeGroupMap{})
	pulumi.RegisterOutputType(OceanVirtualNodeGroupOutput{})
	pulumi.RegisterOutputType(OceanVirtualNodeGroupArrayOutput{})
	pulumi.RegisterOutputType(OceanVirtualNodeGroupMapOutput{})
}
