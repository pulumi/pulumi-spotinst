// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spotinst

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Spotinst subscription resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-spotinst/sdk/v2/go/spotinst"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := spotinst.NewSubscription(ctx, "default_subscription", &spotinst.SubscriptionArgs{
// 			Endpoint:  pulumi.String("http://endpoint.com"),
// 			EventType: pulumi.String("AWS_EC2_INSTANCE_LAUNCH"),
// 			Format: pulumi.StringMap{
// 				"event":         pulumi.String(fmt.Sprintf("%v%v%v", "%", "event", "%")),
// 				"instance_id":   pulumi.String(fmt.Sprintf("%v%v%v", "%", "instance-id", "%")),
// 				"resource_id":   pulumi.String(fmt.Sprintf("%v%v%v", "%", "resource-id", "%")),
// 				"resource_name": pulumi.String(fmt.Sprintf("%v%v%v", "%", "resource-name", "%")),
// 				"tags":          pulumi.String("foo,baz,baz"),
// 			},
// 			Protocol:   pulumi.String("http"),
// 			ResourceId: pulumi.String(spotinst_elastigroup_aws.My - eg.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Subscription struct {
	pulumi.CustomResourceState

	// The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
	// `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
	// `"GROUP_UPDATED"`,
	// `"AWS_EMR_PROVISION_TIMEOUT"`,
	// `"GROUP_BEANSTALK_INIT_READY"`,
	// `"AZURE_VM_TERMINATED"`,
	// `"AZURE_VM_TERMINATE"`,
	// `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
	// Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
	// Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
	// Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
	Format pulumi.MapOutput `pulumi:"format"`
	// The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`.
	// The following values are deprecated: `"http"` , `"https"`
	// You can use the generic `"web"` protocol instead.
	// `"aws-sns"` is only supported with AWS provider
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Spotinst Resource id (Elastigroup or Ocean ID).
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOption) (*Subscription, error) {
	if args == nil || args.Endpoint == nil {
		return nil, errors.New("missing required argument 'Endpoint'")
	}
	if args == nil || args.EventType == nil {
		return nil, errors.New("missing required argument 'EventType'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil {
		args = &SubscriptionArgs{}
	}
	var resource Subscription
	err := ctx.RegisterResource("spotinst:index/subscription:Subscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionState, opts ...pulumi.ResourceOption) (*Subscription, error) {
	var resource Subscription
	err := ctx.ReadResource("spotinst:index/subscription:Subscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscription resources.
type subscriptionState struct {
	// The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
	Endpoint *string `pulumi:"endpoint"`
	// The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
	// `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
	// `"GROUP_UPDATED"`,
	// `"AWS_EMR_PROVISION_TIMEOUT"`,
	// `"GROUP_BEANSTALK_INIT_READY"`,
	// `"AZURE_VM_TERMINATED"`,
	// `"AZURE_VM_TERMINATE"`,
	// `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
	// Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
	EventType *string `pulumi:"eventType"`
	// The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
	// Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
	// Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
	Format map[string]interface{} `pulumi:"format"`
	// The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`.
	// The following values are deprecated: `"http"` , `"https"`
	// You can use the generic `"web"` protocol instead.
	// `"aws-sns"` is only supported with AWS provider
	Protocol *string `pulumi:"protocol"`
	// Spotinst Resource id (Elastigroup or Ocean ID).
	ResourceId *string `pulumi:"resourceId"`
}

type SubscriptionState struct {
	// The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
	Endpoint pulumi.StringPtrInput
	// The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
	// `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
	// `"GROUP_UPDATED"`,
	// `"AWS_EMR_PROVISION_TIMEOUT"`,
	// `"GROUP_BEANSTALK_INIT_READY"`,
	// `"AZURE_VM_TERMINATED"`,
	// `"AZURE_VM_TERMINATE"`,
	// `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
	// Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
	EventType pulumi.StringPtrInput
	// The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
	// Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
	// Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
	Format pulumi.MapInput
	// The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`.
	// The following values are deprecated: `"http"` , `"https"`
	// You can use the generic `"web"` protocol instead.
	// `"aws-sns"` is only supported with AWS provider
	Protocol pulumi.StringPtrInput
	// Spotinst Resource id (Elastigroup or Ocean ID).
	ResourceId pulumi.StringPtrInput
}

func (SubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionState)(nil)).Elem()
}

type subscriptionArgs struct {
	// The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
	Endpoint string `pulumi:"endpoint"`
	// The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
	// `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
	// `"GROUP_UPDATED"`,
	// `"AWS_EMR_PROVISION_TIMEOUT"`,
	// `"GROUP_BEANSTALK_INIT_READY"`,
	// `"AZURE_VM_TERMINATED"`,
	// `"AZURE_VM_TERMINATE"`,
	// `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
	// Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
	EventType string `pulumi:"eventType"`
	// The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
	// Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
	// Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
	Format map[string]interface{} `pulumi:"format"`
	// The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`.
	// The following values are deprecated: `"http"` , `"https"`
	// You can use the generic `"web"` protocol instead.
	// `"aws-sns"` is only supported with AWS provider
	Protocol string `pulumi:"protocol"`
	// Spotinst Resource id (Elastigroup or Ocean ID).
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
	Endpoint pulumi.StringInput
	// The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
	// `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
	// `"GROUP_UPDATED"`,
	// `"AWS_EMR_PROVISION_TIMEOUT"`,
	// `"GROUP_BEANSTALK_INIT_READY"`,
	// `"AZURE_VM_TERMINATED"`,
	// `"AZURE_VM_TERMINATE"`,
	// `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
	// `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
	// Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
	EventType pulumi.StringInput
	// The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
	// Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
	// Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
	Format pulumi.MapInput
	// The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`.
	// The following values are deprecated: `"http"` , `"https"`
	// You can use the generic `"web"` protocol instead.
	// `"aws-sns"` is only supported with AWS provider
	Protocol pulumi.StringInput
	// Spotinst Resource id (Elastigroup or Ocean ID).
	ResourceId pulumi.StringInput
}

func (SubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionArgs)(nil)).Elem()
}
