// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spotinst

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type HealthCheckCheck struct {
	// The destination for the request.
	Endpoint string `pulumi:"endpoint"`
	// The number of consecutive successful health checks that must occur before declaring an instance healthy.
	Healthy int `pulumi:"healthy"`
	// The amount of time (in seconds) between each health check (minimum: 10).
	Interval int `pulumi:"interval"`
	// The port of the Spotinst HCS (default: 80).
	Port int `pulumi:"port"`
	// The protocol to use to connect with the instance. Valid values: http, https.
	Protocol string `pulumi:"protocol"`
	// the amount of time (in seconds) to wait when receiving a response from the health check.
	Timeout int `pulumi:"timeout"`
	// The number of consecutive failed health checks that must occur before declaring an instance unhealthy.
	Unhealthy int `pulumi:"unhealthy"`
}

// HealthCheckCheckInput is an input type that accepts HealthCheckCheckArgs and HealthCheckCheckOutput values.
// You can construct a concrete instance of `HealthCheckCheckInput` via:
//
// 		 HealthCheckCheckArgs{...}
//
type HealthCheckCheckInput interface {
	pulumi.Input

	ToHealthCheckCheckOutput() HealthCheckCheckOutput
	ToHealthCheckCheckOutputWithContext(context.Context) HealthCheckCheckOutput
}

type HealthCheckCheckArgs struct {
	// The destination for the request.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The number of consecutive successful health checks that must occur before declaring an instance healthy.
	Healthy pulumi.IntInput `pulumi:"healthy"`
	// The amount of time (in seconds) between each health check (minimum: 10).
	Interval pulumi.IntInput `pulumi:"interval"`
	// The port of the Spotinst HCS (default: 80).
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol to use to connect with the instance. Valid values: http, https.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// the amount of time (in seconds) to wait when receiving a response from the health check.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The number of consecutive failed health checks that must occur before declaring an instance unhealthy.
	Unhealthy pulumi.IntInput `pulumi:"unhealthy"`
}

func (HealthCheckCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckCheck)(nil)).Elem()
}

func (i HealthCheckCheckArgs) ToHealthCheckCheckOutput() HealthCheckCheckOutput {
	return i.ToHealthCheckCheckOutputWithContext(context.Background())
}

func (i HealthCheckCheckArgs) ToHealthCheckCheckOutputWithContext(ctx context.Context) HealthCheckCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckCheckOutput)
}

func (i HealthCheckCheckArgs) ToHealthCheckCheckPtrOutput() HealthCheckCheckPtrOutput {
	return i.ToHealthCheckCheckPtrOutputWithContext(context.Background())
}

func (i HealthCheckCheckArgs) ToHealthCheckCheckPtrOutputWithContext(ctx context.Context) HealthCheckCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckCheckOutput).ToHealthCheckCheckPtrOutputWithContext(ctx)
}

// HealthCheckCheckPtrInput is an input type that accepts HealthCheckCheckArgs, HealthCheckCheckPtr and HealthCheckCheckPtrOutput values.
// You can construct a concrete instance of `HealthCheckCheckPtrInput` via:
//
// 		 HealthCheckCheckArgs{...}
//
//  or:
//
// 		 nil
//
type HealthCheckCheckPtrInput interface {
	pulumi.Input

	ToHealthCheckCheckPtrOutput() HealthCheckCheckPtrOutput
	ToHealthCheckCheckPtrOutputWithContext(context.Context) HealthCheckCheckPtrOutput
}

type healthCheckCheckPtrType HealthCheckCheckArgs

func HealthCheckCheckPtr(v *HealthCheckCheckArgs) HealthCheckCheckPtrInput {
	return (*healthCheckCheckPtrType)(v)
}

func (*healthCheckCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckCheck)(nil)).Elem()
}

func (i *healthCheckCheckPtrType) ToHealthCheckCheckPtrOutput() HealthCheckCheckPtrOutput {
	return i.ToHealthCheckCheckPtrOutputWithContext(context.Background())
}

func (i *healthCheckCheckPtrType) ToHealthCheckCheckPtrOutputWithContext(ctx context.Context) HealthCheckCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckCheckPtrOutput)
}

type HealthCheckCheckOutput struct{ *pulumi.OutputState }

func (HealthCheckCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckCheck)(nil)).Elem()
}

func (o HealthCheckCheckOutput) ToHealthCheckCheckOutput() HealthCheckCheckOutput {
	return o
}

func (o HealthCheckCheckOutput) ToHealthCheckCheckOutputWithContext(ctx context.Context) HealthCheckCheckOutput {
	return o
}

func (o HealthCheckCheckOutput) ToHealthCheckCheckPtrOutput() HealthCheckCheckPtrOutput {
	return o.ToHealthCheckCheckPtrOutputWithContext(context.Background())
}

func (o HealthCheckCheckOutput) ToHealthCheckCheckPtrOutputWithContext(ctx context.Context) HealthCheckCheckPtrOutput {
	return o.ApplyT(func(v HealthCheckCheck) *HealthCheckCheck {
		return &v
	}).(HealthCheckCheckPtrOutput)
}

// The destination for the request.
func (o HealthCheckCheckOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v HealthCheckCheck) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The number of consecutive successful health checks that must occur before declaring an instance healthy.
func (o HealthCheckCheckOutput) Healthy() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckCheck) int { return v.Healthy }).(pulumi.IntOutput)
}

// The amount of time (in seconds) between each health check (minimum: 10).
func (o HealthCheckCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// The port of the Spotinst HCS (default: 80).
func (o HealthCheckCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckCheck) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol to use to connect with the instance. Valid values: http, https.
func (o HealthCheckCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v HealthCheckCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// the amount of time (in seconds) to wait when receiving a response from the health check.
func (o HealthCheckCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// The number of consecutive failed health checks that must occur before declaring an instance unhealthy.
func (o HealthCheckCheckOutput) Unhealthy() pulumi.IntOutput {
	return o.ApplyT(func(v HealthCheckCheck) int { return v.Unhealthy }).(pulumi.IntOutput)
}

type HealthCheckCheckPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckCheck)(nil)).Elem()
}

func (o HealthCheckCheckPtrOutput) ToHealthCheckCheckPtrOutput() HealthCheckCheckPtrOutput {
	return o
}

func (o HealthCheckCheckPtrOutput) ToHealthCheckCheckPtrOutputWithContext(ctx context.Context) HealthCheckCheckPtrOutput {
	return o
}

func (o HealthCheckCheckPtrOutput) Elem() HealthCheckCheckOutput {
	return o.ApplyT(func(v *HealthCheckCheck) HealthCheckCheck { return *v }).(HealthCheckCheckOutput)
}

// The destination for the request.
func (o HealthCheckCheckPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The number of consecutive successful health checks that must occur before declaring an instance healthy.
func (o HealthCheckCheckPtrOutput) Healthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Healthy
	}).(pulumi.IntPtrOutput)
}

// The amount of time (in seconds) between each health check (minimum: 10).
func (o HealthCheckCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The port of the Spotinst HCS (default: 80).
func (o HealthCheckCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The protocol to use to connect with the instance. Valid values: http, https.
func (o HealthCheckCheckPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

// the amount of time (in seconds) to wait when receiving a response from the health check.
func (o HealthCheckCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health checks that must occur before declaring an instance unhealthy.
func (o HealthCheckCheckPtrOutput) Unhealthy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthCheckCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Unhealthy
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HealthCheckCheckOutput{})
	pulumi.RegisterOutputType(HealthCheckCheckPtrOutput{})
}
