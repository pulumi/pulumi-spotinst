// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Spotinst Ocean AKS resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-spotinst/sdk/v2/go/spotinst/azure"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := azure.NewOcean(ctx, "example", &azure.OceanArgs{
// 			AcdIdentifier:        pulumi.String("acd-12345"),
// 			AksName:              pulumi.String("AKSName"),
// 			AksResourceGroupName: pulumi.String("ResourceGroupName"),
// 			ControllerClusterId:  pulumi.String("controller-cluster-id"),
// 			SshPublicKey:         pulumi.String("ssh-rsa [... redacted ...] generated-by-azure"),
// 			UserName:             pulumi.String("some-name"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ctx.Export("oceanId", spotinst_ocean_aks_.Example.Id)
// 		return nil
// 	})
// }
// ```
type Ocean struct {
	pulumi.CustomResourceState

	// The AKS identifier.
	AcdIdentifier pulumi.StringOutput `pulumi:"acdIdentifier"`
	// The AKS cluster name.
	AksName pulumi.StringOutput `pulumi:"aksName"`
	// Name of the Resource Group for AKS cluster.
	AksResourceGroupName pulumi.StringOutput `pulumi:"aksResourceGroupName"`
	// The Ocean controller cluster.
	ControllerClusterId pulumi.StringOutput `pulumi:"controllerClusterId"`
	// The Ocean cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SSH public key for admin access to Linux VMs.
	SshPublicKey pulumi.StringOutput `pulumi:"sshPublicKey"`
	// Username for admin access to VMs.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewOcean registers a new resource with the given unique name, arguments, and options.
func NewOcean(ctx *pulumi.Context,
	name string, args *OceanArgs, opts ...pulumi.ResourceOption) (*Ocean, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcdIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'AcdIdentifier'")
	}
	if args.AksName == nil {
		return nil, errors.New("invalid value for required argument 'AksName'")
	}
	if args.AksResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AksResourceGroupName'")
	}
	if args.SshPublicKey == nil {
		return nil, errors.New("invalid value for required argument 'SshPublicKey'")
	}
	var resource Ocean
	err := ctx.RegisterResource("spotinst:azure/ocean:Ocean", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOcean gets an existing Ocean resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOcean(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OceanState, opts ...pulumi.ResourceOption) (*Ocean, error) {
	var resource Ocean
	err := ctx.ReadResource("spotinst:azure/ocean:Ocean", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ocean resources.
type oceanState struct {
	// The AKS identifier.
	AcdIdentifier *string `pulumi:"acdIdentifier"`
	// The AKS cluster name.
	AksName *string `pulumi:"aksName"`
	// Name of the Resource Group for AKS cluster.
	AksResourceGroupName *string `pulumi:"aksResourceGroupName"`
	// The Ocean controller cluster.
	ControllerClusterId *string `pulumi:"controllerClusterId"`
	// The Ocean cluster name.
	Name *string `pulumi:"name"`
	// SSH public key for admin access to Linux VMs.
	SshPublicKey *string `pulumi:"sshPublicKey"`
	// Username for admin access to VMs.
	UserName *string `pulumi:"userName"`
}

type OceanState struct {
	// The AKS identifier.
	AcdIdentifier pulumi.StringPtrInput
	// The AKS cluster name.
	AksName pulumi.StringPtrInput
	// Name of the Resource Group for AKS cluster.
	AksResourceGroupName pulumi.StringPtrInput
	// The Ocean controller cluster.
	ControllerClusterId pulumi.StringPtrInput
	// The Ocean cluster name.
	Name pulumi.StringPtrInput
	// SSH public key for admin access to Linux VMs.
	SshPublicKey pulumi.StringPtrInput
	// Username for admin access to VMs.
	UserName pulumi.StringPtrInput
}

func (OceanState) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanState)(nil)).Elem()
}

type oceanArgs struct {
	// The AKS identifier.
	AcdIdentifier string `pulumi:"acdIdentifier"`
	// The AKS cluster name.
	AksName string `pulumi:"aksName"`
	// Name of the Resource Group for AKS cluster.
	AksResourceGroupName string `pulumi:"aksResourceGroupName"`
	// The Ocean controller cluster.
	ControllerClusterId *string `pulumi:"controllerClusterId"`
	// The Ocean cluster name.
	Name *string `pulumi:"name"`
	// SSH public key for admin access to Linux VMs.
	SshPublicKey string `pulumi:"sshPublicKey"`
	// Username for admin access to VMs.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a Ocean resource.
type OceanArgs struct {
	// The AKS identifier.
	AcdIdentifier pulumi.StringInput
	// The AKS cluster name.
	AksName pulumi.StringInput
	// Name of the Resource Group for AKS cluster.
	AksResourceGroupName pulumi.StringInput
	// The Ocean controller cluster.
	ControllerClusterId pulumi.StringPtrInput
	// The Ocean cluster name.
	Name pulumi.StringPtrInput
	// SSH public key for admin access to Linux VMs.
	SshPublicKey pulumi.StringInput
	// Username for admin access to VMs.
	UserName pulumi.StringPtrInput
}

func (OceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oceanArgs)(nil)).Elem()
}

type OceanInput interface {
	pulumi.Input

	ToOceanOutput() OceanOutput
	ToOceanOutputWithContext(ctx context.Context) OceanOutput
}

func (*Ocean) ElementType() reflect.Type {
	return reflect.TypeOf((*Ocean)(nil))
}

func (i *Ocean) ToOceanOutput() OceanOutput {
	return i.ToOceanOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanOutput)
}

func (i *Ocean) ToOceanPtrOutput() OceanPtrOutput {
	return i.ToOceanPtrOutputWithContext(context.Background())
}

func (i *Ocean) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanPtrOutput)
}

type OceanPtrInput interface {
	pulumi.Input

	ToOceanPtrOutput() OceanPtrOutput
	ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput
}

type oceanPtrType OceanArgs

func (*oceanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil))
}

func (i *oceanPtrType) ToOceanPtrOutput() OceanPtrOutput {
	return i.ToOceanPtrOutputWithContext(context.Background())
}

func (i *oceanPtrType) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanPtrOutput)
}

// OceanArrayInput is an input type that accepts OceanArray and OceanArrayOutput values.
// You can construct a concrete instance of `OceanArrayInput` via:
//
//          OceanArray{ OceanArgs{...} }
type OceanArrayInput interface {
	pulumi.Input

	ToOceanArrayOutput() OceanArrayOutput
	ToOceanArrayOutputWithContext(context.Context) OceanArrayOutput
}

type OceanArray []OceanInput

func (OceanArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Ocean)(nil))
}

func (i OceanArray) ToOceanArrayOutput() OceanArrayOutput {
	return i.ToOceanArrayOutputWithContext(context.Background())
}

func (i OceanArray) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanArrayOutput)
}

// OceanMapInput is an input type that accepts OceanMap and OceanMapOutput values.
// You can construct a concrete instance of `OceanMapInput` via:
//
//          OceanMap{ "key": OceanArgs{...} }
type OceanMapInput interface {
	pulumi.Input

	ToOceanMapOutput() OceanMapOutput
	ToOceanMapOutputWithContext(context.Context) OceanMapOutput
}

type OceanMap map[string]OceanInput

func (OceanMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Ocean)(nil))
}

func (i OceanMap) ToOceanMapOutput() OceanMapOutput {
	return i.ToOceanMapOutputWithContext(context.Background())
}

func (i OceanMap) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OceanMapOutput)
}

type OceanOutput struct {
	*pulumi.OutputState
}

func (OceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ocean)(nil))
}

func (o OceanOutput) ToOceanOutput() OceanOutput {
	return o
}

func (o OceanOutput) ToOceanOutputWithContext(ctx context.Context) OceanOutput {
	return o
}

func (o OceanOutput) ToOceanPtrOutput() OceanPtrOutput {
	return o.ToOceanPtrOutputWithContext(context.Background())
}

func (o OceanOutput) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return o.ApplyT(func(v Ocean) *Ocean {
		return &v
	}).(OceanPtrOutput)
}

type OceanPtrOutput struct {
	*pulumi.OutputState
}

func (OceanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ocean)(nil))
}

func (o OceanPtrOutput) ToOceanPtrOutput() OceanPtrOutput {
	return o
}

func (o OceanPtrOutput) ToOceanPtrOutputWithContext(ctx context.Context) OceanPtrOutput {
	return o
}

type OceanArrayOutput struct{ *pulumi.OutputState }

func (OceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ocean)(nil))
}

func (o OceanArrayOutput) ToOceanArrayOutput() OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) ToOceanArrayOutputWithContext(ctx context.Context) OceanArrayOutput {
	return o
}

func (o OceanArrayOutput) Index(i pulumi.IntInput) OceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ocean {
		return vs[0].([]Ocean)[vs[1].(int)]
	}).(OceanOutput)
}

type OceanMapOutput struct{ *pulumi.OutputState }

func (OceanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ocean)(nil))
}

func (o OceanMapOutput) ToOceanMapOutput() OceanMapOutput {
	return o
}

func (o OceanMapOutput) ToOceanMapOutputWithContext(ctx context.Context) OceanMapOutput {
	return o
}

func (o OceanMapOutput) MapIndex(k pulumi.StringInput) OceanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ocean {
		return vs[0].(map[string]Ocean)[vs[1].(string)]
	}).(OceanOutput)
}

func init() {
	pulumi.RegisterOutputType(OceanOutput{})
	pulumi.RegisterOutputType(OceanPtrOutput{})
	pulumi.RegisterOutputType(OceanArrayOutput{})
	pulumi.RegisterOutputType(OceanMapOutput{})
}
