// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationCenter extends pulumi.CustomResource {
    /**
     * Get an existing NotificationCenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationCenterState, opts?: pulumi.CustomResourceOptions): NotificationCenter {
        return new NotificationCenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/notificationCenter:NotificationCenter';

    /**
     * Returns true if the given object is an instance of NotificationCenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationCenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationCenter.__pulumiType;
    }

    declare public readonly computePolicyConfig: pulumi.Output<outputs.NotificationCenterComputePolicyConfig>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly isActive: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly privacyLevel: pulumi.Output<string>;
    declare public readonly registeredUsers: pulumi.Output<outputs.NotificationCenterRegisteredUser[] | undefined>;
    declare public readonly subscriptions: pulumi.Output<outputs.NotificationCenterSubscription[] | undefined>;

    /**
     * Create a NotificationCenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationCenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationCenterArgs | NotificationCenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationCenterState | undefined;
            resourceInputs["computePolicyConfig"] = state?.computePolicyConfig;
            resourceInputs["description"] = state?.description;
            resourceInputs["isActive"] = state?.isActive;
            resourceInputs["name"] = state?.name;
            resourceInputs["privacyLevel"] = state?.privacyLevel;
            resourceInputs["registeredUsers"] = state?.registeredUsers;
            resourceInputs["subscriptions"] = state?.subscriptions;
        } else {
            const args = argsOrState as NotificationCenterArgs | undefined;
            if (args?.computePolicyConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'computePolicyConfig'");
            }
            if (args?.privacyLevel === undefined && !opts.urn) {
                throw new Error("Missing required property 'privacyLevel'");
            }
            resourceInputs["computePolicyConfig"] = args?.computePolicyConfig;
            resourceInputs["description"] = args?.description;
            resourceInputs["isActive"] = args?.isActive;
            resourceInputs["name"] = args?.name;
            resourceInputs["privacyLevel"] = args?.privacyLevel;
            resourceInputs["registeredUsers"] = args?.registeredUsers;
            resourceInputs["subscriptions"] = args?.subscriptions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationCenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationCenter resources.
 */
export interface NotificationCenterState {
    computePolicyConfig?: pulumi.Input<inputs.NotificationCenterComputePolicyConfig>;
    description?: pulumi.Input<string>;
    isActive?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    privacyLevel?: pulumi.Input<string>;
    registeredUsers?: pulumi.Input<pulumi.Input<inputs.NotificationCenterRegisteredUser>[]>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.NotificationCenterSubscription>[]>;
}

/**
 * The set of arguments for constructing a NotificationCenter resource.
 */
export interface NotificationCenterArgs {
    computePolicyConfig: pulumi.Input<inputs.NotificationCenterComputePolicyConfig>;
    description?: pulumi.Input<string>;
    isActive?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    privacyLevel: pulumi.Input<string>;
    registeredUsers?: pulumi.Input<pulumi.Input<inputs.NotificationCenterRegisteredUser>[]>;
    subscriptions?: pulumi.Input<pulumi.Input<inputs.NotificationCenterSubscription>[]>;
}
