// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DataIntegrationS3 {
    bucketName: pulumi.Input<string>;
    /**
     * The subdirectory in which your files will be stored within the bucket. Adds the prefix subdir/ to new objects' keys. Can't be null or contain '/'.
     */
    subdir?: pulumi.Input<string>;
}

export interface ElastigroupAzureV3Image {
    customs?: pulumi.Input<pulumi.Input<inputs.ElastigroupAzureV3ImageCustom>[]>;
    marketplaces?: pulumi.Input<pulumi.Input<inputs.ElastigroupAzureV3ImageMarketplace>[]>;
}

export interface ElastigroupAzureV3ImageCustom {
    imageName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3ImageMarketplace {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface ElastigroupAzureV3Login {
    password?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3ManagedServiceIdentity {
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3Network {
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.ElastigroupAzureV3NetworkNetworkInterface>[]>;
    resourceGroupName: pulumi.Input<string>;
    virtualNetworkName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3NetworkNetworkInterface {
    additionalIpConfigs?: pulumi.Input<pulumi.Input<inputs.ElastigroupAzureV3NetworkNetworkInterfaceAdditionalIpConfig>[]>;
    applicationSecurityGroups?: pulumi.Input<pulumi.Input<inputs.ElastigroupAzureV3NetworkNetworkInterfaceApplicationSecurityGroup>[]>;
    assignPublicIp: pulumi.Input<boolean>;
    isPrimary: pulumi.Input<boolean>;
    subnetName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3NetworkNetworkInterfaceAdditionalIpConfig {
    name: pulumi.Input<string>;
    privateIpVersion?: pulumi.Input<string>;
}

export interface ElastigroupAzureV3NetworkNetworkInterfaceApplicationSecurityGroup {
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface ElastigroupAzureV3Tag {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ElastigroupAzureV3VmSizes {
    odSizes: pulumi.Input<pulumi.Input<string>[]>;
    spotSizes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HealthCheckCheck {
    endPoint?: pulumi.Input<string>;
    /**
     * The destination for the request.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The number of consecutive successful health checks that must occur before declaring an instance healthy.
     */
    healthy: pulumi.Input<number>;
    /**
     * The amount of time (in seconds) between each health check (minimum: 10).
     */
    interval: pulumi.Input<number>;
    /**
     * The port to use to connect with the instance.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol to use to connect with the instance. Valid values: http, https.
     */
    protocol: pulumi.Input<string>;
    timeOut?: pulumi.Input<number>;
    /**
     * the amount of time (in seconds) to wait when receiving a response from the health check.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The number of consecutive failed health checks that must occur before declaring an instance unhealthy.
     */
    unhealthy: pulumi.Input<number>;
}

export interface OceanRightSizingRuleAttachWorkload {
    namespaces: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAttachWorkloadNamespace>[]>;
}

export interface OceanRightSizingRuleAttachWorkloadNamespace {
    labels?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAttachWorkloadNamespaceLabel>[]>;
    namespaceName: pulumi.Input<string>;
    workloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAttachWorkloadNamespaceWorkload>[]>;
}

export interface OceanRightSizingRuleAttachWorkloadNamespaceLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface OceanRightSizingRuleAttachWorkloadNamespaceWorkload {
    regexName?: pulumi.Input<string>;
    workloadName?: pulumi.Input<string>;
    workloadType: pulumi.Input<string>;
}

export interface OceanRightSizingRuleDetachWorkload {
    namespaces: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleDetachWorkloadNamespace>[]>;
}

export interface OceanRightSizingRuleDetachWorkloadNamespace {
    labels?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleDetachWorkloadNamespaceLabel>[]>;
    namespaceName: pulumi.Input<string>;
    workloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleDetachWorkloadNamespaceWorkload>[]>;
}

export interface OceanRightSizingRuleDetachWorkloadNamespaceLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface OceanRightSizingRuleDetachWorkloadNamespaceWorkload {
    regexName?: pulumi.Input<string>;
    workloadName?: pulumi.Input<string>;
    workloadType: pulumi.Input<string>;
}

export interface OceanRightSizingRuleRecommendationApplicationBoundary {
    cpuMax?: pulumi.Input<number>;
    cpuMin?: pulumi.Input<number>;
    memoryMax?: pulumi.Input<number>;
    memoryMin?: pulumi.Input<number>;
}

export interface OceanRightSizingRuleRecommendationApplicationInterval {
    monthlyRepetitionBases?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationIntervalMonthlyRepetitionBase>[]>;
    repetitionBasis: pulumi.Input<string>;
    weeklyRepetitionBases?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationIntervalWeeklyRepetitionBase>[]>;
}

export interface OceanRightSizingRuleRecommendationApplicationIntervalMonthlyRepetitionBase {
    intervalMonths: pulumi.Input<pulumi.Input<number>[]>;
    weekOfTheMonths: pulumi.Input<pulumi.Input<string>[]>;
    weeklyRepetitionBases?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationIntervalMonthlyRepetitionBaseWeeklyRepetitionBase>[]>;
}

export interface OceanRightSizingRuleRecommendationApplicationIntervalMonthlyRepetitionBaseWeeklyRepetitionBase {
    intervalDays: pulumi.Input<pulumi.Input<string>[]>;
    intervalHoursEndTime: pulumi.Input<string>;
    intervalHoursStartTime: pulumi.Input<string>;
}

export interface OceanRightSizingRuleRecommendationApplicationIntervalWeeklyRepetitionBase {
    intervalDays: pulumi.Input<pulumi.Input<string>[]>;
    intervalHoursEndTime: pulumi.Input<string>;
    intervalHoursStartTime: pulumi.Input<string>;
}

export interface OceanRightSizingRuleRecommendationApplicationMinThreshold {
    cpuPercentage?: pulumi.Input<number>;
    memoryPercentage?: pulumi.Input<number>;
}

export interface OceanRightSizingRuleRecommendationApplicationOverheadValue {
    cpuPercentage?: pulumi.Input<number>;
    memoryPercentage?: pulumi.Input<number>;
}

export interface StatefulNodeAzureAttachDataDisk {
    dataDiskName: pulumi.Input<string>;
    dataDiskResourceGroupName: pulumi.Input<string>;
    lun?: pulumi.Input<number>;
    sizeGb: pulumi.Input<number>;
    storageAccountType: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface StatefulNodeAzureBootDiagnostic {
    isEnabled?: pulumi.Input<boolean>;
    storageUrl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface StatefulNodeAzureDataDisk {
    lun: pulumi.Input<number>;
    sizeGb: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureDelete {
    diskShouldDeallocate: pulumi.Input<boolean>;
    diskTtlInHours?: pulumi.Input<number>;
    networkShouldDeallocate: pulumi.Input<boolean>;
    networkTtlInHours?: pulumi.Input<number>;
    publicIpShouldDeallocate: pulumi.Input<boolean>;
    publicIpTtlInHours?: pulumi.Input<number>;
    shouldDeregisterFromLb?: pulumi.Input<boolean>;
    shouldTerminateVm: pulumi.Input<boolean>;
    snapshotShouldDeallocate: pulumi.Input<boolean>;
    snapshotTtlInHours?: pulumi.Input<number>;
}

export interface StatefulNodeAzureDetachDataDisk {
    dataDiskName: pulumi.Input<string>;
    dataDiskResourceGroupName: pulumi.Input<string>;
    shouldDeallocate: pulumi.Input<boolean>;
    ttlInHours?: pulumi.Input<number>;
}

export interface StatefulNodeAzureExtension {
    apiVersion: pulumi.Input<string>;
    minorVersionAutoUpgrade: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    publicSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    publisher: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureHealth {
    autoHealing: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<number>;
    healthCheckTypes: pulumi.Input<pulumi.Input<string>[]>;
    unhealthyDuration?: pulumi.Input<number>;
}

export interface StatefulNodeAzureImage {
    customImages?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureImageCustomImage>[]>;
    galleries?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureImageGallery>[]>;
    marketplaceImages?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureImageMarketplaceImage>[]>;
}

export interface StatefulNodeAzureImageCustomImage {
    customImageResourceGroupName: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface StatefulNodeAzureImageGallery {
    galleryName: pulumi.Input<string>;
    galleryResourceGroupName: pulumi.Input<string>;
    imageName: pulumi.Input<string>;
    spotAccountId?: pulumi.Input<string>;
    versionName: pulumi.Input<string>;
}

export interface StatefulNodeAzureImageMarketplaceImage {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface StatefulNodeAzureImportVm {
    drainingTimeout?: pulumi.Input<number>;
    originalVmName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    resourcesRetentionTime?: pulumi.Input<number>;
}

export interface StatefulNodeAzureLoadBalancer {
    backendPoolNames: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureLogin {
    password?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}

export interface StatefulNodeAzureManagedServiceIdentity {
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetwork {
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureNetworkNetworkInterface>[]>;
    networkResourceGroupName: pulumi.Input<string>;
    virtualNetworkName: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetworkNetworkInterface {
    additionalIpConfigurations?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureNetworkNetworkInterfaceAdditionalIpConfiguration>[]>;
    applicationSecurityGroups?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureNetworkNetworkInterfaceApplicationSecurityGroup>[]>;
    assignPublicIp?: pulumi.Input<boolean>;
    enableIpForwarding?: pulumi.Input<boolean>;
    isPrimary: pulumi.Input<boolean>;
    networkSecurityGroups?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureNetworkNetworkInterfaceNetworkSecurityGroup>[]>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    publicIpSku?: pulumi.Input<string>;
    publicIps?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureNetworkNetworkInterfacePublicIp>[]>;
    subnetName: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetworkNetworkInterfaceAdditionalIpConfiguration {
    name: pulumi.Input<string>;
    privateIpAddressVersion: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetworkNetworkInterfaceApplicationSecurityGroup {
    name: pulumi.Input<string>;
    networkResourceGroupName: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetworkNetworkInterfaceNetworkSecurityGroup {
    name?: pulumi.Input<string>;
    networkResourceGroupName?: pulumi.Input<string>;
}

export interface StatefulNodeAzureNetworkNetworkInterfacePublicIp {
    name: pulumi.Input<string>;
    networkResourceGroupName: pulumi.Input<string>;
}

export interface StatefulNodeAzureOsDisk {
    caching?: pulumi.Input<string>;
    sizeGb?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureProximityPlacementGroup {
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface StatefulNodeAzureSchedulingTask {
    cronExpression: pulumi.Input<string>;
    isEnabled: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureSecret {
    sourceVaults: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSecretSourceVault>[]>;
    vaultCertificates: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSecretVaultCertificate>[]>;
}

export interface StatefulNodeAzureSecretSourceVault {
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
}

export interface StatefulNodeAzureSecretVaultCertificate {
    certificateStore?: pulumi.Input<string>;
    certificateUrl?: pulumi.Input<string>;
}

export interface StatefulNodeAzureSecurity {
    confidentialOsDiskEncryption?: pulumi.Input<boolean>;
    encryptionAtHost?: pulumi.Input<boolean>;
    secureBootEnabled?: pulumi.Input<boolean>;
    securityType?: pulumi.Input<string>;
    vtpmEnabled?: pulumi.Input<boolean>;
}

export interface StatefulNodeAzureSignal {
    timeout: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface StatefulNodeAzureStrategy {
    availabilityVsCost?: pulumi.Input<number>;
    capacityReservations?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureStrategyCapacityReservation>[]>;
    drainingTimeout?: pulumi.Input<number>;
    fallbackToOnDemand: pulumi.Input<boolean>;
    odWindows?: pulumi.Input<pulumi.Input<string>[]>;
    optimizationWindows?: pulumi.Input<pulumi.Input<string>[]>;
    preferredLifeCycle?: pulumi.Input<string>;
    revertToSpot?: pulumi.Input<inputs.StatefulNodeAzureStrategyRevertToSpot>;
    vmAdmins?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface StatefulNodeAzureStrategyCapacityReservation {
    capacityReservationGroups?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureStrategyCapacityReservationCapacityReservationGroup>[]>;
    shouldUtilize: pulumi.Input<boolean>;
    utilizationStrategy: pulumi.Input<string>;
}

export interface StatefulNodeAzureStrategyCapacityReservationCapacityReservationGroup {
    crgName: pulumi.Input<string>;
    crgResourceGroupName: pulumi.Input<string>;
    crgShouldPrioritize?: pulumi.Input<boolean>;
}

export interface StatefulNodeAzureStrategyRevertToSpot {
    performAt: pulumi.Input<string>;
}

export interface StatefulNodeAzureTag {
    tagKey: pulumi.Input<string>;
    tagValue?: pulumi.Input<string>;
}

export interface StatefulNodeAzureUpdateState {
    state: pulumi.Input<string>;
}

export interface StatefulNodeAzureVmSizes {
    odSizes: pulumi.Input<pulumi.Input<string>[]>;
    preferredSpotSizes?: pulumi.Input<pulumi.Input<string>[]>;
    spotSizes: pulumi.Input<pulumi.Input<string>[]>;
}
export namespace aws {
    export interface BeanstalkDeploymentPreferences {
        /**
         * Should roll perform automatically
         */
        automaticRoll?: pulumi.Input<boolean>;
        /**
         * Percent size of each batch
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Amount of time to wait between batches
         */
        gracePeriod?: pulumi.Input<number>;
        /**
         * Strategy parameters
         */
        strategies?: pulumi.Input<pulumi.Input<inputs.aws.BeanstalkDeploymentPreferencesStrategy>[]>;
    }

    export interface BeanstalkDeploymentPreferencesStrategy {
        /**
         * Action to take
         */
        action?: pulumi.Input<string>;
        /**
         * Bool value if to wait to drain instance
         */
        shouldDrainInstances?: pulumi.Input<boolean>;
    }

    export interface BeanstalkManagedActions {
        /**
         * Platform Update parameters
         */
        platformUpdate?: pulumi.Input<inputs.aws.BeanstalkManagedActionsPlatformUpdate>;
    }

    export interface BeanstalkManagedActionsPlatformUpdate {
        /**
         * Actions to perform (options: timeWindow, never)
         */
        performAt?: pulumi.Input<string>;
        /**
         * Time Window for when action occurs ex. Mon:23:50-Tue:00:20
         */
        timeWindow?: pulumi.Input<string>;
        /**
         * Level to update
         */
        updateLevel?: pulumi.Input<string>;
    }

    export interface BeanstalkScheduledTask {
        /**
         * The number of instances to add or remove.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The percentage of instances to add or remove.
         *
         * Usage:
         */
        adjustmentPercentage?: pulumi.Input<string>;
        /**
         * The percentage size of each batch in the scheduled deployment roll.
         */
        batchSizePercentage?: pulumi.Input<string>;
        /**
         * A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
         */
        cronExpression?: pulumi.Input<string>;
        /**
         * The recurrence frequency to run this task. Supported values are `"hourly"`, `"daily"`, `"weekly"` and `"continuous"`.
         */
        frequency?: pulumi.Input<string>;
        /**
         * The period of time (seconds) to wait before checking a batch's health after it's deployment.
         */
        gracePeriod?: pulumi.Input<string>;
        /**
         * Setting the task to being enabled or disabled.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * The maximum number of instances the group should have.
         */
        maxCapacity?: pulumi.Input<string>;
        /**
         * The minimum number of instances the group should have.
         */
        minCapacity?: pulumi.Input<string>;
        /**
         * The maximum number of instances the group should have.
         */
        scaleMaxCapacity?: pulumi.Input<string>;
        /**
         * The minimum number of instances the group should have.
         */
        scaleMinCapacity?: pulumi.Input<string>;
        /**
         * The desired number of instances the group should have.
         */
        scaleTargetCapacity?: pulumi.Input<string>;
        /**
         * Set a start time for one time tasks.
         */
        startTime?: pulumi.Input<string>;
        /**
         * The desired number of instances the group should have.
         */
        targetCapacity?: pulumi.Input<string>;
        /**
         * The task type to run. Supported task types are: `"scale"`, `"backupAmi"`, `"roll"`, `"scaleUp"`, `"percentageScaleUp"`, `"scaleDown"`, `"percentageScaleDown"`, `"statefulUpdateCapacity"`.
         */
        taskType: pulumi.Input<string>;
    }

    export interface ElastigroupCpuOptions {
        /**
         * The ability to define the number of threads per core in instances that allow this.
         */
        threadsPerCore: pulumi.Input<number>;
    }

    export interface ElastigroupEbsBlockDevice {
        /**
         * Whether the volume should be destroyed on instance termination.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * The name of the device to mount.
         */
        deviceName: pulumi.Input<string>;
        /**
         * Set dynamic IOPS properties. When using this object, you cannot use the `iops` object. You must use one or the other.
         */
        dynamicIops?: pulumi.Input<inputs.aws.ElastigroupEbsBlockDeviceDynamicIops>;
        /**
         * Set dynamic volume size properties. When using this object, you cannot use `volumeSize`. You must use one or the other.
         */
        dynamicVolumeSize?: pulumi.Input<inputs.aws.ElastigroupEbsBlockDeviceDynamicVolumeSize>;
        /**
         * Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
         */
        encrypted?: pulumi.Input<boolean>;
        /**
         * The amount of provisioned [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `"io1"`.
         */
        iops?: pulumi.Input<number>;
        /**
         * ID for a user managed CMK under which the EBS Volume is encrypted
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * The Snapshot ID to mount.
         */
        snapshotId?: pulumi.Input<string>;
        /**
         * The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
         */
        throughput?: pulumi.Input<number>;
        /**
         * The size of the volume in gigabytes.
         */
        volumeSize?: pulumi.Input<number>;
        /**
         * The type of volume. Can be `"standard"`, `"gp2"`, `"gp3"`, `"io1"`, `"st1"` or `"sc1"`.
         */
        volumeType?: pulumi.Input<string>;
    }

    export interface ElastigroupEbsBlockDeviceDynamicIops {
        /**
         * Initial size for IOPS.
         */
        baseSize?: pulumi.Input<number>;
        /**
         * Type of resource, valid values: `"CPU", "MEMORY"`.
         */
        resource?: pulumi.Input<string>;
        /**
         * Additional size per resource unit (in IOPS).
         *
         * Modifying any `ebsBlockDevice` currently requires resource replacement.
         *
         * Usage:
         */
        sizePerResourceUnit?: pulumi.Input<number>;
    }

    export interface ElastigroupEbsBlockDeviceDynamicVolumeSize {
        /**
         * Initial size for volume.
         */
        baseSize?: pulumi.Input<number>;
        /**
         * Type of resource, valid values: `"CPU", "MEMORY"`.
         */
        resource?: pulumi.Input<string>;
        /**
         * Additional size per resource unit (in GB).
         */
        sizePerResourceUnit?: pulumi.Input<number>;
    }

    export interface ElastigroupEphemeralBlockDevice {
        /**
         * The name of the block device to mount on the instance.
         */
        deviceName: pulumi.Input<string>;
        /**
         * The [Instance Store Device Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
         * (e.g. `"ephemeral0"`).
         *
         * Usage:
         */
        virtualName: pulumi.Input<string>;
    }

    export interface ElastigroupImage {
        images: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupImageImage>[]>;
    }

    export interface ElastigroupImageImage {
        /**
         * The group ID.
         */
        id: pulumi.Input<string>;
    }

    export interface ElastigroupInstanceTypesWeight {
        /**
         * Name of instance type (String).
         */
        instanceType: pulumi.Input<string>;
        /**
         * Weight per instance type (Integer).
         */
        weight: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationBeanstalk {
        /**
         * Preferences when performing a roll
         */
        deploymentPreferences?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalkDeploymentPreferences>;
        environmentId?: pulumi.Input<string>;
        /**
         * Managed Actions parameters
         */
        managedActions?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalkManagedActions>;
    }

    export interface ElastigroupIntegrationBeanstalkDeploymentPreferences {
        /**
         * Should roll perform automatically
         */
        automaticRoll?: pulumi.Input<boolean>;
        batchSizePercentage?: pulumi.Input<number>;
        gracePeriod?: pulumi.Input<number>;
        strategy?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategy>;
    }

    export interface ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategy {
        action?: pulumi.Input<string>;
        shouldDrainInstances?: pulumi.Input<boolean>;
    }

    export interface ElastigroupIntegrationBeanstalkManagedActions {
        /**
         * Platform Update parameters
         */
        platformUpdate?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalkManagedActionsPlatformUpdate>;
    }

    export interface ElastigroupIntegrationBeanstalkManagedActionsPlatformUpdate {
        performAt?: pulumi.Input<string>;
        /**
         * Time Window for when action occurs ex. Mon:23:50-Tue:00:20
         */
        timeWindow?: pulumi.Input<string>;
        /**
         * Level to update
         *
         * Usage:
         */
        updateLevel?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationCodedeploy {
        /**
         * Cleanup automatically after a failed deploy.
         */
        cleanupOnFailure: pulumi.Input<boolean>;
        /**
         * Specify the deployment groups details.
         */
        deploymentGroups: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationCodedeployDeploymentGroup>[]>;
        /**
         * Terminate the instance automatically after a failed deploy.
         */
        terminateInstanceOnFailure: pulumi.Input<boolean>;
    }

    export interface ElastigroupIntegrationCodedeployDeploymentGroup {
        /**
         * The application name.
         */
        applicationName: pulumi.Input<string>;
        /**
         * The deployment group name.
         *
         * Usage:
         */
        deploymentGroupName: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationDockerSwarm {
        autoscaleCooldown?: pulumi.Input<number>;
        autoscaleDown?: pulumi.Input<inputs.aws.ElastigroupIntegrationDockerSwarmAutoscaleDown>;
        autoscaleHeadroom?: pulumi.Input<inputs.aws.ElastigroupIntegrationDockerSwarmAutoscaleHeadroom>;
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        masterHost: pulumi.Input<string>;
        masterPort: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationDockerSwarmAutoscaleDown {
        evaluationPeriods?: pulumi.Input<number>;
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationDockerSwarmAutoscaleHeadroom {
        cpuPerUnit?: pulumi.Input<number>;
        memoryPerUnit?: pulumi.Input<number>;
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationEcs {
        /**
         * A key/value mapping of tags to assign to the resource.
         */
        autoscaleAttributes?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationEcsAutoscaleAttribute>[]>;
        autoscaleCooldown?: pulumi.Input<number>;
        autoscaleDown?: pulumi.Input<inputs.aws.ElastigroupIntegrationEcsAutoscaleDown>;
        autoscaleHeadroom?: pulumi.Input<inputs.aws.ElastigroupIntegrationEcsAutoscaleHeadroom>;
        autoscaleIsAutoConfig?: pulumi.Input<boolean>;
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        /**
         * Determines whether to scale down non-service tasks.
         */
        autoscaleScaleDownNonServiceTasks?: pulumi.Input<boolean>;
        /**
         * Batch configuration object:
         */
        batch?: pulumi.Input<inputs.aws.ElastigroupIntegrationEcsBatch>;
        /**
         * The name of the EC2 Container Service cluster.
         */
        clusterName: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationEcsAutoscaleAttribute {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationEcsAutoscaleDown {
        evaluationPeriods?: pulumi.Input<number>;
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationEcsAutoscaleHeadroom {
        cpuPerUnit?: pulumi.Input<number>;
        memoryPerUnit?: pulumi.Input<number>;
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationEcsBatch {
        /**
         * Array of strings.
         *
         * Usage:
         */
        jobQueueNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ElastigroupIntegrationGitlab {
        /**
         * Settings for Gitlab runner.
         */
        runner?: pulumi.Input<inputs.aws.ElastigroupIntegrationGitlabRunner>;
    }

    export interface ElastigroupIntegrationGitlabRunner {
        isEnabled?: pulumi.Input<boolean>;
    }

    export interface ElastigroupIntegrationKubernetes {
        apiServer?: pulumi.Input<string>;
        autoscaleCooldown?: pulumi.Input<number>;
        autoscaleDown?: pulumi.Input<inputs.aws.ElastigroupIntegrationKubernetesAutoscaleDown>;
        autoscaleHeadroom?: pulumi.Input<inputs.aws.ElastigroupIntegrationKubernetesAutoscaleHeadroom>;
        autoscaleIsAutoConfig?: pulumi.Input<boolean>;
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        /**
         * A key/value mapping of tags to assign to the resource.
         *
         * Usage:
         */
        autoscaleLabels?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationKubernetesAutoscaleLabel>[]>;
        clusterIdentifier?: pulumi.Input<string>;
        /**
         * Valid values: `"saas"`, `"pod"`.
         */
        integrationMode?: pulumi.Input<string>;
        /**
         * Kubernetes Token
         */
        token?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationKubernetesAutoscaleDown {
        evaluationPeriods?: pulumi.Input<number>;
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationKubernetesAutoscaleHeadroom {
        cpuPerUnit?: pulumi.Input<number>;
        memoryPerUnit?: pulumi.Input<number>;
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationKubernetesAutoscaleLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationMesosphere {
        apiServer: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationNomad {
        /**
         * Nomad ACL Token
         */
        aclToken?: pulumi.Input<string>;
        /**
         * A key/value mapping of tags to assign to the resource.
         *
         * Usage:
         */
        autoscaleConstraints?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationNomadAutoscaleConstraint>[]>;
        autoscaleCooldown?: pulumi.Input<number>;
        autoscaleDown?: pulumi.Input<inputs.aws.ElastigroupIntegrationNomadAutoscaleDown>;
        autoscaleHeadroom?: pulumi.Input<inputs.aws.ElastigroupIntegrationNomadAutoscaleHeadroom>;
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        masterHost: pulumi.Input<string>;
        masterPort: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationNomadAutoscaleConstraint {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationNomadAutoscaleDown {
        evaluationPeriods?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationNomadAutoscaleHeadroom {
        cpuPerUnit?: pulumi.Input<number>;
        memoryPerUnit?: pulumi.Input<number>;
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationRancher {
        /**
         * The access key of the Rancher API.
         */
        accessKey: pulumi.Input<string>;
        masterHost: pulumi.Input<string>;
        /**
         * The secret key of the Rancher API.
         */
        secretKey: pulumi.Input<string>;
        /**
         * The Rancher version. Must be `"1"` or `"2"`. If this field is omitted, it’s assumed that the Rancher cluster is version 1. Note that Kubernetes is required when using Rancher version 2^.
         * Usage:
         */
        version?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationRoute53 {
        /**
         * Collection of one or more domains to register.
         */
        domains: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationRoute53Domain>[]>;
    }

    export interface ElastigroupIntegrationRoute53Domain {
        /**
         * The id associated with a hosted zone.
         */
        hostedZoneId: pulumi.Input<string>;
        /**
         * The type of the record set. Valid values: `"a"`, `"cname"`.
         */
        recordSetType?: pulumi.Input<string>;
        /**
         * Collection of records containing authoritative DNS information for the specified domain name.
         */
        recordSets: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupIntegrationRoute53DomainRecordSet>[]>;
        /**
         * The Spotinst account ID that is linked to the AWS account that holds the Route 53 Hosted Zone ID. The default is the user Spotinst account provided as a URL parameter.
         */
        spotinstAcctId?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationRoute53DomainRecordSet {
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
        /**
         * Designates whether the DNS address should be exposed to connections outside the VPC.
         *
         * Usage:
         */
        usePublicDns?: pulumi.Input<boolean>;
        /**
         * Designates whether the IP address should be exposed to connections outside the VPC.
         */
        usePublicIp?: pulumi.Input<boolean>;
    }

    export interface ElastigroupItf {
        defaultStaticTargetGroup?: pulumi.Input<inputs.aws.ElastigroupItfDefaultStaticTargetGroup>;
        fixedTargetGroups: pulumi.Input<boolean>;
        loadBalancers: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItfLoadBalancer>[]>;
        migrationHealthinessThreshold?: pulumi.Input<number>;
        targetGroupConfigs: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItfTargetGroupConfig>[]>;
        weightStrategy: pulumi.Input<string>;
    }

    export interface ElastigroupItfDefaultStaticTargetGroup {
        arn: pulumi.Input<string>;
        percentage: pulumi.Input<number>;
    }

    export interface ElastigroupItfLoadBalancer {
        listenerRules: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItfLoadBalancerListenerRule>[]>;
        loadBalancerArn: pulumi.Input<string>;
    }

    export interface ElastigroupItfLoadBalancerListenerRule {
        ruleArn: pulumi.Input<string>;
        staticTargetGroup?: pulumi.Input<inputs.aws.ElastigroupItfLoadBalancerListenerRuleStaticTargetGroup>;
    }

    export interface ElastigroupItfLoadBalancerListenerRuleStaticTargetGroup {
        arn: pulumi.Input<string>;
        percentage: pulumi.Input<number>;
    }

    export interface ElastigroupItfTargetGroupConfig {
        healthCheckIntervalSeconds?: pulumi.Input<number>;
        healthCheckPath: pulumi.Input<string>;
        healthCheckPort?: pulumi.Input<string>;
        healthCheckProtocol?: pulumi.Input<string>;
        healthCheckTimeoutSeconds?: pulumi.Input<number>;
        healthyThresholdCount?: pulumi.Input<number>;
        matchers?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItfTargetGroupConfigMatcher>[]>;
        port: pulumi.Input<number>;
        protocol: pulumi.Input<string>;
        protocolVersion?: pulumi.Input<string>;
        /**
         * A key/value mapping of tags to assign to the resource.
         */
        tags?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItfTargetGroupConfigTag>[]>;
        unhealthyThresholdCount?: pulumi.Input<number>;
        vpcId: pulumi.Input<string>;
    }

    export interface ElastigroupItfTargetGroupConfigMatcher {
        grpcCode?: pulumi.Input<string>;
        httpCode?: pulumi.Input<string>;
    }

    export interface ElastigroupItfTargetGroupConfigTag {
        tagKey: pulumi.Input<string>;
        tagValue?: pulumi.Input<string>;
    }

    export interface ElastigroupLogging {
        /**
         * Logging Export configuration.
         */
        export?: pulumi.Input<inputs.aws.ElastigroupLoggingExport>;
    }

    export interface ElastigroupLoggingExport {
        /**
         * Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
         */
        s3s?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupLoggingExportS3>[]>;
    }

    export interface ElastigroupLoggingExportS3 {
        /**
         * The identifier of The S3 data integration to export the logs to.
         */
        id: pulumi.Input<string>;
    }

    export interface ElastigroupMetadataOptions {
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Valid values: Integers from `1` to `64`.
         */
        httpPutResponseHopLimit?: pulumi.Input<number>;
        /**
         * The state of token usage for your instance metadata requests. Valid values: `optional` or `required`.
         */
        httpTokens: pulumi.Input<string>;
        /**
         * Indicates whether access to instance tags from the instance metadata is enabled or disabled. Can’t be null.
         */
        instanceMetadataTags?: pulumi.Input<string>;
    }

    export interface ElastigroupMultipleMetrics {
        /**
         * Array of objects (Expression config)
         */
        expressions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupMultipleMetricsExpression>[]>;
        /**
         * Array of objects (Metric config)
         */
        metrics?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupMultipleMetricsMetric>[]>;
    }

    export interface ElastigroupMultipleMetricsExpression {
        /**
         * An expression consisting of the metric names listed in the 'metrics' array.
         */
        expression: pulumi.Input<string>;
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
    }

    export interface ElastigroupMultipleMetricsMetric {
        dimensions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupMultipleMetricsMetricDimension>[]>;
        /**
         * Percentile statistic. Valid values: `"p0.1"` - `"p100"`.
         */
        extendedStatistic?: pulumi.Input<string>;
        metricName: pulumi.Input<string>;
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        unit?: pulumi.Input<string>;
    }

    export interface ElastigroupMultipleMetricsMetricDimension {
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterface {
        /**
         * Indicates whether to assign IPV6 addresses to your instance. Requires a subnet with IPV6 CIDR block ranges.
         *
         * Usage:
         */
        associateIpv6Address?: pulumi.Input<boolean>;
        /**
         * Indicates whether to assign a public IP address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one.
         */
        associatePublicIpAddress?: pulumi.Input<boolean>;
        /**
         * If set to true, the interface is deleted when the instance is terminated.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * The description of the network interface.
         */
        description?: pulumi.Input<string>;
        /**
         * The index of the device on the instance for the network interface attachment.
         */
        deviceIndex: pulumi.Input<string>;
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: pulumi.Input<string>;
        /**
         * The private IP address of the network interface.
         */
        privateIpAddress?: pulumi.Input<string>;
        /**
         * The number of secondary private IP addresses.
         */
        secondaryPrivateIpAddressCount?: pulumi.Input<string>;
    }

    export interface ElastigroupResourceRequirement {
        /**
         * Instance families to exclude
         */
        excludedInstanceFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Instance generations to exclude
         */
        excludedInstanceGenerations?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Instance types to exclude
         */
        excludedInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Required maximum instance GPU (<=16)
         */
        requiredGpuMaximum?: pulumi.Input<number>;
        /**
         * Required minimum instance GPU (>=1)
         */
        requiredGpuMinimum?: pulumi.Input<number>;
        /**
         * Required maximum instance memory (<=512)
         */
        requiredMemoryMaximum: pulumi.Input<number>;
        /**
         * Required minimum instance memory (>=1)
         */
        requiredMemoryMinimum: pulumi.Input<number>;
        /**
         * Required maximum instance vCPU (<=64)
         */
        requiredVcpuMaximum: pulumi.Input<number>;
        /**
         * Required minimum instance vCPU (>=1)
         */
        requiredVcpuMinimum: pulumi.Input<number>;
    }

    export interface ElastigroupResourceTagSpecification {
        /**
         * Tag specification for AMI resources.
         */
        shouldTagAmis?: pulumi.Input<boolean>;
        /**
         * Tag specification for ENI resources.
         */
        shouldTagEnis?: pulumi.Input<boolean>;
        /**
         * Tag specification for Snapshot resources.
         */
        shouldTagSnapshots?: pulumi.Input<boolean>;
        /**
         * Tag specification for Volume resources.
         */
        shouldTagVolumes?: pulumi.Input<boolean>;
    }

    export interface ElastigroupRevertToSpot {
        /**
         * In the event of a fallback to On-Demand instances, select the time period to revert back to Spot. Supported Arguments – always (default), timeWindow, never. For timeWindow or never to be valid the group must have availabilityOriented OR persistence defined.
         */
        performAt: pulumi.Input<string>;
        /**
         * Specify a list of time windows for to execute revertToSpot strategy. Time window format: `ddd:hh:mm-ddd:hh:mm`. Example: `Mon:03:00-Wed:02:30`
         */
        timeWindows?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ElastigroupScalingDownPolicy {
        /**
         * The type of action to perform for scaling. Valid values: `"adjustment"`, `"percentageAdjustment"`, `"setMaxTarget"`, `"setMinTarget"`, `"updateCapacity"`. If a `stepAdjustment` object is defined, then it cannot be specified.
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed. Can be used as advanced expression for scaling of instances to add/remove to/from the target capacity when scale is needed. You can see more information here: Advanced expression. Example value: `"MAX(currCapacity / 5, value * 10)"`
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A list of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingDownPolicyDimension>[]>;
        /**
         * The number of periods over which data is compared to the specified threshold.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Specifies whether the scaling policy described in this block is enabled.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * . The number of the desired target (and maximum) capacity
         */
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximal number of instances to have in the group.
         */
        maximum?: pulumi.Input<string>;
        /**
         * The name of the metric, with or without spaces.
         */
        metricName: pulumi.Input<string>;
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimal number of instances to have in the group.
         */
        minimum?: pulumi.Input<string>;
        /**
         * The namespace for the alarm's associated metric.
         */
        namespace: pulumi.Input<string>;
        /**
         * The operator to use in order to determine if the scaling policy is applicable. Valid values: `"gt"`, `"gte"`, `"lt"`, `"lte"`.
         */
        operator?: pulumi.Input<string>;
        /**
         * The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
         */
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        /**
         * The source of the metric. Valid values: `"cloudWatch"`, `"spectrum"`.
         */
        source?: pulumi.Input<string>;
        /**
         * The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
         */
        statistic?: pulumi.Input<string>;
        stepAdjustments?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingDownPolicyStepAdjustment>[]>;
        /**
         * The target number of instances to have in the group.
         */
        target?: pulumi.Input<string>;
        /**
         * The value against which the specified statistic is compared. If a `stepAdjustment` object is defined, then it cannot be specified.
         */
        threshold?: pulumi.Input<number>;
        /**
         * The unit for the alarm's associated metric. Valid values: `"percent`, `"seconds"`, `"microseconds"`, `"milliseconds"`, `"bytes"`, `"kilobytes"`, `"megabytes"`, `"gigabytes"`, `"terabytes"`, `"bits"`, `"kilobits"`, `"megabits"`, `"gigabits"`, `"terabits"`, `"count"`, `"bytes/second"`, `"kilobytes/second"`, `"megabytes/second"`, `"gigabytes/second"`, `"terabytes/second"`, `"bits/second"`, `"kilobits/second"`, `"megabits/second"`, `"gigabits/second"`, `"terabits/second"`, `"count/second"`, `"none"`.
         */
        unit?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicyDimension {
        /**
         * The dimension name.
         */
        name: pulumi.Input<string>;
        /**
         * The dimension value.
         */
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicyStepAdjustment {
        action: pulumi.Input<inputs.aws.ElastigroupScalingDownPolicyStepAdjustmentAction>;
        threshold: pulumi.Input<number>;
    }

    export interface ElastigroupScalingDownPolicyStepAdjustmentAction {
        adjustment?: pulumi.Input<string>;
        maxTargetCapacity?: pulumi.Input<string>;
        maximum?: pulumi.Input<string>;
        minTargetCapacity?: pulumi.Input<string>;
        minimum?: pulumi.Input<string>;
        target?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface ElastigroupScalingStrategy {
        /**
         * Specify whether to terminate instances at the end of each billing hour.
         */
        terminateAtEndOfBillingHour?: pulumi.Input<boolean>;
        /**
         * Determines whether to terminate the newest instances when performing a scaling action. Valid values: `"default"`, `"newestInstance"`.
         */
        terminationPolicy?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingTargetPolicy {
        /**
         * Integer the amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A list of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingTargetPolicyDimension>[]>;
        /**
         * The number of periods over which data is compared to the specified threshold.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * String, restrict the maximal number of instances which can be added in each scale-up action.
         *
         * `scalingTargetPolicies` support predictive scaling:
         */
        maxCapacityPerScale?: pulumi.Input<string>;
        /**
         * String, the name of the metric, with or without spaces.
         */
        metricName: pulumi.Input<string>;
        /**
         * String, the namespace for the alarm's associated metric.
         */
        namespace: pulumi.Input<string>;
        /**
         * The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
         */
        period?: pulumi.Input<number>;
        /**
         * String, the name of the policy.
         */
        policyName: pulumi.Input<string>;
        /**
         * Start a metric prediction process to determine the expected target metric value within the next two days. See [Predictive Autoscaling](https://api.spotinst.com/elastigroup-for-aws/concepts/scaling-concepts/predictive-autoscaling/) documentation for more info. Valid values: `FORECAST_AND_SCALE`, `FORECAST_ONLY`.
         *
         * Usage:
         */
        predictiveMode?: pulumi.Input<string>;
        /**
         * String, the source of the metric. Valid values: `"cloudWatch"`, `"spectrum"`.
         */
        source?: pulumi.Input<string>;
        /**
         * String, the metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
         */
        statistic?: pulumi.Input<string>;
        /**
         * The target number of instances to have in the group.
         */
        target: pulumi.Input<number>;
        /**
         * String, tThe unit for the alarm's associated metric. Valid values: `"percent`, `"seconds"`, `"microseconds"`, `"milliseconds"`, `"bytes"`, `"kilobytes"`, `"megabytes"`, `"gigabytes"`, `"terabytes"`, `"bits"`, `"kilobits"`, `"megabits"`, `"gigabits"`, `"terabits"`, `"count"`, `"bytes/second"`, `"kilobytes/second"`, `"megabytes/second"`, `"gigabytes/second"`, `"terabytes/second"`, `"bits/second"`, `"kilobits/second"`, `"megabits/second"`, `"gigabits/second"`, `"terabits/second"`, `"count/second"`, `"none"`.
         */
        unit?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingTargetPolicyDimension {
        /**
         * String, the dimension name.
         */
        name: pulumi.Input<string>;
        /**
         * String, the dimension value.
         */
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicy {
        /**
         * The type of action to perform for scaling. Valid values: `"adjustment"`, `"percentageAdjustment"`, `"setMaxTarget"`, `"setMinTarget"`, `"updateCapacity"`. If a `stepAdjustment` object is defined, then it cannot be specified.
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed. Can be used as advanced expression for scaling of instances to add/remove to/from the target capacity when scale is needed. You can see more information here: Advanced expression. Example value: `"MAX(currCapacity / 5, value * 10)"`
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A list of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingUpPolicyDimension>[]>;
        /**
         * The number of periods over which data is compared to the specified threshold.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Specifies whether the scaling policy described in this block is enabled.
         */
        isEnabled?: pulumi.Input<boolean>;
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximal number of instances to have in the group.
         */
        maximum?: pulumi.Input<string>;
        /**
         * The name of the metric, with or without spaces.
         */
        metricName: pulumi.Input<string>;
        /**
         * . The number of the desired target (and minimum) capacity
         */
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimal number of instances to have in the group.
         */
        minimum?: pulumi.Input<string>;
        /**
         * The namespace for the alarm's associated metric.
         */
        namespace: pulumi.Input<string>;
        /**
         * The operator to use in order to determine if the scaling policy is applicable. Valid values: `"gt"`, `"gte"`, `"lt"`, `"lte"`.
         */
        operator?: pulumi.Input<string>;
        /**
         * The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
         */
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        /**
         * The source of the metric. Valid values: `"cloudWatch"`, `"spectrum"`.
         */
        source?: pulumi.Input<string>;
        /**
         * The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
         */
        statistic?: pulumi.Input<string>;
        stepAdjustments?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingUpPolicyStepAdjustment>[]>;
        /**
         * The target number of instances to have in the group.
         */
        target?: pulumi.Input<string>;
        /**
         * The value against which the specified statistic is compared. If a `stepAdjustment` object is defined, then it cannot be specified.
         */
        threshold?: pulumi.Input<number>;
        /**
         * The unit for the alarm's associated metric. Valid values: `"percent`, `"seconds"`, `"microseconds"`, `"milliseconds"`, `"bytes"`, `"kilobytes"`, `"megabytes"`, `"gigabytes"`, `"terabytes"`, `"bits"`, `"kilobits"`, `"megabits"`, `"gigabits"`, `"terabits"`, `"count"`, `"bytes/second"`, `"kilobytes/second"`, `"megabytes/second"`, `"gigabytes/second"`, `"terabytes/second"`, `"bits/second"`, `"kilobits/second"`, `"megabits/second"`, `"gigabits/second"`, `"terabits/second"`, `"count/second"`, `"none"`.
         */
        unit?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicyDimension {
        /**
         * The dimension name.
         */
        name: pulumi.Input<string>;
        /**
         * The dimension value.
         */
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicyStepAdjustment {
        action: pulumi.Input<inputs.aws.ElastigroupScalingUpPolicyStepAdjustmentAction>;
        threshold: pulumi.Input<number>;
    }

    export interface ElastigroupScalingUpPolicyStepAdjustmentAction {
        adjustment?: pulumi.Input<string>;
        maxTargetCapacity?: pulumi.Input<string>;
        maximum?: pulumi.Input<string>;
        minTargetCapacity?: pulumi.Input<string>;
        minimum?: pulumi.Input<string>;
        target?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface ElastigroupScheduledTask {
        /**
         * The number of instances to add or remove.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The percentage of instances to add or remove.
         *
         * Usage:
         */
        adjustmentPercentage?: pulumi.Input<string>;
        /**
         * The percentage size of each batch in the scheduled deployment roll.
         */
        batchSizePercentage?: pulumi.Input<string>;
        /**
         * A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
         */
        cronExpression?: pulumi.Input<string>;
        /**
         * The recurrence frequency to run this task. Supported values are `"hourly"`, `"daily"`, `"weekly"` and `"continuous"`.
         */
        frequency?: pulumi.Input<string>;
        /**
         * The period of time (seconds) to wait before checking a batch's health after it's deployment.
         */
        gracePeriod?: pulumi.Input<string>;
        /**
         * Setting the task to being enabled or disabled.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * The maximum number of instances the group should have.
         */
        maxCapacity?: pulumi.Input<string>;
        /**
         * The minimum number of instances the group should have.
         */
        minCapacity?: pulumi.Input<string>;
        /**
         * The maximum number of instances the group should have.
         */
        scaleMaxCapacity?: pulumi.Input<string>;
        /**
         * The minimum number of instances the group should have.
         */
        scaleMinCapacity?: pulumi.Input<string>;
        /**
         * The desired number of instances the group should have.
         */
        scaleTargetCapacity?: pulumi.Input<string>;
        /**
         * Set a start time for one time tasks.
         */
        startTime?: pulumi.Input<string>;
        /**
         * The desired number of instances the group should have.
         */
        targetCapacity?: pulumi.Input<string>;
        /**
         * The task type to run. Supported task types are: `"scale"`, `"backupAmi"`, `"roll"`, `"scaleUp"`, `"percentageScaleUp"`, `"scaleDown"`, `"percentageScaleDown"`, `"statefulUpdateCapacity"`.
         */
        taskType: pulumi.Input<string>;
    }

    export interface ElastigroupSignal {
        /**
         * The name of the signal defined for the group. Valid Values: `"INSTANCE_READY"`, `"INSTANCE_READY_TO_SHUTDOWN"`
         */
        name: pulumi.Input<string>;
        /**
         * The signals defined timeout- default is 40 minutes (1800 seconds).
         *
         * Usage:
         */
        timeout?: pulumi.Input<number>;
    }

    export interface ElastigroupStatefulDeallocation {
        /**
         * For stateful groups: remove persistent images.
         */
        shouldDeleteImages?: pulumi.Input<boolean>;
        /**
         * For stateful groups: remove network interfaces.
         */
        shouldDeleteNetworkInterfaces?: pulumi.Input<boolean>;
        /**
         * For stateful groups: remove snapshots.
         *
         * Usage:
         */
        shouldDeleteSnapshots?: pulumi.Input<boolean>;
        /**
         * For stateful groups: remove persistent volumes.
         */
        shouldDeleteVolumes?: pulumi.Input<boolean>;
    }

    export interface ElastigroupStatefulInstanceAction {
        /**
         * String, Stateful Instance ID on which the action should be performed.
         */
        statefulInstanceId: pulumi.Input<string>;
        /**
         * String, Action type. Supported action types: `pause`, `resume`, `recycle`, `deallocate`.
         *
         * Usage:
         */
        type: pulumi.Input<string>;
    }

    export interface ElastigroupTag {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupUpdatePolicy {
        /**
         * Enables updates to tags without rolling the group when set to `true`.
         */
        autoApplyTags?: pulumi.Input<boolean>;
        /**
         * While used, you can control whether the group should perform a deployment after an update to the configuration.
         */
        rollConfig?: pulumi.Input<inputs.aws.ElastigroupUpdatePolicyRollConfig>;
        /**
         * This will apply resuming action for Stateful instances in the Elastigroup upon scale up or capacity changes. Example usage will be for Elastigroups that will have scheduling rules to set a target capacity of 0 instances in the night and automatically restore the same state of the instances in the morning.
         */
        shouldResumeStateful: pulumi.Input<boolean>;
        /**
         * Sets the enablement of the roll option.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface ElastigroupUpdatePolicyRollConfig {
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
        /**
         * Sets the grace period for new instances to become healthy.
         */
        gracePeriod?: pulumi.Input<number>;
        /**
         * Sets the health check type to use. Valid values: `"EC2"`, `"ECS_CLUSTER_INSTANCE"`, `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"NONE"`.
         */
        healthCheckType?: pulumi.Input<string>;
        /**
         * Strategy parameters
         */
        strategy?: pulumi.Input<inputs.aws.ElastigroupUpdatePolicyRollConfigStrategy>;
        /**
         * For use with `shouldRoll`. Sets minimum % of roll required to complete before continuing the plan. Required if `waitForRollTimeout` is set.
         */
        waitForRollPercentage?: pulumi.Input<number>;
        /**
         * For use with `shouldRoll`. Sets how long to wait for the deployed % of a roll to exceed `waitForRollPercentage` before continuing the plan. Required if `waitForRollPercentage` is set.
         */
        waitForRollTimeout?: pulumi.Input<number>;
    }

    export interface ElastigroupUpdatePolicyRollConfigStrategy {
        /**
         * Action to take. Valid values: `REPLACE_SERVER`, `RESTART_SERVER`.
         */
        action: pulumi.Input<string>;
        /**
         * Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the deployment will fail. Range `1` - `100`.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Set detach options to the deployment.
         */
        onFailure?: pulumi.Input<inputs.aws.ElastigroupUpdatePolicyRollConfigStrategyOnFailure>;
        /**
         * Specify whether to drain incoming TCP connections before terminating a server.
         */
        shouldDrainInstances?: pulumi.Input<boolean>;
    }

    export interface ElastigroupUpdatePolicyRollConfigStrategyOnFailure {
        /**
         * Sets the action that will take place, Accepted values are: `DETACH_OLD`, `DETACH_NEW`.
         */
        actionType: pulumi.Input<string>;
        batchNum?: pulumi.Input<number>;
        /**
         * Indicates (in seconds) the timeout to wait until instance are detached.
         */
        drainingTimeout?: pulumi.Input<number>;
        /**
         * Decrementing the group target capacity after detaching the instances.
         */
        shouldDecrementTargetCapacity?: pulumi.Input<boolean>;
        /**
         * Indicator if the action should apply to all batches of the deployment or only the latest batch.
         */
        shouldHandleAllBatches?: pulumi.Input<boolean>;
    }

    export interface ManagedInstanceBlockDeviceMapping {
        deviceName: pulumi.Input<string>;
        ebs?: pulumi.Input<inputs.aws.ManagedInstanceBlockDeviceMappingEbs>;
    }

    export interface ManagedInstanceBlockDeviceMappingEbs {
        deleteOnTermination?: pulumi.Input<boolean>;
        encrypted?: pulumi.Input<boolean>;
        iops?: pulumi.Input<number>;
        kmsKeyId?: pulumi.Input<string>;
        snapshotId?: pulumi.Input<string>;
        throughput?: pulumi.Input<number>;
        volumeSize?: pulumi.Input<number>;
        volumeType?: pulumi.Input<string>;
    }

    export interface ManagedInstanceDelete {
        amiBackupShouldDeleteImages?: pulumi.Input<boolean>;
        deallocationConfigShouldDeleteImages?: pulumi.Input<boolean>;
        shouldDeleteNetworkInterfaces?: pulumi.Input<boolean>;
        shouldDeleteSnapshots?: pulumi.Input<boolean>;
        shouldDeleteVolumes?: pulumi.Input<boolean>;
        shouldTerminateInstance?: pulumi.Input<boolean>;
    }

    export interface ManagedInstanceIntegrationRoute53 {
        domains: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceIntegrationRoute53Domain>[]>;
    }

    export interface ManagedInstanceIntegrationRoute53Domain {
        hostedZoneId: pulumi.Input<string>;
        recordSetType?: pulumi.Input<string>;
        recordSets: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceIntegrationRoute53DomainRecordSet>[]>;
        spotinstAcctId?: pulumi.Input<string>;
    }

    export interface ManagedInstanceIntegrationRoute53DomainRecordSet {
        name: pulumi.Input<string>;
        usePublicDns?: pulumi.Input<boolean>;
        usePublicIp?: pulumi.Input<boolean>;
    }

    export interface ManagedInstanceLoadBalancer {
        arn?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
        type: pulumi.Input<string>;
    }

    export interface ManagedInstanceManagedInstanceAction {
        type: pulumi.Input<string>;
    }

    export interface ManagedInstanceMetadataOptions {
        httpPutResponseHopLimit?: pulumi.Input<number>;
        httpTokens: pulumi.Input<string>;
        instanceMetadataTags?: pulumi.Input<string>;
    }

    export interface ManagedInstanceNetworkInterface {
        associateIpv6Address?: pulumi.Input<boolean>;
        associatePublicIpAddress?: pulumi.Input<boolean>;
        deviceIndex: pulumi.Input<string>;
    }

    export interface ManagedInstanceResourceTagSpecification {
        shouldTagAmis?: pulumi.Input<boolean>;
        shouldTagEnis?: pulumi.Input<boolean>;
        shouldTagSnapshots?: pulumi.Input<boolean>;
        shouldTagVolumes?: pulumi.Input<boolean>;
    }

    export interface ManagedInstanceRevertToSpot {
        performAt: pulumi.Input<string>;
    }

    export interface ManagedInstanceScheduledTask {
        cronExpression?: pulumi.Input<string>;
        frequency?: pulumi.Input<string>;
        isEnabled?: pulumi.Input<boolean>;
        startTime?: pulumi.Input<string>;
        taskType: pulumi.Input<string>;
    }

    export interface ManagedInstanceTag {
        key?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface MrScalarApplication {
        /**
         * Arguments for EMR to pass to the application.
         */
        args?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The MrScaler name.
         */
        name: pulumi.Input<string>;
        /**
         * T he version of the application.
         */
        version?: pulumi.Input<string>;
    }

    export interface MrScalarBootstrapActionsFile {
        bucket: pulumi.Input<string>;
        key: pulumi.Input<string>;
    }

    export interface MrScalarConfigurationsFile {
        bucket: pulumi.Input<string>;
        key: pulumi.Input<string>;
    }

    export interface MrScalarCoreEbsBlockDevice {
        iops?: pulumi.Input<number>;
        sizeInGb: pulumi.Input<number>;
        volumeType: pulumi.Input<string>;
        volumesPerInstance?: pulumi.Input<number>;
    }

    export interface MrScalarCoreScalingDownPolicy {
        /**
         * The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A mapping of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Max target capacity for scale down.
         */
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximum to set when scale is needed.
         */
        maximum?: pulumi.Input<string>;
        metricName: pulumi.Input<string>;
        /**
         * Min target capacity for scale up.
         */
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimum to set when scale is needed.
         */
        minimum?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        /**
         * The number of instances to set when scale is needed.
         */
        target?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface MrScalarCoreScalingUpPolicy {
        /**
         * The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A mapping of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Max target capacity for scale down.
         */
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximum to set when scale is needed.
         */
        maximum?: pulumi.Input<string>;
        metricName: pulumi.Input<string>;
        /**
         * Min target capacity for scale up.
         */
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimum to set when scale is needed.
         */
        minimum?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        /**
         * The number of instances to set when scale is needed.
         */
        target?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface MrScalarInstanceWeight {
        /**
         * The type of the instance.
         */
        instanceType: pulumi.Input<string>;
        /**
         * The weight given to the associated instance type.
         */
        weightedCapacity: pulumi.Input<number>;
    }

    export interface MrScalarMasterEbsBlockDevice {
        iops?: pulumi.Input<number>;
        sizeInGb: pulumi.Input<number>;
        volumeType: pulumi.Input<string>;
        volumesPerInstance?: pulumi.Input<number>;
    }

    export interface MrScalarProvisioningTimeout {
        /**
         * The amount of time (minutes) after which the cluster is automatically terminated if it's still in provisioning status. Minimum: '15'.
         */
        timeout: pulumi.Input<number>;
        /**
         * The action to take if the timeout is exceeded. Valid values: `terminate`, `terminateAndRetry`.
         */
        timeoutAction: pulumi.Input<string>;
    }

    export interface MrScalarScheduledTask {
        /**
         * A cron expression representing the schedule for the task.
         */
        cron: pulumi.Input<string>;
        /**
         * New desired capacity for the elastigroup.
         */
        desiredCapacity?: pulumi.Input<string>;
        /**
         * Select the EMR instance groups to execute the scheduled task on. Valid values: `task`.
         */
        instanceGroupType: pulumi.Input<string>;
        /**
         * Enable/Disable the specified scheduling task.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * New max capacity for the elastigroup.
         */
        maxCapacity?: pulumi.Input<string>;
        /**
         * New min capacity for the elastigroup.
         */
        minCapacity?: pulumi.Input<string>;
        /**
         * The type of task to be scheduled. Valid values: `setCapacity`.
         */
        taskType: pulumi.Input<string>;
    }

    export interface MrScalarStepsFile {
        bucket: pulumi.Input<string>;
        key: pulumi.Input<string>;
    }

    export interface MrScalarTag {
        key: pulumi.Input<string>;
        /**
         * Tag value.
         *
         * <a id="Optional Compute Parameters"></a>
         */
        value: pulumi.Input<string>;
    }

    export interface MrScalarTaskEbsBlockDevice {
        iops?: pulumi.Input<number>;
        sizeInGb: pulumi.Input<number>;
        volumeType: pulumi.Input<string>;
        volumesPerInstance?: pulumi.Input<number>;
    }

    export interface MrScalarTaskScalingDownPolicy {
        /**
         * The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A mapping of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Max target capacity for scale down.
         */
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximum to set when scale is needed.
         */
        maximum?: pulumi.Input<string>;
        metricName: pulumi.Input<string>;
        /**
         * Min target capacity for scale up.
         */
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimum to set when scale is needed.
         */
        minimum?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        /**
         * The number of instances to set when scale is needed.
         */
        target?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface MrScalarTaskScalingUpPolicy {
        /**
         * The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'
         */
        actionType?: pulumi.Input<string>;
        /**
         * The number of instances to add/remove to/from the target capacity when scale is needed.
         */
        adjustment?: pulumi.Input<string>;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A mapping of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Max target capacity for scale down.
         */
        maxTargetCapacity?: pulumi.Input<string>;
        /**
         * The maximum to set when scale is needed.
         */
        maximum?: pulumi.Input<string>;
        metricName: pulumi.Input<string>;
        /**
         * Min target capacity for scale up.
         */
        minTargetCapacity?: pulumi.Input<string>;
        /**
         * The minimum to set when scale is needed.
         */
        minimum?: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        /**
         * The name of the policy.
         */
        policyName: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        /**
         * The number of instances to set when scale is needed.
         */
        target?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface MrScalarTerminationPolicy {
        statements: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTerminationPolicyStatement>[]>;
    }

    export interface MrScalarTerminationPolicyStatement {
        /**
         * The number of periods over which data is compared to the specified threshold.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * The name of the metric in CloudWatch which the statement will be based on.
         */
        metricName: pulumi.Input<string>;
        /**
         * Must contain the value: `AWS/ElasticMapReduce`.
         */
        namespace: pulumi.Input<string>;
        /**
         * The operator to use in order to determine if the policy is applicable. Valid values: `gt` | `gte` | `lt` | `lte`
         */
        operator?: pulumi.Input<string>;
        /**
         * The time window in seconds over which the statistic is applied.
         */
        period?: pulumi.Input<number>;
        /**
         * The aggregation method of the given metric. Valid Values: `average` | `sum` | `sampleCount` | `maximum` | `minimum`
         */
        statistic?: pulumi.Input<string>;
        /**
         * The value that the specified statistic is compared to.
         */
        threshold: pulumi.Input<number>;
        /**
         * The unit for a given metric. Valid Values: `seconds` | `microseconds` | `milliseconds` | `bytes` | `kilobytes` | `megabytes` | `gigabytes` | `terabytes` | `bits` | `kilobits` | `megabits` | `gigabits` | `terabits` | `percent` | `count` | `bytes/second` | `kilobytes/second` | `megabytes/second` | `gigabytes/second` | `terabytes/second` | `bits/second` | `kilobits/second` | `megabits/second` | `gigabits/second` | `terabits/second` | `count/second` | `none`
         */
        unit?: pulumi.Input<string>;
    }

    export interface OceanAttachLoadBalancer {
        /**
         * If type is "TARGET_GROUP" then an ARN is required. Otherwise is not allowed.
         */
        arn?: pulumi.Input<string>;
        /**
         * If type is "CLASSIC" then a name is required. Otherwise is not allowed.
         */
        name?: pulumi.Input<string>;
        /**
         * Type of load balancer to use.
         */
        type: pulumi.Input<string>;
    }

    export interface OceanAutoscaler {
        /**
         * Set the auto headroom percentage (a number in the range [0, 200]) which controls the percentage of headroom from the cluster. Relevant only when `autoscaleIsAutoConfig` toggled on.
         */
        autoHeadroomPercentage?: pulumi.Input<number>;
        /**
         * Cooldown period between scaling actions.
         */
        autoscaleCooldown?: pulumi.Input<number>;
        /**
         * Auto Scaling scale down operations.
         */
        autoscaleDown?: pulumi.Input<inputs.aws.OceanAutoscalerAutoscaleDown>;
        /**
         * Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
         */
        autoscaleHeadroom?: pulumi.Input<inputs.aws.OceanAutoscalerAutoscaleHeadroom>;
        /**
         * Automatically configure and optimize headroom resources.
         */
        autoscaleIsAutoConfig?: pulumi.Input<boolean>;
        /**
         * Enable the Ocean Kubernetes Auto Scaler.
         */
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        /**
         * enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
         */
        enableAutomaticAndManualHeadroom?: pulumi.Input<boolean>;
        /**
         * List of Ocean extended resource definitions to use in this cluster.
         */
        extendedResourceDefinitions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Optionally set upper and lower bounds on the resource usage of the cluster.
         */
        resourceLimits?: pulumi.Input<inputs.aws.OceanAutoscalerResourceLimits>;
    }

    export interface OceanAutoscalerAutoscaleDown {
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * When set to 'true', the Aggressive Scale Down feature is enabled.
         */
        isAggressiveScaleDownEnabled?: pulumi.Input<boolean>;
        /**
         * Would represent the maximum % to scale-down. Number between 1-100.
         */
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface OceanAutoscalerAutoscaleHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the number of GPUs to allocate the headroom.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MB) to allocate the headroom.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface OceanAutoscalerResourceLimits {
        /**
         * The maximum memory in GiB units that can be allocated to the cluster.
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * The maximum cpu in vCPU units that can be allocated to the cluster.
         */
        maxVcpu?: pulumi.Input<number>;
    }

    export interface OceanBlockDeviceMapping {
        /**
         * String. Set device name. (Example: `/dev/xvda`).
         */
        deviceName?: pulumi.Input<string>;
        /**
         * Object. Set Elastic Block Store properties .
         */
        ebs?: pulumi.Input<inputs.aws.OceanBlockDeviceMappingEbs>;
    }

    export interface OceanBlockDeviceMappingEbs {
        /**
         * Boolean. Flag to delete the EBS on instance termination.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * Set dynamic IOPS properties. When using this object, you cannot use the `iops` attribute. You must use one or the other.
         */
        dynamicIops?: pulumi.Input<inputs.aws.OceanBlockDeviceMappingEbsDynamicIops>;
        /**
         * Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
         */
        dynamicVolumeSize?: pulumi.Input<inputs.aws.OceanBlockDeviceMappingEbsDynamicVolumeSize>;
        /**
         * Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
         */
        encrypted?: pulumi.Input<boolean>;
        /**
         * Must be greater than or equal to 0.
         */
        iops?: pulumi.Input<number>;
        /**
         * String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * (Optional) String. The Snapshot ID to mount by.
         */
        snapshotId?: pulumi.Input<string>;
        /**
         * The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = `gp3`.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Int. The size, in GB of the volume.
         */
        volumeSize?: pulumi.Input<number>;
        /**
         * String. The type of the volume. (Example: `gp2`).
         */
        volumeType?: pulumi.Input<string>;
    }

    export interface OceanBlockDeviceMappingEbsDynamicIops {
        /**
         * Initial size for IOPS.
         */
        baseSize: pulumi.Input<number>;
        resource: pulumi.Input<string>;
        /**
         * Additional size per resource unit (in IOPS). (Example: `baseSize=50`, `sizePerResourceUnit=20`, and an instance with 2 CPU is launched; its IOPS size will be: 90).
         */
        sizePerResourceUnit: pulumi.Input<number>;
    }

    export interface OceanBlockDeviceMappingEbsDynamicVolumeSize {
        /**
         * Int. Initial size for volume. (Example: 50)
         */
        baseSize: pulumi.Input<number>;
        /**
         * String. Resource type to increase volume size dynamically by. (Valid values: `CPU`)
         */
        resource: pulumi.Input<string>;
        /**
         * Int. Additional size (in GB) per resource unit. (Example: `baseSize=50`, `sizePerResourceUnit=20`, and instance with 2 CPU is launched; its total disk size will be: 90GB).
         */
        sizePerResourceUnit: pulumi.Input<number>;
    }

    export interface OceanClusterOrientation {
        /**
         * You can control the approach that Ocean takes while launching nodes by configuring this value. Possible values: `costOriented`,`balanced`,`cheapest`.
         */
        availabilityVsCost?: pulumi.Input<string>;
    }

    export interface OceanDetachLoadBalancer {
        /**
         * If type is "TARGET_GROUP" then an ARN is required. Otherwise is not allowed.
         */
        arn?: pulumi.Input<string>;
        /**
         * If type is "CLASSIC" then a name is required. Otherwise is not allowed.
         */
        name?: pulumi.Input<string>;
        /**
         * Type of load balancer to use.
         */
        type: pulumi.Input<string>;
    }

    export interface OceanFilters {
        /**
         * The filtered instance types will support at least one of the architectures from this list.
         */
        architectures?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will belong to one of the categories types from this list.
         */
        categories?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will have one of the disk type from this list.
         */
        diskTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         */
        excludeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * In case excludeMetal is set to true, metal types will not be available for scaling.
         */
        excludeMetal?: pulumi.Input<boolean>;
        /**
         * The filtered instance types will have a hypervisor type from this list.
         */
        hypervisors?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         */
        includeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Ena is supported or not.
         */
        isEnaSupported?: pulumi.Input<string>;
        /**
         * Maximum total number of GPUs.
         */
        maxGpu?: pulumi.Input<number>;
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * Maximum Bandwidth in Gib/s of network performance.
         */
        maxNetworkPerformance?: pulumi.Input<number>;
        maxVcpu?: pulumi.Input<number>;
        /**
         * Minimum number of network interfaces (ENIs).
         */
        minEnis?: pulumi.Input<number>;
        /**
         * Minimum total number of GPUs.
         */
        minGpu?: pulumi.Input<number>;
        /**
         * Minimum amount of Memory (GiB).
         */
        minMemoryGib?: pulumi.Input<number>;
        /**
         * Minimum Bandwidth in Gib/s of network performance.
         */
        minNetworkPerformance?: pulumi.Input<number>;
        /**
         * Minimum number of vcpus available.
         */
        minVcpu?: pulumi.Input<number>;
        /**
         * The filtered instance types will have a root device types from this list.
         */
        rootDeviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will support at least one of the virtualization types from this list.
         */
        virtualizationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanInstanceMetadataOptions {
        /**
         * An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
         */
        httpPutResponseHopLimit?: pulumi.Input<number>;
        /**
         * Determines if a signed token is required or not. Valid values: `optional` or `required`.
         */
        httpTokens: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecAutoscaleDown {
        /**
         * The maximum percentage allowed to scale down in a single scaling action on the nodes running in a specific VNG. Allowed only if maxScaleDownPercentage is set to null at the cluster level. Number between [0.1-100].
         */
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecAutoscaleHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the number of GPUS to allocate for each headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecAutoscaleHeadroomsAutomatic {
        /**
         * Number between 0-200 to control the headroom % of the specific Virtual Node Group. Effective when cluster.autoScaler.headroom.automatic.`isEnabled` = true is set on the Ocean cluster.
         */
        autoHeadroomPercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecBlockDeviceMapping {
        /**
         * String. Set device name. (Example: `/dev/xvda`).
         */
        deviceName?: pulumi.Input<string>;
        /**
         * Object. Set Elastic Block Store properties .
         */
        ebs?: pulumi.Input<inputs.aws.OceanLaunchSpecBlockDeviceMappingEbs>;
        /**
         * String. Suppresses the specified device included in the block device mapping of the AMI.
         */
        noDevice?: pulumi.Input<string>;
        virtualName?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecBlockDeviceMappingEbs {
        /**
         * Boolean. Flag to delete the EBS on instance termination.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
         */
        dynamicVolumeSize?: pulumi.Input<inputs.aws.OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize>;
        /**
         * Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
         */
        encrypted?: pulumi.Input<boolean>;
        /**
         * Int. The number of I/O operations per second (IOPS) that the volume supports.
         */
        iops?: pulumi.Input<number>;
        /**
         * String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * (Optional) String. The Snapshot ID to mount by.
         */
        snapshotId?: pulumi.Input<string>;
        /**
         * The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = `gp3`.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Int. The size, in GB of the volume.
         */
        volumeSize?: pulumi.Input<number>;
        /**
         * String. The type of the volume. (Example: `gp2`).
         */
        volumeType?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
        /**
         * Int. Initial size for volume. (Example: 50)
         */
        baseSize: pulumi.Input<number>;
        /**
         * String. Resource type to increase volume size dynamically by. (Valid values: `CPU`)
         */
        resource: pulumi.Input<string>;
        /**
         * Int. Additional size (in GB) per resource unit. (Example: `baseSize=50`, `sizePerResourceUnit=20`, and instance with 2 CPU is launched; its total disk size will be: 90GB)
         */
        sizePerResourceUnit: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecCreateOptions {
        /**
         * When set to an integer greater than 0, a corresponding amount of nodes will be launched from the created Virtual Node Group. The parameter is recommended in case the useAsTemplateOnly (in spotinst.aws.Ocean resource) is set to true during Ocean resource creation.
         */
        initialNodes?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecDeleteOptions {
        /**
         * When set to "true", all instances belonging to the deleted launch specification will be drained, detached, and terminated.
         */
        deleteNodes?: pulumi.Input<boolean>;
        /**
         * When set to `true`, delete even if it is the last Virtual Node Group (also, the default Virtual Node Group must be configured with `useAsTemlateOnly = true`). Should be set at creation or update, but will be used only at deletion.
         */
        forceDelete: pulumi.Input<boolean>;
    }

    export interface OceanLaunchSpecElasticIpPool {
        /**
         * A key-value pair, which defines an Elastic IP from the customer pool. Can be null.
         */
        tagSelector?: pulumi.Input<inputs.aws.OceanLaunchSpecElasticIpPoolTagSelector>;
    }

    export interface OceanLaunchSpecElasticIpPoolTagSelector {
        /**
         * Elastic IP tag key. The Virtual Node Group will consider all Elastic IPs tagged with this tag as a part of the Elastic IP pool to use.
         */
        tagKey: pulumi.Input<string>;
        /**
         * Elastic IP tag value. Can be null.
         */
        tagValue?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecEphemeralStorage {
        /**
         * Specify an alternative device name from which ephemeral storage calculations should be derived. This parameter is used when the ephemeral storage should not utilize the root device. Provide the device name configured in the VNG's BDM or AMI's BDM that differs from the default root device.
         */
        ephemeralStorageDeviceName?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecImage {
        /**
         * Identifier of the image in AWS. Valid values: any string which is not empty or null.
         */
        imageId?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecInstanceMetadataOptions {
        /**
         * An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
         */
        httpPutResponseHopLimit?: pulumi.Input<number>;
        /**
         * Determines if a signed token is required or not. Valid values: `optional` or `required`.
         */
        httpTokens: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecInstanceTypesFilters {
        /**
         * The filtered instance types will belong to one of the categories types from this list. Valid values: `Accelerated_computing`, `Compute_optimized`, `General_purpose`, `Memory_optimized`, `Storage_optimized`.
         */
        categories?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will have one of the disk type from this list. Valid values: `NVMe`, `EBS`, `SSD`, `HDD`.
         */
        diskTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         */
        excludeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * In case excludeMetal is set to true, metal types will not be available for scaling.
         */
        excludeMetal?: pulumi.Input<boolean>;
        /**
         * The filtered instance types will have a hypervisor type from this list. Valid values: `nitro`, `xen`.
         */
        hypervisors?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         */
        includeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Ena is supported or not.
         */
        isEnaSupported?: pulumi.Input<string>;
        /**
         * Maximum total number of GPUs.
         */
        maxGpu?: pulumi.Input<number>;
        /**
         * Maximum amount of Memory (GiB).
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * Maximum Bandwidth in Gib/s of network performance.
         */
        maxNetworkPerformance?: pulumi.Input<number>;
        /**
         * Maximum number of vcpus available.
         */
        maxVcpu?: pulumi.Input<number>;
        /**
         * Minimum number of network interfaces (ENIs).
         */
        minEnis?: pulumi.Input<number>;
        /**
         * Minimum total number of GPUs.
         */
        minGpu?: pulumi.Input<number>;
        /**
         * Minimum amount of Memory (GiB).
         */
        minMemoryGib?: pulumi.Input<number>;
        /**
         * Minimum Bandwidth in Gib/s of network performance.
         */
        minNetworkPerformance?: pulumi.Input<number>;
        /**
         * Minimum number of vcpus available.
         */
        minVcpu?: pulumi.Input<number>;
        /**
         * The filtered instance types will have a root device types from this list. Valid values: `ebs`, or `instance-store`.
         */
        rootDeviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will support at least one of the virtualization types from this list. Valid values: `hvm`, `paravirtual`.
         */
        virtualizationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanLaunchSpecLabel {
        /**
         * The label key.
         */
        key: pulumi.Input<string>;
        /**
         * The label value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecResourceLimit {
        /**
         * Set a maximum number of instances per Virtual Node Group. Can be null. If set, value must be greater than or equal to 0.
         */
        maxInstanceCount?: pulumi.Input<number>;
        /**
         * Set a minimum number of instances per Virtual Node Group. Can be null. If set, value must be greater than or equal to 0.
         */
        minInstanceCount?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecSchedulingShutdownHours {
        /**
         * Flag to enable or disable the shutdown hours mechanism. When `false`, the mechanism is deactivated, and the virtual node group remains in its current state.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * The times that the shutdown hours will apply.
         */
        timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanLaunchSpecSchedulingTask {
        /**
         * A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * The config of this scheduled task. Depends on the value of taskType.
         */
        taskHeadrooms?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecSchedulingTaskTaskHeadroom>[]>;
        /**
         * The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecSchedulingTaskTaskHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the number of GPUS to allocate for each headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecStrategy {
        /**
         * The configurable amount of time that Ocean will wait for the draining process to complete before terminating an instance. If you have not defined a draining timeout, the default of 300 seconds will be used.
         */
        drainingTimeout?: pulumi.Input<number>;
        /**
         * The desired percentage of the Spot instances out of all running instances for this VNG. Only available when the field is not set in the cluster directly (cluster.strategy.spotPercentage).
         */
        spotPercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecTag {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecTaint {
        /**
         * The effect of the taint. Valid values: `"NoSchedule"`, `"PreferNoSchedule"`, `"NoExecute"`.
         */
        effect: pulumi.Input<string>;
        /**
         * The taint key.
         */
        key: pulumi.Input<string>;
        /**
         * The taint value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecUpdatePolicy {
        /**
         * Holds the roll configuration.
         */
        rollConfig?: pulumi.Input<inputs.aws.OceanLaunchSpecUpdatePolicyRollConfig>;
        /**
         * Enables the roll.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanLaunchSpecUpdatePolicyRollConfig {
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
    }

    export interface OceanLoadBalancer {
        /**
         * Required if type is set to `TARGET_GROUP`
         */
        arn?: pulumi.Input<string>;
        /**
         * Required if type is set to `CLASSIC`
         */
        name?: pulumi.Input<string>;
        /**
         * Can be set to `CLASSIC` or `TARGET_GROUP`
         */
        type?: pulumi.Input<string>;
    }

    export interface OceanLogging {
        /**
         * Logging Export configuration.
         */
        export?: pulumi.Input<inputs.aws.OceanLoggingExport>;
    }

    export interface OceanLoggingExport {
        /**
         * Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
         */
        s3s?: pulumi.Input<pulumi.Input<inputs.aws.OceanLoggingExportS3>[]>;
    }

    export interface OceanLoggingExportS3 {
        /**
         * The identifier of The S3 data integration to export the logs to.
         */
        id: pulumi.Input<string>;
    }

    export interface OceanResourceTagSpecification {
        /**
         * Specify if Volume resources will be tagged with Virtual Node Group tags or Ocean tags.
         */
        shouldTagVolumes?: pulumi.Input<boolean>;
    }

    export interface OceanScheduledTask {
        /**
         * Set shutdown hours for cluster object.
         */
        shutdownHours?: pulumi.Input<inputs.aws.OceanScheduledTaskShutdownHours>;
        /**
         * The scheduling tasks for the cluster.
         */
        tasks?: pulumi.Input<pulumi.Input<inputs.aws.OceanScheduledTaskTask>[]>;
    }

    export interface OceanScheduledTaskShutdownHours {
        /**
         * Toggle the shutdown hours task. (Example: `true`).
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of: `ddd:hh:mm-ddd:hh:mm` where `ddd` = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat, `hh` = hour 24 = 0 -23, `mm` = minute = 0 - 59. Time windows should not overlap. Required if `cluster.scheduling.isEnabled` is `true`. (Example: `Fri:15:30-Wed:14:30`).
         */
        timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanScheduledTaskTask {
        /**
         * A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. (Example: `0 1 * * *`).
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * This filed will be compatible to the `taskType` field. If `taskType` is defined as `clusterRoll`, user cluster roll object in parameters.
         */
        parameters?: pulumi.Input<inputs.aws.OceanScheduledTaskTaskParameters>;
        /**
         * Valid values: `clusterRoll` `amiAutoUpdate`. Required for `cluster.scheduling.tasks`
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanScheduledTaskTaskParameters {
        /**
         * Set amiAutoUpdate object
         */
        amiAutoUpdate?: pulumi.Input<inputs.aws.OceanScheduledTaskTaskParametersAmiAutoUpdate>;
        /**
         * Set clusterRoll object
         */
        parametersClusterRoll?: pulumi.Input<inputs.aws.OceanScheduledTaskTaskParametersParametersClusterRoll>;
    }

    export interface OceanScheduledTaskTaskParametersAmiAutoUpdate {
        /**
         * Set clusterRoll object
         */
        amiAutoUpdateClusterRoll?: pulumi.Input<inputs.aws.OceanScheduledTaskTaskParametersAmiAutoUpdateAmiAutoUpdateClusterRoll>;
        /**
         * When the AMI is updated according to the configuration set, a cluster roll can be triggered
         */
        applyRoll?: pulumi.Input<boolean>;
        /**
         * When set to 'true', the auto-update process will update the VNGs’ AMI with the AMI to match the Kubernetes control plane version. either "patch" or "minorVersion" must be true.
         */
        minorVersion?: pulumi.Input<boolean>;
        /**
         * When set to 'true', the auto-update process will update the VNGs’ images with the latest security patches. either "patch" or "minorVersion" must be true.
         */
        patch?: pulumi.Input<boolean>;
    }

    export interface OceanScheduledTaskTaskParametersAmiAutoUpdateAmiAutoUpdateClusterRoll {
        /**
         * Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a `comment` description for the roll. The `comment` is limited to 256 chars
         */
        comment?: pulumi.Input<string>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the instance replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
    }

    export interface OceanScheduledTaskTaskParametersParametersClusterRoll {
        /**
         * Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a `comment` description for the roll. The `comment` is limited to 256 chars
         */
        comment?: pulumi.Input<string>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the instance replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
    }

    export interface OceanTag {
        /**
         * The tag key.
         */
        key: pulumi.Input<string>;
        /**
         * The tag value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanUpdatePolicy {
        /**
         * will update instance tags on the fly without rolling the cluster.
         */
        autoApplyTags?: pulumi.Input<boolean>;
        /**
         * Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
         */
        conditionedRoll?: pulumi.Input<boolean>;
        /**
         * A custom list of attributes will trigger the cluster roll operation (overrides the predefined list of parameters). Valid only when the `conditionedRoll` parameter is set to true. (Valid values: `"subnetIds"`,`"whitelist"`,`"blacklist"`,`"userData"`,`"imageId"`,`"securityGroups"`,`"keyName"`,`"iamInstanceProfile"`,`"associatePublicIpAddress"`,`"loadBalancers"`,`"instanceMetadataOptions"`,`"ebsOptimized"`,`"rootVolumeSize"`)
         */
        conditionedRollParams?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * While used, you can control whether the group should perform a deployment after an update to the configuration.
         */
        rollConfig?: pulumi.Input<inputs.aws.OceanUpdatePolicyRollConfig>;
        /**
         * Enables the roll.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanUpdatePolicyRollConfig {
        /**
         * Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
        /**
         * List of virtual node group identifiers to be rolled.
         */
        launchSpecIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * During the roll, if the parameter is set to `true` we honor PDB during the instance replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
    }

    export interface SuspensionSuspension {
        /**
         * The name of process to suspend. Valid values: `"AUTO_HEALING" , "OUT_OF_STRATEGY", "PREVENTIVE_REPLACEMENT", "REVERT_PREFERRED", or "SCHEDULING"`.
         */
        name: pulumi.Input<string>;
    }
}

export namespace azure {
    export interface OceanNpAutoscaler {
        /**
         * Auto Scaling scale down operations.
         */
        autoscaleDown?: pulumi.Input<inputs.azure.OceanNpAutoscalerAutoscaleDown>;
        /**
         * Spare resource capacity management enabling fast assignment of pods without waiting for new resources to launch.
         */
        autoscaleHeadroom?: pulumi.Input<inputs.azure.OceanNpAutoscalerAutoscaleHeadroom>;
        /**
         * Enable the Ocean Kubernetes Autoscaler.
         */
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        /**
         * Optionally set upper and lower bounds on the resource usage of the cluster.
         */
        resourceLimits?: pulumi.Input<inputs.azure.OceanNpAutoscalerResourceLimits>;
    }

    export interface OceanNpAutoscalerAutoscaleDown {
        /**
         * The maximum percentage allowed to scale down in a single scaling action.
         */
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface OceanNpAutoscalerAutoscaleHeadroom {
        /**
         * [Automatic headroom](https://docs.spot.io/ocean/features/headroom?id=automatic-headroom) configuration.
         */
        automatic?: pulumi.Input<inputs.azure.OceanNpAutoscalerAutoscaleHeadroomAutomatic>;
    }

    export interface OceanNpAutoscalerAutoscaleHeadroomAutomatic {
        /**
         * Enable automatic headroom. When set to `true`, Ocean configures and optimizes headroom automatically.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Optionally set a number between 0-100 to control the percentage of total cluster resources dedicated to headroom.
         */
        percentage?: pulumi.Input<number>;
    }

    export interface OceanNpAutoscalerResourceLimits {
        /**
         * The maximum memory in GiB units that can be allocated to the cluster.
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * The maximum cpu in vCpu units that can be allocated to the cluster.
         */
        maxVcpu?: pulumi.Input<number>;
    }

    export interface OceanNpFilters {
        /**
         * In case acceleratedNetworking is set to Enabled, accelerated networking applies only to the VM that enables it.
         */
        acceleratedNetworking?: pulumi.Input<string>;
        /**
         * The filtered vm sizes will support at least one of the architectures from this list. x8664 includes both intel64 and amd64.
         */
        architectures?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered vm sizes will support at least one of the classes from this list.
         */
        diskPerformance?: pulumi.Input<string>;
        /**
         * Vm sizes belonging to a series from the list will not be available for scaling
         */
        excludeSeries?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered gpu types will belong to one of the gpu types from this list.
         */
        gpuTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Maximum number of GPUs available.
         */
        maxGpu?: pulumi.Input<number>;
        /**
         * Maximum amount of Memory (GiB).
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * Maximum number of vcpus available.
         */
        maxVcpu?: pulumi.Input<number>;
        /**
         * Minimum number of data disks available.
         */
        minDisk?: pulumi.Input<number>;
        /**
         * Minimum number of GPUs available.
         */
        minGpu?: pulumi.Input<number>;
        /**
         * Minimum amount of Memory (GiB).
         */
        minMemoryGib?: pulumi.Input<number>;
        /**
         * Minimum number of network interfaces.
         */
        minNics?: pulumi.Input<number>;
        /**
         * Minimum number of vcpus available.
         */
        minVcpu?: pulumi.Input<number>;
        /**
         * Vm sizes belonging to a series from the list will be available for scaling. We can specify include list and series can be specified with capital or small letters, with space, without space or with underscore '_' .  For example all of these "DSv2", "Ds v2", "dsV2" refer to same DS_v2 series.
         */
        series?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered vm types will belong to one of the vm types from this list.
         */
        vmTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanNpHeadroom {
        /**
         * Configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Amount of GPU to allocate for headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Configure the amount of memory (MiB) to allocate the headroom.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface OceanNpHealth {
        /**
         * The amount of time to wait, in seconds, from the moment the instance has launched until monitoring of its health checks begins.
         */
        gracePeriod?: pulumi.Input<number>;
    }

    export interface OceanNpLinuxOsConfig {
        /**
         * System Controls
         */
        sysctls?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpLinuxOsConfigSysctl>[]>;
    }

    export interface OceanNpLinuxOsConfigSysctl {
        /**
         * Maximum number of memory map areas a process may have. Can be configured only if OS type is Linux.
         */
        vmMaxMapCount?: pulumi.Input<number>;
    }

    export interface OceanNpScheduling {
        shutdownHours?: pulumi.Input<inputs.azure.OceanNpSchedulingShutdownHours>;
        tasks?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpSchedulingTask>[]>;
    }

    export interface OceanNpSchedulingShutdownHours {
        /**
         * Enable automatic headroom. When set to `true`, Ocean configures and optimizes headroom automatically.
         */
        isEnabled?: pulumi.Input<boolean>;
        timeWindows?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanNpSchedulingTask {
        cronExpression: pulumi.Input<string>;
        /**
         * Enable automatic headroom. When set to `true`, Ocean configures and optimizes headroom automatically.
         */
        isEnabled: pulumi.Input<boolean>;
        parameters?: pulumi.Input<inputs.azure.OceanNpSchedulingTaskParameters>;
        taskType: pulumi.Input<string>;
    }

    export interface OceanNpSchedulingTaskParameters {
        parametersClusterRoll?: pulumi.Input<inputs.azure.OceanNpSchedulingTaskParametersParametersClusterRoll>;
    }

    export interface OceanNpSchedulingTaskParametersParametersClusterRoll {
        /**
         * Indicates the threshold of minimum healthy nodes in single batch. If the amount of healthy nodes in single batch is under the threshold, the roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100. In case of null as value, the default value in the backend will be 20%.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a comment description for the roll. The comment is limited to 256 chars and optional.
         */
        comment?: pulumi.Input<string>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the nodes replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
        /**
         * During the roll, if the parameter is set to true we honor Restrict Scale Down label during the nodes replacement.
         */
        respectRestrictScaleDown?: pulumi.Input<boolean>;
        /**
         * List of virtual node group identifiers to be rolled. Each identifier is a string. vngIds can be null, and cannot be used together with nodeNames and nodePoolNames.
         */
        vngIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanNpTaint {
        /**
         * Set taint effect.
         */
        effect: pulumi.Input<string>;
        /**
         * Set taint key. The following taint keys are not allowed: ["node.kubernetes.io/not-ready",  "node.kubernetes.io/unreachable", "node.kubernetes.io/unschedulable",  "node.kubernetes.io/memory-pressure",  "node.kubernetes.io/disk-pressure",  "node.kubernetes.io/network-unavailable",  "node.kubernetes.io/pid-pressure",  "node.kubernetes.io/out-of-service",  "node.cloudprovider.kubernetes.io/uninitialized",  "node.cloudprovider.kubernetes.io/shutdown", "kubernetes.azure.com/scalesetpriority"]
         */
        key: pulumi.Input<string>;
        /**
         * Set taint value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanNpUpdatePolicy {
        /**
         * Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as availability_zones, max_pods_per_node, enable_node_public_ip, os_disk_size_gb, os_disk_type, os_sku, kubernetes_version, vnet_subnet_ids, pod_subnet_ids, labels, taints and tags).
         */
        conditionedRoll?: pulumi.Input<boolean>;
        /**
         * While used, you can control whether the group should perform a deployment after an update to the configuration.
         */
        rollConfig?: pulumi.Input<inputs.azure.OceanNpUpdatePolicyRollConfig>;
        /**
         * If set to true along with the cluster update, roll will be triggered.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanNpUpdatePolicyRollConfig {
        /**
         * Indicates the threshold of minimum healthy nodes in single batch. If the amount of healthy nodes in single batch is under the threshold, the roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100. In case of null as value, the default value in the backend will be 20%.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a comment description for the roll. The comment is limited to 256 chars and optional.
         */
        comment?: pulumi.Input<string>;
        /**
         * List of node names to be rolled. Each identifier is a string. nodeNames can be null, and cannot be used together with nodePoolNames and vngIds.
         */
        nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * List of node pools to be rolled. Each node pool name is a string. nodePoolNames can be null, and cannot be used together with nodeNames and vngIds.
         */
        nodePoolNames?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the nodes replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
        /**
         * During the roll, if the parameter is set to true we honor Restrict Scale Down label during the nodes replacement.
         */
        respectRestrictScaleDown?: pulumi.Input<boolean>;
        /**
         * List of virtual node group identifiers to be rolled. Each identifier is a string. vngIds can be null, and cannot be used together with nodeNames and nodePoolNames.
         */
        vngIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanNpVirtualNodeGroupFilters {
        /**
         * In case acceleratedNetworking is set to Enabled, accelerated networking applies only to the VM that enables it.
         */
        acceleratedNetworking?: pulumi.Input<string>;
        /**
         * The filtered vm sizes will support at least one of the architectures from this list. x8664 includes both intel64 and amd64.
         */
        architectures?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered vm sizes will support at least one of the classes from this list.
         */
        diskPerformance?: pulumi.Input<string>;
        /**
         * Vm sizes belonging to a series from the list will not be available for scaling.
         */
        excludeSeries?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered gpu types will belong to one of the gpu types from this list.
         */
        gpuTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Maximum number of GPUs available.
         */
        maxGpu?: pulumi.Input<number>;
        /**
         * Maximum amount of Memory (GiB).
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * Maximum number of vcpus available.
         */
        maxVcpu?: pulumi.Input<number>;
        /**
         * Minimum number of data disks available.
         */
        minDisk?: pulumi.Input<number>;
        /**
         * Minimum number of GPUs available.
         */
        minGpu?: pulumi.Input<number>;
        /**
         * Minimum amount of Memory (GiB).
         */
        minMemoryGib?: pulumi.Input<number>;
        /**
         * Minimum number of network interfaces.
         */
        minNics?: pulumi.Input<number>;
        /**
         * Minimum number of vcpus available.
         */
        minVcpu?: pulumi.Input<number>;
        /**
         * Vm sizes belonging to a series from the list will be available for scaling.
         */
        series?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered vm types will belong to one of the vm types from this list.
         */
        vmTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanNpVirtualNodeGroupHeadroom {
        /**
         * Configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Amount of GPU to allocate for headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Configure the amount of memory (MiB) to allocate the headroom.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface OceanNpVirtualNodeGroupLinuxOsConfig {
        /**
         * System Controls
         */
        sysctls?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupLinuxOsConfigSysctl>[]>;
    }

    export interface OceanNpVirtualNodeGroupLinuxOsConfigSysctl {
        /**
         * Maximum number of memory map areas a process may have. Can be configured only if OS type is Linux.
         */
        vmMaxMapCount?: pulumi.Input<number>;
    }

    export interface OceanNpVirtualNodeGroupTaint {
        /**
         * Set taint effect.
         */
        effect: pulumi.Input<string>;
        /**
         * Set taint key. The following are not allowed: "kubernetes.azure.com/scalesetpriority".
         */
        key: pulumi.Input<string>;
        /**
         * Set taint value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanNpVirtualNodeGroupUpdatePolicy {
        /**
         * Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as availability_zones, max_pods_per_node, enable_node_public_ip, os_disk_size_gb, os_disk_type, os_sku, kubernetes_version, vnet_subnet_ids, pod_subnet_ids, labels, taints and tags).
         */
        conditionedRoll?: pulumi.Input<boolean>;
        /**
         * While used, you can control whether the group should perform a deployment after an update to the configuration.
         */
        rollConfig?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupUpdatePolicyRollConfig>;
        /**
         * If set to true along with the vng update, roll will be triggered.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanNpVirtualNodeGroupUpdatePolicyRollConfig {
        /**
         * Indicates the threshold of minimum healthy nodes in single batch. If the amount of healthy nodes in single batch is under the threshold, the roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100. In case of null as value, the default value in the backend will be 20%.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a comment description for the roll. The comment is limited to 256 chars and optional.
         */
        comment?: pulumi.Input<string>;
        /**
         * List of node names to be rolled. Each identifier is a string. nodeNames can be null, and cannot be used together with nodePoolNames and vngIds.
         */
        nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * List of node pools to be rolled. Each node pool name is a string. nodePoolNames can be null, and cannot be used together with nodeNames and vngIds.
         */
        nodePoolNames?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the nodes replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
        /**
         * During the roll, if the parameter is set to true we honor Restrict Scale Down label during the nodes replacement.
         */
        respectRestrictScaleDown?: pulumi.Input<boolean>;
        /**
         * List of virtual node group identifiers to be rolled. Each identifier is a string. vngIds can be null, and cannot be used together with nodeNames and nodePoolNames.
         */
        vngIds?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace ecs {
    export interface OceanAutoscaler {
        /**
         * The auto-headroom percentage. Set a number between 0-200 to control the headroom % of the cluster. Relevant when `isAutoConfig`= true.
         */
        autoHeadroomPercentage?: pulumi.Input<number>;
        /**
         * Cooldown period between scaling actions.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * Auto Scaling scale down operations.
         */
        down?: pulumi.Input<inputs.ecs.OceanAutoscalerDown>;
        /**
         * When set to true, both automatic and per custom launch specification manual headroom to be saved concurrently and independently in the cluster. prerequisite: isAutoConfig must be true
         */
        enableAutomaticAndManualHeadroom?: pulumi.Input<boolean>;
        /**
         * Spare resource capacity management enabling fast assignment of tasks without waiting for new resources to launch.
         */
        headroom?: pulumi.Input<inputs.ecs.OceanAutoscalerHeadroom>;
        /**
         * Automatically configure and optimize headroom resources.
         */
        isAutoConfig?: pulumi.Input<boolean>;
        /**
         * Enable the Ocean ECS autoscaler.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Optionally set upper and lower bounds on the resource usage of the cluster.
         */
        resourceLimits?: pulumi.Input<inputs.ecs.OceanAutoscalerResourceLimits>;
        /**
         * Option to scale down non-service tasks. If not set, Ocean does not scale down standalone tasks.
         */
        shouldScaleDownNonServiceTasks?: pulumi.Input<boolean>;
    }

    export interface OceanAutoscalerDown {
        /**
         * Would represent the maximum % to scale-down. Number between 1-100.
         */
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface OceanAutoscalerHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MB) to allocate the headroom.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface OceanAutoscalerResourceLimits {
        /**
         * The maximum memory in GiB units that can be allocated to the cluster.
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * The maximum cpu in vCPU units that can be allocated to the cluster.
         */
        maxVcpu?: pulumi.Input<number>;
    }

    export interface OceanBlockDeviceMapping {
        /**
         * String. Set device name. Example: `/dev/xvda1`.
         */
        deviceName: pulumi.Input<string>;
        /**
         * Object. Set Elastic Block Store properties.
         */
        ebs?: pulumi.Input<inputs.ecs.OceanBlockDeviceMappingEbs>;
        /**
         * String. Suppresses the specified device included in the block device mapping of the AMI.
         */
        noDevice?: pulumi.Input<string>;
        virtualName?: pulumi.Input<string>;
    }

    export interface OceanBlockDeviceMappingEbs {
        /**
         * Boolean. Toggles EBS deletion upon instance termination.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
         */
        dynamicVolumeSize?: pulumi.Input<inputs.ecs.OceanBlockDeviceMappingEbsDynamicVolumeSize>;
        /**
         * Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
         */
        encrypted?: pulumi.Input<boolean>;
        /**
         * Int. The number of I/O operations per second (IOPS) that the volume supports.
         */
        iops?: pulumi.Input<number>;
        /**
         * String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * (Optional) String. The snapshot ID to mount by.
         */
        snapshotId?: pulumi.Input<string>;
        /**
         * The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Int. The size (in GB) of the volume.
         */
        volumeSize?: pulumi.Input<number>;
        /**
         * String. The type of the volume. Example: `gp2`.
         */
        volumeType?: pulumi.Input<string>;
    }

    export interface OceanBlockDeviceMappingEbsDynamicVolumeSize {
        /**
         * Int. Initial size for volume. Example: `50`.
         */
        baseSize: pulumi.Input<number>;
        /**
         * String. Resource type to increase volume size dynamically by. Valid values: `CPU`.
         */
        resource: pulumi.Input<string>;
        /**
         * Int. Additional size (in GB) per resource unit. Example: When the `baseSize=50`, `sizePerResourceUnit=20`, and instance with two CPUs is launched, its total disk size will be: 90GB.
         */
        sizePerResourceUnit: pulumi.Input<number>;
    }

    export interface OceanClusterOrientation {
        /**
         * You can control the approach that Ocean takes while launching nodes by configuring this value. Possible values: `costOriented`,`balanced`,`cheapest`.
         */
        availabilityVsCost?: pulumi.Input<string>;
    }

    export interface OceanFilters {
        /**
         * The filtered instance types will support at least one of the architectures from this list.
         */
        architectures?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will belong to one of the categories types from this list.
         */
        categories?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will have one of the disk type from this list.
         */
        diskTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         */
        excludeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * In case excludeMetal is set to true, metal types will not be available for scaling.
         */
        excludeMetal?: pulumi.Input<boolean>;
        /**
         * The filtered instance types will have a hypervisor type from this list.
         */
        hypervisors?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         */
        includeFamilies?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Ena is supported or not.
         */
        isEnaSupported?: pulumi.Input<string>;
        /**
         * Maximum total number of GPUs.
         */
        maxGpu?: pulumi.Input<number>;
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * Maximum Bandwidth in Gib/s of network performance.
         */
        maxNetworkPerformance?: pulumi.Input<number>;
        maxVcpu?: pulumi.Input<number>;
        /**
         * Minimum number of network interfaces (ENIs).
         */
        minEnis?: pulumi.Input<number>;
        /**
         * Minimum total number of GPUs.
         */
        minGpu?: pulumi.Input<number>;
        /**
         * Minimum amount of Memory (GiB).
         */
        minMemoryGib?: pulumi.Input<number>;
        /**
         * Minimum Bandwidth in Gib/s of network performance.
         */
        minNetworkPerformance?: pulumi.Input<number>;
        /**
         * Minimum number of vcpus available.
         */
        minVcpu?: pulumi.Input<number>;
        /**
         * The filtered instance types will have a root device types from this list.
         */
        rootDeviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filtered instance types will support at least one of the virtualization types from this list.
         */
        virtualizationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanInstanceMetadataOptions {
        /**
         * An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
         */
        httpPutResponseHopLimit?: pulumi.Input<number>;
        /**
         * Determines if a signed token is required or not. Valid values: `optional` or `required`.
         */
        httpTokens: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecAttribute {
        /**
         * The label key.
         */
        key: pulumi.Input<string>;
        /**
         * The label value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecAutoscaleHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in CPU units, where 1024 units = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecBlockDeviceMapping {
        /**
         * String. Set device name. (Example: "/dev/xvda1").
         */
        deviceName: pulumi.Input<string>;
        /**
         * Object. Set Elastic Block Store properties .
         */
        ebs?: pulumi.Input<inputs.ecs.OceanLaunchSpecBlockDeviceMappingEbs>;
        /**
         * String. suppresses the specified device included in the block device mapping of the AMI.
         */
        noDevice?: pulumi.Input<string>;
        virtualName?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecBlockDeviceMappingEbs {
        /**
         * Boolean. Flag to delete the EBS on instance termination.
         */
        deleteOnTermination?: pulumi.Input<boolean>;
        /**
         * Object. Set dynamic volume size properties. When using this object, you cannot use volumeSize. You must use one or the other.
         */
        dynamicVolumeSize?: pulumi.Input<inputs.ecs.OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize>;
        /**
         * Boolean. Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
         */
        encrypted?: pulumi.Input<boolean>;
        /**
         * Int. The number of I/O operations per second (IOPS) that the volume supports.
         */
        iops?: pulumi.Input<number>;
        /**
         * String. Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * (Optional) String. The Snapshot ID to mount by.
         */
        snapshotId?: pulumi.Input<string>;
        /**
         * The amount of data transferred to or from a storage device per second, you can use this param just in a case that `volumeType` = gp3.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Int. The size, in GB of the volume.
         */
        volumeSize?: pulumi.Input<number>;
        /**
         * String. The type of the volume (example: "gp2").
         */
        volumeType?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecBlockDeviceMappingEbsDynamicVolumeSize {
        /**
         * Int. Initial size for volume. (Example: 50)
         */
        baseSize: pulumi.Input<number>;
        /**
         * String. Resource type to increase volume size dynamically by. (valid values: "CPU")
         */
        resource: pulumi.Input<string>;
        /**
         * Int. Additional size (in GB) per resource unit. (Example: baseSize= 50, sizePerResourceUnit=20, and instance with 2 CPU is launched - its total disk size will be: 90GB)
         */
        sizePerResourceUnit: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecImage {
        /**
         * Identifier of the image in AWS. Valid values: any string which is not empty or null.
         */
        imageId?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecInstanceMetadataOptions {
        /**
         * An integer from 1 through 64. The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further the instance metadata requests can travel.
         */
        httpPutResponseHopLimit?: pulumi.Input<number>;
        /**
         * Determines if a signed token is required or not. Valid values: `optional` or `required`.
         */
        httpTokens: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecSchedulingTask {
        /**
         * A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * The config of this scheduled task. Depends on the value of taskType.
         */
        taskHeadrooms?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecSchedulingTaskTaskHeadroom>[]>;
        /**
         * The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecSchedulingTaskTaskHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecStrategy {
        /**
         * When set, Ocean will proactively try to maintain as close as possible to the percentage of Spot instances out of all the Virtual Node Group instances.
         */
        spotPercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecTag {
        /**
         * The label key.
         */
        key: pulumi.Input<string>;
        /**
         * The label value.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanLogging {
        /**
         * Logging Export configuration.
         */
        export?: pulumi.Input<inputs.ecs.OceanLoggingExport>;
    }

    export interface OceanLoggingExport {
        /**
         * Exports your cluster's logs to the S3 bucket and subdir configured on the S3 data integration given.
         */
        s3s?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLoggingExportS3>[]>;
    }

    export interface OceanLoggingExportS3 {
        /**
         * The identifier of The S3 data integration to export the logs to.
         */
        id: pulumi.Input<string>;
    }

    export interface OceanOptimizeImages {
        /**
         * String. Valid values: "always" "never" "timeWindow".
         */
        performAt: pulumi.Input<string>;
        /**
         * Boolean. Enable auto image (AMI) update for the ECS container instances. The auto update applies for ECS-Optimized AMIs.
         */
        shouldOptimizeEcsAmi: pulumi.Input<boolean>;
        /**
         * Array of strings. Set time windows for image update, at least one time window. Each string is in the format of ddd:hh:mm-ddd:hh:mm ddd. Time windows should not overlap.
         */
        timeWindows?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanScheduledTask {
        /**
         * Set shutdown hours for cluster object.
         */
        shutdownHours?: pulumi.Input<inputs.ecs.OceanScheduledTaskShutdownHours>;
        /**
         * The scheduling tasks for the cluster.
         */
        tasks?: pulumi.Input<pulumi.Input<inputs.ecs.OceanScheduledTaskTask>[]>;
    }

    export interface OceanScheduledTaskShutdownHours {
        /**
         * Flag to enable / disable the shutdown hours.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Set time windows for shutdown hours. Specify a list of `timeWindows` with at least one time window Each string is in the format of `ddd:hh:mm-ddd:hh:mm` (ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59). Time windows should not overlap. Required when `cluster.scheduling.isEnabled` is true. API Times are in UTC. Example: `Fri:15:30-Wed:14:30`.
         */
        timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanScheduledTaskTask {
        /**
         * A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of `frequency` or `cronExpression` should be used at a time. Required for `cluster.scheduling.tasks` object. Example: `0 1 * * *`.
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When true the task should run when false it should not run. Required for `cluster.scheduling.tasks` object.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * Valid values: "clusterRoll". Required for `cluster.scheduling.tasks object`. Example: `clusterRoll`.
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanTag {
        /**
         * The tag key.
         */
        key: pulumi.Input<string>;
        /**
         * The tag value.
         * * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
         */
        value: pulumi.Input<string>;
    }

    export interface OceanUpdatePolicy {
        /**
         * will update instance tags on the fly without rolling the cluster.
         */
        autoApplyTags?: pulumi.Input<boolean>;
        /**
         * Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
         */
        conditionedRoll?: pulumi.Input<boolean>;
        rollConfig?: pulumi.Input<inputs.ecs.OceanUpdatePolicyRollConfig>;
        /**
         * Enables the roll.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanUpdatePolicyRollConfig {
        /**
         * Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
    }
}

export namespace gcp {
    export interface ElastigroupBackendService {
        /**
         * Sets which location the backend services will be active. Valid values: `regional`, `global`.
         */
        locationType?: pulumi.Input<string>;
        /**
         * Describes a named port and a list of ports.
         */
        namedPorts?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupBackendServiceNamedPort>[]>;
        /**
         * Use when `locationType` is "regional". Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
         */
        scheme?: pulumi.Input<string>;
        /**
         * The name of the backend service.
         */
        serviceName: pulumi.Input<string>;
    }

    export interface ElastigroupBackendServiceNamedPort {
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
        /**
         * A list of ports.
         *
         * Usage:
         */
        ports: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ElastigroupDisk {
        /**
         * Specifies whether the disk will be auto-deleted when the instance is deleted.
         */
        autoDelete?: pulumi.Input<boolean>;
        /**
         * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
         */
        boot?: pulumi.Input<boolean>;
        /**
         * Specifies a unique device name of your choice.
         */
        deviceName?: pulumi.Input<string>;
        /**
         * Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance.
         */
        initializeParams?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupDiskInitializeParam>[]>;
        /**
         * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
         */
        interface?: pulumi.Input<string>;
        /**
         * The mode in which to attach this disk, either READ_WRITE or READ_ONLY.
         */
        mode?: pulumi.Input<string>;
        /**
         * Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks.
         */
        source?: pulumi.Input<string>;
        /**
         * Specifies the type of disk, either SCRATCH or PERSISTENT.
         */
        type?: pulumi.Input<string>;
    }

    export interface ElastigroupDiskInitializeParam {
        /**
         * Specifies disk size in gigabytes. Must be in increments of 2.
         */
        diskSizeGb?: pulumi.Input<string>;
        /**
         * Specifies the disk type to use to create the instance. Valid values: pd-ssd, local-ssd.
         */
        diskType?: pulumi.Input<string>;
        /**
         * A source image used to create the disk. You can provide a private (custom) image, and Compute Engine will use the corresponding image from your project.
         *
         * Usage:
         */
        sourceImage: pulumi.Input<string>;
    }

    export interface ElastigroupGpu {
        /**
         * The number of GPUs. Must be 0, 2, 4, 6, 8.
         *
         * Usage:
         */
        count: pulumi.Input<number>;
        /**
         * The type of GPU instance. Valid values: `nvidia-tesla-v100`, `nvidia-tesla-p100`, `nvidia-tesla-k80`.
         */
        type: pulumi.Input<string>;
    }

    export interface ElastigroupInstanceTypesCustom {
        /**
         * The memory (in GiB) in the custom instance types. GCP has a number of limitations on accepted memory values.For more information, see the GCP documentation (here.)[https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#specifications]
         */
        memoryGib: pulumi.Input<number>;
        vcpu: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationDockerSwarm {
        /**
         * IP or FQDN of one of your swarm managers.
         */
        masterHost: pulumi.Input<string>;
        /**
         * Network port used by your swarm.
         *
         * Usage:
         */
        masterPort: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGke {
        autoUpdate?: pulumi.Input<boolean>;
        autoscaleCooldown?: pulumi.Input<number>;
        autoscaleDown?: pulumi.Input<inputs.gcp.ElastigroupIntegrationGkeAutoscaleDown>;
        autoscaleHeadroom?: pulumi.Input<inputs.gcp.ElastigroupIntegrationGkeAutoscaleHeadroom>;
        autoscaleIsAutoConfig?: pulumi.Input<boolean>;
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        autoscaleLabels?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupIntegrationGkeAutoscaleLabel>[]>;
        clusterId?: pulumi.Input<string>;
        location?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleDown {
        /**
         * Number of consecutive periods in which the threshold must be met in order to trigger a scaling action.
         */
        evaluationPeriods?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleHeadroom {
        cpuPerUnit?: pulumi.Input<number>;
        memoryPerUnit?: pulumi.Input<number>;
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupLabel {
        /**
         * Labels key.
         */
        key: pulumi.Input<string>;
        /**
         * Labels value.
         */
        value: pulumi.Input<string>;
    }

    export interface ElastigroupMetadata {
        /**
         * Metadata key.
         */
        key: pulumi.Input<string>;
        /**
         * Metadata value.
         */
        value: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterface {
        /**
         * Array of configurations.
         */
        accessConfigs?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupNetworkInterfaceAccessConfig>[]>;
        aliasIpRanges?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupNetworkInterfaceAliasIpRange>[]>;
        /**
         * Network resource for this group.
         */
        network: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterfaceAccessConfig {
        /**
         * The group name.
         */
        name?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterfaceAliasIpRange {
        ipCidrRange: pulumi.Input<string>;
        subnetworkRangeName: pulumi.Input<string>;
    }

    export interface ElastigroupRevertToPreemptible {
        /**
         * Valid values: "always", "never", "timeWindow". Required on strategy.revertToPreemptible object.
         */
        performAt: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicy {
        /**
         * Type of scaling action to take when the scaling policy is triggered. Valid values: "adjustment", "setMinTarget", "updateCapacity", "percentageAdjustment"
         */
        actionType?: pulumi.Input<string>;
        /**
         * Value to which the action type will be adjusted. Required if using "numeric" or "percentageAdjustment" action types.
         */
        adjustment?: pulumi.Input<number>;
        /**
         * Time (seconds) to wait after a scaling action before resuming monitoring.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A list of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupScalingDownPolicyDimension>[]>;
        /**
         * Number of consecutive periods in which the threshold must be met in order to trigger a scaling action.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Metric to monitor. Valid values: "Percentage CPU", "Network In", "Network Out", "Disk Read Bytes", "Disk Write Bytes", "Disk Write Operations/Sec", "Disk Read Operations/Sec".
         */
        metricName: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        /**
         * The operator used to evaluate the threshold against the current metric value. Valid values: "gt" (greater than), "get" (greater-than or equal), "lt" (less than), "lte" (less than or equal).
         */
        operator?: pulumi.Input<string>;
        /**
         * Amount of time (seconds) for which the threshold must be met in order to trigger the scaling action.
         */
        period?: pulumi.Input<number>;
        /**
         * Name of scaling policy.
         */
        policyName: pulumi.Input<string>;
        /**
         * Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks.
         */
        source?: pulumi.Input<string>;
        /**
         * Statistic by which to evaluate the selected metric. Valid values: "AVERAGE", "SAMPLE_COUNT", "SUM", "MINIMUM", "MAXIMUM", "PERCENTILE", "COUNT".
         */
        statistic?: pulumi.Input<string>;
        /**
         * The value at which the scaling action is triggered.
         */
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicyDimension {
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicy {
        /**
         * Type of scaling action to take when the scaling policy is triggered. Valid values: "adjustment", "setMinTarget", "updateCapacity", "percentageAdjustment"
         */
        actionType?: pulumi.Input<string>;
        /**
         * Value to which the action type will be adjusted. Required if using "numeric" or "percentageAdjustment" action types.
         */
        adjustment?: pulumi.Input<number>;
        /**
         * Time (seconds) to wait after a scaling action before resuming monitoring.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * A list of dimensions describing qualities of the metric.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.gcp.ElastigroupScalingUpPolicyDimension>[]>;
        /**
         * Number of consecutive periods in which the threshold must be met in order to trigger a scaling action.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Metric to monitor. Valid values: "Percentage CPU", "Network In", "Network Out", "Disk Read Bytes", "Disk Write Bytes", "Disk Write Operations/Sec", "Disk Read Operations/Sec".
         */
        metricName: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        /**
         * The operator used to evaluate the threshold against the current metric value. Valid values: "gt" (greater than), "get" (greater-than or equal), "lt" (less than), "lte" (less than or equal).
         */
        operator?: pulumi.Input<string>;
        /**
         * Amount of time (seconds) for which the threshold must be met in order to trigger the scaling action.
         */
        period?: pulumi.Input<number>;
        /**
         * Name of scaling policy.
         */
        policyName: pulumi.Input<string>;
        /**
         * Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks.
         */
        source?: pulumi.Input<string>;
        /**
         * Statistic by which to evaluate the selected metric. Valid values: "AVERAGE", "SAMPLE_COUNT", "SUM", "MINIMUM", "MAXIMUM", "PERCENTILE", "COUNT".
         */
        statistic?: pulumi.Input<string>;
        /**
         * The value at which the scaling action is triggered.
         */
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicyDimension {
        /**
         * The dimension name.
         */
        name: pulumi.Input<string>;
        /**
         * The dimension value.
         *
         * Usage:
         */
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScheduledTask {
        /**
         * A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
         */
        cronExpression?: pulumi.Input<string>;
        /**
         * Setting the task to being enabled or disabled.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * The maximum number of instances the group should have.
         *
         * Usage:
         */
        maxCapacity?: pulumi.Input<string>;
        /**
         * The minimum number of instances the group should have.
         */
        minCapacity?: pulumi.Input<string>;
        /**
         * The desired number of instances the group should have.
         */
        targetCapacity?: pulumi.Input<string>;
        /**
         * The task type to run. Valid values: `"setCapacity"`.
         */
        taskType: pulumi.Input<string>;
    }

    export interface ElastigroupSubnet {
        /**
         * The region for the group of subnets.
         */
        region: pulumi.Input<string>;
        /**
         * The names of the subnets in the region.
         */
        subnetNames: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace gke {
    export interface ElastigroupBackendService {
        locationType?: pulumi.Input<string>;
        namedPorts?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupBackendServiceNamedPort>[]>;
        scheme?: pulumi.Input<string>;
        serviceName: pulumi.Input<string>;
    }

    export interface ElastigroupBackendServiceNamedPort {
        name: pulumi.Input<string>;
        ports: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ElastigroupDisk {
        autoDelete?: pulumi.Input<boolean>;
        boot?: pulumi.Input<boolean>;
        deviceName?: pulumi.Input<string>;
        initializeParams?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupDiskInitializeParam>[]>;
        interface?: pulumi.Input<string>;
        mode?: pulumi.Input<string>;
        source?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface ElastigroupDiskInitializeParam {
        diskSizeGb?: pulumi.Input<string>;
        diskType?: pulumi.Input<string>;
        sourceImage: pulumi.Input<string>;
    }

    export interface ElastigroupGpu {
        count: pulumi.Input<number>;
        type: pulumi.Input<string>;
    }

    export interface ElastigroupInstanceTypesCustom {
        memoryGib: pulumi.Input<number>;
        vcpu: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationDockerSwarm {
        masterHost: pulumi.Input<string>;
        masterPort: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGke {
        autoUpdate?: pulumi.Input<boolean>;
        /**
         * The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start.
         */
        autoscaleCooldown?: pulumi.Input<number>;
        /**
         * Enabling scale down.
         */
        autoscaleDown?: pulumi.Input<inputs.gke.ElastigroupIntegrationGkeAutoscaleDown>;
        /**
         * Headroom for the cluster.
         */
        autoscaleHeadroom?: pulumi.Input<inputs.gke.ElastigroupIntegrationGkeAutoscaleHeadroom>;
        autoscaleIsAutoConfig?: pulumi.Input<boolean>;
        /**
         * Specifies whether the auto scaling feature is enabled.
         */
        autoscaleIsEnabled?: pulumi.Input<boolean>;
        /**
         * Labels to assign to the resource.
         */
        autoscaleLabels?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupIntegrationGkeAutoscaleLabel>[]>;
        clusterId?: pulumi.Input<string>;
        /**
         * The location of your GKE cluster.
         */
        location?: pulumi.Input<string>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleDown {
        /**
         * Amount of cooldown evaluation periods for scale down.
         */
        evaluationPeriods?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleHeadroom {
        /**
         * Cpu units for compute.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * RAM units for compute.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * Amount of units for compute.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface ElastigroupIntegrationGkeAutoscaleLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupLabel {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupMetadata {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterface {
        accessConfigs?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupNetworkInterfaceAccessConfig>[]>;
        aliasIpRanges?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupNetworkInterfaceAliasIpRange>[]>;
        network: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterfaceAccessConfig {
        name?: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface ElastigroupNetworkInterfaceAliasIpRange {
        ipCidrRange: pulumi.Input<string>;
        subnetworkRangeName: pulumi.Input<string>;
    }

    export interface ElastigroupRevertToPreemptible {
        performAt: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicy {
        actionType?: pulumi.Input<string>;
        adjustment?: pulumi.Input<number>;
        cooldown?: pulumi.Input<number>;
        dimensions?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupScalingDownPolicyDimension>[]>;
        /**
         * Amount of cooldown evaluation periods for scale down.
         */
        evaluationPeriods?: pulumi.Input<number>;
        metricName: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        policyName: pulumi.Input<string>;
        source?: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface ElastigroupScalingDownPolicyDimension {
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicy {
        actionType?: pulumi.Input<string>;
        adjustment?: pulumi.Input<number>;
        cooldown?: pulumi.Input<number>;
        dimensions?: pulumi.Input<pulumi.Input<inputs.gke.ElastigroupScalingUpPolicyDimension>[]>;
        /**
         * Amount of cooldown evaluation periods for scale down.
         */
        evaluationPeriods?: pulumi.Input<number>;
        metricName: pulumi.Input<string>;
        namespace: pulumi.Input<string>;
        operator?: pulumi.Input<string>;
        period?: pulumi.Input<number>;
        policyName: pulumi.Input<string>;
        source?: pulumi.Input<string>;
        statistic?: pulumi.Input<string>;
        threshold: pulumi.Input<number>;
        unit: pulumi.Input<string>;
    }

    export interface ElastigroupScalingUpPolicyDimension {
        name: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface OceanImportAutoscaler {
        /**
         * Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
         */
        autoHeadroomPercentage?: pulumi.Input<number>;
        /**
         * Cooldown period between scaling actions.
         */
        cooldown?: pulumi.Input<number>;
        /**
         * Auto Scaling scale down operations.
         */
        down?: pulumi.Input<inputs.gke.OceanImportAutoscalerDown>;
        /**
         * enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
         */
        enableAutomaticAndManualHeadroom?: pulumi.Input<boolean>;
        /**
         * Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
         */
        headroom?: pulumi.Input<inputs.gke.OceanImportAutoscalerHeadroom>;
        /**
         * Automatically configure and optimize headroom resources.
         */
        isAutoConfig?: pulumi.Input<boolean>;
        /**
         * Enable the Ocean Kubernetes Autoscaler.
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Optionally set upper and lower bounds on the resource usage of the cluster.
         */
        resourceLimits?: pulumi.Input<inputs.gke.OceanImportAutoscalerResourceLimits>;
    }

    export interface OceanImportAutoscalerDown {
        /**
         * The number of evaluation periods that should accumulate before a scale down action takes place.
         */
        evaluationPeriods?: pulumi.Input<number>;
        /**
         * Would represent the maximum % to scale-down. Number between 1-100.
         */
        maxScaleDownPercentage?: pulumi.Input<number>;
    }

    export interface OceanImportAutoscalerHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * How much GPU allocate for headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate the headroom.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
         */
        numOfUnits?: pulumi.Input<number>;
    }

    export interface OceanImportAutoscalerResourceLimits {
        /**
         * The maximum memory in GiB units that can be allocated to the cluster.
         */
        maxMemoryGib?: pulumi.Input<number>;
        /**
         * The maximum cpu in vCpu units that can be allocated to the cluster.
         */
        maxVcpu?: pulumi.Input<number>;
    }

    export interface OceanImportBackendService {
        /**
         * Sets which location the backend services will be active. Valid values: `regional`, `global`.
         */
        locationType?: pulumi.Input<string>;
        namedPorts?: pulumi.Input<pulumi.Input<inputs.gke.OceanImportBackendServiceNamedPort>[]>;
        /**
         * Use when `locationType` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
         */
        scheme?: pulumi.Input<string>;
        /**
         * The name of the backend service.
         */
        serviceName: pulumi.Input<string>;
    }

    export interface OceanImportBackendServiceNamedPort {
        name: pulumi.Input<string>;
        /**
         * A list of ports.
         */
        ports: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanImportScheduledTask {
        /**
         * Set shutdown hours for cluster object.
         */
        shutdownHours?: pulumi.Input<inputs.gke.OceanImportScheduledTaskShutdownHours>;
        /**
         * The scheduling tasks for the cluster.
         */
        tasks?: pulumi.Input<pulumi.Input<inputs.gke.OceanImportScheduledTaskTask>[]>;
    }

    export interface OceanImportScheduledTaskShutdownHours {
        /**
         * Flag to enable / disable the shutdown hours.
         * Example: `true`
         */
        isEnabled?: pulumi.Input<boolean>;
        /**
         * Set time windows for shutdown hours. specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59. Time windows should not overlap. required on cluster.scheduling.isEnabled = `true`. API Times are in UTC
         * Example: Fri:15:30-Wed:14:30
         */
        timeWindows: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanImportScheduledTaskTask {
        /**
         * A valid cron expression. For example : " * * * * * ".The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of ‘frequency’ or ‘cronExpression’ should be used at a time. Required for cluster.scheduling.tasks object
         * Example: 0 1 * * *
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When true the task should run when false it should not run. Required for cluster.scheduling.tasks object.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * The scheduling parameters for the cluster.
         */
        taskParameters?: pulumi.Input<inputs.gke.OceanImportScheduledTaskTaskTaskParameters>;
        /**
         * Valid values: "clusterRoll". Required for cluster.scheduling.tasks object.
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanImportScheduledTaskTaskTaskParameters {
        /**
         * The cluster roll parameters for the cluster.
         */
        clusterRoll?: pulumi.Input<inputs.gke.OceanImportScheduledTaskTaskTaskParametersClusterRoll>;
    }

    export interface OceanImportScheduledTaskTaskTaskParametersClusterRoll {
        /**
         * Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Value as a percent to set the size of a batch in a roll. Valid values are 0-100.
         */
        batchSizePercentage?: pulumi.Input<number>;
        /**
         * Add a comment description for the roll. The comment is limited to 256 chars.
         */
        comment?: pulumi.Input<string>;
        /**
         * During the roll, if the parameter is set to true we honor PDB during the instance replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
    }

    export interface OceanImportShieldedInstanceConfig {
        /**
         * Boolean. Enable the integrity monitoring parameter on the GCP instances.
         */
        enableIntegrityMonitoring?: pulumi.Input<boolean>;
        /**
         * Boolean. Enable the secure boot parameter on the GCP instances.
         */
        enableSecureBoot?: pulumi.Input<boolean>;
    }

    export interface OceanImportStrategy {
        /**
         * The draining timeout (in seconds) before terminating the instance. If no draining timeout is defined, the default draining timeout will be used.
         */
        drainingTimeout?: pulumi.Input<number>;
        /**
         * Defines the desired preemptible percentage for the cluster.
         */
        preemptiblePercentage?: pulumi.Input<number>;
        /**
         * Define the provisioning model of the launched instances. Valid values: `SPOT`, `PREEMPTIBLE`.
         */
        provisioningModel?: pulumi.Input<string>;
    }

    export interface OceanImportUpdatePolicy {
        /**
         * Spot will perform a cluster Roll in accordance with a relevant modification of the cluster’s settings. When set to true , only specific changes in the cluster’s configuration will trigger a cluster roll (such as AMI, Key Pair, user data, instance types, load balancers, etc).
         */
        conditionedRoll?: pulumi.Input<boolean>;
        /**
         * Holds the roll configuration.
         */
        rollConfig?: pulumi.Input<inputs.gke.OceanImportUpdatePolicyRollConfig>;
        /**
         * Enables the roll.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanImportUpdatePolicyRollConfig {
        /**
         * Default: 50. Indicates the threshold of minimum healthy instances in single batch. If the amount of healthy instances in single batch is under the threshold, the cluster roll will fail. If exists, the parameter value will be in range of 1-100. In case of null as value, the default value in the backend will be 50%. Value of param should represent the number in percentage (%) of the batch.
         */
        batchMinHealthyPercentage?: pulumi.Input<number>;
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
        /**
         * List of Virtual Node Group identifiers to be rolled.
         */
        launchSpecIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Default: `false`. During the roll, if the parameter is set to `true` we honor PDB during the instance replacement.
         */
        respectPdb?: pulumi.Input<boolean>;
    }

    export interface OceanLaunchSpecAutoscaleHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the number of GPUS to allocate for each headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecAutoscaleHeadroomsAutomatic {
        /**
         * Number between 0-200 to control the headroom % of the specific Virtual Node Group. Effective when cluster.autoScaler.headroom.automatic.`isEnabled` = true is set on the Ocean cluster.
         */
        autoHeadroomPercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecCreateOptions {
        /**
         * When set to an integer greater than 0, a corresponding amount of nodes will be launched from the created Virtual Node Group.
         */
        initialNodes?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecLabel {
        /**
         * The label key.
         */
        key?: pulumi.Input<string>;
        /**
         * The label value.
         */
        value?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecMetadata {
        /**
         * The metadata key.
         */
        key?: pulumi.Input<string>;
        /**
         * The metadata value.
         */
        value?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecNetworkInterface {
        /**
         * The network protocol of the VNG.
         */
        accessConfigs?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecNetworkInterfaceAccessConfig>[]>;
        /**
         * use the imported node pool’s associated aliasIpRange to assign secondary IP addresses to the nodes. Cannot be changed after VNG creation.
         */
        aliasIpRanges?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecNetworkInterfaceAliasIpRange>[]>;
        /**
         * The name of the network.
         */
        network: pulumi.Input<string>;
        /**
         * Use a network resource from a different project. Set the project identifier to use its network resource. This parameter is relevant only if the network resource is in a different project.
         */
        projectId?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecNetworkInterfaceAccessConfig {
        /**
         * The name of the access configuration.
         */
        name?: pulumi.Input<string>;
        /**
         * The type of the access configuration.
         */
        type?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecNetworkInterfaceAliasIpRange {
        /**
         * specify the IP address range in CIDR notation that can be used for the alias IP addresses associated with the imported node pool.
         */
        ipCidrRange: pulumi.Input<string>;
        /**
         * specify the IP address range for the subnet secondary IP range.
         */
        subnetworkRangeName: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecResourceLimits {
        /**
         * Option to set a maximum number of instances per virtual node group. Can be null. If set, the value must be greater than or equal to 0.
         */
        maxInstanceCount?: pulumi.Input<number>;
        /**
         * Option to set a minimum number of instances per virtual node group. Can be null. If set, the value must be greater than or equal to 0.
         */
        minInstanceCount?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecSchedulingTask {
        /**
         * A valid cron expression. For example : " * * * * * ". The cron job runs in UTC time and is in Unix cron format.
         */
        cronExpression: pulumi.Input<string>;
        /**
         * Describes whether the task is enabled. When `true`, the task runs. When `false`, it does not run.
         */
        isEnabled: pulumi.Input<boolean>;
        /**
         * The config of this scheduled task. Depends on the value of taskType.
         */
        taskHeadrooms?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecSchedulingTaskTaskHeadroom>[]>;
        /**
         * The activity that you are scheduling. Valid values: "manualHeadroomUpdate".
         */
        taskType: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecSchedulingTaskTaskHeadroom {
        /**
         * Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
         */
        cpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the number of GPUS to allocate for each headroom unit.
         */
        gpuPerUnit?: pulumi.Input<number>;
        /**
         * Optionally configure the amount of memory (MiB) to allocate for each headroom unit.
         */
        memoryPerUnit?: pulumi.Input<number>;
        /**
         * The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
         */
        numOfUnits: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecShieldedInstanceConfig {
        /**
         * Boolean. Enable the integrity monitoring parameter on the GCP instances.
         */
        enableIntegrityMonitoring?: pulumi.Input<boolean>;
        /**
         * Boolean. Enable the secure boot parameter on the GCP instances.
         */
        enableSecureBoot?: pulumi.Input<boolean>;
    }

    export interface OceanLaunchSpecStorage {
        /**
         * Defines the number of local SSDs to be attached per node for this VNG.
         */
        localSsdCount?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecStrategy {
        /**
         * Defines the desired preemptible percentage for this launch specification.
         */
        preemptiblePercentage?: pulumi.Input<number>;
    }

    export interface OceanLaunchSpecTaint {
        /**
         * The effect of the taint. Valid values: `"NoSchedule"`, `"PreferNoSchedule"`, `"NoExecute"`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The taint key.
         */
        key?: pulumi.Input<string>;
        /**
         * The taint value.
         */
        value?: pulumi.Input<string>;
    }

    export interface OceanLaunchSpecUpdatePolicy {
        /**
         * Holds the roll configuration.
         */
        rollConfig?: pulumi.Input<inputs.gke.OceanLaunchSpecUpdatePolicyRollConfig>;
        /**
         * Enables the roll.
         */
        shouldRoll: pulumi.Input<boolean>;
    }

    export interface OceanLaunchSpecUpdatePolicyRollConfig {
        /**
         * Sets the percentage of the instances to deploy in each batch.
         */
        batchSizePercentage: pulumi.Input<number>;
    }
}

export namespace oceancd {
    export interface RolloutSpecFailurePolicy {
        /**
         * Choose an action to perform on failure. Default is `abort`.  Enum: "abort" "pause" "promote".
         */
        action: pulumi.Input<string>;
    }

    export interface RolloutSpecSpotDeployment {
        /**
         * Ocean CD cluster identifier for the references `SpotDeployment`.
         */
        spotDeploymentsClusterId?: pulumi.Input<string>;
        /**
         * The name of the `SpotDeployment` resource
         */
        spotDeploymentsName?: pulumi.Input<string>;
        /**
         * The namespace which the `SpotDeployment` resource exists within.
         */
        spotDeploymentsNamespace?: pulumi.Input<string>;
    }

    export interface RolloutSpecStrategy {
        /**
         * Arguments defined in Verification Templates.
         */
        args?: pulumi.Input<pulumi.Input<inputs.oceancd.RolloutSpecStrategyArg>[]>;
        /**
         * Ocean CD strategy name identifier.
         */
        strategyName: pulumi.Input<string>;
    }

    export interface RolloutSpecStrategyArg {
        /**
         * Name of an argument.
         */
        argName: pulumi.Input<string>;
        /**
         * Value of an argument.
         */
        argValue?: pulumi.Input<string>;
        /**
         * Defines from where to get the value of an argument.
         */
        valueFrom?: pulumi.Input<inputs.oceancd.RolloutSpecStrategyArgValueFrom>;
    }

    export interface RolloutSpecStrategyArgValueFrom {
        /**
         * Defines the field path from where to get the value of an argument.
         */
        fieldRef: pulumi.Input<inputs.oceancd.RolloutSpecStrategyArgValueFromFieldRef>;
    }

    export interface RolloutSpecStrategyArgValueFromFieldRef {
        /**
         * Path to SpotDeployment's field from where to get the value of an argument.
         */
        fieldPath: pulumi.Input<string>;
    }

    export interface RolloutSpecTraffic {
        /**
         * Holds ALB Ingress specific configuration to route traffic.
         */
        alb?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficAlb>;
        /**
         * Holds specific configuration to use Ambassador to route traffic.
         */
        ambassador?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficAmbassador>;
        /**
         * The canary service name.
         */
        canaryService?: pulumi.Input<string>;
        /**
         * Holds Istio specific configuration to route traffic.
         */
        istio?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficIstio>;
        /**
         * Holds Nginx Ingress specific configuration to route traffic.
         */
        nginx?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficNginx>;
        /**
         * Holds the ping and pong services. You can use `pingPong` field only when using ALB as a traffic manager with the IP Mode approach.
         */
        pingPong?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficPingPong>;
        /**
         * Holds TrafficSplit specific configuration to route traffic.
         */
        smi?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficSmi>;
        /**
         * The stable service name.
         */
        stableService?: pulumi.Input<string>;
    }

    export interface RolloutSpecTrafficAlb {
        /**
         * Has to match the configured annotation prefix on the alb ingress controller.
         */
        albAnnotationPrefix?: pulumi.Input<string>;
        /**
         * Refers to the name of an `Ingress` resource in the same namespace as the `SpotDeployment`.
         */
        albIngress: pulumi.Input<string>;
        /**
         * References the service in the ingress to the controller should add the action to.
         */
        albRootService: pulumi.Input<string>;
        /**
         * Refers to the port that the Ingress action should route traffic to.
         */
        servicePort: pulumi.Input<number>;
        /**
         * Allows to specify further settings on the ForwardConfig.
         */
        stickinessConfig?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficAlbStickinessConfig>;
    }

    export interface RolloutSpecTrafficAlbStickinessConfig {
        /**
         * Defines how long the load balancer should consistently route the user's request to the same target.
         */
        durationSeconds?: pulumi.Input<number>;
        /**
         * Enables the load balancer to bind a user's session to a specific target.
         */
        enabled?: pulumi.Input<boolean>;
    }

    export interface RolloutSpecTrafficAmbassador {
        /**
         * A list of names of the Ambassador Mappings used to route traffic to the service.
         */
        mappings: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RolloutSpecTrafficIstio {
        /**
         * It references to an Istio DestinationRule to modify and shape traffic. `DestinationRule` field belongs only to the Subset Level approach.
         */
        destinationRule?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficIstioDestinationRule>;
        /**
         * Defines a set of traffic routing rules to apply when a host is addressed.
         */
        virtualServices: pulumi.Input<pulumi.Input<inputs.oceancd.RolloutSpecTrafficIstioVirtualService>[]>;
    }

    export interface RolloutSpecTrafficIstioDestinationRule {
        /**
         * The subset name to modify labels with the canary version.
         */
        canarySubsetName: pulumi.Input<string>;
        /**
         * Holds the name of the DestinationRule.
         */
        destinationRuleName: pulumi.Input<string>;
        /**
         * The subset name to modify labels with the stable version.
         */
        stableSubsetName: pulumi.Input<string>;
    }

    export interface RolloutSpecTrafficIstioVirtualService {
        /**
         * A list of HTTPS routes within VirtualService.
         */
        tlsRoutes?: pulumi.Input<pulumi.Input<inputs.oceancd.RolloutSpecTrafficIstioVirtualServiceTlsRoute>[]>;
        /**
         * Holds the name of the VirtualService.
         */
        virtualServiceName: pulumi.Input<string>;
        /**
         * A list of HTTP routes within VirtualService.
         */
        virtualServiceRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RolloutSpecTrafficIstioVirtualServiceTlsRoute {
        /**
         * The port of the TLS Route desired to be matched in the given Istio VirtualService.
         */
        port?: pulumi.Input<number>;
        /**
         * A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
         */
        sniHosts?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RolloutSpecTrafficNginx {
        /**
         * Provides additional features to add to the canary ingress (such as routing by header, cookie, etc). You can add these Kubernetes annotations to specific Ingress objects to customize their behavior. Above are found examples of accepted k8s keys.For the full list of supported keys, you may reach the following documentation - <https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#canary>.
         */
        additionalIngressAnnotation?: pulumi.Input<inputs.oceancd.RolloutSpecTrafficNginxAdditionalIngressAnnotation>;
        /**
         * Has to match the configured annotation prefix on the Nginx ingress controller.
         */
        nginxAnnotationPrefix?: pulumi.Input<string>;
        /**
         * Refers to the name of an `Ingress` resource in the same namespace as the `SpotDeployment`.
         */
        stableIngress: pulumi.Input<string>;
    }

    export interface RolloutSpecTrafficNginxAdditionalIngressAnnotation {
        /**
         * Allows customizing the header value instead of using hardcoded values.
         */
        canaryByHeader?: pulumi.Input<string>;
        /**
         * Any of supported annotations.
         */
        key1?: pulumi.Input<string>;
    }

    export interface RolloutSpecTrafficPingPong {
        /**
         * Holds the name of the ping service.
         */
        pingService: pulumi.Input<string>;
        /**
         * Holds the name of the pong service.
         */
        pongService: pulumi.Input<string>;
    }

    export interface RolloutSpecTrafficSmi {
        /**
         * Holds the name of service that clients use to communicate.
         */
        smiRootService?: pulumi.Input<string>;
        /**
         * Holds the name of the TrafficSplit.
         */
        trafficSplitName?: pulumi.Input<string>;
    }

    export interface StrategyCanary {
        /**
         * A list of background verifications.
         */
        backgroundVerification?: pulumi.Input<inputs.oceancd.StrategyCanaryBackgroundVerification>;
        /**
         * A set of separate conditions of rollout processing.
         */
        steps: pulumi.Input<pulumi.Input<inputs.oceancd.StrategyCanaryStep>[]>;
    }

    export interface StrategyCanaryBackgroundVerification {
        /**
         * List of Verification Template names.
         */
        templateNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface StrategyCanaryStep {
        /**
         * Defines the duration of time to freeze the rollout.
         */
        pause?: pulumi.Input<inputs.oceancd.StrategyCanaryStepPause>;
        /**
         * Defines how to scale the version without traffic weight changing.
         */
        setCanaryScale?: pulumi.Input<inputs.oceancd.StrategyCanaryStepSetCanaryScale>;
        /**
         * Defines the list of HeaderRoutes to add to the Rollout.
         */
        setHeaderRoute?: pulumi.Input<inputs.oceancd.StrategyCanaryStepSetHeaderRoute>;
        /**
         * Defines the percentage that the new version should receive.
         */
        setWeight?: pulumi.Input<number>;
        stepName?: pulumi.Input<string>;
        /**
         * Represents the list of verifications to run in a step.
         */
        verification?: pulumi.Input<inputs.oceancd.StrategyCanaryStepVerification>;
    }

    export interface StrategyCanaryStepPause {
        /**
         * The amount of time to wait before moving to the next step.
         */
        duration?: pulumi.Input<string>;
    }

    export interface StrategyCanaryStepSetCanaryScale {
        /**
         * Defines whether a rollout should match the current canary's setWeight step.
         */
        matchTrafficWeight?: pulumi.Input<boolean>;
        /**
         * Sets the number of replicas the new version should have.
         */
        replicas?: pulumi.Input<number>;
        /**
         * Sets the percentage of replicas the new version should have.
         */
        weight?: pulumi.Input<number>;
    }

    export interface StrategyCanaryStepSetHeaderRoute {
        /**
         * The name of the HeaderRoute group.
         */
        headerRouteName: pulumi.Input<string>;
        /**
         * The matching rules for the header route.
         */
        matches: pulumi.Input<pulumi.Input<inputs.oceancd.StrategyCanaryStepSetHeaderRouteMatch>[]>;
    }

    export interface StrategyCanaryStepSetHeaderRouteMatch {
        /**
         * The name of the header.
         */
        headerName: pulumi.Input<string>;
        /**
         * Defines a single header to add to the Rollout. Must be only one initialized from the following (exact, prefix, regex).
         */
        headerValue: pulumi.Input<inputs.oceancd.StrategyCanaryStepSetHeaderRouteMatchHeaderValue>;
    }

    export interface StrategyCanaryStepSetHeaderRouteMatchHeaderValue {
        /**
         * The exact header value.
         */
        exact?: pulumi.Input<string>;
        /**
         * The prefix of the value.
         */
        prefix?: pulumi.Input<string>;
        /**
         * The value in a regex format.
         */
        regex?: pulumi.Input<string>;
    }

    export interface StrategyCanaryStepVerification {
        /**
         * List of Verification Template names.
         */
        templateNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface StrategyRolling {
        /**
         * A set of separate conditions of rollout processing.
         */
        steps: pulumi.Input<pulumi.Input<inputs.oceancd.StrategyRollingStep>[]>;
    }

    export interface StrategyRollingStep {
        /**
         * Defines the duration of time to freeze the rollout.
         */
        pause?: pulumi.Input<inputs.oceancd.StrategyRollingStepPause>;
        stepsName?: pulumi.Input<string>;
        /**
         * Represents the list of verifications to run in a step.
         */
        verification?: pulumi.Input<inputs.oceancd.StrategyRollingStepVerification>;
    }

    export interface StrategyRollingStepPause {
        /**
         * The amount of time to wait before moving to the next step.
         */
        duration?: pulumi.Input<string>;
    }

    export interface StrategyRollingStepVerification {
        /**
         * List of Verification Template names.
         */
        templateNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface VerificationProviderCloudWatch {
        /**
         * Set label key.
         */
        iamArn: pulumi.Input<string>;
    }

    export interface VerificationProviderDatadog {
        /**
         * DataDog API URL.
         */
        address: pulumi.Input<string>;
        /**
         * API key required by the Datadog Agent to submit metrics and events to Datadog.
         */
        apiKey: pulumi.Input<string>;
        /**
         * API key that gives users access to Datadog’s programmatic API.
         */
        appKey: pulumi.Input<string>;
    }

    export interface VerificationProviderJenkins {
        /**
         * The Jenkins server’s access apiToken.
         */
        apiToken: pulumi.Input<string>;
        /**
         * The address of the Jenkins server within the cluster.
         */
        baseUrl: pulumi.Input<string>;
        /**
         * The Jenkins server’s access username.
         */
        username: pulumi.Input<string>;
    }

    export interface VerificationProviderNewRelic {
        accountId: pulumi.Input<string>;
        /**
         * The base URL for NerdGraph for a proxy.
         */
        baseUrlNerdGraph?: pulumi.Input<string>;
        /**
         * The base URL of the New Relic REST API for a proxy.
         */
        baseUrlRest?: pulumi.Input<string>;
        /**
         * The NewRelic user key
         */
        personalApiKey: pulumi.Input<string>;
        /**
         * A region which the account is attached to. Default is "us".
         */
        region?: pulumi.Input<string>;
    }

    export interface VerificationProviderPrometheus {
        /**
         * The address which the Prometheus server available on.
         */
        address: pulumi.Input<string>;
    }

    export interface VerificationTemplateArg {
        /**
         * Name of an argument.
         */
        argName: pulumi.Input<string>;
        /**
         * String representation of data.
         */
        value?: pulumi.Input<string>;
        /**
         * ValueFrom object.
         */
        valueFrom?: pulumi.Input<inputs.oceancd.VerificationTemplateArgValueFrom>;
    }

    export interface VerificationTemplateArgValueFrom {
        /**
         * Secret key to use.
         */
        secretKeyRef?: pulumi.Input<inputs.oceancd.VerificationTemplateArgValueFromSecretKeyRef>;
    }

    export interface VerificationTemplateArgValueFromSecretKeyRef {
        /**
         * The name of the field inside the secret.
         */
        key: pulumi.Input<string>;
        /**
         * The name of the secret.
         */
        name: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetric {
        /**
         * Baseline Object.
         */
        baseline?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricBaseline>;
        /**
         * The maximum number of times the measurement is allowed to error in succession, before the metric is considered error.Default is 4.When choosing `Jenkins` as the provider, there is no need to send this variable.
         */
        consecutiveErrorLimit?: pulumi.Input<number>;
        /**
         * The number of times to run the measurement. If both interval and count are omitted, the effective count is 1. If only interval is specified, metric runs indefinitely. If count > 1, interval must be specified. When choosing `Jenkins` as the provider, there is no need to send this variable.
         */
        count?: pulumi.Input<number>;
        /**
         * Defines whether the metric should have an impact on the result of the rollout.
         */
        dryRun?: pulumi.Input<boolean>;
        /**
         * An expression which determines if a measurement is considered failed.If failureCondition is set, then successCondition is not allowed. When choosing Jenkins as the provider, there is no need to send this variable.
         */
        failureCondition?: pulumi.Input<string>;
        /**
         * The maximum number of times the measurement is allowed to fail, before the entire metric is considered failed.Default is 0. When choosing `Jenkins` as the provider, there is no need to send this variable.
         */
        failureLimit?: pulumi.Input<number>;
        /**
         * How long to wait before starting this metric measurements. When choosing Jenkins as the provider, there is no need to send this variable.
         */
        initialDelay?: pulumi.Input<string>;
        /**
         * Defines an interval string (30s, 5m, 1h) between each verification measurements. If omitted, will perform a single measurement.When choosing Jenkins as the provider, there is no need to send this variable.
         */
        interval?: pulumi.Input<string>;
        /**
         * The name of the verification metric.
         */
        metricsName: pulumi.Input<string>;
        /**
         * The name of the monitoring tool chosen for the metric.
         */
        providers: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProvider>[]>;
        /**
         * An expression which determines if a measurement is considered successful. The keyword `result` is a variable reference to the value of measurement. Results can be both structured data or primitive. If successCondition is set, then failureCondition is not allowed. When choosing `Jenkins` as the provider, there is no need to send this variable.
         */
        successCondition?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricBaseline {
        /**
         * The name of the monitoring tool chosen for the metric.
         */
        baselineProviders: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricBaselineBaselineProvider>[]>;
        /**
         * Number in percent we allow the new version’s data result to be under baseline data result.
         */
        maxRange?: pulumi.Input<number>;
        /**
         * Number in percent we allow the new version’s data result to be under baseline data result.*
         */
        minRange?: pulumi.Input<number>;
        /**
         * A mathematical expression needed for the comparison. Enum: "<" ">" "<=" ">=" "=" "range"
         */
        threshold: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricBaselineBaselineProvider {
        /**
         * The datadog provider.
         */
        datadog?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricBaselineBaselineProviderDatadog>;
        /**
         * The New Relic provider.
         */
        newRelic?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricBaselineBaselineProviderNewRelic>;
        /**
         * The Prometheus provider.
         */
        prometheus?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricBaselineBaselineProviderPrometheus>;
    }

    export interface VerificationTemplateMetricBaselineBaselineProviderDatadog {
        /**
         * A request for information retrieved from Datadog.
         */
        datadogQuery: pulumi.Input<string>;
        /**
         * The window of time we are looking at in DataDog.
         */
        duration?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricBaselineBaselineProviderNewRelic {
        /**
         * A raw newrelic NRQL query to perform.
         */
        newRelicQuery: pulumi.Input<string>;
        /**
         * The name of the secret holding NR account configuration.
         */
        profile?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricBaselineBaselineProviderPrometheus {
        /**
         * A request for information retrieved from Prometheus.
         */
        prometheusQuery: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProvider {
        /**
         * The CloudWatch provider.
         */
        cloudWatch?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderCloudWatch>;
        /**
         * The datadog provider.
         */
        datadog?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderDatadog>;
        /**
         * The Jenkins provider. Default is "{$}"
         */
        jenkins?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJenkins>;
        /**
         * The Job provider.
         */
        job?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJob>;
        /**
         * The New Relic provider.
         */
        newRelic?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderNewRelic>;
        /**
         * The Prometheus provider.
         */
        prometheus?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderPrometheus>;
        /**
         * The Web provider.
         */
        web?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderWeb>;
    }

    export interface VerificationTemplateMetricProviderCloudWatch {
        /**
         * The window of time we are looking at in CloudWatch.
         */
        duration?: pulumi.Input<string>;
        /**
         * The metric queries to be returned. A single MetricData call can include as many as 500 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data.
         */
        metricDataQueries: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderCloudWatchMetricDataQuery>[]>;
    }

    export interface VerificationTemplateMetricProviderCloudWatchMetricDataQuery {
        /**
         * This field can contain either a Metrics Insights query, or a metric math expression to be performed on the returned data. Within one metricdataquery object, you must specify either expression or metricstat but not both.
         */
        expression?: pulumi.Input<string>;
        /**
         * The response ID. Must be unique and not null. This object can contain characters, letters, numbers and underscore. The first letter must be a lowercase letter.
         */
        id: pulumi.Input<string>;
        /**
         * A human-readable label for this metric or expression. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown
         */
        label?: pulumi.Input<string>;
        /**
         * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.Within one metricdataquery object, you must specify either expression or metricstat but not both.
         */
        metricStat?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStat>;
        /**
         * The granularity, in seconds, of the returned data points.
         */
        period?: pulumi.Input<number>;
        /**
         * This option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify `false`. If you omit this, the default of `true` is used.
         */
        returnData?: pulumi.Input<boolean>;
    }

    export interface VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStat {
        /**
         * The metric to return, including the metric name, namespace, and dimensions.
         */
        metric?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStatMetric>;
        /**
         * The granularity, in seconds, of the returned data points.
         */
        metricPeriod?: pulumi.Input<number>;
        /**
         * The statistic to return. It can include any CloudWatch statistic or extended statistic.
         */
        stat?: pulumi.Input<string>;
        /**
         * This defines what unit you want to use when storing the metric.  Enum: `"Seconds" "Microseconds" "Milliseconds" "Bytes" "Kilobytes" "Megabytes" "Gigabytes" "Terabytes" "Bits" "Kilobits" "Megabits" "Gigabits" "Terabits" "Percent" "Count" "Bytes/Second" "Kilobytes/Second" "Megabytes/Second" "Gigabytes/Second" "Terabytes/Second" "Bits/Second" "Kilobits/Second" "Megabits/Second" "Gigabits/Second" "Terabits/Second" "Count/Second" "None"`
         */
        unit?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStatMetric {
        /**
         * A dimension is a name/value pair that is part of the identity of a metric.You can assign upto 30 dimensions to a metric
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStatMetricDimension>[]>;
        /**
         * The name of the metric.
         */
        metricName: pulumi.Input<string>;
        /**
         * The namespace of the metric.
         */
        namespace?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderCloudWatchMetricDataQueryMetricStatMetricDimension {
        /**
         * The name of the dimensions. These values must contain only ASCII characters and must include at least one non-whitespace characte
         */
        dimensionName: pulumi.Input<string>;
        /**
         * The value of the dimensions.These values must contain only ASCII characters and must include at least one non-whitespace characte
         */
        dimensionValue: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderDatadog {
        /**
         * A request for information retrieved from Datadog.
         */
        datadogQuery?: pulumi.Input<string>;
        /**
         * The window of time we are looking at in DataDog.
         */
        duration?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderJenkins {
        /**
         * The interval time to poll status.
         */
        jenkinsInterval: pulumi.Input<string>;
        /**
         * List of parameters.
         */
        jenkinsParameters?: pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJenkinsJenkinsParameters>;
        /**
         * The Jenkins pipeline name.
         */
        pipelineName: pulumi.Input<string>;
        /**
         * The total jenkins timeout.
         */
        timeout: pulumi.Input<string>;
        /**
         * Host TLS verification.
         */
        tlsVerification?: pulumi.Input<boolean>;
    }

    export interface VerificationTemplateMetricProviderJenkinsJenkinsParameters {
        /**
         * Key of an argument.
         */
        parameterKey: pulumi.Input<string>;
        /**
         * Value of an argument.
         */
        parameterValue: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderJob {
        /**
         * The job spec require to run the metric.
         */
        specs: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJobSpec>[]>;
    }

    export interface VerificationTemplateMetricProviderJobSpec {
        /**
         * Specifies the number of retries before marking this job failed.
         */
        backoffLimit?: pulumi.Input<number>;
        /**
         * Describes the pod that will be created when executing a job.
         */
        jobTemplates: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJobSpecJobTemplate>[]>;
    }

    export interface VerificationTemplateMetricProviderJobSpecJobTemplate {
        /**
         * Specification of the desired behavior of the pod.
         */
        templateSpecs: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJobSpecJobTemplateTemplateSpec>[]>;
    }

    export interface VerificationTemplateMetricProviderJobSpecJobTemplateTemplateSpec {
        /**
         * A list of containers belonging to the pod.
         */
        containers: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderJobSpecJobTemplateTemplateSpecContainer>[]>;
        /**
         * Restart policy for all containers within the pod. Enum: `"Never" "OnFailure"`
         */
        restartPolicy: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderJobSpecJobTemplateTemplateSpecContainer {
        /**
         * The entry point of a container.
         */
        commands: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The name of a container.
         */
        containerName: pulumi.Input<string>;
        /**
         * The image name of a container.
         */
        image: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderNewRelic {
        /**
         * A raw newrelic NRQL query to perform.
         */
        newRelicQuery: pulumi.Input<string>;
        /**
         * The name of the secret holding NR account configuration.
         */
        profile?: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderPrometheus {
        /**
         * A request for information retrieved from Prometheus.
         */
        prometheusQuery: pulumi.Input<string>;
    }

    export interface VerificationTemplateMetricProviderWeb {
        /**
         * The body of the web metric.
         */
        body?: pulumi.Input<string>;
        /**
         * Skips host TLS verification.
         */
        insecure?: pulumi.Input<boolean>;
        /**
         * A JSON Path to use as the result variable. Default is "{$}"
         */
        jsonPath?: pulumi.Input<string>;
        /**
         * The method of the web metric.  Enum: "GET" "POST" "PUT"
         */
        method?: pulumi.Input<string>;
        /**
         * The timeout for the request in seconds. Default is 10.
         */
        timeoutSeconds?: pulumi.Input<number>;
        /**
         * The address of the web metric.
         */
        url: pulumi.Input<string>;
        /**
         * Optional HTTP headers to use in the request.
         */
        webHeaders?: pulumi.Input<pulumi.Input<inputs.oceancd.VerificationTemplateMetricProviderWebWebHeader>[]>;
    }

    export interface VerificationTemplateMetricProviderWebWebHeader {
        /**
         * The name of a header
         */
        webHeaderKey: pulumi.Input<string>;
        /**
         * The value of a header
         */
        webHeaderValue: pulumi.Input<string>;
    }
}

export namespace organization {
    export interface PolicyPolicyContent {
        /**
         * List of permissions statements.
         */
        statements: pulumi.Input<pulumi.Input<inputs.organization.PolicyPolicyContentStatement>[]>;
    }

    export interface PolicyPolicyContentStatement {
        /**
         * Set a list of required actions for this permissions statement.
         * Full list of actions can be found in [https://docs.spot.io/account-user-management/user-management/access-policies-actions/](https://docs.spot.io/account-user-management/user-management/access-policies-actions/).
         */
        actions: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Valid values "ALLOW", "DENY".
         */
        effect: pulumi.Input<string>;
        /**
         * Set a list of resources IDs. In order to include all resources in this statement - use "*".
         */
        resources: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ProgrammaticUserAccount {
        /**
         * Account ID the programmatic user will have access to.
         */
        accountId: pulumi.Input<string>;
        /**
         * (Enum: `"viewer", "editor") Role to be associated with the
         * programmatic user for this account.
         */
        accountRole: pulumi.Input<string>;
    }

    export interface ProgrammaticUserPolicy {
        /**
         * A list of the accounts that the policy should be
         * enforced for the user.
         */
        policyAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Policy ID the programmatic user will have access to.
         */
        policyId: pulumi.Input<string>;
    }

    export interface UserGroupPolicy {
        /**
         * A list of accounts to register with the assigned under the
         * given group (should be existing accounts only).
         */
        accountIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * A policy to register under the given group
         * (should be existing policy only).
         */
        policyId: pulumi.Input<string>;
    }

    export interface UserPolicy {
        policyAccountIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * A policy to register under the given group
         * (should be existing policy only).
         */
        policyId: pulumi.Input<string>;
    }
}

export namespace spark {
    export interface OceanCompute {
        /**
         * - Enable/disable the creation of Ocean Spark VNGs during cluster creation.
         */
        createVngs?: pulumi.Input<boolean>;
        /**
         * - Enable/disable Ocean Spark taints on the Ocean Spark VNGs. By default, Ocean Spark uses taints to prevent non-Spark workloads from running on Ocean Spark VNGs.
         */
        useTaints?: pulumi.Input<boolean>;
    }

    export interface OceanIngress {
        controller?: pulumi.Input<inputs.spark.OceanIngressController>;
        customEndpoint?: pulumi.Input<inputs.spark.OceanIngressCustomEndpoint>;
        loadBalancer?: pulumi.Input<inputs.spark.OceanIngressLoadBalancer>;
        privateLink?: pulumi.Input<inputs.spark.OceanIngressPrivateLink>;
        /**
         * - **DEPRECATED**: Use `load_balancer.service_annotations` instead.
         */
        serviceAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    export interface OceanIngressController {
        /**
         * - Should an ingress controller managed by Ocean for Apache Spark be installed on the cluster.
         */
        managed?: pulumi.Input<boolean>;
    }

    export interface OceanIngressCustomEndpoint {
        /**
         * - The address the Ocean for Apache Spark control plane will use when addressing the cluster.
         */
        address?: pulumi.Input<string>;
        /**
         * - Should the Ocean for Apache Spark control plane address the cluster using a custom endpoint. Use this to specify the DNS address of an externally provisioned (unmanaged) load balancer.
         */
        enabled?: pulumi.Input<boolean>;
    }

    export interface OceanIngressLoadBalancer {
        /**
         * - Should a load balancer managed by Ocean for Apache Spark be provisioned for the cluster. Set this to false if you want to use an existing load balancer (only available on AWS).
         */
        managed?: pulumi.Input<boolean>;
        /**
         * - Annotations to add to the ingress controller load balancer service. This is useful to configure properties of the managed load balancer, like the nature of the load balancer (e.g. ELB, NLB, ALB on AWS), the security groups, or various timeouts.
         */
        serviceAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * - The ARN of a target group that the Ocean for Apache Spark ingress controller will be bound to. Set this to use an existing load balancer with Ocean for Apache Spark. Has no effect if using a managed load balancer. Only available on AWS.
         */
        targetGroupArn?: pulumi.Input<string>;
    }

    export interface OceanIngressPrivateLink {
        /**
         * - Should the Ocean for Apache Spark control plane address the cluster via an AWS Private Link. Only available on AWS.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * - The name of the VPC Endpoint Service the Ocean for Apache Spark control plane should bind to.
         */
        vpcEndpointService?: pulumi.Input<string>;
    }

    export interface OceanLogCollection {
        /**
         * - Enable/Disable collecting driver and executor logs. When enabled, logs are stored by NetApp and can be downloaded from the Spot console web interface. The logs are deleted after 30 days.
         */
        collectAppLogs?: pulumi.Input<boolean>;
    }

    export interface OceanSpark {
        /**
         * - List of Kubernetes namespaces that should be configured to run Spark applications, in addition to the default Spark application namespace `spark-apps`.
         */
        additionalAppNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface OceanWebhook {
        /**
         * - List of ports allowed to use on the host network - if empty default is `25554`.
         */
        hostNetworkPorts?: pulumi.Input<pulumi.Input<number>[]>;
        /**
         * - Enable/disable host networking for the Spark Operator. Host networking can be useful when using custom CNI plugins like Calico on EKS.
         */
        useHostNetwork?: pulumi.Input<boolean>;
    }
}
