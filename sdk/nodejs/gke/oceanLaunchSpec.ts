// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Manages a custom Spotinst Ocean GKE Launch Spec resource.
 *
 * > This resource can be imported from GKE node pool or not. If you want to import the node pool and create the VNG from it, please provide `nodePoolName`.
 */
export class OceanLaunchSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceanLaunchSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions): OceanLaunchSpec {
        return new OceanLaunchSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:gke/oceanLaunchSpec:OceanLaunchSpec';

    /**
     * Returns true if the given object is an instance of OceanLaunchSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanLaunchSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanLaunchSpec.__pulumiType;
    }

    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    public readonly autoscaleHeadrooms!: pulumi.Output<outputs.gke.OceanLaunchSpecAutoscaleHeadroom[] | undefined>;
    /**
     * List of supported machine types for the Launch Spec.
     */
    public readonly instanceTypes!: pulumi.Output<string[]>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    public readonly labels!: pulumi.Output<outputs.gke.OceanLaunchSpecLabel[]>;
    /**
     * Cluster's metadata.
     */
    public readonly metadatas!: pulumi.Output<outputs.gke.OceanLaunchSpecMetadata[]>;
    /**
     * The launch specification name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The node pool you wish to use in your Launch Spec.
     */
    public readonly nodePoolName!: pulumi.Output<string | undefined>;
    /**
     * The Ocean cluster ID.
     */
    public readonly oceanId!: pulumi.Output<string>;
    /**
     * The Ocean virtual node group resource limits object.
     */
    public readonly resourceLimits!: pulumi.Output<outputs.gke.OceanLaunchSpecResourceLimits | undefined>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    public readonly restrictScaleDown!: pulumi.Output<boolean>;
    /**
     * Root volume size (in GB).
     */
    public readonly rootVolumeSize!: pulumi.Output<number>;
    /**
     * Root volume disk type. Valid values: `"pd-standard"`, `"pd-ssd"`.
     */
    public readonly rootVolumeType!: pulumi.Output<string>;
    /**
     * The account used by applications running on the VM to call GCP APIs.
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The Ocean shielded instance configuration object.
     */
    public readonly shieldedInstanceConfig!: pulumi.Output<outputs.gke.OceanLaunchSpecShieldedInstanceConfig>;
    /**
     * Image URL.
     */
    public readonly sourceImage!: pulumi.Output<string>;
    /**
     * The Ocean virtual node group storage object.
     */
    public readonly storage!: pulumi.Output<outputs.gke.OceanLaunchSpecStorage>;
    /**
     * The Ocean Launch Spec Strategy object.
     */
    public readonly strategies!: pulumi.Output<outputs.gke.OceanLaunchSpecStrategy[] | undefined>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    public readonly taints!: pulumi.Output<outputs.gke.OceanLaunchSpecTaint[]>;

    /**
     * Create a OceanLaunchSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanLaunchSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanLaunchSpecArgs | OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanLaunchSpecState | undefined;
            inputs["autoscaleHeadrooms"] = state ? state.autoscaleHeadrooms : undefined;
            inputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["metadatas"] = state ? state.metadatas : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nodePoolName"] = state ? state.nodePoolName : undefined;
            inputs["oceanId"] = state ? state.oceanId : undefined;
            inputs["resourceLimits"] = state ? state.resourceLimits : undefined;
            inputs["restrictScaleDown"] = state ? state.restrictScaleDown : undefined;
            inputs["rootVolumeSize"] = state ? state.rootVolumeSize : undefined;
            inputs["rootVolumeType"] = state ? state.rootVolumeType : undefined;
            inputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            inputs["shieldedInstanceConfig"] = state ? state.shieldedInstanceConfig : undefined;
            inputs["sourceImage"] = state ? state.sourceImage : undefined;
            inputs["storage"] = state ? state.storage : undefined;
            inputs["strategies"] = state ? state.strategies : undefined;
            inputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as OceanLaunchSpecArgs | undefined;
            if ((!args || args.oceanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            inputs["autoscaleHeadrooms"] = args ? args.autoscaleHeadrooms : undefined;
            inputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["metadatas"] = args ? args.metadatas : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodePoolName"] = args ? args.nodePoolName : undefined;
            inputs["oceanId"] = args ? args.oceanId : undefined;
            inputs["resourceLimits"] = args ? args.resourceLimits : undefined;
            inputs["restrictScaleDown"] = args ? args.restrictScaleDown : undefined;
            inputs["rootVolumeSize"] = args ? args.rootVolumeSize : undefined;
            inputs["rootVolumeType"] = args ? args.rootVolumeType : undefined;
            inputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            inputs["shieldedInstanceConfig"] = args ? args.shieldedInstanceConfig : undefined;
            inputs["sourceImage"] = args ? args.sourceImage : undefined;
            inputs["storage"] = args ? args.storage : undefined;
            inputs["strategies"] = args ? args.strategies : undefined;
            inputs["taints"] = args ? args.taints : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(OceanLaunchSpec.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanLaunchSpec resources.
 */
export interface OceanLaunchSpecState {
    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    readonly autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * List of supported machine types for the Launch Spec.
     */
    readonly instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    readonly labels?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecLabel>[]>;
    /**
     * Cluster's metadata.
     */
    readonly metadatas?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecMetadata>[]>;
    /**
     * The launch specification name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The node pool you wish to use in your Launch Spec.
     */
    readonly nodePoolName?: pulumi.Input<string>;
    /**
     * The Ocean cluster ID.
     */
    readonly oceanId?: pulumi.Input<string>;
    /**
     * The Ocean virtual node group resource limits object.
     */
    readonly resourceLimits?: pulumi.Input<inputs.gke.OceanLaunchSpecResourceLimits>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    readonly restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Root volume size (in GB).
     */
    readonly rootVolumeSize?: pulumi.Input<number>;
    /**
     * Root volume disk type. Valid values: `"pd-standard"`, `"pd-ssd"`.
     */
    readonly rootVolumeType?: pulumi.Input<string>;
    /**
     * The account used by applications running on the VM to call GCP APIs.
     */
    readonly serviceAccount?: pulumi.Input<string>;
    /**
     * The Ocean shielded instance configuration object.
     */
    readonly shieldedInstanceConfig?: pulumi.Input<inputs.gke.OceanLaunchSpecShieldedInstanceConfig>;
    /**
     * Image URL.
     */
    readonly sourceImage?: pulumi.Input<string>;
    /**
     * The Ocean virtual node group storage object.
     */
    readonly storage?: pulumi.Input<inputs.gke.OceanLaunchSpecStorage>;
    /**
     * The Ocean Launch Spec Strategy object.
     */
    readonly strategies?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecStrategy>[]>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    readonly taints?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecTaint>[]>;
}

/**
 * The set of arguments for constructing a OceanLaunchSpec resource.
 */
export interface OceanLaunchSpecArgs {
    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    readonly autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * List of supported machine types for the Launch Spec.
     */
    readonly instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    readonly labels?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecLabel>[]>;
    /**
     * Cluster's metadata.
     */
    readonly metadatas?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecMetadata>[]>;
    /**
     * The launch specification name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The node pool you wish to use in your Launch Spec.
     */
    readonly nodePoolName?: pulumi.Input<string>;
    /**
     * The Ocean cluster ID.
     */
    readonly oceanId: pulumi.Input<string>;
    /**
     * The Ocean virtual node group resource limits object.
     */
    readonly resourceLimits?: pulumi.Input<inputs.gke.OceanLaunchSpecResourceLimits>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    readonly restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Root volume size (in GB).
     */
    readonly rootVolumeSize?: pulumi.Input<number>;
    /**
     * Root volume disk type. Valid values: `"pd-standard"`, `"pd-ssd"`.
     */
    readonly rootVolumeType?: pulumi.Input<string>;
    /**
     * The account used by applications running on the VM to call GCP APIs.
     */
    readonly serviceAccount?: pulumi.Input<string>;
    /**
     * The Ocean shielded instance configuration object.
     */
    readonly shieldedInstanceConfig?: pulumi.Input<inputs.gke.OceanLaunchSpecShieldedInstanceConfig>;
    /**
     * Image URL.
     */
    readonly sourceImage?: pulumi.Input<string>;
    /**
     * The Ocean virtual node group storage object.
     */
    readonly storage?: pulumi.Input<inputs.gke.OceanLaunchSpecStorage>;
    /**
     * The Ocean Launch Spec Strategy object.
     */
    readonly strategies?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecStrategy>[]>;
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    readonly taints?: pulumi.Input<pulumi.Input<inputs.gke.OceanLaunchSpecTaint>[]>;
}
