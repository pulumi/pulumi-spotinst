// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Spotinst stateful node Azure resource.
 */
export class StatefulNodeAzure extends pulumi.CustomResource {
    /**
     * Get an existing StatefulNodeAzure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatefulNodeAzureState, opts?: pulumi.CustomResourceOptions): StatefulNodeAzure {
        return new StatefulNodeAzure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/statefulNodeAzure:StatefulNodeAzure';

    /**
     * Returns true if the given object is an instance of StatefulNodeAzure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatefulNodeAzure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatefulNodeAzure.__pulumiType;
    }

    public readonly attachDataDisks!: pulumi.Output<outputs.StatefulNodeAzureAttachDataDisk[] | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.StatefulNodeAzureBootDiagnostic[]>;
    public readonly customData!: pulumi.Output<string>;
    public readonly dataDisks!: pulumi.Output<outputs.StatefulNodeAzureDataDisk[] | undefined>;
    public readonly dataDisksPersistenceMode!: pulumi.Output<string>;
    public readonly deletes!: pulumi.Output<outputs.StatefulNodeAzureDelete[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly detachDataDisks!: pulumi.Output<outputs.StatefulNodeAzureDetachDataDisk[] | undefined>;
    public readonly extensions!: pulumi.Output<outputs.StatefulNodeAzureExtension[]>;
    public readonly health!: pulumi.Output<outputs.StatefulNodeAzureHealth>;
    public readonly image!: pulumi.Output<outputs.StatefulNodeAzureImage | undefined>;
    public readonly importVms!: pulumi.Output<outputs.StatefulNodeAzureImportVm[] | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly loadBalancers!: pulumi.Output<outputs.StatefulNodeAzureLoadBalancer[]>;
    public readonly login!: pulumi.Output<outputs.StatefulNodeAzureLogin | undefined>;
    public readonly managedServiceIdentities!: pulumi.Output<outputs.StatefulNodeAzureManagedServiceIdentity[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<outputs.StatefulNodeAzureNetwork | undefined>;
    public readonly os!: pulumi.Output<string>;
    public readonly osDisk!: pulumi.Output<outputs.StatefulNodeAzureOsDisk | undefined>;
    public readonly osDiskPersistenceMode!: pulumi.Output<string>;
    public readonly preferredZone!: pulumi.Output<string>;
    public readonly proximityPlacementGroups!: pulumi.Output<outputs.StatefulNodeAzureProximityPlacementGroup[]>;
    public readonly region!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly schedulingTasks!: pulumi.Output<outputs.StatefulNodeAzureSchedulingTask[]>;
    public readonly secrets!: pulumi.Output<outputs.StatefulNodeAzureSecret[] | undefined>;
    public readonly security!: pulumi.Output<outputs.StatefulNodeAzureSecurity | undefined>;
    public readonly shouldPersistDataDisks!: pulumi.Output<boolean>;
    public readonly shouldPersistNetwork!: pulumi.Output<boolean>;
    public readonly shouldPersistOsDisk!: pulumi.Output<boolean>;
    public readonly shouldPersistVm!: pulumi.Output<boolean>;
    public readonly shutdownScript!: pulumi.Output<string>;
    public readonly signals!: pulumi.Output<outputs.StatefulNodeAzureSignal[]>;
    public readonly strategy!: pulumi.Output<outputs.StatefulNodeAzureStrategy>;
    public readonly tags!: pulumi.Output<outputs.StatefulNodeAzureTag[]>;
    public readonly updateStates!: pulumi.Output<outputs.StatefulNodeAzureUpdateState[] | undefined>;
    public readonly userData!: pulumi.Output<string>;
    public readonly vmName!: pulumi.Output<string | undefined>;
    public readonly vmNamePrefix!: pulumi.Output<string | undefined>;
    public readonly vmSizes!: pulumi.Output<outputs.StatefulNodeAzureVmSizes>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a StatefulNodeAzure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatefulNodeAzureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatefulNodeAzureArgs | StatefulNodeAzureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatefulNodeAzureState | undefined;
            resourceInputs["attachDataDisks"] = state ? state.attachDataDisks : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["dataDisksPersistenceMode"] = state ? state.dataDisksPersistenceMode : undefined;
            resourceInputs["deletes"] = state ? state.deletes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detachDataDisks"] = state ? state.detachDataDisks : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["importVms"] = state ? state.importVms : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["managedServiceIdentities"] = state ? state.managedServiceIdentities : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["osDisk"] = state ? state.osDisk : undefined;
            resourceInputs["osDiskPersistenceMode"] = state ? state.osDiskPersistenceMode : undefined;
            resourceInputs["preferredZone"] = state ? state.preferredZone : undefined;
            resourceInputs["proximityPlacementGroups"] = state ? state.proximityPlacementGroups : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["schedulingTasks"] = state ? state.schedulingTasks : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["shouldPersistDataDisks"] = state ? state.shouldPersistDataDisks : undefined;
            resourceInputs["shouldPersistNetwork"] = state ? state.shouldPersistNetwork : undefined;
            resourceInputs["shouldPersistOsDisk"] = state ? state.shouldPersistOsDisk : undefined;
            resourceInputs["shouldPersistVm"] = state ? state.shouldPersistVm : undefined;
            resourceInputs["shutdownScript"] = state ? state.shutdownScript : undefined;
            resourceInputs["signals"] = state ? state.signals : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateStates"] = state ? state.updateStates : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vmName"] = state ? state.vmName : undefined;
            resourceInputs["vmNamePrefix"] = state ? state.vmNamePrefix : undefined;
            resourceInputs["vmSizes"] = state ? state.vmSizes : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as StatefulNodeAzureArgs | undefined;
            if ((!args || args.os === undefined) && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.shouldPersistDataDisks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shouldPersistDataDisks'");
            }
            if ((!args || args.shouldPersistNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shouldPersistNetwork'");
            }
            if ((!args || args.shouldPersistOsDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shouldPersistOsDisk'");
            }
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            if ((!args || args.vmSizes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSizes'");
            }
            resourceInputs["attachDataDisks"] = args ? args.attachDataDisks : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["customData"] = args ? args.customData : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["dataDisksPersistenceMode"] = args ? args.dataDisksPersistenceMode : undefined;
            resourceInputs["deletes"] = args ? args.deletes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detachDataDisks"] = args ? args.detachDataDisks : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["health"] = args ? args.health : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["importVms"] = args ? args.importVms : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["managedServiceIdentities"] = args ? args.managedServiceIdentities : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["osDisk"] = args ? args.osDisk : undefined;
            resourceInputs["osDiskPersistenceMode"] = args ? args.osDiskPersistenceMode : undefined;
            resourceInputs["preferredZone"] = args ? args.preferredZone : undefined;
            resourceInputs["proximityPlacementGroups"] = args ? args.proximityPlacementGroups : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schedulingTasks"] = args ? args.schedulingTasks : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["shouldPersistDataDisks"] = args ? args.shouldPersistDataDisks : undefined;
            resourceInputs["shouldPersistNetwork"] = args ? args.shouldPersistNetwork : undefined;
            resourceInputs["shouldPersistOsDisk"] = args ? args.shouldPersistOsDisk : undefined;
            resourceInputs["shouldPersistVm"] = args ? args.shouldPersistVm : undefined;
            resourceInputs["shutdownScript"] = args ? args.shutdownScript : undefined;
            resourceInputs["signals"] = args ? args.signals : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updateStates"] = args ? args.updateStates : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vmName"] = args ? args.vmName : undefined;
            resourceInputs["vmNamePrefix"] = args ? args.vmNamePrefix : undefined;
            resourceInputs["vmSizes"] = args ? args.vmSizes : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StatefulNodeAzure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StatefulNodeAzure resources.
 */
export interface StatefulNodeAzureState {
    attachDataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureAttachDataDisk>[]>;
    bootDiagnostics?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureBootDiagnostic>[]>;
    customData?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDataDisk>[]>;
    dataDisksPersistenceMode?: pulumi.Input<string>;
    deletes?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDelete>[]>;
    description?: pulumi.Input<string>;
    detachDataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDetachDataDisk>[]>;
    extensions?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureExtension>[]>;
    health?: pulumi.Input<inputs.StatefulNodeAzureHealth>;
    image?: pulumi.Input<inputs.StatefulNodeAzureImage>;
    importVms?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureImportVm>[]>;
    licenseType?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureLoadBalancer>[]>;
    login?: pulumi.Input<inputs.StatefulNodeAzureLogin>;
    managedServiceIdentities?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureManagedServiceIdentity>[]>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.StatefulNodeAzureNetwork>;
    os?: pulumi.Input<string>;
    osDisk?: pulumi.Input<inputs.StatefulNodeAzureOsDisk>;
    osDiskPersistenceMode?: pulumi.Input<string>;
    preferredZone?: pulumi.Input<string>;
    proximityPlacementGroups?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureProximityPlacementGroup>[]>;
    region?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSchedulingTask>[]>;
    secrets?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSecret>[]>;
    security?: pulumi.Input<inputs.StatefulNodeAzureSecurity>;
    shouldPersistDataDisks?: pulumi.Input<boolean>;
    shouldPersistNetwork?: pulumi.Input<boolean>;
    shouldPersistOsDisk?: pulumi.Input<boolean>;
    shouldPersistVm?: pulumi.Input<boolean>;
    shutdownScript?: pulumi.Input<string>;
    signals?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSignal>[]>;
    strategy?: pulumi.Input<inputs.StatefulNodeAzureStrategy>;
    tags?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureTag>[]>;
    updateStates?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureUpdateState>[]>;
    userData?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmNamePrefix?: pulumi.Input<string>;
    vmSizes?: pulumi.Input<inputs.StatefulNodeAzureVmSizes>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a StatefulNodeAzure resource.
 */
export interface StatefulNodeAzureArgs {
    attachDataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureAttachDataDisk>[]>;
    bootDiagnostics?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureBootDiagnostic>[]>;
    customData?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDataDisk>[]>;
    dataDisksPersistenceMode?: pulumi.Input<string>;
    deletes?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDelete>[]>;
    description?: pulumi.Input<string>;
    detachDataDisks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureDetachDataDisk>[]>;
    extensions?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureExtension>[]>;
    health?: pulumi.Input<inputs.StatefulNodeAzureHealth>;
    image?: pulumi.Input<inputs.StatefulNodeAzureImage>;
    importVms?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureImportVm>[]>;
    licenseType?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureLoadBalancer>[]>;
    login?: pulumi.Input<inputs.StatefulNodeAzureLogin>;
    managedServiceIdentities?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureManagedServiceIdentity>[]>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.StatefulNodeAzureNetwork>;
    os: pulumi.Input<string>;
    osDisk?: pulumi.Input<inputs.StatefulNodeAzureOsDisk>;
    osDiskPersistenceMode?: pulumi.Input<string>;
    preferredZone?: pulumi.Input<string>;
    proximityPlacementGroups?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureProximityPlacementGroup>[]>;
    region: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSchedulingTask>[]>;
    secrets?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSecret>[]>;
    security?: pulumi.Input<inputs.StatefulNodeAzureSecurity>;
    shouldPersistDataDisks: pulumi.Input<boolean>;
    shouldPersistNetwork: pulumi.Input<boolean>;
    shouldPersistOsDisk: pulumi.Input<boolean>;
    shouldPersistVm?: pulumi.Input<boolean>;
    shutdownScript?: pulumi.Input<string>;
    signals?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureSignal>[]>;
    strategy: pulumi.Input<inputs.StatefulNodeAzureStrategy>;
    tags?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureTag>[]>;
    updateStates?: pulumi.Input<pulumi.Input<inputs.StatefulNodeAzureUpdateState>[]>;
    userData?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmNamePrefix?: pulumi.Input<string>;
    vmSizes: pulumi.Input<inputs.StatefulNodeAzureVmSizes>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
