// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Spotinst AWS MrScaler resource.
 *
 * ## Example Usage
 *
 * ### New Strategy
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const sample_MrScaler_01 = new spotinst.aws.MrScalar("sample-MrScaler-01", {
 *     additionalInfo: "{'test':'more information'}",
 *     additionalPrimarySecurityGroups: ["sg-456321"],
 *     additionalReplicaSecurityGroups: ["sg-123654"],
 *     applications: [
 *         {
 *             name: "Ganglia",
 *             version: "1.0",
 *         },
 *         {
 *             name: "Hadoop",
 *         },
 *         {
 *             args: [
 *                 "fake",
 *                 "args",
 *             ],
 *             name: "Pig",
 *         },
 *     ],
 *     availabilityZones: ["us-west-2a:subnet-123456"],
 *     bootstrapActionsFiles: [{
 *         bucket: "sample-emr-test",
 *         key: "bootstrap-actions.json",
 *     }],
 *     configurationsFiles: [{
 *         bucket: "example-bucket",
 *         key: "configurations.json",
 *     }],
 *     coreDesiredCapacity: 1,
 *     coreEbsBlockDevices: [{
 *         sizeInGb: 40,
 *         volumeType: "gp2",
 *         volumesPerInstance: 2,
 *     }],
 *     coreEbsOptimized: false,
 *     coreInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     coreLifecycle: "ON_DEMAND",
 *     coreMaxSize: 1,
 *     coreMinSize: 1,
 *     coreUnit: "instance",
 *     customAmiId: "ami-123456",
 *     description: "Testing MrScaler creation",
 *     ec2KeyName: "test-key",
 *     instanceWeights: [
 *         {
 *             instanceType: "t2.small",
 *             weightedCapacity: 10,
 *         },
 *         {
 *             instanceType: "t2.medium",
 *             weightedCapacity: 90,
 *         },
 *     ],
 *     jobFlowRole: "EMR_EC2_ExampleRole",
 *     keepJobFlowAlive: true,
 *     logUri: "s3://example-logs",
 *     managedPrimarySecurityGroup: "sg-123456",
 *     managedReplicaSecurityGroup: "sg-987654",
 *     masterEbsBlockDevices: [{
 *         sizeInGb: 30,
 *         volumeType: "gp2",
 *         volumesPerInstance: 1,
 *     }],
 *     masterEbsOptimized: true,
 *     masterInstanceTypes: ["c3.xlarge"],
 *     masterLifecycle: "SPOT",
 *     masterTarget: 1,
 *     provisioningTimeout: {
 *         timeout: 15,
 *         timeoutAction: "terminateAndRetry",
 *     },
 *     region: "us-west-2",
 *     releaseLabel: "emr-5.17.0",
 *     repoUpgradeOnBoot: "NONE",
 *     retries: 2,
 *     securityConfig: "example-config",
 *     serviceAccessSecurityGroup: "access-example",
 *     serviceRole: "example-role",
 *     stepsFiles: [{
 *         bucket: "example-bucket",
 *         key: "steps.json",
 *     }],
 *     strategy: "new",
 *     tags: [{
 *         key: "Creator",
 *         value: "Pulumi",
 *     }],
 *     taskDesiredCapacity: 1,
 *     taskEbsBlockDevices: [{
 *         sizeInGb: 40,
 *         volumeType: "gp2",
 *         volumesPerInstance: 2,
 *     }],
 *     taskEbsOptimized: false,
 *     taskInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     taskLifecycle: "SPOT",
 *     taskMaxSize: 30,
 *     taskMinSize: 0,
 *     taskUnit: "instance",
 *     terminationProtected: false,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Clone Strategy
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * export = async () => {
 *     const sample_MrScaler_01 = new spotinst.aws.MrScalar("sample-MrScaler-01", {
 *         availabilityZones: ["us-west-2a:subnet-12345678"],
 *         clusterId: "j-123456789",
 *         coreDesiredCapacity: 1,
 *         coreEbsBlockDevices: [{
 *             sizeInGb: 40,
 *             volumeType: "gp2",
 *             volumesPerInstance: 2,
 *         }],
 *         coreEbsOptimized: false,
 *         coreInstanceTypes: [
 *             "c3.xlarge",
 *             "c4.xlarge",
 *         ],
 *         coreLifecycle: "ON_DEMAND",
 *         coreMaxSize: 1,
 *         coreMinSize: 1,
 *         coreUnit: "instance",
 *         description: "Testing MrScaler creation",
 *         exposeClusterId: true,
 *         masterEbsBlockDevices: [{
 *             sizeInGb: 30,
 *             volumeType: "gp2",
 *             volumesPerInstance: 1,
 *         }],
 *         masterEbsOptimized: true,
 *         masterInstanceTypes: ["c3.xlarge"],
 *         masterLifecycle: "SPOT",
 *         masterTarget: 1,
 *         region: "us-west-2",
 *         strategy: "clone",
 *         tags: [{
 *             key: "Creator",
 *             value: "Pulumi",
 *         }],
 *         taskDesiredCapacity: 1,
 *         taskEbsBlockDevices: [{
 *             sizeInGb: 40,
 *             volumeType: "gp2",
 *             volumesPerInstance: 2,
 *         }],
 *         taskEbsOptimized: false,
 *         taskInstanceTypes: [
 *             "c3.xlarge",
 *             "c4.xlarge",
 *         ],
 *         taskLifecycle: "SPOT",
 *         taskMaxSize: 30,
 *         taskMinSize: 0,
 *         taskScalingDownPolicies: [{
 *             actionType: "",
 *             adjustment: "1",
 *             cooldown: 60,
 *             dimensions: {
 *                 name: "name-1",
 *                 value: "value-1",
 *             },
 *             evaluationPeriods: 10,
 *             maxTargetCapacity: "1",
 *             maximum: "10",
 *             metricName: "CPUUtilization",
 *             minimum: "0",
 *             namespace: "AWS/EC2",
 *             operator: "gt",
 *             period: 60,
 *             policyName: "policy-name",
 *             statistic: "average",
 *             target: "5",
 *             threshold: 10,
 *             unit: "",
 *         }],
 *         taskUnit: "instance",
 *     });
 *     return {
 *         "mrscaler-name": sample_MrScaler_01.name,
 *         "mrscaler-created-cluster-id": sample_MrScaler_01.outputClusterId,
 *     };
 * }
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Wrap Strategy
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const example_scaler_2 = new spotinst.aws.MrScalar("example-scaler-2", {
 *     clusterId: "j-27UVDEHXL4OQM",
 *     description: "created by Pulumi",
 *     region: "us-west-2",
 *     strategy: "wrap",
 *     taskDesiredCapacity: 2,
 *     taskEbsBlockDevices: [{
 *         sizeInGb: 20,
 *         volumeType: "gp2",
 *         volumesPerInstance: 1,
 *     }],
 *     taskInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     taskLifecycle: "SPOT",
 *     taskMaxSize: 4,
 *     taskMinSize: 0,
 *     taskUnit: "instance",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class MrScalar extends pulumi.CustomResource {
    /**
     * Get an existing MrScalar resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MrScalarState, opts?: pulumi.CustomResourceOptions): MrScalar {
        return new MrScalar(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/mrScalar:MrScalar';

    /**
     * Returns true if the given object is an instance of MrScalar.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MrScalar {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MrScalar.__pulumiType;
    }

    /**
     * This is meta information about third-party applications that third-party vendors use for testing purposes.
     */
    public readonly additionalInfo!: pulumi.Output<string | undefined>;
    /**
     * A list of additional Amazon EC2 security group IDs for the master node.
     */
    public readonly additionalPrimarySecurityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * A list of additional Amazon EC2 security group IDs for the core and task nodes.
     */
    public readonly additionalReplicaSecurityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
     */
    public readonly applications!: pulumi.Output<outputs.aws.MrScalarApplication[] | undefined>;
    /**
     * List of AZs and their subnet Ids. See example above for usage.
     */
    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    /**
     * Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    public readonly bootstrapActionsFiles!: pulumi.Output<outputs.aws.MrScalarBootstrapActionsFile[] | undefined>;
    /**
     * The MrScaler cluster id.
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    public readonly configurationsFiles!: pulumi.Output<outputs.aws.MrScalarConfigurationsFile[] | undefined>;
    /**
     * amount of instances in core group.
     */
    public readonly coreDesiredCapacity!: pulumi.Output<number | undefined>;
    /**
     * This determines the ebs configuration for your core group instances. Only a single block is allowed.
     */
    public readonly coreEbsBlockDevices!: pulumi.Output<outputs.aws.MrScalarCoreEbsBlockDevice[] | undefined>;
    /**
     * EBS Optimization setting for instances in group.
     */
    public readonly coreEbsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * The MrScaler instance types for the core nodes.
     */
    public readonly coreInstanceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    public readonly coreLifecycle!: pulumi.Output<string | undefined>;
    /**
     * maximal amount of instances in core group.
     */
    public readonly coreMaxSize!: pulumi.Output<number | undefined>;
    /**
     * The minimal amount of instances in core group.
     */
    public readonly coreMinSize!: pulumi.Output<number | undefined>;
    /**
     * Each `*_scaling_*_policy` supports the following:
     */
    public readonly coreScalingDownPolicies!: pulumi.Output<outputs.aws.MrScalarCoreScalingDownPolicy[] | undefined>;
    public readonly coreScalingUpPolicies!: pulumi.Output<outputs.aws.MrScalarCoreScalingUpPolicy[] | undefined>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    public readonly coreUnit!: pulumi.Output<string | undefined>;
    /**
     * The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
     */
    public readonly customAmiId!: pulumi.Output<string | undefined>;
    /**
     * The MrScaler description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ebsRootVolumeSize!: pulumi.Output<number | undefined>;
    /**
     * The name of an Amazon EC2 key pair that can be used to ssh to the master node.
     */
    public readonly ec2KeyName!: pulumi.Output<string | undefined>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    public readonly exposeClusterId!: pulumi.Output<boolean | undefined>;
    /**
     * Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
     */
    public readonly instanceWeights!: pulumi.Output<outputs.aws.MrScalarInstanceWeight[] | undefined>;
    /**
     * The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
     */
    public readonly jobFlowRole!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the cluster should remain available after completing all steps.
     */
    public readonly keepJobFlowAlive!: pulumi.Output<boolean | undefined>;
    /**
     * The path to the Amazon S3 location where logs for this cluster are stored.
     */
    public readonly logUri!: pulumi.Output<string | undefined>;
    /**
     * EMR Managed Security group that will be set to the primary instance group.
     */
    public readonly managedPrimarySecurityGroup!: pulumi.Output<string | undefined>;
    /**
     * EMR Managed Security group that will be set to the replica instance group.
     */
    public readonly managedReplicaSecurityGroup!: pulumi.Output<string | undefined>;
    /**
     * This determines the ebs configuration for your master group instances. Only a single block is allowed.
     */
    public readonly masterEbsBlockDevices!: pulumi.Output<outputs.aws.MrScalarMasterEbsBlockDevice[] | undefined>;
    /**
     * EBS Optimization setting for instances in group.
     */
    public readonly masterEbsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * The MrScaler instance types for the master nodes.
     */
    public readonly masterInstanceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    public readonly masterLifecycle!: pulumi.Output<string | undefined>;
    /**
     * Number of instances in the master group.
     */
    public readonly masterTarget!: pulumi.Output<number | undefined>;
    /**
     * The MrScaler name.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outputClusterId!: pulumi.Output<string>;
    public readonly provisioningTimeout!: pulumi.Output<outputs.aws.MrScalarProvisioningTimeout | undefined>;
    /**
     * The MrScaler region.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly releaseLabel!: pulumi.Output<string | undefined>;
    /**
     * Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
     */
    public readonly repoUpgradeOnBoot!: pulumi.Output<string | undefined>;
    /**
     * Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * An array of scheduled tasks.
     */
    public readonly scheduledTasks!: pulumi.Output<outputs.aws.MrScalarScheduledTask[] | undefined>;
    /**
     * The name of the security configuration applied to the cluster.
     */
    public readonly securityConfig!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
     */
    public readonly serviceAccessSecurityGroup!: pulumi.Output<string | undefined>;
    /**
     * The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
     */
    public readonly serviceRole!: pulumi.Output<string | undefined>;
    /**
     * Steps from S3.
     */
    public readonly stepsFiles!: pulumi.Output<outputs.aws.MrScalarStepsFile[] | undefined>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    public readonly strategy!: pulumi.Output<string>;
    /**
     * A list of tags to assign to the resource. You may define multiple tags.
     */
    public readonly tags!: pulumi.Output<outputs.aws.MrScalarTag[] | undefined>;
    /**
     * amount of instances in task group.
     */
    public readonly taskDesiredCapacity!: pulumi.Output<number | undefined>;
    /**
     * This determines the ebs configuration for your task group instances. Only a single block is allowed.
     */
    public readonly taskEbsBlockDevices!: pulumi.Output<outputs.aws.MrScalarTaskEbsBlockDevice[] | undefined>;
    /**
     * EBS Optimization setting for instances in group.
     */
    public readonly taskEbsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * The MrScaler instance types for the task nodes.
     */
    public readonly taskInstanceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    public readonly taskLifecycle!: pulumi.Output<string | undefined>;
    /**
     * maximal amount of instances in task group.
     */
    public readonly taskMaxSize!: pulumi.Output<number | undefined>;
    /**
     * The minimal amount of instances in task group.
     */
    public readonly taskMinSize!: pulumi.Output<number | undefined>;
    /**
     * Possible core group scaling policies (Clone, New strategies):
     */
    public readonly taskScalingDownPolicies!: pulumi.Output<outputs.aws.MrScalarTaskScalingDownPolicy[] | undefined>;
    public readonly taskScalingUpPolicies!: pulumi.Output<outputs.aws.MrScalarTaskScalingUpPolicy[] | undefined>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    public readonly taskUnit!: pulumi.Output<string | undefined>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    public readonly terminationPolicies!: pulumi.Output<outputs.aws.MrScalarTerminationPolicy[] | undefined>;
    /**
     * Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
     */
    public readonly terminationProtected!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    public readonly visibleToAllUsers!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MrScalar resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MrScalarArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MrScalarArgs | MrScalarState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MrScalarState | undefined;
            resourceInputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            resourceInputs["additionalPrimarySecurityGroups"] = state ? state.additionalPrimarySecurityGroups : undefined;
            resourceInputs["additionalReplicaSecurityGroups"] = state ? state.additionalReplicaSecurityGroups : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["bootstrapActionsFiles"] = state ? state.bootstrapActionsFiles : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationsFiles"] = state ? state.configurationsFiles : undefined;
            resourceInputs["coreDesiredCapacity"] = state ? state.coreDesiredCapacity : undefined;
            resourceInputs["coreEbsBlockDevices"] = state ? state.coreEbsBlockDevices : undefined;
            resourceInputs["coreEbsOptimized"] = state ? state.coreEbsOptimized : undefined;
            resourceInputs["coreInstanceTypes"] = state ? state.coreInstanceTypes : undefined;
            resourceInputs["coreLifecycle"] = state ? state.coreLifecycle : undefined;
            resourceInputs["coreMaxSize"] = state ? state.coreMaxSize : undefined;
            resourceInputs["coreMinSize"] = state ? state.coreMinSize : undefined;
            resourceInputs["coreScalingDownPolicies"] = state ? state.coreScalingDownPolicies : undefined;
            resourceInputs["coreScalingUpPolicies"] = state ? state.coreScalingUpPolicies : undefined;
            resourceInputs["coreUnit"] = state ? state.coreUnit : undefined;
            resourceInputs["customAmiId"] = state ? state.customAmiId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ebsRootVolumeSize"] = state ? state.ebsRootVolumeSize : undefined;
            resourceInputs["ec2KeyName"] = state ? state.ec2KeyName : undefined;
            resourceInputs["exposeClusterId"] = state ? state.exposeClusterId : undefined;
            resourceInputs["instanceWeights"] = state ? state.instanceWeights : undefined;
            resourceInputs["jobFlowRole"] = state ? state.jobFlowRole : undefined;
            resourceInputs["keepJobFlowAlive"] = state ? state.keepJobFlowAlive : undefined;
            resourceInputs["logUri"] = state ? state.logUri : undefined;
            resourceInputs["managedPrimarySecurityGroup"] = state ? state.managedPrimarySecurityGroup : undefined;
            resourceInputs["managedReplicaSecurityGroup"] = state ? state.managedReplicaSecurityGroup : undefined;
            resourceInputs["masterEbsBlockDevices"] = state ? state.masterEbsBlockDevices : undefined;
            resourceInputs["masterEbsOptimized"] = state ? state.masterEbsOptimized : undefined;
            resourceInputs["masterInstanceTypes"] = state ? state.masterInstanceTypes : undefined;
            resourceInputs["masterLifecycle"] = state ? state.masterLifecycle : undefined;
            resourceInputs["masterTarget"] = state ? state.masterTarget : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputClusterId"] = state ? state.outputClusterId : undefined;
            resourceInputs["provisioningTimeout"] = state ? state.provisioningTimeout : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            resourceInputs["repoUpgradeOnBoot"] = state ? state.repoUpgradeOnBoot : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["securityConfig"] = state ? state.securityConfig : undefined;
            resourceInputs["serviceAccessSecurityGroup"] = state ? state.serviceAccessSecurityGroup : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["stepsFiles"] = state ? state.stepsFiles : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskDesiredCapacity"] = state ? state.taskDesiredCapacity : undefined;
            resourceInputs["taskEbsBlockDevices"] = state ? state.taskEbsBlockDevices : undefined;
            resourceInputs["taskEbsOptimized"] = state ? state.taskEbsOptimized : undefined;
            resourceInputs["taskInstanceTypes"] = state ? state.taskInstanceTypes : undefined;
            resourceInputs["taskLifecycle"] = state ? state.taskLifecycle : undefined;
            resourceInputs["taskMaxSize"] = state ? state.taskMaxSize : undefined;
            resourceInputs["taskMinSize"] = state ? state.taskMinSize : undefined;
            resourceInputs["taskScalingDownPolicies"] = state ? state.taskScalingDownPolicies : undefined;
            resourceInputs["taskScalingUpPolicies"] = state ? state.taskScalingUpPolicies : undefined;
            resourceInputs["taskUnit"] = state ? state.taskUnit : undefined;
            resourceInputs["terminationPolicies"] = state ? state.terminationPolicies : undefined;
            resourceInputs["terminationProtected"] = state ? state.terminationProtected : undefined;
            resourceInputs["visibleToAllUsers"] = state ? state.visibleToAllUsers : undefined;
        } else {
            const args = argsOrState as MrScalarArgs | undefined;
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            resourceInputs["additionalPrimarySecurityGroups"] = args ? args.additionalPrimarySecurityGroups : undefined;
            resourceInputs["additionalReplicaSecurityGroups"] = args ? args.additionalReplicaSecurityGroups : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["bootstrapActionsFiles"] = args ? args.bootstrapActionsFiles : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurationsFiles"] = args ? args.configurationsFiles : undefined;
            resourceInputs["coreDesiredCapacity"] = args ? args.coreDesiredCapacity : undefined;
            resourceInputs["coreEbsBlockDevices"] = args ? args.coreEbsBlockDevices : undefined;
            resourceInputs["coreEbsOptimized"] = args ? args.coreEbsOptimized : undefined;
            resourceInputs["coreInstanceTypes"] = args ? args.coreInstanceTypes : undefined;
            resourceInputs["coreLifecycle"] = args ? args.coreLifecycle : undefined;
            resourceInputs["coreMaxSize"] = args ? args.coreMaxSize : undefined;
            resourceInputs["coreMinSize"] = args ? args.coreMinSize : undefined;
            resourceInputs["coreScalingDownPolicies"] = args ? args.coreScalingDownPolicies : undefined;
            resourceInputs["coreScalingUpPolicies"] = args ? args.coreScalingUpPolicies : undefined;
            resourceInputs["coreUnit"] = args ? args.coreUnit : undefined;
            resourceInputs["customAmiId"] = args ? args.customAmiId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ebsRootVolumeSize"] = args ? args.ebsRootVolumeSize : undefined;
            resourceInputs["ec2KeyName"] = args ? args.ec2KeyName : undefined;
            resourceInputs["exposeClusterId"] = args ? args.exposeClusterId : undefined;
            resourceInputs["instanceWeights"] = args ? args.instanceWeights : undefined;
            resourceInputs["jobFlowRole"] = args ? args.jobFlowRole : undefined;
            resourceInputs["keepJobFlowAlive"] = args ? args.keepJobFlowAlive : undefined;
            resourceInputs["logUri"] = args ? args.logUri : undefined;
            resourceInputs["managedPrimarySecurityGroup"] = args ? args.managedPrimarySecurityGroup : undefined;
            resourceInputs["managedReplicaSecurityGroup"] = args ? args.managedReplicaSecurityGroup : undefined;
            resourceInputs["masterEbsBlockDevices"] = args ? args.masterEbsBlockDevices : undefined;
            resourceInputs["masterEbsOptimized"] = args ? args.masterEbsOptimized : undefined;
            resourceInputs["masterInstanceTypes"] = args ? args.masterInstanceTypes : undefined;
            resourceInputs["masterLifecycle"] = args ? args.masterLifecycle : undefined;
            resourceInputs["masterTarget"] = args ? args.masterTarget : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisioningTimeout"] = args ? args.provisioningTimeout : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            resourceInputs["repoUpgradeOnBoot"] = args ? args.repoUpgradeOnBoot : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["securityConfig"] = args ? args.securityConfig : undefined;
            resourceInputs["serviceAccessSecurityGroup"] = args ? args.serviceAccessSecurityGroup : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["stepsFiles"] = args ? args.stepsFiles : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskDesiredCapacity"] = args ? args.taskDesiredCapacity : undefined;
            resourceInputs["taskEbsBlockDevices"] = args ? args.taskEbsBlockDevices : undefined;
            resourceInputs["taskEbsOptimized"] = args ? args.taskEbsOptimized : undefined;
            resourceInputs["taskInstanceTypes"] = args ? args.taskInstanceTypes : undefined;
            resourceInputs["taskLifecycle"] = args ? args.taskLifecycle : undefined;
            resourceInputs["taskMaxSize"] = args ? args.taskMaxSize : undefined;
            resourceInputs["taskMinSize"] = args ? args.taskMinSize : undefined;
            resourceInputs["taskScalingDownPolicies"] = args ? args.taskScalingDownPolicies : undefined;
            resourceInputs["taskScalingUpPolicies"] = args ? args.taskScalingUpPolicies : undefined;
            resourceInputs["taskUnit"] = args ? args.taskUnit : undefined;
            resourceInputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            resourceInputs["terminationProtected"] = args ? args.terminationProtected : undefined;
            resourceInputs["visibleToAllUsers"] = args ? args.visibleToAllUsers : undefined;
            resourceInputs["outputClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MrScalar.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MrScalar resources.
 */
export interface MrScalarState {
    /**
     * This is meta information about third-party applications that third-party vendors use for testing purposes.
     */
    additionalInfo?: pulumi.Input<string>;
    /**
     * A list of additional Amazon EC2 security group IDs for the master node.
     */
    additionalPrimarySecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of additional Amazon EC2 security group IDs for the core and task nodes.
     */
    additionalReplicaSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
     */
    applications?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarApplication>[]>;
    /**
     * List of AZs and their subnet Ids. See example above for usage.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    bootstrapActionsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarBootstrapActionsFile>[]>;
    /**
     * The MrScaler cluster id.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    configurationsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarConfigurationsFile>[]>;
    /**
     * amount of instances in core group.
     */
    coreDesiredCapacity?: pulumi.Input<number>;
    /**
     * This determines the ebs configuration for your core group instances. Only a single block is allowed.
     */
    coreEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    coreEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the core nodes.
     */
    coreInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    coreLifecycle?: pulumi.Input<string>;
    /**
     * maximal amount of instances in core group.
     */
    coreMaxSize?: pulumi.Input<number>;
    /**
     * The minimal amount of instances in core group.
     */
    coreMinSize?: pulumi.Input<number>;
    /**
     * Each `*_scaling_*_policy` supports the following:
     */
    coreScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingDownPolicy>[]>;
    coreScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingUpPolicy>[]>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    coreUnit?: pulumi.Input<string>;
    /**
     * The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
     */
    customAmiId?: pulumi.Input<string>;
    /**
     * The MrScaler description.
     */
    description?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * The name of an Amazon EC2 key pair that can be used to ssh to the master node.
     */
    ec2KeyName?: pulumi.Input<string>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    exposeClusterId?: pulumi.Input<boolean>;
    /**
     * Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
     */
    instanceWeights?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarInstanceWeight>[]>;
    /**
     * The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
     */
    jobFlowRole?: pulumi.Input<string>;
    /**
     * Specifies whether the cluster should remain available after completing all steps.
     */
    keepJobFlowAlive?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 location where logs for this cluster are stored.
     */
    logUri?: pulumi.Input<string>;
    /**
     * EMR Managed Security group that will be set to the primary instance group.
     */
    managedPrimarySecurityGroup?: pulumi.Input<string>;
    /**
     * EMR Managed Security group that will be set to the replica instance group.
     */
    managedReplicaSecurityGroup?: pulumi.Input<string>;
    /**
     * This determines the ebs configuration for your master group instances. Only a single block is allowed.
     */
    masterEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarMasterEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    masterEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the master nodes.
     */
    masterInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    masterLifecycle?: pulumi.Input<string>;
    /**
     * Number of instances in the master group.
     */
    masterTarget?: pulumi.Input<number>;
    /**
     * The MrScaler name.
     */
    name?: pulumi.Input<string>;
    outputClusterId?: pulumi.Input<string>;
    provisioningTimeout?: pulumi.Input<inputs.aws.MrScalarProvisioningTimeout>;
    /**
     * The MrScaler region.
     */
    region?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    /**
     * Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
     */
    repoUpgradeOnBoot?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
     */
    retries?: pulumi.Input<number>;
    /**
     * An array of scheduled tasks.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarScheduledTask>[]>;
    /**
     * The name of the security configuration applied to the cluster.
     */
    securityConfig?: pulumi.Input<string>;
    /**
     * The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
     */
    serviceAccessSecurityGroup?: pulumi.Input<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * Steps from S3.
     */
    stepsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarStepsFile>[]>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    strategy?: pulumi.Input<string>;
    /**
     * A list of tags to assign to the resource. You may define multiple tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTag>[]>;
    /**
     * amount of instances in task group.
     */
    taskDesiredCapacity?: pulumi.Input<number>;
    /**
     * This determines the ebs configuration for your task group instances. Only a single block is allowed.
     */
    taskEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    taskEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the task nodes.
     */
    taskInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    taskLifecycle?: pulumi.Input<string>;
    /**
     * maximal amount of instances in task group.
     */
    taskMaxSize?: pulumi.Input<number>;
    /**
     * The minimal amount of instances in task group.
     */
    taskMinSize?: pulumi.Input<number>;
    /**
     * Possible core group scaling policies (Clone, New strategies):
     */
    taskScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingDownPolicy>[]>;
    taskScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingUpPolicy>[]>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    taskUnit?: pulumi.Input<string>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTerminationPolicy>[]>;
    /**
     * Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
     */
    terminationProtected?: pulumi.Input<boolean>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MrScalar resource.
 */
export interface MrScalarArgs {
    /**
     * This is meta information about third-party applications that third-party vendors use for testing purposes.
     */
    additionalInfo?: pulumi.Input<string>;
    /**
     * A list of additional Amazon EC2 security group IDs for the master node.
     */
    additionalPrimarySecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of additional Amazon EC2 security group IDs for the core and task nodes.
     */
    additionalReplicaSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
     */
    applications?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarApplication>[]>;
    /**
     * List of AZs and their subnet Ids. See example above for usage.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    bootstrapActionsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarBootstrapActionsFile>[]>;
    /**
     * The MrScaler cluster id.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
     */
    configurationsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarConfigurationsFile>[]>;
    /**
     * amount of instances in core group.
     */
    coreDesiredCapacity?: pulumi.Input<number>;
    /**
     * This determines the ebs configuration for your core group instances. Only a single block is allowed.
     */
    coreEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    coreEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the core nodes.
     */
    coreInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    coreLifecycle?: pulumi.Input<string>;
    /**
     * maximal amount of instances in core group.
     */
    coreMaxSize?: pulumi.Input<number>;
    /**
     * The minimal amount of instances in core group.
     */
    coreMinSize?: pulumi.Input<number>;
    /**
     * Each `*_scaling_*_policy` supports the following:
     */
    coreScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingDownPolicy>[]>;
    coreScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingUpPolicy>[]>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    coreUnit?: pulumi.Input<string>;
    /**
     * The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
     */
    customAmiId?: pulumi.Input<string>;
    /**
     * The MrScaler description.
     */
    description?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    /**
     * The name of an Amazon EC2 key pair that can be used to ssh to the master node.
     */
    ec2KeyName?: pulumi.Input<string>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    exposeClusterId?: pulumi.Input<boolean>;
    /**
     * Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
     */
    instanceWeights?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarInstanceWeight>[]>;
    /**
     * The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
     */
    jobFlowRole?: pulumi.Input<string>;
    /**
     * Specifies whether the cluster should remain available after completing all steps.
     */
    keepJobFlowAlive?: pulumi.Input<boolean>;
    /**
     * The path to the Amazon S3 location where logs for this cluster are stored.
     */
    logUri?: pulumi.Input<string>;
    /**
     * EMR Managed Security group that will be set to the primary instance group.
     */
    managedPrimarySecurityGroup?: pulumi.Input<string>;
    /**
     * EMR Managed Security group that will be set to the replica instance group.
     */
    managedReplicaSecurityGroup?: pulumi.Input<string>;
    /**
     * This determines the ebs configuration for your master group instances. Only a single block is allowed.
     */
    masterEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarMasterEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    masterEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the master nodes.
     */
    masterInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    masterLifecycle?: pulumi.Input<string>;
    /**
     * Number of instances in the master group.
     */
    masterTarget?: pulumi.Input<number>;
    /**
     * The MrScaler name.
     */
    name?: pulumi.Input<string>;
    provisioningTimeout?: pulumi.Input<inputs.aws.MrScalarProvisioningTimeout>;
    /**
     * The MrScaler region.
     */
    region?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    /**
     * Applies only when `customAmiId` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
     */
    repoUpgradeOnBoot?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded. Valid values: `1-5`.
     */
    retries?: pulumi.Input<number>;
    /**
     * An array of scheduled tasks.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarScheduledTask>[]>;
    /**
     * The name of the security configuration applied to the cluster.
     */
    securityConfig?: pulumi.Input<string>;
    /**
     * The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
     */
    serviceAccessSecurityGroup?: pulumi.Input<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
     */
    serviceRole?: pulumi.Input<string>;
    /**
     * Steps from S3.
     */
    stepsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarStepsFile>[]>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    strategy: pulumi.Input<string>;
    /**
     * A list of tags to assign to the resource. You may define multiple tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTag>[]>;
    /**
     * amount of instances in task group.
     */
    taskDesiredCapacity?: pulumi.Input<number>;
    /**
     * This determines the ebs configuration for your task group instances. Only a single block is allowed.
     */
    taskEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskEbsBlockDevice>[]>;
    /**
     * EBS Optimization setting for instances in group.
     */
    taskEbsOptimized?: pulumi.Input<boolean>;
    /**
     * The MrScaler instance types for the task nodes.
     */
    taskInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
     */
    taskLifecycle?: pulumi.Input<string>;
    /**
     * maximal amount of instances in task group.
     */
    taskMaxSize?: pulumi.Input<number>;
    /**
     * The minimal amount of instances in task group.
     */
    taskMinSize?: pulumi.Input<number>;
    /**
     * Possible core group scaling policies (Clone, New strategies):
     */
    taskScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingDownPolicy>[]>;
    taskScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingUpPolicy>[]>;
    /**
     * Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
     */
    taskUnit?: pulumi.Input<string>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTerminationPolicy>[]>;
    /**
     * Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
     */
    terminationProtected?: pulumi.Input<boolean>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}
