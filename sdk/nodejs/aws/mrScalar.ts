// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Spotinst AWS MrScaler resource.
 *
 * ## Example Usage
 *
 * ### Wrap Strategy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * // Create a Mr Scaler with Wrap strategy
 * const example_scaler_2 = new spotinst.aws.MrScalar("example-scaler-2", {
 *     name: "spotinst-mr-scaler-2",
 *     description: "created by Pulumi",
 *     region: "us-west-2",
 *     strategy: "wrap",
 *     clusterId: "j-27UVDEHXL4OQM",
 *     taskInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     taskDesiredCapacity: 2,
 *     taskMinSize: 0,
 *     taskMaxSize: 4,
 *     taskLifecycle: "SPOT",
 *     taskUnit: "instance",
 *     taskEbsBlockDevices: [{
 *         volumesPerInstance: 1,
 *         volumeType: "gp2",
 *         sizeInGb: 20,
 *     }],
 * });
 * ```
 *
 * ### New Strategy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * // Create a Mr Scaler with New strategy
 * const sample_MrScaler_01 = new spotinst.aws.MrScalar("sample-MrScaler-01", {
 *     name: "sample-MrScaler-01",
 *     description: "Testing MrScaler creation",
 *     region: "us-west-2",
 *     strategy: "new",
 *     releaseLabel: "emr-5.17.0",
 *     retries: 2,
 *     availabilityZones: ["us-west-2a:subnet-123456"],
 *     provisioningTimeout: {
 *         timeout: 15,
 *         timeoutAction: "terminateAndRetry",
 *     },
 *     logUri: "s3://example-logs",
 *     additionalInfo: "{'test':'more information'}",
 *     jobFlowRole: "EMR_EC2_ExampleRole",
 *     securityConfig: "example-config",
 *     serviceRole: "example-role",
 *     terminationProtected: false,
 *     keepJobFlowAlive: true,
 *     customAmiId: "ami-123456",
 *     repoUpgradeOnBoot: "NONE",
 *     ec2KeyName: "test-key",
 *     managedPrimarySecurityGroup: "sg-123456",
 *     managedReplicaSecurityGroup: "sg-987654",
 *     serviceAccessSecurityGroup: "access-example",
 *     additionalPrimarySecurityGroups: ["sg-456321"],
 *     additionalReplicaSecurityGroups: ["sg-123654"],
 *     applications: [
 *         {
 *             name: "Ganglia",
 *             version: "1.0",
 *         },
 *         {
 *             name: "Hadoop",
 *         },
 *         {
 *             name: "Pig",
 *             args: [
 *                 "fake",
 *                 "args",
 *             ],
 *         },
 *     ],
 *     instanceWeights: [
 *         {
 *             instanceType: "t2.small",
 *             weightedCapacity: 10,
 *         },
 *         {
 *             instanceType: "t2.medium",
 *             weightedCapacity: 90,
 *         },
 *     ],
 *     stepsFiles: [{
 *         bucket: "example-bucket",
 *         key: "steps.json",
 *     }],
 *     configurationsFiles: [{
 *         bucket: "example-bucket",
 *         key: "configurations.json",
 *     }],
 *     bootstrapActionsFiles: [{
 *         bucket: "sample-emr-test",
 *         key: "bootstrap-actions.json",
 *     }],
 *     masterInstanceTypes: ["c3.xlarge"],
 *     masterLifecycle: "SPOT",
 *     masterEbsOptimized: true,
 *     masterTarget: 1,
 *     masterEbsBlockDevices: [{
 *         volumesPerInstance: 1,
 *         volumeType: "gp2",
 *         sizeInGb: 30,
 *     }],
 *     coreInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     coreMinSize: 1,
 *     coreMaxSize: 1,
 *     coreDesiredCapacity: 1,
 *     coreLifecycle: "ON_DEMAND",
 *     coreEbsOptimized: false,
 *     coreUnit: "instance",
 *     coreEbsBlockDevices: [{
 *         volumesPerInstance: 2,
 *         volumeType: "gp2",
 *         sizeInGb: 40,
 *     }],
 *     taskInstanceTypes: [
 *         "c3.xlarge",
 *         "c4.xlarge",
 *     ],
 *     taskMinSize: 0,
 *     taskMaxSize: 30,
 *     taskDesiredCapacity: 1,
 *     taskLifecycle: "SPOT",
 *     taskEbsOptimized: false,
 *     taskUnit: "instance",
 *     taskEbsBlockDevices: [{
 *         volumesPerInstance: 2,
 *         volumeType: "gp2",
 *         sizeInGb: 40,
 *     }],
 *     tags: [{
 *         key: "Creator",
 *         value: "Pulumi",
 *     }],
 * });
 * ```
 */
export class MrScalar extends pulumi.CustomResource {
    /**
     * Get an existing MrScalar resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MrScalarState, opts?: pulumi.CustomResourceOptions): MrScalar {
        return new MrScalar(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/mrScalar:MrScalar';

    /**
     * Returns true if the given object is an instance of MrScalar.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MrScalar {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MrScalar.__pulumiType;
    }

    declare public readonly additionalInfo: pulumi.Output<string | undefined>;
    declare public readonly additionalPrimarySecurityGroups: pulumi.Output<string[] | undefined>;
    declare public readonly additionalReplicaSecurityGroups: pulumi.Output<string[] | undefined>;
    declare public readonly applications: pulumi.Output<outputs.aws.MrScalarApplication[] | undefined>;
    declare public readonly availabilityZones: pulumi.Output<string[] | undefined>;
    declare public readonly bootstrapActionsFiles: pulumi.Output<outputs.aws.MrScalarBootstrapActionsFile[] | undefined>;
    /**
     * The MrScaler cluster id.
     */
    declare public readonly clusterId: pulumi.Output<string | undefined>;
    declare public readonly configurationsFiles: pulumi.Output<outputs.aws.MrScalarConfigurationsFile[] | undefined>;
    declare public readonly coreDesiredCapacity: pulumi.Output<number | undefined>;
    declare public readonly coreEbsBlockDevices: pulumi.Output<outputs.aws.MrScalarCoreEbsBlockDevice[] | undefined>;
    declare public readonly coreEbsOptimized: pulumi.Output<boolean | undefined>;
    declare public readonly coreInstanceTypes: pulumi.Output<string[] | undefined>;
    declare public readonly coreLifecycle: pulumi.Output<string | undefined>;
    declare public readonly coreMaxSize: pulumi.Output<number | undefined>;
    declare public readonly coreMinSize: pulumi.Output<number | undefined>;
    declare public readonly coreScalingDownPolicies: pulumi.Output<outputs.aws.MrScalarCoreScalingDownPolicy[] | undefined>;
    declare public readonly coreScalingUpPolicies: pulumi.Output<outputs.aws.MrScalarCoreScalingUpPolicy[] | undefined>;
    declare public readonly coreUnit: pulumi.Output<string | undefined>;
    declare public readonly customAmiId: pulumi.Output<string | undefined>;
    /**
     * The MrScaler description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly ebsRootVolumeSize: pulumi.Output<number | undefined>;
    declare public readonly ec2KeyName: pulumi.Output<string | undefined>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    declare public readonly exposeClusterId: pulumi.Output<boolean | undefined>;
    declare public readonly instanceWeights: pulumi.Output<outputs.aws.MrScalarInstanceWeight[] | undefined>;
    declare public readonly jobFlowRole: pulumi.Output<string | undefined>;
    declare public readonly keepJobFlowAlive: pulumi.Output<boolean | undefined>;
    declare public readonly logUri: pulumi.Output<string | undefined>;
    declare public readonly managedPrimarySecurityGroup: pulumi.Output<string | undefined>;
    declare public readonly managedReplicaSecurityGroup: pulumi.Output<string | undefined>;
    declare public readonly masterEbsBlockDevices: pulumi.Output<outputs.aws.MrScalarMasterEbsBlockDevice[] | undefined>;
    declare public readonly masterEbsOptimized: pulumi.Output<boolean | undefined>;
    declare public readonly masterInstanceTypes: pulumi.Output<string[] | undefined>;
    declare public readonly masterLifecycle: pulumi.Output<string | undefined>;
    declare public readonly masterTarget: pulumi.Output<number | undefined>;
    /**
     * The MrScaler name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly outputClusterId: pulumi.Output<string>;
    declare public readonly provisioningTimeout: pulumi.Output<outputs.aws.MrScalarProvisioningTimeout | undefined>;
    /**
     * The MrScaler region.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    declare public readonly releaseLabel: pulumi.Output<string | undefined>;
    declare public readonly repoUpgradeOnBoot: pulumi.Output<string | undefined>;
    declare public readonly retries: pulumi.Output<number | undefined>;
    declare public readonly scheduledTasks: pulumi.Output<outputs.aws.MrScalarScheduledTask[] | undefined>;
    declare public readonly securityConfig: pulumi.Output<string | undefined>;
    declare public readonly serviceAccessSecurityGroup: pulumi.Output<string | undefined>;
    declare public readonly serviceRole: pulumi.Output<string | undefined>;
    declare public readonly stepsFiles: pulumi.Output<outputs.aws.MrScalarStepsFile[] | undefined>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    declare public readonly strategy: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<outputs.aws.MrScalarTag[] | undefined>;
    declare public readonly taskDesiredCapacity: pulumi.Output<number | undefined>;
    declare public readonly taskEbsBlockDevices: pulumi.Output<outputs.aws.MrScalarTaskEbsBlockDevice[] | undefined>;
    declare public readonly taskEbsOptimized: pulumi.Output<boolean | undefined>;
    declare public readonly taskInstanceTypes: pulumi.Output<string[] | undefined>;
    declare public readonly taskLifecycle: pulumi.Output<string | undefined>;
    declare public readonly taskMaxSize: pulumi.Output<number | undefined>;
    declare public readonly taskMinSize: pulumi.Output<number | undefined>;
    declare public readonly taskScalingDownPolicies: pulumi.Output<outputs.aws.MrScalarTaskScalingDownPolicy[] | undefined>;
    declare public readonly taskScalingUpPolicies: pulumi.Output<outputs.aws.MrScalarTaskScalingUpPolicy[] | undefined>;
    declare public readonly taskUnit: pulumi.Output<string | undefined>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    declare public readonly terminationPolicies: pulumi.Output<outputs.aws.MrScalarTerminationPolicy[] | undefined>;
    declare public readonly terminationProtected: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    declare public readonly visibleToAllUsers: pulumi.Output<boolean | undefined>;

    /**
     * Create a MrScalar resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MrScalarArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MrScalarArgs | MrScalarState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MrScalarState | undefined;
            resourceInputs["additionalInfo"] = state?.additionalInfo;
            resourceInputs["additionalPrimarySecurityGroups"] = state?.additionalPrimarySecurityGroups;
            resourceInputs["additionalReplicaSecurityGroups"] = state?.additionalReplicaSecurityGroups;
            resourceInputs["applications"] = state?.applications;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["bootstrapActionsFiles"] = state?.bootstrapActionsFiles;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["configurationsFiles"] = state?.configurationsFiles;
            resourceInputs["coreDesiredCapacity"] = state?.coreDesiredCapacity;
            resourceInputs["coreEbsBlockDevices"] = state?.coreEbsBlockDevices;
            resourceInputs["coreEbsOptimized"] = state?.coreEbsOptimized;
            resourceInputs["coreInstanceTypes"] = state?.coreInstanceTypes;
            resourceInputs["coreLifecycle"] = state?.coreLifecycle;
            resourceInputs["coreMaxSize"] = state?.coreMaxSize;
            resourceInputs["coreMinSize"] = state?.coreMinSize;
            resourceInputs["coreScalingDownPolicies"] = state?.coreScalingDownPolicies;
            resourceInputs["coreScalingUpPolicies"] = state?.coreScalingUpPolicies;
            resourceInputs["coreUnit"] = state?.coreUnit;
            resourceInputs["customAmiId"] = state?.customAmiId;
            resourceInputs["description"] = state?.description;
            resourceInputs["ebsRootVolumeSize"] = state?.ebsRootVolumeSize;
            resourceInputs["ec2KeyName"] = state?.ec2KeyName;
            resourceInputs["exposeClusterId"] = state?.exposeClusterId;
            resourceInputs["instanceWeights"] = state?.instanceWeights;
            resourceInputs["jobFlowRole"] = state?.jobFlowRole;
            resourceInputs["keepJobFlowAlive"] = state?.keepJobFlowAlive;
            resourceInputs["logUri"] = state?.logUri;
            resourceInputs["managedPrimarySecurityGroup"] = state?.managedPrimarySecurityGroup;
            resourceInputs["managedReplicaSecurityGroup"] = state?.managedReplicaSecurityGroup;
            resourceInputs["masterEbsBlockDevices"] = state?.masterEbsBlockDevices;
            resourceInputs["masterEbsOptimized"] = state?.masterEbsOptimized;
            resourceInputs["masterInstanceTypes"] = state?.masterInstanceTypes;
            resourceInputs["masterLifecycle"] = state?.masterLifecycle;
            resourceInputs["masterTarget"] = state?.masterTarget;
            resourceInputs["name"] = state?.name;
            resourceInputs["outputClusterId"] = state?.outputClusterId;
            resourceInputs["provisioningTimeout"] = state?.provisioningTimeout;
            resourceInputs["region"] = state?.region;
            resourceInputs["releaseLabel"] = state?.releaseLabel;
            resourceInputs["repoUpgradeOnBoot"] = state?.repoUpgradeOnBoot;
            resourceInputs["retries"] = state?.retries;
            resourceInputs["scheduledTasks"] = state?.scheduledTasks;
            resourceInputs["securityConfig"] = state?.securityConfig;
            resourceInputs["serviceAccessSecurityGroup"] = state?.serviceAccessSecurityGroup;
            resourceInputs["serviceRole"] = state?.serviceRole;
            resourceInputs["stepsFiles"] = state?.stepsFiles;
            resourceInputs["strategy"] = state?.strategy;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taskDesiredCapacity"] = state?.taskDesiredCapacity;
            resourceInputs["taskEbsBlockDevices"] = state?.taskEbsBlockDevices;
            resourceInputs["taskEbsOptimized"] = state?.taskEbsOptimized;
            resourceInputs["taskInstanceTypes"] = state?.taskInstanceTypes;
            resourceInputs["taskLifecycle"] = state?.taskLifecycle;
            resourceInputs["taskMaxSize"] = state?.taskMaxSize;
            resourceInputs["taskMinSize"] = state?.taskMinSize;
            resourceInputs["taskScalingDownPolicies"] = state?.taskScalingDownPolicies;
            resourceInputs["taskScalingUpPolicies"] = state?.taskScalingUpPolicies;
            resourceInputs["taskUnit"] = state?.taskUnit;
            resourceInputs["terminationPolicies"] = state?.terminationPolicies;
            resourceInputs["terminationProtected"] = state?.terminationProtected;
            resourceInputs["visibleToAllUsers"] = state?.visibleToAllUsers;
        } else {
            const args = argsOrState as MrScalarArgs | undefined;
            if (args?.strategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["additionalInfo"] = args?.additionalInfo;
            resourceInputs["additionalPrimarySecurityGroups"] = args?.additionalPrimarySecurityGroups;
            resourceInputs["additionalReplicaSecurityGroups"] = args?.additionalReplicaSecurityGroups;
            resourceInputs["applications"] = args?.applications;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["bootstrapActionsFiles"] = args?.bootstrapActionsFiles;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["configurationsFiles"] = args?.configurationsFiles;
            resourceInputs["coreDesiredCapacity"] = args?.coreDesiredCapacity;
            resourceInputs["coreEbsBlockDevices"] = args?.coreEbsBlockDevices;
            resourceInputs["coreEbsOptimized"] = args?.coreEbsOptimized;
            resourceInputs["coreInstanceTypes"] = args?.coreInstanceTypes;
            resourceInputs["coreLifecycle"] = args?.coreLifecycle;
            resourceInputs["coreMaxSize"] = args?.coreMaxSize;
            resourceInputs["coreMinSize"] = args?.coreMinSize;
            resourceInputs["coreScalingDownPolicies"] = args?.coreScalingDownPolicies;
            resourceInputs["coreScalingUpPolicies"] = args?.coreScalingUpPolicies;
            resourceInputs["coreUnit"] = args?.coreUnit;
            resourceInputs["customAmiId"] = args?.customAmiId;
            resourceInputs["description"] = args?.description;
            resourceInputs["ebsRootVolumeSize"] = args?.ebsRootVolumeSize;
            resourceInputs["ec2KeyName"] = args?.ec2KeyName;
            resourceInputs["exposeClusterId"] = args?.exposeClusterId;
            resourceInputs["instanceWeights"] = args?.instanceWeights;
            resourceInputs["jobFlowRole"] = args?.jobFlowRole;
            resourceInputs["keepJobFlowAlive"] = args?.keepJobFlowAlive;
            resourceInputs["logUri"] = args?.logUri;
            resourceInputs["managedPrimarySecurityGroup"] = args?.managedPrimarySecurityGroup;
            resourceInputs["managedReplicaSecurityGroup"] = args?.managedReplicaSecurityGroup;
            resourceInputs["masterEbsBlockDevices"] = args?.masterEbsBlockDevices;
            resourceInputs["masterEbsOptimized"] = args?.masterEbsOptimized;
            resourceInputs["masterInstanceTypes"] = args?.masterInstanceTypes;
            resourceInputs["masterLifecycle"] = args?.masterLifecycle;
            resourceInputs["masterTarget"] = args?.masterTarget;
            resourceInputs["name"] = args?.name;
            resourceInputs["provisioningTimeout"] = args?.provisioningTimeout;
            resourceInputs["region"] = args?.region;
            resourceInputs["releaseLabel"] = args?.releaseLabel;
            resourceInputs["repoUpgradeOnBoot"] = args?.repoUpgradeOnBoot;
            resourceInputs["retries"] = args?.retries;
            resourceInputs["scheduledTasks"] = args?.scheduledTasks;
            resourceInputs["securityConfig"] = args?.securityConfig;
            resourceInputs["serviceAccessSecurityGroup"] = args?.serviceAccessSecurityGroup;
            resourceInputs["serviceRole"] = args?.serviceRole;
            resourceInputs["stepsFiles"] = args?.stepsFiles;
            resourceInputs["strategy"] = args?.strategy;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taskDesiredCapacity"] = args?.taskDesiredCapacity;
            resourceInputs["taskEbsBlockDevices"] = args?.taskEbsBlockDevices;
            resourceInputs["taskEbsOptimized"] = args?.taskEbsOptimized;
            resourceInputs["taskInstanceTypes"] = args?.taskInstanceTypes;
            resourceInputs["taskLifecycle"] = args?.taskLifecycle;
            resourceInputs["taskMaxSize"] = args?.taskMaxSize;
            resourceInputs["taskMinSize"] = args?.taskMinSize;
            resourceInputs["taskScalingDownPolicies"] = args?.taskScalingDownPolicies;
            resourceInputs["taskScalingUpPolicies"] = args?.taskScalingUpPolicies;
            resourceInputs["taskUnit"] = args?.taskUnit;
            resourceInputs["terminationPolicies"] = args?.terminationPolicies;
            resourceInputs["terminationProtected"] = args?.terminationProtected;
            resourceInputs["visibleToAllUsers"] = args?.visibleToAllUsers;
            resourceInputs["outputClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MrScalar.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MrScalar resources.
 */
export interface MrScalarState {
    additionalInfo?: pulumi.Input<string>;
    additionalPrimarySecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    additionalReplicaSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    applications?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarApplication>[]>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    bootstrapActionsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarBootstrapActionsFile>[]>;
    /**
     * The MrScaler cluster id.
     */
    clusterId?: pulumi.Input<string>;
    configurationsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarConfigurationsFile>[]>;
    coreDesiredCapacity?: pulumi.Input<number>;
    coreEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreEbsBlockDevice>[]>;
    coreEbsOptimized?: pulumi.Input<boolean>;
    coreInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    coreLifecycle?: pulumi.Input<string>;
    coreMaxSize?: pulumi.Input<number>;
    coreMinSize?: pulumi.Input<number>;
    coreScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingDownPolicy>[]>;
    coreScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingUpPolicy>[]>;
    coreUnit?: pulumi.Input<string>;
    customAmiId?: pulumi.Input<string>;
    /**
     * The MrScaler description.
     */
    description?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    ec2KeyName?: pulumi.Input<string>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    exposeClusterId?: pulumi.Input<boolean>;
    instanceWeights?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarInstanceWeight>[]>;
    jobFlowRole?: pulumi.Input<string>;
    keepJobFlowAlive?: pulumi.Input<boolean>;
    logUri?: pulumi.Input<string>;
    managedPrimarySecurityGroup?: pulumi.Input<string>;
    managedReplicaSecurityGroup?: pulumi.Input<string>;
    masterEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarMasterEbsBlockDevice>[]>;
    masterEbsOptimized?: pulumi.Input<boolean>;
    masterInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    masterLifecycle?: pulumi.Input<string>;
    masterTarget?: pulumi.Input<number>;
    /**
     * The MrScaler name.
     */
    name?: pulumi.Input<string>;
    outputClusterId?: pulumi.Input<string>;
    provisioningTimeout?: pulumi.Input<inputs.aws.MrScalarProvisioningTimeout>;
    /**
     * The MrScaler region.
     */
    region?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    repoUpgradeOnBoot?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarScheduledTask>[]>;
    securityConfig?: pulumi.Input<string>;
    serviceAccessSecurityGroup?: pulumi.Input<string>;
    serviceRole?: pulumi.Input<string>;
    stepsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarStepsFile>[]>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    strategy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTag>[]>;
    taskDesiredCapacity?: pulumi.Input<number>;
    taskEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskEbsBlockDevice>[]>;
    taskEbsOptimized?: pulumi.Input<boolean>;
    taskInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    taskLifecycle?: pulumi.Input<string>;
    taskMaxSize?: pulumi.Input<number>;
    taskMinSize?: pulumi.Input<number>;
    taskScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingDownPolicy>[]>;
    taskScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingUpPolicy>[]>;
    taskUnit?: pulumi.Input<string>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTerminationPolicy>[]>;
    terminationProtected?: pulumi.Input<boolean>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MrScalar resource.
 */
export interface MrScalarArgs {
    additionalInfo?: pulumi.Input<string>;
    additionalPrimarySecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    additionalReplicaSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    applications?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarApplication>[]>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    bootstrapActionsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarBootstrapActionsFile>[]>;
    /**
     * The MrScaler cluster id.
     */
    clusterId?: pulumi.Input<string>;
    configurationsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarConfigurationsFile>[]>;
    coreDesiredCapacity?: pulumi.Input<number>;
    coreEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreEbsBlockDevice>[]>;
    coreEbsOptimized?: pulumi.Input<boolean>;
    coreInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    coreLifecycle?: pulumi.Input<string>;
    coreMaxSize?: pulumi.Input<number>;
    coreMinSize?: pulumi.Input<number>;
    coreScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingDownPolicy>[]>;
    coreScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarCoreScalingUpPolicy>[]>;
    coreUnit?: pulumi.Input<string>;
    customAmiId?: pulumi.Input<string>;
    /**
     * The MrScaler description.
     */
    description?: pulumi.Input<string>;
    ebsRootVolumeSize?: pulumi.Input<number>;
    ec2KeyName?: pulumi.Input<string>;
    /**
     * Allow the `clusterId` to set a provider output variable.
     */
    exposeClusterId?: pulumi.Input<boolean>;
    instanceWeights?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarInstanceWeight>[]>;
    jobFlowRole?: pulumi.Input<string>;
    keepJobFlowAlive?: pulumi.Input<boolean>;
    logUri?: pulumi.Input<string>;
    managedPrimarySecurityGroup?: pulumi.Input<string>;
    managedReplicaSecurityGroup?: pulumi.Input<string>;
    masterEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarMasterEbsBlockDevice>[]>;
    masterEbsOptimized?: pulumi.Input<boolean>;
    masterInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    masterLifecycle?: pulumi.Input<string>;
    masterTarget?: pulumi.Input<number>;
    /**
     * The MrScaler name.
     */
    name?: pulumi.Input<string>;
    provisioningTimeout?: pulumi.Input<inputs.aws.MrScalarProvisioningTimeout>;
    /**
     * The MrScaler region.
     */
    region?: pulumi.Input<string>;
    releaseLabel?: pulumi.Input<string>;
    repoUpgradeOnBoot?: pulumi.Input<string>;
    retries?: pulumi.Input<number>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarScheduledTask>[]>;
    securityConfig?: pulumi.Input<string>;
    serviceAccessSecurityGroup?: pulumi.Input<string>;
    serviceRole?: pulumi.Input<string>;
    stepsFiles?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarStepsFile>[]>;
    /**
     * The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
     */
    strategy: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTag>[]>;
    taskDesiredCapacity?: pulumi.Input<number>;
    taskEbsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskEbsBlockDevice>[]>;
    taskEbsOptimized?: pulumi.Input<boolean>;
    taskInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    taskLifecycle?: pulumi.Input<string>;
    taskMaxSize?: pulumi.Input<number>;
    taskMinSize?: pulumi.Input<number>;
    taskScalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingDownPolicy>[]>;
    taskScalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTaskScalingUpPolicy>[]>;
    taskUnit?: pulumi.Input<string>;
    /**
     * Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
     */
    terminationPolicies?: pulumi.Input<pulumi.Input<inputs.aws.MrScalarTerminationPolicy>[]>;
    terminationProtected?: pulumi.Input<boolean>;
    /**
     * @deprecated This field has been removed from our API and is no longer functional.
     */
    visibleToAllUsers?: pulumi.Input<boolean>;
}
