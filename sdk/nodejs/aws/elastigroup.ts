// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Spotinst AWS group resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * // Create an Elastigroup
 * const default_elastigroup = new spotinst.aws.Elastigroup("default-elastigroup", {
 *     name: "default-elastigroup",
 *     description: "created by Pulumi",
 *     product: "Linux/UNIX",
 *     maxSize: 0,
 *     minSize: 0,
 *     desiredCapacity: 0,
 *     capacityUnit: "weight",
 *     region: "us-west-2",
 *     subnetIds: [
 *         "sb-123456",
 *         "sb-456789",
 *     ],
 *     imageId: "ami-a27d8fda",
 *     iamInstanceProfile: "iam-profile",
 *     keyName: "my-key.ssh",
 *     securityGroups: ["sg-123456"],
 *     userData: "echo hello world",
 *     enableMonitoring: false,
 *     ebsOptimized: false,
 *     placementTenancy: "default",
 *     metadataOptions: {
 *         httpTokens: "optional",
 *         httpPutResponseHopLimit: 10,
 *         instanceMetadataTags: "enabled",
 *     },
 *     cpuOptions: {
 *         threadsPerCore: 1,
 *     },
 *     instanceTypesOndemand: "m3.2xlarge",
 *     instanceTypesSpots: [
 *         "m3.xlarge",
 *         "m3.2xlarge",
 *     ],
 *     instanceTypesPreferredSpots: ["m3.xlarge"],
 *     onDemandTypes: ["c3.large"],
 *     instanceTypesWeights: [
 *         {
 *             instanceType: "m3.xlarge",
 *             weight: 10,
 *         },
 *         {
 *             instanceType: "m3.2xlarge",
 *             weight: 16,
 *         },
 *     ],
 *     resourceRequirements: [{
 *         excludedInstanceFamilies: [
 *             "a",
 *             "m",
 *         ],
 *         excludedInstanceTypes: ["m3.large"],
 *         excludedInstanceGenerations: [
 *             "1",
 *             "2",
 *         ],
 *         requiredGpuMinimum: 1,
 *         requiredGpuMaximum: 16,
 *         requiredMemoryMinimum: 1,
 *         requiredMemoryMaximum: 512,
 *         requiredVcpuMinimum: 1,
 *         requiredVcpuMaximum: 64,
 *     }],
 *     orientation: "balanced",
 *     fallbackToOndemand: false,
 *     cpuCredits: "unlimited",
 *     minimumInstanceLifetime: 12,
 *     waitForCapacity: 5,
 *     waitForCapacityTimeout: 300,
 *     scalingStrategies: [{
 *         terminateAtEndOfBillingHour: true,
 *         terminationPolicy: "default",
 *     }],
 *     scalingUpPolicies: [{
 *         policyName: "Default Scaling Up Policy",
 *         metricName: "DefaultQueuesDepth",
 *         statistic: "average",
 *         unit: "none",
 *         adjustment: "1",
 *         namespace: "custom",
 *         threshold: 100,
 *         period: 60,
 *         evaluationPeriods: 5,
 *         cooldown: 300,
 *     }],
 *     scalingDownPolicies: [{
 *         policyName: "Default Scaling Down Policy",
 *         metricName: "DefaultQueuesDepth",
 *         statistic: "average",
 *         unit: "none",
 *         adjustment: "1",
 *         namespace: "custom",
 *         threshold: 10,
 *         period: 60,
 *         evaluationPeriods: 10,
 *         cooldown: 300,
 *     }],
 *     tags: [
 *         {
 *             key: "Env",
 *             value: "production",
 *         },
 *         {
 *             key: "Name",
 *             value: "default-production",
 *         },
 *         {
 *             key: "Project",
 *             value: "app_v2",
 *         },
 *     ],
 *     resourceTagSpecifications: [{
 *         shouldTagEnis: true,
 *         shouldTagVolumes: true,
 *         shouldTagSnapshots: true,
 *         shouldTagAmis: true,
 *     }],
 *     logging: {
 *         "export": {
 *             s3s: [{
 *                 id: "di-123456",
 *             }],
 *         },
 *     },
 * });
 * ```
 */
export class Elastigroup extends pulumi.CustomResource {
    /**
     * Get an existing Elastigroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElastigroupState, opts?: pulumi.CustomResourceOptions): Elastigroup {
        return new Elastigroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/elastigroup:Elastigroup';

    /**
     * Returns true if the given object is an instance of Elastigroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Elastigroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Elastigroup.__pulumiType;
    }

    /**
     * Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
     */
    public readonly autoHealing!: pulumi.Output<boolean | undefined>;
    /**
     * List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
     * Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
     * `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
     */
    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly blockDevicesMode!: pulumi.Output<string | undefined>;
    /**
     * The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
     */
    public readonly capacityUnit!: pulumi.Output<string>;
    public readonly considerOdPricing!: pulumi.Output<boolean | undefined>;
    /**
     * Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
     */
    public readonly cpuCredits!: pulumi.Output<string | undefined>;
    /**
     * The CPU options for the instances that are launched within the group:
     */
    public readonly cpuOptions!: pulumi.Output<outputs.aws.ElastigroupCpuOptions | undefined>;
    /**
     * The group description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The desired number of instances the group should have at any time.
     */
    public readonly desiredCapacity!: pulumi.Output<number | undefined>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    public readonly drainingTimeout!: pulumi.Output<number>;
    public readonly ebsBlockDevices!: pulumi.Output<outputs.aws.ElastigroupEbsBlockDevice[] | undefined>;
    /**
     * Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean>;
    /**
     * A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
     */
    public readonly elasticIps!: pulumi.Output<string[] | undefined>;
    public readonly elasticLoadBalancers!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether monitoring is enabled for the instance.
     */
    public readonly enableMonitoring!: pulumi.Output<boolean | undefined>;
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.aws.ElastigroupEphemeralBlockDevice[] | undefined>;
    /**
     * In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
     */
    public readonly fallbackToOndemand!: pulumi.Output<boolean>;
    /**
     * The amount of time, in seconds, after the instance has launched to starts and check its health.
     */
    public readonly healthCheckGracePeriod!: pulumi.Output<number | undefined>;
    /**
     * The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
     */
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
     */
    public readonly healthCheckUnhealthyDurationBeforeReplacement!: pulumi.Output<number | undefined>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    /**
     * The ID of the AMI used to launch the instance.
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    /**
     * An array of image objects.
     * Note: Elastigroup can be configured with either imageId or images, but not both.
     */
    public readonly images!: pulumi.Output<outputs.aws.ElastigroupImage[] | undefined>;
    public readonly immediateOdRecoverThreshold!: pulumi.Output<number | undefined>;
    /**
     * The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
     */
    public readonly instanceTypesOndemand!: pulumi.Output<string | undefined>;
    /**
     * Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
     */
    public readonly instanceTypesPreferredSpots!: pulumi.Output<string[] | undefined>;
    /**
     * One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
     */
    public readonly instanceTypesSpots!: pulumi.Output<string[] | undefined>;
    /**
     * List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
     */
    public readonly instanceTypesWeights!: pulumi.Output<outputs.aws.ElastigroupInstanceTypesWeight[] | undefined>;
    public readonly integrationBeanstalk!: pulumi.Output<outputs.aws.ElastigroupIntegrationBeanstalk | undefined>;
    public readonly integrationCodedeploy!: pulumi.Output<outputs.aws.ElastigroupIntegrationCodedeploy | undefined>;
    public readonly integrationDockerSwarm!: pulumi.Output<outputs.aws.ElastigroupIntegrationDockerSwarm | undefined>;
    public readonly integrationEcs!: pulumi.Output<outputs.aws.ElastigroupIntegrationEcs | undefined>;
    public readonly integrationGitlab!: pulumi.Output<outputs.aws.ElastigroupIntegrationGitlab | undefined>;
    public readonly integrationKubernetes!: pulumi.Output<outputs.aws.ElastigroupIntegrationKubernetes | undefined>;
    public readonly integrationMesosphere!: pulumi.Output<outputs.aws.ElastigroupIntegrationMesosphere | undefined>;
    public readonly integrationNomad!: pulumi.Output<outputs.aws.ElastigroupIntegrationNomad | undefined>;
    public readonly integrationRancher!: pulumi.Output<outputs.aws.ElastigroupIntegrationRancher | undefined>;
    public readonly integrationRoute53!: pulumi.Output<outputs.aws.ElastigroupIntegrationRoute53 | undefined>;
    public readonly itfs!: pulumi.Output<outputs.aws.ElastigroupItf[] | undefined>;
    /**
     * The key name that should be used for the instance.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    public readonly lifetimePeriod!: pulumi.Output<string | undefined>;
    /**
     * Logging configuration.
     */
    public readonly logging!: pulumi.Output<outputs.aws.ElastigroupLogging | undefined>;
    /**
     * The maximum number of instances the group should have at any time.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * Data that used to configure or manage the running instances:
     */
    public readonly metadataOptions!: pulumi.Output<outputs.aws.ElastigroupMetadataOptions | undefined>;
    /**
     * The minimum number of instances the group should have at any time.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
     */
    public readonly minimumInstanceLifetime!: pulumi.Output<number | undefined>;
    public readonly multipleMetrics!: pulumi.Output<outputs.aws.ElastigroupMultipleMetrics | undefined>;
    /**
     * The group name.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.aws.ElastigroupNetworkInterface[] | undefined>;
    /**
     * Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
     */
    public readonly onDemandTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
     */
    public readonly ondemandCount!: pulumi.Output<number | undefined>;
    /**
     * Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
     */
    public readonly orientation!: pulumi.Output<string>;
    public readonly persistBlockDevices!: pulumi.Output<boolean | undefined>;
    public readonly persistPrivateIp!: pulumi.Output<boolean | undefined>;
    public readonly persistRootDevice!: pulumi.Output<boolean | undefined>;
    /**
     * Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
     */
    public readonly placementTenancy!: pulumi.Output<string | undefined>;
    /**
     * The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
     * Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
     */
    public readonly preferredAvailabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly privateIps!: pulumi.Output<string[] | undefined>;
    /**
     * Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
     * For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
     */
    public readonly product!: pulumi.Output<string>;
    /**
     * The AWS region your group will be created in.
     * Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Required instance attributes. Instance types will be selected based on these requirements.
     */
    public readonly resourceRequirements!: pulumi.Output<outputs.aws.ElastigroupResourceRequirement[] | undefined>;
    /**
     * User will specify which resources should be tagged with group tags.
     */
    public readonly resourceTagSpecifications!: pulumi.Output<outputs.aws.ElastigroupResourceTagSpecification[] | undefined>;
    /**
     * Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
     */
    public readonly restrictSingleAz!: pulumi.Output<boolean | undefined>;
    /**
     * Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
     */
    public readonly revertToSpot!: pulumi.Output<outputs.aws.ElastigroupRevertToSpot | undefined>;
    public readonly scalingDownPolicies!: pulumi.Output<outputs.aws.ElastigroupScalingDownPolicy[] | undefined>;
    /**
     * Set termination policy.
     */
    public readonly scalingStrategies!: pulumi.Output<outputs.aws.ElastigroupScalingStrategy[] | undefined>;
    public readonly scalingTargetPolicies!: pulumi.Output<outputs.aws.ElastigroupScalingTargetPolicy[] | undefined>;
    public readonly scalingUpPolicies!: pulumi.Output<outputs.aws.ElastigroupScalingUpPolicy[] | undefined>;
    public readonly scheduledTasks!: pulumi.Output<outputs.aws.ElastigroupScheduledTask[] | undefined>;
    /**
     * A list of associated security group IDS.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
     */
    public readonly shutdownScript!: pulumi.Output<string | undefined>;
    public readonly signals!: pulumi.Output<outputs.aws.ElastigroupSignal[] | undefined>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    public readonly spotPercentage!: pulumi.Output<number | undefined>;
    public readonly statefulDeallocation!: pulumi.Output<outputs.aws.ElastigroupStatefulDeallocation | undefined>;
    public readonly statefulInstanceActions!: pulumi.Output<outputs.aws.ElastigroupStatefulInstanceAction[] | undefined>;
    /**
     * List of Strings of subnet identifiers.
     * Note: When this parameter is set, `availabilityZones` should be left unused.
     */
    public readonly subnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    public readonly tags!: pulumi.Output<outputs.aws.ElastigroupTag[] | undefined>;
    public readonly targetGroupArns!: pulumi.Output<string[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.aws.ElastigroupUpdatePolicy | undefined>;
    /**
     * The user data to provide when launching the instance.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly utilizeCommitments!: pulumi.Output<boolean | undefined>;
    /**
     * In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
     */
    public readonly utilizeReservedInstances!: pulumi.Output<boolean | undefined>;
    /**
     * Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
     */
    public readonly waitForCapacity!: pulumi.Output<number | undefined>;
    /**
     * Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
     */
    public readonly waitForCapacityTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Elastigroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElastigroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElastigroupArgs | ElastigroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElastigroupState | undefined;
            resourceInputs["autoHealing"] = state ? state.autoHealing : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["blockDevicesMode"] = state ? state.blockDevicesMode : undefined;
            resourceInputs["capacityUnit"] = state ? state.capacityUnit : undefined;
            resourceInputs["considerOdPricing"] = state ? state.considerOdPricing : undefined;
            resourceInputs["cpuCredits"] = state ? state.cpuCredits : undefined;
            resourceInputs["cpuOptions"] = state ? state.cpuOptions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["drainingTimeout"] = state ? state.drainingTimeout : undefined;
            resourceInputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["elasticIps"] = state ? state.elasticIps : undefined;
            resourceInputs["elasticLoadBalancers"] = state ? state.elasticLoadBalancers : undefined;
            resourceInputs["enableMonitoring"] = state ? state.enableMonitoring : undefined;
            resourceInputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            resourceInputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            resourceInputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthCheckUnhealthyDurationBeforeReplacement"] = state ? state.healthCheckUnhealthyDurationBeforeReplacement : undefined;
            resourceInputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["immediateOdRecoverThreshold"] = state ? state.immediateOdRecoverThreshold : undefined;
            resourceInputs["instanceTypesOndemand"] = state ? state.instanceTypesOndemand : undefined;
            resourceInputs["instanceTypesPreferredSpots"] = state ? state.instanceTypesPreferredSpots : undefined;
            resourceInputs["instanceTypesSpots"] = state ? state.instanceTypesSpots : undefined;
            resourceInputs["instanceTypesWeights"] = state ? state.instanceTypesWeights : undefined;
            resourceInputs["integrationBeanstalk"] = state ? state.integrationBeanstalk : undefined;
            resourceInputs["integrationCodedeploy"] = state ? state.integrationCodedeploy : undefined;
            resourceInputs["integrationDockerSwarm"] = state ? state.integrationDockerSwarm : undefined;
            resourceInputs["integrationEcs"] = state ? state.integrationEcs : undefined;
            resourceInputs["integrationGitlab"] = state ? state.integrationGitlab : undefined;
            resourceInputs["integrationKubernetes"] = state ? state.integrationKubernetes : undefined;
            resourceInputs["integrationMesosphere"] = state ? state.integrationMesosphere : undefined;
            resourceInputs["integrationNomad"] = state ? state.integrationNomad : undefined;
            resourceInputs["integrationRancher"] = state ? state.integrationRancher : undefined;
            resourceInputs["integrationRoute53"] = state ? state.integrationRoute53 : undefined;
            resourceInputs["itfs"] = state ? state.itfs : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["lifetimePeriod"] = state ? state.lifetimePeriod : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["metadataOptions"] = state ? state.metadataOptions : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["minimumInstanceLifetime"] = state ? state.minimumInstanceLifetime : undefined;
            resourceInputs["multipleMetrics"] = state ? state.multipleMetrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["onDemandTypes"] = state ? state.onDemandTypes : undefined;
            resourceInputs["ondemandCount"] = state ? state.ondemandCount : undefined;
            resourceInputs["orientation"] = state ? state.orientation : undefined;
            resourceInputs["persistBlockDevices"] = state ? state.persistBlockDevices : undefined;
            resourceInputs["persistPrivateIp"] = state ? state.persistPrivateIp : undefined;
            resourceInputs["persistRootDevice"] = state ? state.persistRootDevice : undefined;
            resourceInputs["placementTenancy"] = state ? state.placementTenancy : undefined;
            resourceInputs["preferredAvailabilityZones"] = state ? state.preferredAvailabilityZones : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceRequirements"] = state ? state.resourceRequirements : undefined;
            resourceInputs["resourceTagSpecifications"] = state ? state.resourceTagSpecifications : undefined;
            resourceInputs["restrictSingleAz"] = state ? state.restrictSingleAz : undefined;
            resourceInputs["revertToSpot"] = state ? state.revertToSpot : undefined;
            resourceInputs["scalingDownPolicies"] = state ? state.scalingDownPolicies : undefined;
            resourceInputs["scalingStrategies"] = state ? state.scalingStrategies : undefined;
            resourceInputs["scalingTargetPolicies"] = state ? state.scalingTargetPolicies : undefined;
            resourceInputs["scalingUpPolicies"] = state ? state.scalingUpPolicies : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["shutdownScript"] = state ? state.shutdownScript : undefined;
            resourceInputs["signals"] = state ? state.signals : undefined;
            resourceInputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            resourceInputs["statefulDeallocation"] = state ? state.statefulDeallocation : undefined;
            resourceInputs["statefulInstanceActions"] = state ? state.statefulInstanceActions : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["utilizeCommitments"] = state ? state.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = state ? state.utilizeReservedInstances : undefined;
            resourceInputs["waitForCapacity"] = state ? state.waitForCapacity : undefined;
            resourceInputs["waitForCapacityTimeout"] = state ? state.waitForCapacityTimeout : undefined;
        } else {
            const args = argsOrState as ElastigroupArgs | undefined;
            if ((!args || args.fallbackToOndemand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fallbackToOndemand'");
            }
            if ((!args || args.orientation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orientation'");
            }
            if ((!args || args.product === undefined) && !opts.urn) {
                throw new Error("Missing required property 'product'");
            }
            if ((!args || args.securityGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroups'");
            }
            resourceInputs["autoHealing"] = args ? args.autoHealing : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["blockDevicesMode"] = args ? args.blockDevicesMode : undefined;
            resourceInputs["capacityUnit"] = args ? args.capacityUnit : undefined;
            resourceInputs["considerOdPricing"] = args ? args.considerOdPricing : undefined;
            resourceInputs["cpuCredits"] = args ? args.cpuCredits : undefined;
            resourceInputs["cpuOptions"] = args ? args.cpuOptions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["drainingTimeout"] = args ? args.drainingTimeout : undefined;
            resourceInputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["elasticIps"] = args ? args.elasticIps : undefined;
            resourceInputs["elasticLoadBalancers"] = args ? args.elasticLoadBalancers : undefined;
            resourceInputs["enableMonitoring"] = args ? args.enableMonitoring : undefined;
            resourceInputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            resourceInputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            resourceInputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthCheckUnhealthyDurationBeforeReplacement"] = args ? args.healthCheckUnhealthyDurationBeforeReplacement : undefined;
            resourceInputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["immediateOdRecoverThreshold"] = args ? args.immediateOdRecoverThreshold : undefined;
            resourceInputs["instanceTypesOndemand"] = args ? args.instanceTypesOndemand : undefined;
            resourceInputs["instanceTypesPreferredSpots"] = args ? args.instanceTypesPreferredSpots : undefined;
            resourceInputs["instanceTypesSpots"] = args ? args.instanceTypesSpots : undefined;
            resourceInputs["instanceTypesWeights"] = args ? args.instanceTypesWeights : undefined;
            resourceInputs["integrationBeanstalk"] = args ? args.integrationBeanstalk : undefined;
            resourceInputs["integrationCodedeploy"] = args ? args.integrationCodedeploy : undefined;
            resourceInputs["integrationDockerSwarm"] = args ? args.integrationDockerSwarm : undefined;
            resourceInputs["integrationEcs"] = args ? args.integrationEcs : undefined;
            resourceInputs["integrationGitlab"] = args ? args.integrationGitlab : undefined;
            resourceInputs["integrationKubernetes"] = args ? args.integrationKubernetes : undefined;
            resourceInputs["integrationMesosphere"] = args ? args.integrationMesosphere : undefined;
            resourceInputs["integrationNomad"] = args ? args.integrationNomad : undefined;
            resourceInputs["integrationRancher"] = args ? args.integrationRancher : undefined;
            resourceInputs["integrationRoute53"] = args ? args.integrationRoute53 : undefined;
            resourceInputs["itfs"] = args ? args.itfs : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["lifetimePeriod"] = args ? args.lifetimePeriod : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["metadataOptions"] = args ? args.metadataOptions : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["minimumInstanceLifetime"] = args ? args.minimumInstanceLifetime : undefined;
            resourceInputs["multipleMetrics"] = args ? args.multipleMetrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["onDemandTypes"] = args ? args.onDemandTypes : undefined;
            resourceInputs["ondemandCount"] = args ? args.ondemandCount : undefined;
            resourceInputs["orientation"] = args ? args.orientation : undefined;
            resourceInputs["persistBlockDevices"] = args ? args.persistBlockDevices : undefined;
            resourceInputs["persistPrivateIp"] = args ? args.persistPrivateIp : undefined;
            resourceInputs["persistRootDevice"] = args ? args.persistRootDevice : undefined;
            resourceInputs["placementTenancy"] = args ? args.placementTenancy : undefined;
            resourceInputs["preferredAvailabilityZones"] = args ? args.preferredAvailabilityZones : undefined;
            resourceInputs["privateIps"] = args ? args.privateIps : undefined;
            resourceInputs["product"] = args ? args.product : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceRequirements"] = args ? args.resourceRequirements : undefined;
            resourceInputs["resourceTagSpecifications"] = args ? args.resourceTagSpecifications : undefined;
            resourceInputs["restrictSingleAz"] = args ? args.restrictSingleAz : undefined;
            resourceInputs["revertToSpot"] = args ? args.revertToSpot : undefined;
            resourceInputs["scalingDownPolicies"] = args ? args.scalingDownPolicies : undefined;
            resourceInputs["scalingStrategies"] = args ? args.scalingStrategies : undefined;
            resourceInputs["scalingTargetPolicies"] = args ? args.scalingTargetPolicies : undefined;
            resourceInputs["scalingUpPolicies"] = args ? args.scalingUpPolicies : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["shutdownScript"] = args ? args.shutdownScript : undefined;
            resourceInputs["signals"] = args ? args.signals : undefined;
            resourceInputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            resourceInputs["statefulDeallocation"] = args ? args.statefulDeallocation : undefined;
            resourceInputs["statefulInstanceActions"] = args ? args.statefulInstanceActions : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetGroupArns"] = args ? args.targetGroupArns : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["utilizeCommitments"] = args ? args.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = args ? args.utilizeReservedInstances : undefined;
            resourceInputs["waitForCapacity"] = args ? args.waitForCapacity : undefined;
            resourceInputs["waitForCapacityTimeout"] = args ? args.waitForCapacityTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Elastigroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Elastigroup resources.
 */
export interface ElastigroupState {
    /**
     * Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
     */
    autoHealing?: pulumi.Input<boolean>;
    /**
     * List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
     * Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
     * `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    blockDevicesMode?: pulumi.Input<string>;
    /**
     * The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
     */
    capacityUnit?: pulumi.Input<string>;
    considerOdPricing?: pulumi.Input<boolean>;
    /**
     * Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
     */
    cpuCredits?: pulumi.Input<string>;
    /**
     * The CPU options for the instances that are launched within the group:
     */
    cpuOptions?: pulumi.Input<inputs.aws.ElastigroupCpuOptions>;
    /**
     * The group description.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired number of instances the group should have at any time.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupEbsBlockDevice>[]>;
    /**
     * Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
     */
    elasticIps?: pulumi.Input<pulumi.Input<string>[]>;
    elasticLoadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether monitoring is enabled for the instance.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupEphemeralBlockDevice>[]>;
    /**
     * In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after the instance has launched to starts and check its health.
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
     */
    healthCheckUnhealthyDurationBeforeReplacement?: pulumi.Input<number>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * The ID of the AMI used to launch the instance.
     */
    imageId?: pulumi.Input<string>;
    /**
     * An array of image objects.
     * Note: Elastigroup can be configured with either imageId or images, but not both.
     */
    images?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupImage>[]>;
    immediateOdRecoverThreshold?: pulumi.Input<number>;
    /**
     * The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
     */
    instanceTypesOndemand?: pulumi.Input<string>;
    /**
     * Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
     */
    instanceTypesPreferredSpots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
     */
    instanceTypesSpots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
     */
    instanceTypesWeights?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupInstanceTypesWeight>[]>;
    integrationBeanstalk?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalk>;
    integrationCodedeploy?: pulumi.Input<inputs.aws.ElastigroupIntegrationCodedeploy>;
    integrationDockerSwarm?: pulumi.Input<inputs.aws.ElastigroupIntegrationDockerSwarm>;
    integrationEcs?: pulumi.Input<inputs.aws.ElastigroupIntegrationEcs>;
    integrationGitlab?: pulumi.Input<inputs.aws.ElastigroupIntegrationGitlab>;
    integrationKubernetes?: pulumi.Input<inputs.aws.ElastigroupIntegrationKubernetes>;
    integrationMesosphere?: pulumi.Input<inputs.aws.ElastigroupIntegrationMesosphere>;
    integrationNomad?: pulumi.Input<inputs.aws.ElastigroupIntegrationNomad>;
    integrationRancher?: pulumi.Input<inputs.aws.ElastigroupIntegrationRancher>;
    integrationRoute53?: pulumi.Input<inputs.aws.ElastigroupIntegrationRoute53>;
    itfs?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItf>[]>;
    /**
     * The key name that should be used for the instance.
     */
    keyName?: pulumi.Input<string>;
    lifetimePeriod?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.aws.ElastigroupLogging>;
    /**
     * The maximum number of instances the group should have at any time.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Data that used to configure or manage the running instances:
     */
    metadataOptions?: pulumi.Input<inputs.aws.ElastigroupMetadataOptions>;
    /**
     * The minimum number of instances the group should have at any time.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
     */
    minimumInstanceLifetime?: pulumi.Input<number>;
    multipleMetrics?: pulumi.Input<inputs.aws.ElastigroupMultipleMetrics>;
    /**
     * The group name.
     */
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupNetworkInterface>[]>;
    /**
     * Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
     */
    onDemandTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
     */
    ondemandCount?: pulumi.Input<number>;
    /**
     * Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
     */
    orientation?: pulumi.Input<string>;
    persistBlockDevices?: pulumi.Input<boolean>;
    persistPrivateIp?: pulumi.Input<boolean>;
    persistRootDevice?: pulumi.Input<boolean>;
    /**
     * Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
     */
    placementTenancy?: pulumi.Input<string>;
    /**
     * The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
     * Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
     */
    preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
     * For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
     */
    product?: pulumi.Input<string>;
    /**
     * The AWS region your group will be created in.
     * Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
     */
    region?: pulumi.Input<string>;
    /**
     * Required instance attributes. Instance types will be selected based on these requirements.
     */
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupResourceRequirement>[]>;
    /**
     * User will specify which resources should be tagged with group tags.
     */
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupResourceTagSpecification>[]>;
    /**
     * Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
     */
    restrictSingleAz?: pulumi.Input<boolean>;
    /**
     * Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
     */
    revertToSpot?: pulumi.Input<inputs.aws.ElastigroupRevertToSpot>;
    scalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingDownPolicy>[]>;
    /**
     * Set termination policy.
     */
    scalingStrategies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingStrategy>[]>;
    scalingTargetPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingTargetPolicy>[]>;
    scalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingUpPolicy>[]>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScheduledTask>[]>;
    /**
     * A list of associated security group IDS.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
     */
    shutdownScript?: pulumi.Input<string>;
    signals?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupSignal>[]>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    spotPercentage?: pulumi.Input<number>;
    statefulDeallocation?: pulumi.Input<inputs.aws.ElastigroupStatefulDeallocation>;
    statefulInstanceActions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupStatefulInstanceAction>[]>;
    /**
     * List of Strings of subnet identifiers.
     * Note: When this parameter is set, `availabilityZones` should be left unused.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupTag>[]>;
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.ElastigroupUpdatePolicy>;
    /**
     * The user data to provide when launching the instance.
     */
    userData?: pulumi.Input<string>;
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    /**
     * Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
     */
    waitForCapacity?: pulumi.Input<number>;
    /**
     * Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
     */
    waitForCapacityTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Elastigroup resource.
 */
export interface ElastigroupArgs {
    /**
     * Auto-healing replacement won't be triggered if this parameter value is "false". In a case of a stateful group - no recycling will start if this parameter value is "false".
     */
    autoHealing?: pulumi.Input<boolean>;
    /**
     * List of Strings of availability zones. When this parameter is set, `subnetIds` should be left unused.
     * Note: `availabilityZones` naming syntax follows the convention `availability-zone:subnet:placement-group-name`. For example, to set an AZ in `us-east-1` with subnet `subnet-123456` and placement group `ClusterI03`, you would set:
     * `availabilityZones = ["us-east-1a:subnet-123456:ClusterI03"]`
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    blockDevicesMode?: pulumi.Input<string>;
    /**
     * The capacity unit to launch instances by. If not specified, when choosing the weight unit, each instance will weight as the number of its vCPUs. Valid values: `instance`, `weight`.
     */
    capacityUnit?: pulumi.Input<string>;
    considerOdPricing?: pulumi.Input<boolean>;
    /**
     * Controls how T3 instances are launched. Valid values: `standard`, `unlimited`.
     */
    cpuCredits?: pulumi.Input<string>;
    /**
     * The CPU options for the instances that are launched within the group:
     */
    cpuOptions?: pulumi.Input<inputs.aws.ElastigroupCpuOptions>;
    /**
     * The group description.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired number of instances the group should have at any time.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupEbsBlockDevice>[]>;
    /**
     * Enable high bandwidth connectivity between instances and AWSâ€™s Elastic Block Store (EBS). For instance types that are EBS-optimized by default this parameter will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * A list of [AWS Elastic IP](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) allocation IDs to associate to the group instances.
     */
    elasticIps?: pulumi.Input<pulumi.Input<string>[]>;
    elasticLoadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether monitoring is enabled for the instance.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupEphemeralBlockDevice>[]>;
    /**
     * In a case of no Spot instances available, Elastigroup will launch on-demand instances instead.
     */
    fallbackToOndemand: pulumi.Input<boolean>;
    /**
     * The amount of time, in seconds, after the instance has launched to starts and check its health.
     */
    healthCheckGracePeriod?: pulumi.Input<number>;
    /**
     * The service that will perform health checks for the instance. Valid values: `"ELB"`, `"HCS"`, `"TARGET_GROUP"`, `"EC2"`, `"K8S_NODE"`, `"NOMAD_NODE"`, `"ECS_CLUSTER_INSTANCE"`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, that we will wait before replacing an instance that is running and became unhealthy (this is only applicable for instances that were once healthy).
     */
    healthCheckUnhealthyDurationBeforeReplacement?: pulumi.Input<number>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * The ID of the AMI used to launch the instance.
     */
    imageId?: pulumi.Input<string>;
    /**
     * An array of image objects.
     * Note: Elastigroup can be configured with either imageId or images, but not both.
     */
    images?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupImage>[]>;
    immediateOdRecoverThreshold?: pulumi.Input<number>;
    /**
     * The type of instance determines your instance's CPU capacity, memory and storage (e.g., m1.small, c1.xlarge).
     */
    instanceTypesOndemand?: pulumi.Input<string>;
    /**
     * Prioritize a subset of spot instance types. Must be a subset of the selected spot instance types.
     */
    instanceTypesPreferredSpots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more instance types. Note: Cannot be defined if 'resourceRequirements' is defined.
     */
    instanceTypesSpots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of weights per instance type for weighted groups. Each object in the list should have the following attributes:
     */
    instanceTypesWeights?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupInstanceTypesWeight>[]>;
    integrationBeanstalk?: pulumi.Input<inputs.aws.ElastigroupIntegrationBeanstalk>;
    integrationCodedeploy?: pulumi.Input<inputs.aws.ElastigroupIntegrationCodedeploy>;
    integrationDockerSwarm?: pulumi.Input<inputs.aws.ElastigroupIntegrationDockerSwarm>;
    integrationEcs?: pulumi.Input<inputs.aws.ElastigroupIntegrationEcs>;
    integrationGitlab?: pulumi.Input<inputs.aws.ElastigroupIntegrationGitlab>;
    integrationKubernetes?: pulumi.Input<inputs.aws.ElastigroupIntegrationKubernetes>;
    integrationMesosphere?: pulumi.Input<inputs.aws.ElastigroupIntegrationMesosphere>;
    integrationNomad?: pulumi.Input<inputs.aws.ElastigroupIntegrationNomad>;
    integrationRancher?: pulumi.Input<inputs.aws.ElastigroupIntegrationRancher>;
    integrationRoute53?: pulumi.Input<inputs.aws.ElastigroupIntegrationRoute53>;
    itfs?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupItf>[]>;
    /**
     * The key name that should be used for the instance.
     */
    keyName?: pulumi.Input<string>;
    lifetimePeriod?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.aws.ElastigroupLogging>;
    /**
     * The maximum number of instances the group should have at any time.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Data that used to configure or manage the running instances:
     */
    metadataOptions?: pulumi.Input<inputs.aws.ElastigroupMetadataOptions>;
    /**
     * The minimum number of instances the group should have at any time.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Defines the preferred minimum instance lifetime in hours. Markets which comply with this preference will be prioritized. Optional values: 1, 3, 6, 12, 24.
     */
    minimumInstanceLifetime?: pulumi.Input<number>;
    multipleMetrics?: pulumi.Input<inputs.aws.ElastigroupMultipleMetrics>;
    /**
     * The group name.
     */
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupNetworkInterface>[]>;
    /**
     * Available ondemand instance types. Note: Either ondemand or onDemandTypes must be defined, but not both.
     */
    onDemandTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of on demand instances to launch in the group. All other instances will be spot instances. When this parameter is set the `spotPercentage` parameter is being ignored.
     */
    ondemandCount?: pulumi.Input<number>;
    /**
     * Select a prediction strategy. Valid values: `balanced`, `costOriented`, `equalAzDistribution`, `availabilityOriented`. You can read more in our documentation.
     */
    orientation: pulumi.Input<string>;
    persistBlockDevices?: pulumi.Input<boolean>;
    persistPrivateIp?: pulumi.Input<boolean>;
    persistRootDevice?: pulumi.Input<boolean>;
    /**
     * Enable dedicated tenancy. Note: There is a flat hourly fee for each region in which dedicated tenancy is used. Valid values: "default", "dedicated" .
     */
    placementTenancy?: pulumi.Input<string>;
    /**
     * The AZs to prioritize when launching Spot instances. If no markets are available in the Preferred AZs, Spot instances are launched in the non-preferred AZs.
     * Note: Must be a sublist of `availabilityZones` and `orientation` value must not be `"equalAzDistribution"`.
     */
    preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Operation system type. Valid values: `"Linux/UNIX"`, `"SUSE Linux"`, `"Windows"`.
     * For EC2 Classic instances:  `"Linux/UNIX (Amazon VPC)"`, `"SUSE Linux (Amazon VPC)"`, `"Windows (Amazon VPC)"`.
     */
    product: pulumi.Input<string>;
    /**
     * The AWS region your group will be created in.
     * Note: This parameter is required if you specify subnets (through subnet_ids). This parameter is optional if you specify Availability Zones (through availability_zones).
     */
    region?: pulumi.Input<string>;
    /**
     * Required instance attributes. Instance types will be selected based on these requirements.
     */
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupResourceRequirement>[]>;
    /**
     * User will specify which resources should be tagged with group tags.
     */
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupResourceTagSpecification>[]>;
    /**
     * Elastigroup will automatically scale your instances in the most available and cost efficient availability zone. Every evaluation will be done when there are no active instances in the group.
     */
    restrictSingleAz?: pulumi.Input<boolean>;
    /**
     * Hold settings for strategy correction â€“ replacing On-Demand for Spot instances. Supported Values: `"never"`, `"always"`, `"timeWindow"`
     */
    revertToSpot?: pulumi.Input<inputs.aws.ElastigroupRevertToSpot>;
    scalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingDownPolicy>[]>;
    /**
     * Set termination policy.
     */
    scalingStrategies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingStrategy>[]>;
    scalingTargetPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingTargetPolicy>[]>;
    scalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScalingUpPolicy>[]>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupScheduledTask>[]>;
    /**
     * A list of associated security group IDS.
     */
    securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Base64-encoded shutdown script that executes prior to instance termination, for more information please see: [Shutdown Script](https://api.spotinst.com/integration-docs/elastigroup/concepts/compute-concepts/shutdown-scripts/)
     */
    shutdownScript?: pulumi.Input<string>;
    signals?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupSignal>[]>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    spotPercentage?: pulumi.Input<number>;
    statefulDeallocation?: pulumi.Input<inputs.aws.ElastigroupStatefulDeallocation>;
    statefulInstanceActions?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupStatefulInstanceAction>[]>;
    /**
     * List of Strings of subnet identifiers.
     * Note: When this parameter is set, `availabilityZones` should be left unused.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.ElastigroupTag>[]>;
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.ElastigroupUpdatePolicy>;
    /**
     * The user data to provide when launching the instance.
     */
    userData?: pulumi.Input<string>;
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * In a case of any available reserved instances, Elastigroup will utilize them first before purchasing Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    /**
     * Minimum number of instances in a 'HEALTHY' status that is required before continuing. This is ignored when updating with blue/green deployment. Cannot exceed `desiredCapacity`.
     */
    waitForCapacity?: pulumi.Input<number>;
    /**
     * Time (seconds) to wait for instances to report a 'HEALTHY' status. Useful for plans with multiple dependencies that take some time to initialize. Leave undefined or set to `0` to indicate no wait. This is ignored when updating with blue/green deployment.
     */
    waitForCapacityTimeout?: pulumi.Input<number>;
}
