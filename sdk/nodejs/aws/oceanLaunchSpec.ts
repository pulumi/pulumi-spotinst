// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst Ocean AWS [Virtual Node Group](https://docs.spot.io/ocean/features/launch-specifications) resource.
 *
 * ## Import
 *
 * Launch_Specs can be imported using the Launch_Spec `id`, e.g.,
 *
 * hcl
 *
 * ```sh
 * $ pulumi import spotinst:aws/oceanLaunchSpec:OceanLaunchSpec nameOfTheResource ols-1a2b576
 * ```
 */
export class OceanLaunchSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceanLaunchSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions): OceanLaunchSpec {
        return new OceanLaunchSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/oceanLaunchSpec:OceanLaunchSpec';

    /**
     * Returns true if the given object is an instance of OceanLaunchSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanLaunchSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanLaunchSpec.__pulumiType;
    }

    /**
     * Configure public IP address allocation.
     */
    declare public readonly associatePublicIpAddress: pulumi.Output<boolean | undefined>;
    /**
     * Auto Scaling scale down operations.
     */
    declare public readonly autoscaleDowns: pulumi.Output<outputs.aws.OceanLaunchSpecAutoscaleDown[] | undefined>;
    /**
     * Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
     */
    declare public readonly autoscaleHeadrooms: pulumi.Output<outputs.aws.OceanLaunchSpecAutoscaleHeadroom[] | undefined>;
    /**
     * Set automatic headroom per launch spec.
     */
    declare public readonly autoscaleHeadroomsAutomatics: pulumi.Output<outputs.aws.OceanLaunchSpecAutoscaleHeadroomsAutomatic[] | undefined>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    declare public readonly blockDeviceMappings: pulumi.Output<outputs.aws.OceanLaunchSpecBlockDeviceMapping[] | undefined>;
    declare public readonly createOptions: pulumi.Output<outputs.aws.OceanLaunchSpecCreateOptions | undefined>;
    declare public readonly deleteOptions: pulumi.Output<outputs.aws.OceanLaunchSpecDeleteOptions | undefined>;
    /**
     * Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
     */
    declare public readonly elasticIpPools: pulumi.Output<outputs.aws.OceanLaunchSpecElasticIpPool[] | undefined>;
    declare public readonly ephemeralStorages: pulumi.Output<outputs.aws.OceanLaunchSpecEphemeralStorage[] | undefined>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    declare public readonly iamInstanceProfile: pulumi.Output<string | undefined>;
    /**
     * ID of the image used to launch the instances.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
     * For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
     */
    declare public readonly images: pulumi.Output<outputs.aws.OceanLaunchSpecImage[] | undefined>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    declare public readonly instanceMetadataOptions: pulumi.Output<outputs.aws.OceanLaunchSpecInstanceMetadataOptions | undefined>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    declare public readonly instanceStorePolicy: pulumi.Output<outputs.aws.OceanLaunchSpecInstanceStorePolicy | undefined>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
     */
    declare public readonly instanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
     * The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
     */
    declare public readonly instanceTypesFilters: pulumi.Output<outputs.aws.OceanLaunchSpecInstanceTypesFilters | undefined>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    declare public readonly labels: pulumi.Output<outputs.aws.OceanLaunchSpecLabel[] | undefined>;
    /**
     * The name of the Virtual Node Group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the Ocean cluster.
     */
    declare public readonly oceanId: pulumi.Output<string>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    declare public readonly preferredOdTypes: pulumi.Output<string[] | undefined>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    declare public readonly preferredSpotTypes: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    declare public readonly reservedEnis: pulumi.Output<number | undefined>;
    declare public readonly resourceLimits: pulumi.Output<outputs.aws.OceanLaunchSpecResourceLimit[] | undefined>;
    /**
     * Boolean. When set to `true`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    declare public readonly restrictScaleDown: pulumi.Output<boolean | undefined>;
    /**
     * Set root volume size (in GB).
     */
    declare public readonly rootVolumeSize: pulumi.Output<number | undefined>;
    /**
     * Used to specify times that the nodes in the virtual node group will be taken down.
     */
    declare public readonly schedulingShutdownHours: pulumi.Output<outputs.aws.OceanLaunchSpecSchedulingShutdownHours | undefined>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    declare public readonly schedulingTasks: pulumi.Output<outputs.aws.OceanLaunchSpecSchedulingTask[] | undefined>;
    /**
     * Optionally adds security group IDs.
     */
    declare public readonly securityGroups: pulumi.Output<string[] | undefined>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    declare public readonly startupTaints: pulumi.Output<outputs.aws.OceanLaunchSpecStartupTaint[] | undefined>;
    declare public readonly strategies: pulumi.Output<outputs.aws.OceanLaunchSpecStrategy[] | undefined>;
    /**
     * A list of subnet IDs.
     */
    declare public readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<outputs.aws.OceanLaunchSpecTag[] | undefined>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    declare public readonly taints: pulumi.Output<outputs.aws.OceanLaunchSpecTaint[] | undefined>;
    declare public readonly updatePolicy: pulumi.Output<outputs.aws.OceanLaunchSpecUpdatePolicy | undefined>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;

    /**
     * Create a OceanLaunchSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanLaunchSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanLaunchSpecArgs | OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanLaunchSpecState | undefined;
            resourceInputs["associatePublicIpAddress"] = state?.associatePublicIpAddress;
            resourceInputs["autoscaleDowns"] = state?.autoscaleDowns;
            resourceInputs["autoscaleHeadrooms"] = state?.autoscaleHeadrooms;
            resourceInputs["autoscaleHeadroomsAutomatics"] = state?.autoscaleHeadroomsAutomatics;
            resourceInputs["blockDeviceMappings"] = state?.blockDeviceMappings;
            resourceInputs["createOptions"] = state?.createOptions;
            resourceInputs["deleteOptions"] = state?.deleteOptions;
            resourceInputs["elasticIpPools"] = state?.elasticIpPools;
            resourceInputs["ephemeralStorages"] = state?.ephemeralStorages;
            resourceInputs["iamInstanceProfile"] = state?.iamInstanceProfile;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["images"] = state?.images;
            resourceInputs["instanceMetadataOptions"] = state?.instanceMetadataOptions;
            resourceInputs["instanceStorePolicy"] = state?.instanceStorePolicy;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["instanceTypesFilters"] = state?.instanceTypesFilters;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["oceanId"] = state?.oceanId;
            resourceInputs["preferredOdTypes"] = state?.preferredOdTypes;
            resourceInputs["preferredSpotTypes"] = state?.preferredSpotTypes;
            resourceInputs["reservedEnis"] = state?.reservedEnis;
            resourceInputs["resourceLimits"] = state?.resourceLimits;
            resourceInputs["restrictScaleDown"] = state?.restrictScaleDown;
            resourceInputs["rootVolumeSize"] = state?.rootVolumeSize;
            resourceInputs["schedulingShutdownHours"] = state?.schedulingShutdownHours;
            resourceInputs["schedulingTasks"] = state?.schedulingTasks;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["startupTaints"] = state?.startupTaints;
            resourceInputs["strategies"] = state?.strategies;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
            resourceInputs["updatePolicy"] = state?.updatePolicy;
            resourceInputs["userData"] = state?.userData;
        } else {
            const args = argsOrState as OceanLaunchSpecArgs | undefined;
            if (args?.oceanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["associatePublicIpAddress"] = args?.associatePublicIpAddress;
            resourceInputs["autoscaleDowns"] = args?.autoscaleDowns;
            resourceInputs["autoscaleHeadrooms"] = args?.autoscaleHeadrooms;
            resourceInputs["autoscaleHeadroomsAutomatics"] = args?.autoscaleHeadroomsAutomatics;
            resourceInputs["blockDeviceMappings"] = args?.blockDeviceMappings;
            resourceInputs["createOptions"] = args?.createOptions;
            resourceInputs["deleteOptions"] = args?.deleteOptions;
            resourceInputs["elasticIpPools"] = args?.elasticIpPools;
            resourceInputs["ephemeralStorages"] = args?.ephemeralStorages;
            resourceInputs["iamInstanceProfile"] = args?.iamInstanceProfile;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["images"] = args?.images;
            resourceInputs["instanceMetadataOptions"] = args?.instanceMetadataOptions;
            resourceInputs["instanceStorePolicy"] = args?.instanceStorePolicy;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["instanceTypesFilters"] = args?.instanceTypesFilters;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["oceanId"] = args?.oceanId;
            resourceInputs["preferredOdTypes"] = args?.preferredOdTypes;
            resourceInputs["preferredSpotTypes"] = args?.preferredSpotTypes;
            resourceInputs["reservedEnis"] = args?.reservedEnis;
            resourceInputs["resourceLimits"] = args?.resourceLimits;
            resourceInputs["restrictScaleDown"] = args?.restrictScaleDown;
            resourceInputs["rootVolumeSize"] = args?.rootVolumeSize;
            resourceInputs["schedulingShutdownHours"] = args?.schedulingShutdownHours;
            resourceInputs["schedulingTasks"] = args?.schedulingTasks;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["startupTaints"] = args?.startupTaints;
            resourceInputs["strategies"] = args?.strategies;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["updatePolicy"] = args?.updatePolicy;
            resourceInputs["userData"] = args?.userData;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanLaunchSpec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanLaunchSpec resources.
 */
export interface OceanLaunchSpecState {
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Auto Scaling scale down operations.
     */
    autoscaleDowns?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleDown>[]>;
    /**
     * Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
     */
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * Set automatic headroom per launch spec.
     */
    autoscaleHeadroomsAutomatics?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleHeadroomsAutomatic>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecBlockDeviceMapping>[]>;
    createOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecCreateOptions>;
    deleteOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecDeleteOptions>;
    /**
     * Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
     */
    elasticIpPools?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecElasticIpPool>[]>;
    ephemeralStorages?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecEphemeralStorage>[]>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
     * For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
     */
    images?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecImage>[]>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceMetadataOptions>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    instanceStorePolicy?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceStorePolicy>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
     * The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
     */
    instanceTypesFilters?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceTypesFilters>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecLabel>[]>;
    /**
     * The name of the Virtual Node Group.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Ocean cluster.
     */
    oceanId?: pulumi.Input<string>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredOdTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    reservedEnis?: pulumi.Input<number>;
    resourceLimits?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecResourceLimit>[]>;
    /**
     * Boolean. When set to `true`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Set root volume size (in GB).
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Used to specify times that the nodes in the virtual node group will be taken down.
     */
    schedulingShutdownHours?: pulumi.Input<inputs.aws.OceanLaunchSpecSchedulingShutdownHours>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecSchedulingTask>[]>;
    /**
     * Optionally adds security group IDs.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    startupTaints?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecStartupTaint>[]>;
    strategies?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecStrategy>[]>;
    /**
     * A list of subnet IDs.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecTag>[]>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.OceanLaunchSpecUpdatePolicy>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OceanLaunchSpec resource.
 */
export interface OceanLaunchSpecArgs {
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Auto Scaling scale down operations.
     */
    autoscaleDowns?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleDown>[]>;
    /**
     * Set custom headroom per Virtual Node Group. Provide a list of headrooms object.
     */
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * Set automatic headroom per launch spec.
     */
    autoscaleHeadroomsAutomatics?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecAutoscaleHeadroomsAutomatic>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecBlockDeviceMapping>[]>;
    createOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecCreateOptions>;
    deleteOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecDeleteOptions>;
    /**
     * Assign an Elastic IP to the instances spun by the Virtual Node Group. Can be null.
     */
    elasticIpPools?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecElasticIpPool>[]>;
    ephemeralStorages?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecEphemeralStorage>[]>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Array of objects (Image object, containing the id of the image used to launch instances.) You can configure VNG with either the imageId or images objects, but not both simultaneously.
     * For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element.
     */
    images?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecImage>[]>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceMetadataOptions>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    instanceStorePolicy?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceStorePolicy>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the cluster.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance types that match with all filters compose the Virtual Node Group's instanceTypes parameter.
     * The architectures that come from the Virtual Node Group's images will be taken into account when using this parameter. Cannot be configured together with Virtual Node Group's instanceTypes and with the Cluster's whitelist/blacklist/filters.
     */
    instanceTypesFilters?: pulumi.Input<inputs.aws.OceanLaunchSpecInstanceTypesFilters>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecLabel>[]>;
    /**
     * The name of the Virtual Node Group.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Ocean cluster.
     */
    oceanId: pulumi.Input<string>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredOdTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of instance types. Takes the preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    reservedEnis?: pulumi.Input<number>;
    resourceLimits?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecResourceLimit>[]>;
    /**
     * Boolean. When set to `true`, nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Set root volume size (in GB).
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Used to specify times that the nodes in the virtual node group will be taken down.
     */
    schedulingShutdownHours?: pulumi.Input<inputs.aws.OceanLaunchSpecSchedulingShutdownHours>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecSchedulingTask>[]>;
    /**
     * Optionally adds security group IDs.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    startupTaints?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecStartupTaint>[]>;
    strategies?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecStrategy>[]>;
    /**
     * A list of subnet IDs.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecTag>[]>;
    /**
     * Optionally adds labels to instances launched in the cluster.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.aws.OceanLaunchSpecTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.OceanLaunchSpecUpdatePolicy>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
}
