// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ManagedInstance extends pulumi.CustomResource {
    /**
     * Get an existing ManagedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedInstanceState, opts?: pulumi.CustomResourceOptions): ManagedInstance {
        return new ManagedInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/managedInstance:ManagedInstance';

    /**
     * Returns true if the given object is an instance of ManagedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedInstance.__pulumiType;
    }

    declare public readonly autoHealing: pulumi.Output<boolean | undefined>;
    declare public readonly blockDeviceMappings: pulumi.Output<outputs.aws.ManagedInstanceBlockDeviceMapping[] | undefined>;
    declare public readonly blockDevicesMode: pulumi.Output<string | undefined>;
    declare public readonly cpuCredits: pulumi.Output<string | undefined>;
    declare public readonly deletes: pulumi.Output<outputs.aws.ManagedInstanceDelete[] | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly drainingTimeout: pulumi.Output<number | undefined>;
    declare public readonly ebsOptimized: pulumi.Output<boolean>;
    declare public readonly elasticIp: pulumi.Output<string | undefined>;
    declare public readonly enableMonitoring: pulumi.Output<boolean | undefined>;
    declare public readonly fallbackToOndemand: pulumi.Output<boolean | undefined>;
    declare public readonly gracePeriod: pulumi.Output<number | undefined>;
    declare public readonly healthCheckType: pulumi.Output<string | undefined>;
    declare public readonly iamInstanceProfile: pulumi.Output<string | undefined>;
    declare public readonly imageId: pulumi.Output<string>;
    declare public readonly instanceTypes: pulumi.Output<string[] | undefined>;
    declare public readonly integrationRoute53: pulumi.Output<outputs.aws.ManagedInstanceIntegrationRoute53 | undefined>;
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    declare public readonly lifeCycle: pulumi.Output<string | undefined>;
    declare public readonly loadBalancers: pulumi.Output<outputs.aws.ManagedInstanceLoadBalancer[] | undefined>;
    declare public readonly managedInstanceAction: pulumi.Output<outputs.aws.ManagedInstanceManagedInstanceAction | undefined>;
    declare public readonly metadataOptions: pulumi.Output<outputs.aws.ManagedInstanceMetadataOptions | undefined>;
    declare public readonly minimumInstanceLifetime: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkInterfaces: pulumi.Output<outputs.aws.ManagedInstanceNetworkInterface[] | undefined>;
    declare public readonly optimizationWindows: pulumi.Output<string[] | undefined>;
    declare public readonly orientation: pulumi.Output<string | undefined>;
    declare public readonly persistBlockDevices: pulumi.Output<boolean>;
    declare public readonly persistPrivateIp: pulumi.Output<boolean | undefined>;
    declare public readonly persistRootDevice: pulumi.Output<boolean | undefined>;
    declare public readonly placementTenancy: pulumi.Output<string | undefined>;
    declare public readonly preferredType: pulumi.Output<string | undefined>;
    declare public readonly preferredTypes: pulumi.Output<string[] | undefined>;
    declare public readonly privateIp: pulumi.Output<string | undefined>;
    declare public readonly product: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string | undefined>;
    declare public readonly resourceRequirements: pulumi.Output<outputs.aws.ManagedInstanceResourceRequirement[] | undefined>;
    declare public readonly resourceTagSpecifications: pulumi.Output<outputs.aws.ManagedInstanceResourceTagSpecification[] | undefined>;
    declare public readonly revertToSpot: pulumi.Output<outputs.aws.ManagedInstanceRevertToSpot | undefined>;
    declare public readonly scheduledTasks: pulumi.Output<outputs.aws.ManagedInstanceScheduledTask[] | undefined>;
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    declare public readonly shutdownScript: pulumi.Output<string | undefined>;
    declare public readonly subnetIds: pulumi.Output<string[]>;
    declare public readonly tags: pulumi.Output<outputs.aws.ManagedInstanceTag[] | undefined>;
    declare public readonly unhealthyDuration: pulumi.Output<number | undefined>;
    declare public readonly userData: pulumi.Output<string | undefined>;
    declare public readonly utilizeReservedInstances: pulumi.Output<boolean | undefined>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a ManagedInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedInstanceArgs | ManagedInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedInstanceState | undefined;
            resourceInputs["autoHealing"] = state?.autoHealing;
            resourceInputs["blockDeviceMappings"] = state?.blockDeviceMappings;
            resourceInputs["blockDevicesMode"] = state?.blockDevicesMode;
            resourceInputs["cpuCredits"] = state?.cpuCredits;
            resourceInputs["deletes"] = state?.deletes;
            resourceInputs["description"] = state?.description;
            resourceInputs["drainingTimeout"] = state?.drainingTimeout;
            resourceInputs["ebsOptimized"] = state?.ebsOptimized;
            resourceInputs["elasticIp"] = state?.elasticIp;
            resourceInputs["enableMonitoring"] = state?.enableMonitoring;
            resourceInputs["fallbackToOndemand"] = state?.fallbackToOndemand;
            resourceInputs["gracePeriod"] = state?.gracePeriod;
            resourceInputs["healthCheckType"] = state?.healthCheckType;
            resourceInputs["iamInstanceProfile"] = state?.iamInstanceProfile;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["integrationRoute53"] = state?.integrationRoute53;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["lifeCycle"] = state?.lifeCycle;
            resourceInputs["loadBalancers"] = state?.loadBalancers;
            resourceInputs["managedInstanceAction"] = state?.managedInstanceAction;
            resourceInputs["metadataOptions"] = state?.metadataOptions;
            resourceInputs["minimumInstanceLifetime"] = state?.minimumInstanceLifetime;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkInterfaces"] = state?.networkInterfaces;
            resourceInputs["optimizationWindows"] = state?.optimizationWindows;
            resourceInputs["orientation"] = state?.orientation;
            resourceInputs["persistBlockDevices"] = state?.persistBlockDevices;
            resourceInputs["persistPrivateIp"] = state?.persistPrivateIp;
            resourceInputs["persistRootDevice"] = state?.persistRootDevice;
            resourceInputs["placementTenancy"] = state?.placementTenancy;
            resourceInputs["preferredType"] = state?.preferredType;
            resourceInputs["preferredTypes"] = state?.preferredTypes;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["product"] = state?.product;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceRequirements"] = state?.resourceRequirements;
            resourceInputs["resourceTagSpecifications"] = state?.resourceTagSpecifications;
            resourceInputs["revertToSpot"] = state?.revertToSpot;
            resourceInputs["scheduledTasks"] = state?.scheduledTasks;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["shutdownScript"] = state?.shutdownScript;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["unhealthyDuration"] = state?.unhealthyDuration;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["utilizeReservedInstances"] = state?.utilizeReservedInstances;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ManagedInstanceArgs | undefined;
            if (args?.imageId === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if (args?.persistBlockDevices === undefined && !opts.urn) {
                throw new Error("Missing required property 'persistBlockDevices'");
            }
            if (args?.product === undefined && !opts.urn) {
                throw new Error("Missing required property 'product'");
            }
            if (args?.subnetIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoHealing"] = args?.autoHealing;
            resourceInputs["blockDeviceMappings"] = args?.blockDeviceMappings;
            resourceInputs["blockDevicesMode"] = args?.blockDevicesMode;
            resourceInputs["cpuCredits"] = args?.cpuCredits;
            resourceInputs["deletes"] = args?.deletes;
            resourceInputs["description"] = args?.description;
            resourceInputs["drainingTimeout"] = args?.drainingTimeout;
            resourceInputs["ebsOptimized"] = args?.ebsOptimized;
            resourceInputs["elasticIp"] = args?.elasticIp;
            resourceInputs["enableMonitoring"] = args?.enableMonitoring;
            resourceInputs["fallbackToOndemand"] = args?.fallbackToOndemand;
            resourceInputs["gracePeriod"] = args?.gracePeriod;
            resourceInputs["healthCheckType"] = args?.healthCheckType;
            resourceInputs["iamInstanceProfile"] = args?.iamInstanceProfile;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["integrationRoute53"] = args?.integrationRoute53;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["lifeCycle"] = args?.lifeCycle;
            resourceInputs["loadBalancers"] = args?.loadBalancers;
            resourceInputs["managedInstanceAction"] = args?.managedInstanceAction;
            resourceInputs["metadataOptions"] = args?.metadataOptions;
            resourceInputs["minimumInstanceLifetime"] = args?.minimumInstanceLifetime;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkInterfaces"] = args?.networkInterfaces;
            resourceInputs["optimizationWindows"] = args?.optimizationWindows;
            resourceInputs["orientation"] = args?.orientation;
            resourceInputs["persistBlockDevices"] = args?.persistBlockDevices;
            resourceInputs["persistPrivateIp"] = args?.persistPrivateIp;
            resourceInputs["persistRootDevice"] = args?.persistRootDevice;
            resourceInputs["placementTenancy"] = args?.placementTenancy;
            resourceInputs["preferredType"] = args?.preferredType;
            resourceInputs["preferredTypes"] = args?.preferredTypes;
            resourceInputs["privateIp"] = args?.privateIp;
            resourceInputs["product"] = args?.product;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceRequirements"] = args?.resourceRequirements;
            resourceInputs["resourceTagSpecifications"] = args?.resourceTagSpecifications;
            resourceInputs["revertToSpot"] = args?.revertToSpot;
            resourceInputs["scheduledTasks"] = args?.scheduledTasks;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["shutdownScript"] = args?.shutdownScript;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["unhealthyDuration"] = args?.unhealthyDuration;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["utilizeReservedInstances"] = args?.utilizeReservedInstances;
            resourceInputs["vpcId"] = args?.vpcId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedInstance resources.
 */
export interface ManagedInstanceState {
    autoHealing?: pulumi.Input<boolean>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceBlockDeviceMapping>[]>;
    blockDevicesMode?: pulumi.Input<string>;
    cpuCredits?: pulumi.Input<string>;
    deletes?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceDelete>[]>;
    description?: pulumi.Input<string>;
    drainingTimeout?: pulumi.Input<number>;
    ebsOptimized?: pulumi.Input<boolean>;
    elasticIp?: pulumi.Input<string>;
    enableMonitoring?: pulumi.Input<boolean>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    integrationRoute53?: pulumi.Input<inputs.aws.ManagedInstanceIntegrationRoute53>;
    keyPair?: pulumi.Input<string>;
    lifeCycle?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceLoadBalancer>[]>;
    managedInstanceAction?: pulumi.Input<inputs.aws.ManagedInstanceManagedInstanceAction>;
    metadataOptions?: pulumi.Input<inputs.aws.ManagedInstanceMetadataOptions>;
    minimumInstanceLifetime?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceNetworkInterface>[]>;
    optimizationWindows?: pulumi.Input<pulumi.Input<string>[]>;
    orientation?: pulumi.Input<string>;
    persistBlockDevices?: pulumi.Input<boolean>;
    persistPrivateIp?: pulumi.Input<boolean>;
    persistRootDevice?: pulumi.Input<boolean>;
    placementTenancy?: pulumi.Input<string>;
    preferredType?: pulumi.Input<string>;
    preferredTypes?: pulumi.Input<pulumi.Input<string>[]>;
    privateIp?: pulumi.Input<string>;
    product?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceResourceRequirement>[]>;
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceResourceTagSpecification>[]>;
    revertToSpot?: pulumi.Input<inputs.aws.ManagedInstanceRevertToSpot>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceScheduledTask>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    shutdownScript?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceTag>[]>;
    unhealthyDuration?: pulumi.Input<number>;
    userData?: pulumi.Input<string>;
    utilizeReservedInstances?: pulumi.Input<boolean>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedInstance resource.
 */
export interface ManagedInstanceArgs {
    autoHealing?: pulumi.Input<boolean>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceBlockDeviceMapping>[]>;
    blockDevicesMode?: pulumi.Input<string>;
    cpuCredits?: pulumi.Input<string>;
    deletes?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceDelete>[]>;
    description?: pulumi.Input<string>;
    drainingTimeout?: pulumi.Input<number>;
    ebsOptimized?: pulumi.Input<boolean>;
    elasticIp?: pulumi.Input<string>;
    enableMonitoring?: pulumi.Input<boolean>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    integrationRoute53?: pulumi.Input<inputs.aws.ManagedInstanceIntegrationRoute53>;
    keyPair?: pulumi.Input<string>;
    lifeCycle?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceLoadBalancer>[]>;
    managedInstanceAction?: pulumi.Input<inputs.aws.ManagedInstanceManagedInstanceAction>;
    metadataOptions?: pulumi.Input<inputs.aws.ManagedInstanceMetadataOptions>;
    minimumInstanceLifetime?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceNetworkInterface>[]>;
    optimizationWindows?: pulumi.Input<pulumi.Input<string>[]>;
    orientation?: pulumi.Input<string>;
    persistBlockDevices: pulumi.Input<boolean>;
    persistPrivateIp?: pulumi.Input<boolean>;
    persistRootDevice?: pulumi.Input<boolean>;
    placementTenancy?: pulumi.Input<string>;
    preferredType?: pulumi.Input<string>;
    preferredTypes?: pulumi.Input<pulumi.Input<string>[]>;
    privateIp?: pulumi.Input<string>;
    product: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceResourceRequirement>[]>;
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceResourceTagSpecification>[]>;
    revertToSpot?: pulumi.Input<inputs.aws.ManagedInstanceRevertToSpot>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceScheduledTask>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    shutdownScript?: pulumi.Input<string>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.aws.ManagedInstanceTag>[]>;
    unhealthyDuration?: pulumi.Input<number>;
    userData?: pulumi.Input<string>;
    utilizeReservedInstances?: pulumi.Input<boolean>;
    vpcId: pulumi.Input<string>;
}
