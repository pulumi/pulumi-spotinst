// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Clusters can be imported using the Ocean `id`, e.g.,
 *
 * hcl
 *
 * ```sh
 * $ pulumi import spotinst:aws/ocean:Ocean nameOfTheResource o-12345678
 * ```
 */
export class Ocean extends pulumi.CustomResource {
    /**
     * Get an existing Ocean resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanState, opts?: pulumi.CustomResourceOptions): Ocean {
        return new Ocean(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:aws/ocean:Ocean';

    /**
     * Returns true if the given object is an instance of Ocean.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ocean {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ocean.__pulumiType;
    }

    /**
     * Configure IPv6 address allocation.
     */
    public readonly associateIpv6Address!: pulumi.Output<boolean | undefined>;
    /**
     * Configure public IP address allocation.
     */
    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    /**
     * Attach load balancers to the cluster.
     */
    public readonly attachLoadBalancers!: pulumi.Output<outputs.aws.OceanAttachLoadBalancer[] | undefined>;
    /**
     * Describes the Ocean Kubernetes Auto Scaler.
     */
    public readonly autoscaler!: pulumi.Output<outputs.aws.OceanAutoscaler | undefined>;
    public readonly blacklists!: pulumi.Output<string[] | undefined>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    public readonly blockDeviceMappings!: pulumi.Output<outputs.aws.OceanBlockDeviceMapping[] | undefined>;
    public readonly clusterOrientations!: pulumi.Output<outputs.aws.OceanClusterOrientation[] | undefined>;
    /**
     * A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
     */
    public readonly controllerId!: pulumi.Output<string | undefined>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    public readonly desiredCapacity!: pulumi.Output<number>;
    /**
     * Detach load balancers from the cluster.
     */
    public readonly detachLoadBalancers!: pulumi.Output<outputs.aws.OceanDetachLoadBalancer[] | undefined>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    public readonly drainingTimeout!: pulumi.Output<number | undefined>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    public readonly fallbackToOndemand!: pulumi.Output<boolean | undefined>;
    public readonly filters!: pulumi.Output<outputs.aws.OceanFilters | undefined>;
    /**
     * The amount of time, in seconds, after the instance has launched to start checking its health.
     */
    public readonly gracePeriod!: pulumi.Output<number | undefined>;
    /**
     * The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
     */
    public readonly healthCheckUnhealthyDurationBeforeReplacement!: pulumi.Output<number | undefined>;
    /**
     * The instance profile iam role.
     */
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    /**
     * ID of the image used to launch the instances.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    public readonly instanceMetadataOptions!: pulumi.Output<outputs.aws.OceanInstanceMetadataOptions | undefined>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    public readonly instanceStorePolicy!: pulumi.Output<outputs.aws.OceanInstanceStorePolicy | undefined>;
    /**
     * The key pair to attach the instances.
     */
    public readonly keyName!: pulumi.Output<string | undefined>;
    /**
     * Array of load balancer objects to add to ocean cluster
     */
    public readonly loadBalancers!: pulumi.Output<outputs.aws.OceanLoadBalancer[] | undefined>;
    /**
     * Logging configuration.
     */
    public readonly logging!: pulumi.Output<outputs.aws.OceanLogging | undefined>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    public readonly maxSize!: pulumi.Output<number | undefined>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    public readonly monitoring!: pulumi.Output<boolean | undefined>;
    /**
     * The cluster name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region the cluster will run in.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    public readonly reservedEnis!: pulumi.Output<number | undefined>;
    /**
     * Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
     */
    public readonly resourceTagSpecifications!: pulumi.Output<outputs.aws.OceanResourceTagSpecification[] | undefined>;
    /**
     * The size (in Gb) to allocate for the root volume. Minimum `20`.
     */
    public readonly rootVolumeSize!: pulumi.Output<number | undefined>;
    /**
     * Set scheduling object.
     */
    public readonly scheduledTasks!: pulumi.Output<outputs.aws.OceanScheduledTask[] | undefined>;
    /**
     * One or more security group ids.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
     */
    public readonly spotPercentage!: pulumi.Output<number | undefined>;
    /**
     * Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
     */
    public readonly spreadNodesBy!: pulumi.Output<string | undefined>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    public readonly startupTaints!: pulumi.Output<outputs.aws.OceanStartupTaint[] | undefined>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
     * * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    public readonly tags!: pulumi.Output<outputs.aws.OceanTag[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.aws.OceanUpdatePolicy | undefined>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     * When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
     */
    public readonly useAsTemplateOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    public readonly utilizeCommitments!: pulumi.Output<boolean | undefined>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    public readonly utilizeReservedInstances!: pulumi.Output<boolean | undefined>;
    public readonly whitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Ocean resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanArgs | OceanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanState | undefined;
            resourceInputs["associateIpv6Address"] = state ? state.associateIpv6Address : undefined;
            resourceInputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            resourceInputs["attachLoadBalancers"] = state ? state.attachLoadBalancers : undefined;
            resourceInputs["autoscaler"] = state ? state.autoscaler : undefined;
            resourceInputs["blacklists"] = state ? state.blacklists : undefined;
            resourceInputs["blockDeviceMappings"] = state ? state.blockDeviceMappings : undefined;
            resourceInputs["clusterOrientations"] = state ? state.clusterOrientations : undefined;
            resourceInputs["controllerId"] = state ? state.controllerId : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["detachLoadBalancers"] = state ? state.detachLoadBalancers : undefined;
            resourceInputs["drainingTimeout"] = state ? state.drainingTimeout : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["gracePeriod"] = state ? state.gracePeriod : undefined;
            resourceInputs["healthCheckUnhealthyDurationBeforeReplacement"] = state ? state.healthCheckUnhealthyDurationBeforeReplacement : undefined;
            resourceInputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceMetadataOptions"] = state ? state.instanceMetadataOptions : undefined;
            resourceInputs["instanceStorePolicy"] = state ? state.instanceStorePolicy : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reservedEnis"] = state ? state.reservedEnis : undefined;
            resourceInputs["resourceTagSpecifications"] = state ? state.resourceTagSpecifications : undefined;
            resourceInputs["rootVolumeSize"] = state ? state.rootVolumeSize : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            resourceInputs["spreadNodesBy"] = state ? state.spreadNodesBy : undefined;
            resourceInputs["startupTaints"] = state ? state.startupTaints : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = state ? state.useAsTemplateOnly : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["utilizeCommitments"] = state ? state.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = state ? state.utilizeReservedInstances : undefined;
            resourceInputs["whitelists"] = state ? state.whitelists : undefined;
        } else {
            const args = argsOrState as OceanArgs | undefined;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.securityGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroups'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["associateIpv6Address"] = args ? args.associateIpv6Address : undefined;
            resourceInputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            resourceInputs["attachLoadBalancers"] = args ? args.attachLoadBalancers : undefined;
            resourceInputs["autoscaler"] = args ? args.autoscaler : undefined;
            resourceInputs["blacklists"] = args ? args.blacklists : undefined;
            resourceInputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            resourceInputs["clusterOrientations"] = args ? args.clusterOrientations : undefined;
            resourceInputs["controllerId"] = args ? args.controllerId : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["detachLoadBalancers"] = args ? args.detachLoadBalancers : undefined;
            resourceInputs["drainingTimeout"] = args ? args.drainingTimeout : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["gracePeriod"] = args ? args.gracePeriod : undefined;
            resourceInputs["healthCheckUnhealthyDurationBeforeReplacement"] = args ? args.healthCheckUnhealthyDurationBeforeReplacement : undefined;
            resourceInputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceMetadataOptions"] = args ? args.instanceMetadataOptions : undefined;
            resourceInputs["instanceStorePolicy"] = args ? args.instanceStorePolicy : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reservedEnis"] = args ? args.reservedEnis : undefined;
            resourceInputs["resourceTagSpecifications"] = args ? args.resourceTagSpecifications : undefined;
            resourceInputs["rootVolumeSize"] = args ? args.rootVolumeSize : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            resourceInputs["spreadNodesBy"] = args ? args.spreadNodesBy : undefined;
            resourceInputs["startupTaints"] = args ? args.startupTaints : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = args ? args.useAsTemplateOnly : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["utilizeCommitments"] = args ? args.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = args ? args.utilizeReservedInstances : undefined;
            resourceInputs["whitelists"] = args ? args.whitelists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ocean.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ocean resources.
 */
export interface OceanState {
    /**
     * Configure IPv6 address allocation.
     */
    associateIpv6Address?: pulumi.Input<boolean>;
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Attach load balancers to the cluster.
     */
    attachLoadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanAttachLoadBalancer>[]>;
    /**
     * Describes the Ocean Kubernetes Auto Scaler.
     */
    autoscaler?: pulumi.Input<inputs.aws.OceanAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.OceanBlockDeviceMapping>[]>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.aws.OceanClusterOrientation>[]>;
    /**
     * A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
     */
    controllerId?: pulumi.Input<string>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * Detach load balancers from the cluster.
     */
    detachLoadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanDetachLoadBalancer>[]>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.aws.OceanFilters>;
    /**
     * The amount of time, in seconds, after the instance has launched to start checking its health.
     */
    gracePeriod?: pulumi.Input<number>;
    /**
     * The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
     */
    healthCheckUnhealthyDurationBeforeReplacement?: pulumi.Input<number>;
    /**
     * The instance profile iam role.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.aws.OceanInstanceMetadataOptions>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    instanceStorePolicy?: pulumi.Input<inputs.aws.OceanInstanceStorePolicy>;
    /**
     * The key pair to attach the instances.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Array of load balancer objects to add to ocean cluster
     */
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanLoadBalancer>[]>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.aws.OceanLogging>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region the cluster will run in.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    reservedEnis?: pulumi.Input<number>;
    /**
     * Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
     */
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.OceanResourceTagSpecification>[]>;
    /**
     * The size (in Gb) to allocate for the root volume. Minimum `20`.
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Set scheduling object.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.OceanScheduledTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
     */
    spotPercentage?: pulumi.Input<number>;
    /**
     * Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
     */
    spreadNodesBy?: pulumi.Input<string>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    startupTaints?: pulumi.Input<pulumi.Input<inputs.aws.OceanStartupTaint>[]>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
     * * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.OceanTag>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.OceanUpdatePolicy>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     * When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
     */
    useAsTemplateOnly?: pulumi.Input<boolean>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Ocean resource.
 */
export interface OceanArgs {
    /**
     * Configure IPv6 address allocation.
     */
    associateIpv6Address?: pulumi.Input<boolean>;
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Attach load balancers to the cluster.
     */
    attachLoadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanAttachLoadBalancer>[]>;
    /**
     * Describes the Ocean Kubernetes Auto Scaler.
     */
    autoscaler?: pulumi.Input<inputs.aws.OceanAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.aws.OceanBlockDeviceMapping>[]>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.aws.OceanClusterOrientation>[]>;
    /**
     * A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
     */
    controllerId?: pulumi.Input<string>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * Detach load balancers from the cluster.
     */
    detachLoadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanDetachLoadBalancer>[]>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * If not Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.aws.OceanFilters>;
    /**
     * The amount of time, in seconds, after the instance has launched to start checking its health.
     */
    gracePeriod?: pulumi.Input<number>;
    /**
     * The amount of time, in seconds, an existing instance should remain active after becoming unhealthy. After the set time out the instance will be replaced. The minimum value allowed is 60, and it must be a multiple of 60.
     */
    healthCheckUnhealthyDurationBeforeReplacement?: pulumi.Input<number>;
    /**
     * The instance profile iam role.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId: pulumi.Input<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.aws.OceanInstanceMetadataOptions>;
    /**
     * Determines the utilization of instance store volumes. If not defined, instance store volumes will not be used.
     */
    instanceStorePolicy?: pulumi.Input<inputs.aws.OceanInstanceStorePolicy>;
    /**
     * The key pair to attach the instances.
     */
    keyName?: pulumi.Input<string>;
    /**
     * Array of load balancer objects to add to ocean cluster
     */
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.aws.OceanLoadBalancer>[]>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.aws.OceanLogging>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * The region the cluster will run in.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the count of ENIs to reserve per instance type for scaling purposes.
     */
    reservedEnis?: pulumi.Input<number>;
    /**
     * Specify which resources should be tagged with Virtual Node Group tags or Ocean tags. If tags are set on the VNG, the resources will be tagged with the VNG tags; otherwise, they will be tagged with the Ocean tags.
     */
    resourceTagSpecifications?: pulumi.Input<pulumi.Input<inputs.aws.OceanResourceTagSpecification>[]>;
    /**
     * The size (in Gb) to allocate for the root volume. Minimum `20`.
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Set scheduling object.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.aws.OceanScheduledTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The desired percentage of Spot instances out of all running instances. Only available when the field is not set in any VNG directly (launchSpec.strategy.spotPercentage).
     */
    spotPercentage?: pulumi.Input<number>;
    /**
     * Ocean will spread the nodes across markets by this value. Possible values: `vcpu` or `count`.
     */
    spreadNodesBy?: pulumi.Input<string>;
    /**
     * Temporary taints applied to a node during its initialization phase. For a startup taint to work, it must also be set as a regular taint in the userData for the cluster.
     */
    startupTaints?: pulumi.Input<pulumi.Input<inputs.aws.OceanStartupTaint>[]>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public IP.
     * * `instanceTypes` - (Optional) The type of instances that may or may not be a part of the Ocean cluster.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.aws.OceanTag>[]>;
    updatePolicy?: pulumi.Input<inputs.aws.OceanUpdatePolicy>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     * When set to true, on Ocean resource creation please make sure your custom VNG has an initialNodes parameter to create nodes for your VNG.
     */
    useAsTemplateOnly?: pulumi.Input<boolean>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
