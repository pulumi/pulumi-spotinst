// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { BeanstalkArgs, BeanstalkState } from "./beanstalk";
export type Beanstalk = import("./beanstalk").Beanstalk;
export const Beanstalk: typeof import("./beanstalk").Beanstalk = null as any;
utilities.lazyLoad(exports, ["Beanstalk"], () => require("./beanstalk"));

export { CredentialsArgs, CredentialsState } from "./credentials";
export type Credentials = import("./credentials").Credentials;
export const Credentials: typeof import("./credentials").Credentials = null as any;
utilities.lazyLoad(exports, ["Credentials"], () => require("./credentials"));

export { ElastigroupArgs, ElastigroupState } from "./elastigroup";
export type Elastigroup = import("./elastigroup").Elastigroup;
export const Elastigroup: typeof import("./elastigroup").Elastigroup = null as any;
utilities.lazyLoad(exports, ["Elastigroup"], () => require("./elastigroup"));

export { ManagedInstanceArgs, ManagedInstanceState } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { MrScalarArgs, MrScalarState } from "./mrScalar";
export type MrScalar = import("./mrScalar").MrScalar;
export const MrScalar: typeof import("./mrScalar").MrScalar = null as any;
utilities.lazyLoad(exports, ["MrScalar"], () => require("./mrScalar"));

export { OceanArgs, OceanState } from "./ocean";
export type Ocean = import("./ocean").Ocean;
export const Ocean: typeof import("./ocean").Ocean = null as any;
utilities.lazyLoad(exports, ["Ocean"], () => require("./ocean"));

export { OceanExtendedResourceDefinitionArgs, OceanExtendedResourceDefinitionState } from "./oceanExtendedResourceDefinition";
export type OceanExtendedResourceDefinition = import("./oceanExtendedResourceDefinition").OceanExtendedResourceDefinition;
export const OceanExtendedResourceDefinition: typeof import("./oceanExtendedResourceDefinition").OceanExtendedResourceDefinition = null as any;
utilities.lazyLoad(exports, ["OceanExtendedResourceDefinition"], () => require("./oceanExtendedResourceDefinition"));

export { OceanLaunchSpecArgs, OceanLaunchSpecState } from "./oceanLaunchSpec";
export type OceanLaunchSpec = import("./oceanLaunchSpec").OceanLaunchSpec;
export const OceanLaunchSpec: typeof import("./oceanLaunchSpec").OceanLaunchSpec = null as any;
utilities.lazyLoad(exports, ["OceanLaunchSpec"], () => require("./oceanLaunchSpec"));

export { SuspensionArgs, SuspensionState } from "./suspension";
export type Suspension = import("./suspension").Suspension;
export const Suspension: typeof import("./suspension").Suspension = null as any;
utilities.lazyLoad(exports, ["Suspension"], () => require("./suspension"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "spotinst:aws/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "spotinst:aws/beanstalk:Beanstalk":
                return new Beanstalk(name, <any>undefined, { urn })
            case "spotinst:aws/credentials:Credentials":
                return new Credentials(name, <any>undefined, { urn })
            case "spotinst:aws/elastigroup:Elastigroup":
                return new Elastigroup(name, <any>undefined, { urn })
            case "spotinst:aws/managedInstance:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "spotinst:aws/mrScalar:MrScalar":
                return new MrScalar(name, <any>undefined, { urn })
            case "spotinst:aws/ocean:Ocean":
                return new Ocean(name, <any>undefined, { urn })
            case "spotinst:aws/oceanExtendedResourceDefinition:OceanExtendedResourceDefinition":
                return new OceanExtendedResourceDefinition(name, <any>undefined, { urn })
            case "spotinst:aws/oceanLaunchSpec:OceanLaunchSpec":
                return new OceanLaunchSpec(name, <any>undefined, { urn })
            case "spotinst:aws/suspension:Suspension":
                return new Suspension(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("spotinst", "aws/account", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/beanstalk", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/credentials", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/elastigroup", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/managedInstance", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/mrScalar", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/ocean", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/oceanExtendedResourceDefinition", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/oceanLaunchSpec", _module)
pulumi.runtime.registerResourceModule("spotinst", "aws/suspension", _module)
