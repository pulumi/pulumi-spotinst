// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst Ocean AKS resource.
 *
 * ## Basic Ocean Cluster Creation Usage Example - using minimum configuration with only required parameters
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const example = new spotinst.azure.OceanNp("example", {
 *     name: "test",
 *     aksRegion: "eastus",
 *     aksClusterName: "test-cluster",
 *     aksInfrastructureResourceGroupName: "MC_TestResourceGroup_test-cluster_eastus",
 *     aksResourceGroupName: "TestResourceGroup",
 *     controllerClusterId: "test-123124",
 *     availabilityZones: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 * });
 * ```
 *
 * ## Detailed Ocean Cluster Creation Usage Example - using all available parameters with sample values
 */
export class OceanNp extends pulumi.CustomResource {
    /**
     * Get an existing OceanNp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanNpState, opts?: pulumi.CustomResourceOptions): OceanNp {
        return new OceanNp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:azure/oceanNp:OceanNp';

    /**
     * Returns true if the given object is an instance of OceanNp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanNp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanNp.__pulumiType;
    }

    public readonly aksClusterName!: pulumi.Output<string>;
    public readonly aksInfrastructureResourceGroupName!: pulumi.Output<string>;
    public readonly aksRegion!: pulumi.Output<string>;
    public readonly aksResourceGroupName!: pulumi.Output<string>;
    /**
     * The Ocean Kubernetes Autoscaler object.
     */
    public readonly autoscaler!: pulumi.Output<outputs.azure.OceanNpAutoscaler | undefined>;
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * Enter a unique Ocean cluster identifier. Cannot be updated. This needs to match with string that was used to install the controller in the cluster, typically clusterName + 8 digit string.
     */
    public readonly controllerClusterId!: pulumi.Output<string>;
    /**
     * Enable node public IP.
     */
    public readonly enableNodePublicIp!: pulumi.Output<boolean | undefined>;
    /**
     * If no spot VM markets are available, enable Ocean to launch regular (pay-as-you-go) nodes instead.
     */
    public readonly fallbackToOndemand!: pulumi.Output<boolean | undefined>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    public readonly filters!: pulumi.Output<outputs.azure.OceanNpFilters | undefined>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    public readonly headrooms!: pulumi.Output<outputs.azure.OceanNpHeadroom[] | undefined>;
    /**
     * The Ocean AKS Health object.
     */
    public readonly health!: pulumi.Output<outputs.azure.OceanNpHealth | undefined>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * An array of labels to add to the virtual node group. Only custom user labels are allowed, and not [Kubernetes well-known labels](https://kubernetes.io/docs/reference/labels-annotations-taints/) or [ Azure AKS labels](https://learn.microsoft.com/en-us/azure/aks/use-labels) or [Spot labels](https://docs.spot.io/ocean/features/labels-and-taints?id=spot-labels).
     */
    public readonly labels!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Maximum node count limit.
     */
    public readonly maxCount!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    public readonly maxPodsPerNode!: pulumi.Output<number | undefined>;
    /**
     * Minimum node count limit.
     */
    public readonly minCount!: pulumi.Output<number | undefined>;
    /**
     * Add a name for the Ocean cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The size of the OS disk in GB.
     */
    public readonly osDiskSizeGb!: pulumi.Output<number | undefined>;
    /**
     * The type of the OS disk.
     */
    public readonly osDiskType!: pulumi.Output<string | undefined>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    public readonly osSku!: pulumi.Output<string | undefined>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    public readonly osType!: pulumi.Output<string | undefined>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    public readonly podSubnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * An object used to specify times when the cluster will turn off. Once the shutdown time will be over, the cluster will return to its previous state.
     */
    public readonly scheduling!: pulumi.Output<outputs.azure.OceanNpScheduling | undefined>;
    /**
     * Percentage of spot VMs to maintain.
     */
    public readonly spotPercentage!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Add taints to a virtual node group. Only custom user taints are allowed, and not [Kubernetes well-known taints](https://kubernetes.io/docs/reference/labels-annotations-taints/) or Azure AKS [ScaleSetPrioirty (Spot VM) taint](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool). For all Spot VMs, AKS injects a taint kubernetes.azure.com/scalesetpriority=spot:NoSchedule, to ensure that only workloads that can handle interruptions are scheduled on Spot nodes. To [schedule a pod to run on Spot node](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool#schedule-a-pod-to-run-on-the-spot-node), add a toleration but dont include the nodeAffinity (not supported for Spot Ocean), this will prevent the pod from being scheduled using Spot Ocean.
     */
    public readonly taints!: pulumi.Output<outputs.azure.OceanNpTaint[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.azure.OceanNpUpdatePolicy | undefined>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    public readonly vnetSubnetIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OceanNp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanNpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanNpArgs | OceanNpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanNpState | undefined;
            resourceInputs["aksClusterName"] = state ? state.aksClusterName : undefined;
            resourceInputs["aksInfrastructureResourceGroupName"] = state ? state.aksInfrastructureResourceGroupName : undefined;
            resourceInputs["aksRegion"] = state ? state.aksRegion : undefined;
            resourceInputs["aksResourceGroupName"] = state ? state.aksResourceGroupName : undefined;
            resourceInputs["autoscaler"] = state ? state.autoscaler : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["controllerClusterId"] = state ? state.controllerClusterId : undefined;
            resourceInputs["enableNodePublicIp"] = state ? state.enableNodePublicIp : undefined;
            resourceInputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["headrooms"] = state ? state.headrooms : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxCount"] = state ? state.maxCount : undefined;
            resourceInputs["maxPodsPerNode"] = state ? state.maxPodsPerNode : undefined;
            resourceInputs["minCount"] = state ? state.minCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osDiskSizeGb"] = state ? state.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = state ? state.osDiskType : undefined;
            resourceInputs["osSku"] = state ? state.osSku : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["podSubnetIds"] = state ? state.podSubnetIds : undefined;
            resourceInputs["scheduling"] = state ? state.scheduling : undefined;
            resourceInputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["vnetSubnetIds"] = state ? state.vnetSubnetIds : undefined;
        } else {
            const args = argsOrState as OceanNpArgs | undefined;
            if ((!args || args.aksClusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksClusterName'");
            }
            if ((!args || args.aksInfrastructureResourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksInfrastructureResourceGroupName'");
            }
            if ((!args || args.aksRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksRegion'");
            }
            if ((!args || args.aksResourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksResourceGroupName'");
            }
            if ((!args || args.availabilityZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            if ((!args || args.controllerClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controllerClusterId'");
            }
            resourceInputs["aksClusterName"] = args ? args.aksClusterName : undefined;
            resourceInputs["aksInfrastructureResourceGroupName"] = args ? args.aksInfrastructureResourceGroupName : undefined;
            resourceInputs["aksRegion"] = args ? args.aksRegion : undefined;
            resourceInputs["aksResourceGroupName"] = args ? args.aksResourceGroupName : undefined;
            resourceInputs["autoscaler"] = args ? args.autoscaler : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["controllerClusterId"] = args ? args.controllerClusterId : undefined;
            resourceInputs["enableNodePublicIp"] = args ? args.enableNodePublicIp : undefined;
            resourceInputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["headrooms"] = args ? args.headrooms : undefined;
            resourceInputs["health"] = args ? args.health : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["maxPodsPerNode"] = args ? args.maxPodsPerNode : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osDiskSizeGb"] = args ? args.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = args ? args.osDiskType : undefined;
            resourceInputs["osSku"] = args ? args.osSku : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["podSubnetIds"] = args ? args.podSubnetIds : undefined;
            resourceInputs["scheduling"] = args ? args.scheduling : undefined;
            resourceInputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["vnetSubnetIds"] = args ? args.vnetSubnetIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanNp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanNp resources.
 */
export interface OceanNpState {
    aksClusterName?: pulumi.Input<string>;
    aksInfrastructureResourceGroupName?: pulumi.Input<string>;
    aksRegion?: pulumi.Input<string>;
    aksResourceGroupName?: pulumi.Input<string>;
    /**
     * The Ocean Kubernetes Autoscaler object.
     */
    autoscaler?: pulumi.Input<inputs.azure.OceanNpAutoscaler>;
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enter a unique Ocean cluster identifier. Cannot be updated. This needs to match with string that was used to install the controller in the cluster, typically clusterName + 8 digit string.
     */
    controllerClusterId?: pulumi.Input<string>;
    /**
     * Enable node public IP.
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * If no spot VM markets are available, enable Ocean to launch regular (pay-as-you-go) nodes instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    filters?: pulumi.Input<inputs.azure.OceanNpFilters>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    headrooms?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpHeadroom>[]>;
    /**
     * The Ocean AKS Health object.
     */
    health?: pulumi.Input<inputs.azure.OceanNpHealth>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * An array of labels to add to the virtual node group. Only custom user labels are allowed, and not [Kubernetes well-known labels](https://kubernetes.io/docs/reference/labels-annotations-taints/) or [ Azure AKS labels](https://learn.microsoft.com/en-us/azure/aks/use-labels) or [Spot labels](https://docs.spot.io/ocean/features/labels-and-taints?id=spot-labels).
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Maximum node count limit.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    /**
     * Minimum node count limit.
     */
    minCount?: pulumi.Input<number>;
    /**
     * Add a name for the Ocean cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the OS disk in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of the OS disk.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    osType?: pulumi.Input<string>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object used to specify times when the cluster will turn off. Once the shutdown time will be over, the cluster will return to its previous state.
     */
    scheduling?: pulumi.Input<inputs.azure.OceanNpScheduling>;
    /**
     * Percentage of spot VMs to maintain.
     */
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Add taints to a virtual node group. Only custom user taints are allowed, and not [Kubernetes well-known taints](https://kubernetes.io/docs/reference/labels-annotations-taints/) or Azure AKS [ScaleSetPrioirty (Spot VM) taint](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool). For all Spot VMs, AKS injects a taint kubernetes.azure.com/scalesetpriority=spot:NoSchedule, to ensure that only workloads that can handle interruptions are scheduled on Spot nodes. To [schedule a pod to run on Spot node](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool#schedule-a-pod-to-run-on-the-spot-node), add a toleration but dont include the nodeAffinity (not supported for Spot Ocean), this will prevent the pod from being scheduled using Spot Ocean.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.azure.OceanNpUpdatePolicy>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanNp resource.
 */
export interface OceanNpArgs {
    aksClusterName: pulumi.Input<string>;
    aksInfrastructureResourceGroupName: pulumi.Input<string>;
    aksRegion: pulumi.Input<string>;
    aksResourceGroupName: pulumi.Input<string>;
    /**
     * The Ocean Kubernetes Autoscaler object.
     */
    autoscaler?: pulumi.Input<inputs.azure.OceanNpAutoscaler>;
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enter a unique Ocean cluster identifier. Cannot be updated. This needs to match with string that was used to install the controller in the cluster, typically clusterName + 8 digit string.
     */
    controllerClusterId: pulumi.Input<string>;
    /**
     * Enable node public IP.
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * If no spot VM markets are available, enable Ocean to launch regular (pay-as-you-go) nodes instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    filters?: pulumi.Input<inputs.azure.OceanNpFilters>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    headrooms?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpHeadroom>[]>;
    /**
     * The Ocean AKS Health object.
     */
    health?: pulumi.Input<inputs.azure.OceanNpHealth>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * An array of labels to add to the virtual node group. Only custom user labels are allowed, and not [Kubernetes well-known labels](https://kubernetes.io/docs/reference/labels-annotations-taints/) or [ Azure AKS labels](https://learn.microsoft.com/en-us/azure/aks/use-labels) or [Spot labels](https://docs.spot.io/ocean/features/labels-and-taints?id=spot-labels).
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Maximum node count limit.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    /**
     * Minimum node count limit.
     */
    minCount?: pulumi.Input<number>;
    /**
     * Add a name for the Ocean cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the OS disk in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of the OS disk.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    osType?: pulumi.Input<string>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object used to specify times when the cluster will turn off. Once the shutdown time will be over, the cluster will return to its previous state.
     */
    scheduling?: pulumi.Input<inputs.azure.OceanNpScheduling>;
    /**
     * Percentage of spot VMs to maintain.
     */
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Add taints to a virtual node group. Only custom user taints are allowed, and not [Kubernetes well-known taints](https://kubernetes.io/docs/reference/labels-annotations-taints/) or Azure AKS [ScaleSetPrioirty (Spot VM) taint](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool). For all Spot VMs, AKS injects a taint kubernetes.azure.com/scalesetpriority=spot:NoSchedule, to ensure that only workloads that can handle interruptions are scheduled on Spot nodes. To [schedule a pod to run on Spot node](https://learn.microsoft.com/en-us/azure/aks/spot-node-pool#schedule-a-pod-to-run-on-the-spot-node), add a toleration but dont include the nodeAffinity (not supported for Spot Ocean), this will prevent the pod from being scheduled using Spot Ocean.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.azure.OceanNpUpdatePolicy>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}
