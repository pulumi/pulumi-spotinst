// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst Ocean AKS Virtual Node Groups resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const example = new spotinst.azure.OceanNpVirtualNodeGroup("example", {
 *     name: "testVng",
 *     oceanId: "o-134abcd",
 *     headrooms: [{
 *         cpuPerUnit: 1024,
 *         memoryPerUnit: 512,
 *         gpuPerUnit: 0,
 *         numOfUnits: 2,
 *     }],
 *     availabilityZones: [
 *         "1",
 *         "2",
 *         "3",
 *     ],
 *     labels: {
 *         key: "env",
 *         value: "test",
 *     },
 *     minCount: 1,
 *     maxCount: 100,
 *     maxPodsPerNode: 30,
 *     enableNodePublicIp: true,
 *     osDiskSizeGb: 30,
 *     osDiskType: "Managed",
 *     osType: "Linux",
 *     osSku: "Ubuntu",
 *     kubernetesVersion: "1.26",
 *     podSubnetIds: ["/subscriptions/123456-1234-1234-1234-123456789/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/virtualNetworks/ExampleVirtualNetwork/subnets/default"],
 *     vnetSubnetIds: ["/subscriptions/123456-1234-1234-1234-123456789/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/virtualNetworks/ExampleVirtualNetwork/subnets/default"],
 *     linuxOsConfigs: [{
 *         sysctls: [{
 *             vmMaxMapCount: 79550,
 *         }],
 *     }],
 *     spotPercentage: 50,
 *     fallbackToOndemand: true,
 *     taints: [{
 *         key: "taintKey",
 *         value: "taintValue",
 *         effect: "NoSchedule",
 *     }],
 *     tags: {
 *         tagKey: "env",
 *         tagValue: "staging",
 *     },
 *     filters: {
 *         minVcpu: 2,
 *         maxVcpu: 16,
 *         minMemoryGib: 8,
 *         maxMemoryGib: 128,
 *         architectures: [
 *             "x86_64",
 *             "arm64",
 *         ],
 *         series: [
 *             "D v3",
 *             "Dds_v4",
 *             "Dsv2",
 *         ],
 *         excludeSeries: [
 *             "Av2",
 *             "A",
 *             "Bs",
 *             "D",
 *             "E",
 *         ],
 *         acceleratedNetworking: "Enabled",
 *         diskPerformance: "Premium",
 *         minGpu: 1,
 *         maxGpu: 2,
 *         minNics: 1,
 *         vmTypes: [
 *             "generalPurpose",
 *             "GPU",
 *         ],
 *         minDisk: 1,
 *         gpuTypes: ["nvidia-tesla-t4"],
 *     },
 *     scheduling: {
 *         shutdownHours: {
 *             isEnabled: true,
 *             timeWindows: [
 *                 "Fri:15:30-Sat:20:30",
 *                 "Sun:08:30-Mon:08:30",
 *             ],
 *         },
 *     },
 * });
 * ```
 */
export class OceanNpVirtualNodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing OceanNpVirtualNodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanNpVirtualNodeGroupState, opts?: pulumi.CustomResourceOptions): OceanNpVirtualNodeGroup {
        return new OceanNpVirtualNodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:azure/oceanNpVirtualNodeGroup:OceanNpVirtualNodeGroup';

    /**
     * Returns true if the given object is an instance of OceanNpVirtualNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanNpVirtualNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanNpVirtualNodeGroup.__pulumiType;
    }

    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    declare public readonly availabilityZones: pulumi.Output<string[] | undefined>;
    /**
     * Enable node public IP.
     */
    declare public readonly enableNodePublicIp: pulumi.Output<boolean | undefined>;
    /**
     * If no spot instance markets are available, enable Ocean to launch on-demand instances instead.
     */
    declare public readonly fallbackToOndemand: pulumi.Output<boolean | undefined>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    declare public readonly filters: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupFilters | undefined>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    declare public readonly headrooms: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupHeadroom[] | undefined>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    declare public readonly kubernetesVersion: pulumi.Output<string | undefined>;
    /**
     * An array of labels to add to the virtual node group.Only custom user labels are allowed, and not Kubernetes built-in labels or Spot internal labels.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Custom Linux OS configuration.
     */
    declare public readonly linuxOsConfigs: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupLinuxOsConfig[] | undefined>;
    /**
     * Maximum node count limit.
     */
    declare public readonly maxCount: pulumi.Output<number | undefined>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    declare public readonly maxPodsPerNode: pulumi.Output<number | undefined>;
    /**
     * Minimum node count limit.
     */
    declare public readonly minCount: pulumi.Output<number | undefined>;
    /**
     * Enter a name for the virtual node group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Ocean cluster identifier. Required for Launch Spec creation.
     */
    declare public readonly oceanId: pulumi.Output<string>;
    /**
     * The size of the OS disk in GB.
     */
    declare public readonly osDiskSizeGb: pulumi.Output<number | undefined>;
    /**
     * The type of the OS disk.
     */
    declare public readonly osDiskType: pulumi.Output<string | undefined>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    declare public readonly osSku: pulumi.Output<string | undefined>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    declare public readonly osType: pulumi.Output<string | undefined>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    declare public readonly podSubnetIds: pulumi.Output<string[] | undefined>;
    /**
     * An object used to specify times when the virtual node group will turn off all its node pools. Once the shutdown time will be over, the virtual node group will return to its previous state.
     */
    declare public readonly scheduling: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupScheduling | undefined>;
    /**
     * Percentage of spot VMs to maintain.
     */
    declare public readonly spotPercentage: pulumi.Output<number | undefined>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Add taints to a virtual node group.
     */
    declare public readonly taints: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupTaint[] | undefined>;
    declare public readonly updatePolicy: pulumi.Output<outputs.azure.OceanNpVirtualNodeGroupUpdatePolicy | undefined>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    declare public readonly vnetSubnetIds: pulumi.Output<string[] | undefined>;

    /**
     * Create a OceanNpVirtualNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanNpVirtualNodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanNpVirtualNodeGroupArgs | OceanNpVirtualNodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanNpVirtualNodeGroupState | undefined;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["enableNodePublicIp"] = state?.enableNodePublicIp;
            resourceInputs["fallbackToOndemand"] = state?.fallbackToOndemand;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["headrooms"] = state?.headrooms;
            resourceInputs["kubernetesVersion"] = state?.kubernetesVersion;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["linuxOsConfigs"] = state?.linuxOsConfigs;
            resourceInputs["maxCount"] = state?.maxCount;
            resourceInputs["maxPodsPerNode"] = state?.maxPodsPerNode;
            resourceInputs["minCount"] = state?.minCount;
            resourceInputs["name"] = state?.name;
            resourceInputs["oceanId"] = state?.oceanId;
            resourceInputs["osDiskSizeGb"] = state?.osDiskSizeGb;
            resourceInputs["osDiskType"] = state?.osDiskType;
            resourceInputs["osSku"] = state?.osSku;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["podSubnetIds"] = state?.podSubnetIds;
            resourceInputs["scheduling"] = state?.scheduling;
            resourceInputs["spotPercentage"] = state?.spotPercentage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
            resourceInputs["updatePolicy"] = state?.updatePolicy;
            resourceInputs["vnetSubnetIds"] = state?.vnetSubnetIds;
        } else {
            const args = argsOrState as OceanNpVirtualNodeGroupArgs | undefined;
            if (args?.oceanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["enableNodePublicIp"] = args?.enableNodePublicIp;
            resourceInputs["fallbackToOndemand"] = args?.fallbackToOndemand;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["headrooms"] = args?.headrooms;
            resourceInputs["kubernetesVersion"] = args?.kubernetesVersion;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["linuxOsConfigs"] = args?.linuxOsConfigs;
            resourceInputs["maxCount"] = args?.maxCount;
            resourceInputs["maxPodsPerNode"] = args?.maxPodsPerNode;
            resourceInputs["minCount"] = args?.minCount;
            resourceInputs["name"] = args?.name;
            resourceInputs["oceanId"] = args?.oceanId;
            resourceInputs["osDiskSizeGb"] = args?.osDiskSizeGb;
            resourceInputs["osDiskType"] = args?.osDiskType;
            resourceInputs["osSku"] = args?.osSku;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["podSubnetIds"] = args?.podSubnetIds;
            resourceInputs["scheduling"] = args?.scheduling;
            resourceInputs["spotPercentage"] = args?.spotPercentage;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["updatePolicy"] = args?.updatePolicy;
            resourceInputs["vnetSubnetIds"] = args?.vnetSubnetIds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanNpVirtualNodeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanNpVirtualNodeGroup resources.
 */
export interface OceanNpVirtualNodeGroupState {
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable node public IP.
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * If no spot instance markets are available, enable Ocean to launch on-demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    filters?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupFilters>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    headrooms?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupHeadroom>[]>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * An array of labels to add to the virtual node group.Only custom user labels are allowed, and not Kubernetes built-in labels or Spot internal labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom Linux OS configuration.
     */
    linuxOsConfigs?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupLinuxOsConfig>[]>;
    /**
     * Maximum node count limit.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    /**
     * Minimum node count limit.
     */
    minCount?: pulumi.Input<number>;
    /**
     * Enter a name for the virtual node group.
     */
    name?: pulumi.Input<string>;
    /**
     * The Ocean cluster identifier. Required for Launch Spec creation.
     */
    oceanId?: pulumi.Input<string>;
    /**
     * The size of the OS disk in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of the OS disk.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    osType?: pulumi.Input<string>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object used to specify times when the virtual node group will turn off all its node pools. Once the shutdown time will be over, the virtual node group will return to its previous state.
     */
    scheduling?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupScheduling>;
    /**
     * Percentage of spot VMs to maintain.
     */
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add taints to a virtual node group.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupUpdatePolicy>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanNpVirtualNodeGroup resource.
 */
export interface OceanNpVirtualNodeGroupArgs {
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable node public IP.
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * If no spot instance markets are available, enable Ocean to launch on-demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     */
    filters?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupFilters>;
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     */
    headrooms?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupHeadroom>[]>;
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * An array of labels to add to the virtual node group.Only custom user labels are allowed, and not Kubernetes built-in labels or Spot internal labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom Linux OS configuration.
     */
    linuxOsConfigs?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupLinuxOsConfig>[]>;
    /**
     * Maximum node count limit.
     */
    maxCount?: pulumi.Input<number>;
    /**
     * The maximum number of pods per node in the node pools.
     */
    maxPodsPerNode?: pulumi.Input<number>;
    /**
     * Minimum node count limit.
     */
    minCount?: pulumi.Input<number>;
    /**
     * Enter a name for the virtual node group.
     */
    name?: pulumi.Input<string>;
    /**
     * The Ocean cluster identifier. Required for Launch Spec creation.
     */
    oceanId: pulumi.Input<string>;
    /**
     * The size of the OS disk in GB.
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * The type of the OS disk.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     */
    osSku?: pulumi.Input<string>;
    /**
     * The OS type of the OS disk. Can't be modified once set.
     */
    osType?: pulumi.Input<string>;
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     */
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An object used to specify times when the virtual node group will turn off all its node pools. Once the shutdown time will be over, the virtual node group will return to its previous state.
     */
    scheduling?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupScheduling>;
    /**
     * Percentage of spot VMs to maintain.
     */
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Add taints to a virtual node group.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.azure.OceanNpVirtualNodeGroupUpdatePolicy>;
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     */
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}
