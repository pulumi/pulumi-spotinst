// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst Ocean AKS resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const example = new spotinst.azure.Ocean("example", {
 *     // --- AKS -----------------------------------------------------------
 *     acdIdentifier: "acd-12345",
 *     aksName: "AKSName",
 *     aksResourceGroupName: "ResourceGroupName",
 *     controllerClusterId: "controller-cluster-id",
 *     // --- LOGIN ---------------------------------------------------------
 *     sshPublicKey: "ssh-rsa [... redacted ...] generated-by-azure",
 *     userName: "some-name",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const oceanId = spotinst_ocean_aks_.example.id;
 * ```
 */
export class Ocean extends pulumi.CustomResource {
    /**
     * Get an existing Ocean resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanState, opts?: pulumi.CustomResourceOptions): Ocean {
        return new Ocean(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:azure/ocean:Ocean';

    /**
     * Returns true if the given object is an instance of Ocean.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ocean {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ocean.__pulumiType;
    }

    /**
     * The AKS identifier.
     */
    public readonly acdIdentifier!: pulumi.Output<string>;
    /**
     * The AKS cluster name.
     */
    public readonly aksName!: pulumi.Output<string>;
    /**
     * Name of the Resource Group for AKS cluster.
     */
    public readonly aksResourceGroupName!: pulumi.Output<string>;
    /**
     * The Ocean controller cluster.
     */
    public readonly controllerClusterId!: pulumi.Output<string>;
    /**
     * The Ocean cluster name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SSH public key for admin access to Linux VMs.
     */
    public readonly sshPublicKey!: pulumi.Output<string>;
    /**
     * Username for admin access to VMs.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a Ocean resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanArgs | OceanState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanState | undefined;
            inputs["acdIdentifier"] = state ? state.acdIdentifier : undefined;
            inputs["aksName"] = state ? state.aksName : undefined;
            inputs["aksResourceGroupName"] = state ? state.aksResourceGroupName : undefined;
            inputs["controllerClusterId"] = state ? state.controllerClusterId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            inputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as OceanArgs | undefined;
            if ((!args || args.acdIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acdIdentifier'");
            }
            if ((!args || args.aksName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksName'");
            }
            if ((!args || args.aksResourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aksResourceGroupName'");
            }
            if ((!args || args.sshPublicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshPublicKey'");
            }
            inputs["acdIdentifier"] = args ? args.acdIdentifier : undefined;
            inputs["aksName"] = args ? args.aksName : undefined;
            inputs["aksResourceGroupName"] = args ? args.aksResourceGroupName : undefined;
            inputs["controllerClusterId"] = args ? args.controllerClusterId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            inputs["userName"] = args ? args.userName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Ocean.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ocean resources.
 */
export interface OceanState {
    /**
     * The AKS identifier.
     */
    readonly acdIdentifier?: pulumi.Input<string>;
    /**
     * The AKS cluster name.
     */
    readonly aksName?: pulumi.Input<string>;
    /**
     * Name of the Resource Group for AKS cluster.
     */
    readonly aksResourceGroupName?: pulumi.Input<string>;
    /**
     * The Ocean controller cluster.
     */
    readonly controllerClusterId?: pulumi.Input<string>;
    /**
     * The Ocean cluster name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * SSH public key for admin access to Linux VMs.
     */
    readonly sshPublicKey?: pulumi.Input<string>;
    /**
     * Username for admin access to VMs.
     */
    readonly userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ocean resource.
 */
export interface OceanArgs {
    /**
     * The AKS identifier.
     */
    readonly acdIdentifier: pulumi.Input<string>;
    /**
     * The AKS cluster name.
     */
    readonly aksName: pulumi.Input<string>;
    /**
     * Name of the Resource Group for AKS cluster.
     */
    readonly aksResourceGroupName: pulumi.Input<string>;
    /**
     * The Ocean controller cluster.
     */
    readonly controllerClusterId?: pulumi.Input<string>;
    /**
     * The Ocean cluster name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * SSH public key for admin access to Linux VMs.
     */
    readonly sshPublicKey: pulumi.Input<string>;
    /**
     * Username for admin access to VMs.
     */
    readonly userName?: pulumi.Input<string>;
}
