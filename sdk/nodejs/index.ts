// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { CredentialsAzureArgs, CredentialsAzureState } from "./credentialsAzure";
export type CredentialsAzure = import("./credentialsAzure").CredentialsAzure;
export const CredentialsAzure: typeof import("./credentialsAzure").CredentialsAzure = null as any;
utilities.lazyLoad(exports, ["CredentialsAzure"], () => require("./credentialsAzure"));

export { CredentialsGcpArgs, CredentialsGcpState } from "./credentialsGcp";
export type CredentialsGcp = import("./credentialsGcp").CredentialsGcp;
export const CredentialsGcp: typeof import("./credentialsGcp").CredentialsGcp = null as any;
utilities.lazyLoad(exports, ["CredentialsGcp"], () => require("./credentialsGcp"));

export { DataIntegrationArgs, DataIntegrationState } from "./dataIntegration";
export type DataIntegration = import("./dataIntegration").DataIntegration;
export const DataIntegration: typeof import("./dataIntegration").DataIntegration = null as any;
utilities.lazyLoad(exports, ["DataIntegration"], () => require("./dataIntegration"));

export { ElastigroupAzureV3Args, ElastigroupAzureV3State } from "./elastigroupAzureV3";
export type ElastigroupAzureV3 = import("./elastigroupAzureV3").ElastigroupAzureV3;
export const ElastigroupAzureV3: typeof import("./elastigroupAzureV3").ElastigroupAzureV3 = null as any;
utilities.lazyLoad(exports, ["ElastigroupAzureV3"], () => require("./elastigroupAzureV3"));

export { HealthCheckArgs, HealthCheckState } from "./healthCheck";
export type HealthCheck = import("./healthCheck").HealthCheck;
export const HealthCheck: typeof import("./healthCheck").HealthCheck = null as any;
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));

export { NotificationCenterArgs, NotificationCenterState } from "./notificationCenter";
export type NotificationCenter = import("./notificationCenter").NotificationCenter;
export const NotificationCenter: typeof import("./notificationCenter").NotificationCenter = null as any;
utilities.lazyLoad(exports, ["NotificationCenter"], () => require("./notificationCenter"));

export { OceanRightSizingRuleArgs, OceanRightSizingRuleState } from "./oceanRightSizingRule";
export type OceanRightSizingRule = import("./oceanRightSizingRule").OceanRightSizingRule;
export const OceanRightSizingRule: typeof import("./oceanRightSizingRule").OceanRightSizingRule = null as any;
utilities.lazyLoad(exports, ["OceanRightSizingRule"], () => require("./oceanRightSizingRule"));

export * from "./provider";
import { Provider } from "./provider";

export { StatefulNodeAzureArgs, StatefulNodeAzureState } from "./statefulNodeAzure";
export type StatefulNodeAzure = import("./statefulNodeAzure").StatefulNodeAzure;
export const StatefulNodeAzure: typeof import("./statefulNodeAzure").StatefulNodeAzure = null as any;
utilities.lazyLoad(exports, ["StatefulNodeAzure"], () => require("./statefulNodeAzure"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));


// Export sub-modules:
import * as aws from "./aws";
import * as azure from "./azure";
import * as config from "./config";
import * as ecs from "./ecs";
import * as gcp from "./gcp";
import * as gke from "./gke";
import * as oceancd from "./oceancd";
import * as organization from "./organization";
import * as spark from "./spark";
import * as types from "./types";

export {
    aws,
    azure,
    config,
    ecs,
    gcp,
    gke,
    oceancd,
    organization,
    spark,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "spotinst:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "spotinst:index/credentialsAzure:CredentialsAzure":
                return new CredentialsAzure(name, <any>undefined, { urn })
            case "spotinst:index/credentialsGcp:CredentialsGcp":
                return new CredentialsGcp(name, <any>undefined, { urn })
            case "spotinst:index/dataIntegration:DataIntegration":
                return new DataIntegration(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupAzureV3:ElastigroupAzureV3":
                return new ElastigroupAzureV3(name, <any>undefined, { urn })
            case "spotinst:index/healthCheck:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "spotinst:index/notificationCenter:NotificationCenter":
                return new NotificationCenter(name, <any>undefined, { urn })
            case "spotinst:index/oceanRightSizingRule:OceanRightSizingRule":
                return new OceanRightSizingRule(name, <any>undefined, { urn })
            case "spotinst:index/statefulNodeAzure:StatefulNodeAzure":
                return new StatefulNodeAzure(name, <any>undefined, { urn })
            case "spotinst:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("spotinst", "index/account", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/credentialsAzure", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/credentialsGcp", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/dataIntegration", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupAzureV3", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/healthCheck", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/notificationCenter", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanRightSizingRule", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/statefulNodeAzure", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/subscription", _module)
pulumi.runtime.registerResourcePackage("spotinst", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:spotinst") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
