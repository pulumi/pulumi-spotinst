// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst OceanCD Rollout Spec resource.
 */
export class RolloutSpec extends pulumi.CustomResource {
    /**
     * Get an existing RolloutSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolloutSpecState, opts?: pulumi.CustomResourceOptions): RolloutSpec {
        return new RolloutSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:oceancd/rolloutSpec:RolloutSpec';

    /**
     * Returns true if the given object is an instance of RolloutSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RolloutSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolloutSpec.__pulumiType;
    }

    /**
     * Holds information on how to react when failure happens.
     */
    declare public readonly failurePolicy: pulumi.Output<outputs.oceancd.RolloutSpecFailurePolicy | undefined>;
    /**
     * Identifier name for Ocean CD Rollout Spec. Must be unique
     */
    declare public readonly rolloutSpecName: pulumi.Output<string>;
    /**
     * Represents the SpotDeployment selector.
     */
    declare public readonly spotDeployment: pulumi.Output<outputs.oceancd.RolloutSpecSpotDeployment | undefined>;
    /**
     * You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
     */
    declare public readonly spotDeployments: pulumi.Output<outputs.oceancd.RolloutSpecSpotDeployment[] | undefined>;
    /**
     * Determines the Ocean CD strategy
     */
    declare public readonly strategy: pulumi.Output<outputs.oceancd.RolloutSpecStrategy>;
    /**
     * Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
     */
    declare public readonly traffic: pulumi.Output<outputs.oceancd.RolloutSpecTraffic | undefined>;

    /**
     * Create a RolloutSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolloutSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolloutSpecArgs | RolloutSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolloutSpecState | undefined;
            resourceInputs["failurePolicy"] = state?.failurePolicy;
            resourceInputs["rolloutSpecName"] = state?.rolloutSpecName;
            resourceInputs["spotDeployment"] = state?.spotDeployment;
            resourceInputs["spotDeployments"] = state?.spotDeployments;
            resourceInputs["strategy"] = state?.strategy;
            resourceInputs["traffic"] = state?.traffic;
        } else {
            const args = argsOrState as RolloutSpecArgs | undefined;
            if (args?.rolloutSpecName === undefined && !opts.urn) {
                throw new Error("Missing required property 'rolloutSpecName'");
            }
            if (args?.strategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["failurePolicy"] = args?.failurePolicy;
            resourceInputs["rolloutSpecName"] = args?.rolloutSpecName;
            resourceInputs["spotDeployment"] = args?.spotDeployment;
            resourceInputs["spotDeployments"] = args?.spotDeployments;
            resourceInputs["strategy"] = args?.strategy;
            resourceInputs["traffic"] = args?.traffic;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RolloutSpec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RolloutSpec resources.
 */
export interface RolloutSpecState {
    /**
     * Holds information on how to react when failure happens.
     */
    failurePolicy?: pulumi.Input<inputs.oceancd.RolloutSpecFailurePolicy>;
    /**
     * Identifier name for Ocean CD Rollout Spec. Must be unique
     */
    rolloutSpecName?: pulumi.Input<string>;
    /**
     * Represents the SpotDeployment selector.
     */
    spotDeployment?: pulumi.Input<inputs.oceancd.RolloutSpecSpotDeployment>;
    /**
     * You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
     */
    spotDeployments?: pulumi.Input<pulumi.Input<inputs.oceancd.RolloutSpecSpotDeployment>[]>;
    /**
     * Determines the Ocean CD strategy
     */
    strategy?: pulumi.Input<inputs.oceancd.RolloutSpecStrategy>;
    /**
     * Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
     */
    traffic?: pulumi.Input<inputs.oceancd.RolloutSpecTraffic>;
}

/**
 * The set of arguments for constructing a RolloutSpec resource.
 */
export interface RolloutSpecArgs {
    /**
     * Holds information on how to react when failure happens.
     */
    failurePolicy?: pulumi.Input<inputs.oceancd.RolloutSpecFailurePolicy>;
    /**
     * Identifier name for Ocean CD Rollout Spec. Must be unique
     */
    rolloutSpecName: pulumi.Input<string>;
    /**
     * Represents the SpotDeployment selector.
     */
    spotDeployment?: pulumi.Input<inputs.oceancd.RolloutSpecSpotDeployment>;
    /**
     * You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
     */
    spotDeployments?: pulumi.Input<pulumi.Input<inputs.oceancd.RolloutSpecSpotDeployment>[]>;
    /**
     * Determines the Ocean CD strategy
     */
    strategy: pulumi.Input<inputs.oceancd.RolloutSpecStrategy>;
    /**
     * Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
     */
    traffic?: pulumi.Input<inputs.oceancd.RolloutSpecTraffic>;
}
