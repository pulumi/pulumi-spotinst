// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanRightSizingRule extends pulumi.CustomResource {
    /**
     * Get an existing OceanRightSizingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanRightSizingRuleState, opts?: pulumi.CustomResourceOptions): OceanRightSizingRule {
        return new OceanRightSizingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanRightSizingRule:OceanRightSizingRule';

    /**
     * Returns true if the given object is an instance of OceanRightSizingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanRightSizingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanRightSizingRule.__pulumiType;
    }

    declare public readonly attachWorkloads: pulumi.Output<outputs.OceanRightSizingRuleAttachWorkload[] | undefined>;
    declare public readonly autoApplyDefinitions: pulumi.Output<outputs.OceanRightSizingRuleAutoApplyDefinition[] | undefined>;
    declare public readonly detachWorkloads: pulumi.Output<outputs.OceanRightSizingRuleDetachWorkload[] | undefined>;
    declare public readonly downsideOnly: pulumi.Output<boolean | undefined>;
    declare public readonly excludePreliminaryRecommendations: pulumi.Output<boolean | undefined>;
    declare public readonly oceanId: pulumi.Output<string | undefined>;
    declare public readonly recommendationApplicationBoundaries: pulumi.Output<outputs.OceanRightSizingRuleRecommendationApplicationBoundary[] | undefined>;
    declare public readonly recommendationApplicationHpas: pulumi.Output<outputs.OceanRightSizingRuleRecommendationApplicationHpa[] | undefined>;
    declare public readonly recommendationApplicationIntervals: pulumi.Output<outputs.OceanRightSizingRuleRecommendationApplicationInterval[]>;
    declare public readonly recommendationApplicationMinThresholds: pulumi.Output<outputs.OceanRightSizingRuleRecommendationApplicationMinThreshold[] | undefined>;
    declare public readonly recommendationApplicationOverheadValues: pulumi.Output<outputs.OceanRightSizingRuleRecommendationApplicationOverheadValue[] | undefined>;
    declare public readonly restartReplicas: pulumi.Output<string | undefined>;
    declare public readonly ruleName: pulumi.Output<string>;

    /**
     * Create a OceanRightSizingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanRightSizingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanRightSizingRuleArgs | OceanRightSizingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanRightSizingRuleState | undefined;
            resourceInputs["attachWorkloads"] = state?.attachWorkloads;
            resourceInputs["autoApplyDefinitions"] = state?.autoApplyDefinitions;
            resourceInputs["detachWorkloads"] = state?.detachWorkloads;
            resourceInputs["downsideOnly"] = state?.downsideOnly;
            resourceInputs["excludePreliminaryRecommendations"] = state?.excludePreliminaryRecommendations;
            resourceInputs["oceanId"] = state?.oceanId;
            resourceInputs["recommendationApplicationBoundaries"] = state?.recommendationApplicationBoundaries;
            resourceInputs["recommendationApplicationHpas"] = state?.recommendationApplicationHpas;
            resourceInputs["recommendationApplicationIntervals"] = state?.recommendationApplicationIntervals;
            resourceInputs["recommendationApplicationMinThresholds"] = state?.recommendationApplicationMinThresholds;
            resourceInputs["recommendationApplicationOverheadValues"] = state?.recommendationApplicationOverheadValues;
            resourceInputs["restartReplicas"] = state?.restartReplicas;
            resourceInputs["ruleName"] = state?.ruleName;
        } else {
            const args = argsOrState as OceanRightSizingRuleArgs | undefined;
            if (args?.recommendationApplicationIntervals === undefined && !opts.urn) {
                throw new Error("Missing required property 'recommendationApplicationIntervals'");
            }
            if (args?.ruleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["attachWorkloads"] = args?.attachWorkloads;
            resourceInputs["autoApplyDefinitions"] = args?.autoApplyDefinitions;
            resourceInputs["detachWorkloads"] = args?.detachWorkloads;
            resourceInputs["downsideOnly"] = args?.downsideOnly;
            resourceInputs["excludePreliminaryRecommendations"] = args?.excludePreliminaryRecommendations;
            resourceInputs["oceanId"] = args?.oceanId;
            resourceInputs["recommendationApplicationBoundaries"] = args?.recommendationApplicationBoundaries;
            resourceInputs["recommendationApplicationHpas"] = args?.recommendationApplicationHpas;
            resourceInputs["recommendationApplicationIntervals"] = args?.recommendationApplicationIntervals;
            resourceInputs["recommendationApplicationMinThresholds"] = args?.recommendationApplicationMinThresholds;
            resourceInputs["recommendationApplicationOverheadValues"] = args?.recommendationApplicationOverheadValues;
            resourceInputs["restartReplicas"] = args?.restartReplicas;
            resourceInputs["ruleName"] = args?.ruleName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanRightSizingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanRightSizingRule resources.
 */
export interface OceanRightSizingRuleState {
    attachWorkloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAttachWorkload>[]>;
    autoApplyDefinitions?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAutoApplyDefinition>[]>;
    detachWorkloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleDetachWorkload>[]>;
    downsideOnly?: pulumi.Input<boolean>;
    excludePreliminaryRecommendations?: pulumi.Input<boolean>;
    oceanId?: pulumi.Input<string>;
    recommendationApplicationBoundaries?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationBoundary>[]>;
    recommendationApplicationHpas?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationHpa>[]>;
    recommendationApplicationIntervals?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationInterval>[]>;
    recommendationApplicationMinThresholds?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationMinThreshold>[]>;
    recommendationApplicationOverheadValues?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationOverheadValue>[]>;
    restartReplicas?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OceanRightSizingRule resource.
 */
export interface OceanRightSizingRuleArgs {
    attachWorkloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAttachWorkload>[]>;
    autoApplyDefinitions?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleAutoApplyDefinition>[]>;
    detachWorkloads?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleDetachWorkload>[]>;
    downsideOnly?: pulumi.Input<boolean>;
    excludePreliminaryRecommendations?: pulumi.Input<boolean>;
    oceanId?: pulumi.Input<string>;
    recommendationApplicationBoundaries?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationBoundary>[]>;
    recommendationApplicationHpas?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationHpa>[]>;
    recommendationApplicationIntervals: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationInterval>[]>;
    recommendationApplicationMinThresholds?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationMinThreshold>[]>;
    recommendationApplicationOverheadValues?: pulumi.Input<pulumi.Input<inputs.OceanRightSizingRuleRecommendationApplicationOverheadValue>[]>;
    restartReplicas?: pulumi.Input<string>;
    ruleName: pulumi.Input<string>;
}
