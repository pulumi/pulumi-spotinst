// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Spotinst subscription resource.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * // Create a Subscription
 * const defaultSubscription = new spotinst.Subscription("default-subscription", {
 *     endpoint: "http://endpoint.com",
 *     eventType: "AWS_EC2_INSTANCE_LAUNCH",
 *     format: {
 *         event: "%event%",
 *         instance_id: "%instance-id%",
 *         resource_id: "%resource-id%",
 *         resource_name: "%resource-name%",
 *         tags: "foo,baz,baz",
 *     },
 *     protocol: "http",
 *     resourceId: spotinst_elastigroup_aws_my_eg.id,
 * });
 * ```
 */
export class Subscription extends pulumi.CustomResource {
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionState, opts?: pulumi.CustomResourceOptions): Subscription {
        return new Subscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/subscription:Subscription';

    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }

    /**
     * The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
     * `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
     * `"GROUP_UPDATED"`,
     * `"AWS_EMR_PROVISION_TIMEOUT"`,
     * `"GROUP_BEANSTALK_INIT_READY"`,
     * `"AZURE_VM_TERMINATED"`,
     * `"AZURE_VM_TERMINATE"`,
     * `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
     * Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
     */
    public readonly eventType!: pulumi.Output<string>;
    /**
     * The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
     * Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
     * Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
     */
    public readonly format!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`. 
     * The following values are deprecated: `"http"` , `"https"`
     * You can use the generic `"web"` protocol instead.
     * `"aws-sns"` is only supported with AWS provider
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Spotinst Resource id (Elastigroup or Ocean ID).
     */
    public readonly resourceId!: pulumi.Output<string>;

    /**
     * Create a Subscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionArgs | SubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SubscriptionState | undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["eventType"] = state ? state.eventType : undefined;
            inputs["format"] = state ? state.format : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
        } else {
            const args = argsOrState as SubscriptionArgs | undefined;
            if (!args || args.endpoint === undefined) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (!args || args.eventType === undefined) {
                throw new Error("Missing required property 'eventType'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.resourceId === undefined) {
                throw new Error("Missing required property 'resourceId'");
            }
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["eventType"] = args ? args.eventType : undefined;
            inputs["format"] = args ? args.format : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Subscription.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subscription resources.
 */
export interface SubscriptionState {
    /**
     * The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
     */
    readonly endpoint?: pulumi.Input<string>;
    /**
     * The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
     * `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
     * `"GROUP_UPDATED"`,
     * `"AWS_EMR_PROVISION_TIMEOUT"`,
     * `"GROUP_BEANSTALK_INIT_READY"`,
     * `"AZURE_VM_TERMINATED"`,
     * `"AZURE_VM_TERMINATE"`,
     * `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
     * Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
     */
    readonly eventType?: pulumi.Input<string>;
    /**
     * The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
     * Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
     * Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
     */
    readonly format?: pulumi.Input<{[key: string]: any}>;
    /**
     * The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`. 
     * The following values are deprecated: `"http"` , `"https"`
     * You can use the generic `"web"` protocol instead.
     * `"aws-sns"` is only supported with AWS provider
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * Spotinst Resource id (Elastigroup or Ocean ID).
     */
    readonly resourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subscription resource.
 */
export interface SubscriptionArgs {
    /**
     * The endpoint the notification will be sent to. url in case of `"http"`/`"https"`/`"web"`, email address in case of `"email"`/`"email-json"` and sns-topic-arn in case of `"aws-sns"`.
     */
    readonly endpoint: pulumi.Input<string>;
    /**
     * The event to send the notification when triggered. Valid values: `"AWS_EC2_INSTANCE_TERMINATE"`, `"AWS_EC2_INSTANCE_TERMINATED"`, `"AWS_EC2_INSTANCE_LAUNCH"`, `"AWS_EC2_INSTANCE_READY_SIGNAL_TIMEOUT"`, `"AWS_EC2_CANT_SPIN_OD"`, `"AWS_EC2_INSTANCE_UNHEALTHY_IN_ELB"`, `"GROUP_ROLL_FAILED"`, `"GROUP_ROLL_FINISHED"`,
     * `"CANT_SCALE_UP_GROUP_MAX_CAPACITY"`,
     * `"GROUP_UPDATED"`,
     * `"AWS_EMR_PROVISION_TIMEOUT"`,
     * `"GROUP_BEANSTALK_INIT_READY"`,
     * `"AZURE_VM_TERMINATED"`,
     * `"AZURE_VM_TERMINATE"`,
     * `"AWS_EC2_MANAGED_INSTANCE_PAUSING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RESUMING"`,
     * `"AWS_EC2_MANAGED_INSTANCE_RECYCLING"`,`"AWS_EC2_MANAGED_INSTANCE_DELETING"`.
     * Ocean Events:`"CLUSTER_ROLL_FINISHED"`,`"GROUP_ROLL_FAILED"`.
     */
    readonly eventType: pulumi.Input<string>;
    /**
     * The format of the notification content (JSON Format - Key+Value). Valid Values : `"instance-id"`, `"event"`, `"resource-id"`, `"resource-name"`, `"subnet-id"`, `"availability-zone"`, `"reason"`, `"private-ip"`, `"launchspec-id"`
     * Example: {"event": `"event"`, `"resourceId"`: `"resource-id"`, `"resourceName"`: `"resource-name"`", `"myCustomKey"`: `"My content is set here"` }
     * Default: {`"event"`: `"<event>"`, `"instanceId"`: `"<instance-id>"`, `"resourceId"`: `"<resource-id>"`, `"resourceName"`: `"<resource-name>"` }.
     */
    readonly format?: pulumi.Input<{[key: string]: any}>;
    /**
     * The protocol to send the notification. Valid values: `"email"`, `"email-json"`, `"aws-sns"`, `"web"`. 
     * The following values are deprecated: `"http"` , `"https"`
     * You can use the generic `"web"` protocol instead.
     * `"aws-sns"` is only supported with AWS provider
     */
    readonly protocol: pulumi.Input<string>;
    /**
     * Spotinst Resource id (Elastigroup or Ocean ID).
     */
    readonly resourceId: pulumi.Input<string>;
}
