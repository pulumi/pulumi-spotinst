// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Spotinst User in the creator's organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const terraformUser = new spotinst.organization.User("terraformUser", {
 *     email: "abc@xyz.com",
 *     firstName: "test",
 *     lastName: "user",
 *     password: "testUser@123",
 *     policies: [{
 *         policyAccountIds: ["act-abcf4245"],
 *         policyId: "pol-abcd1236",
 *     }],
 *     role: "viewer",
 *     userGroupIds: [
 *         "ugr-abcd1234",
 *         "ugr-defg8763",
 *     ],
 * });
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:organization/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Email.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The first name of the user.
     */
    public readonly firstName!: pulumi.Output<string>;
    /**
     * The last name of the user.
     */
    public readonly lastName!: pulumi.Output<string>;
    /**
     * Password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The policies to register under the given group
     * (should be existing policies only).
     */
    public readonly policies!: pulumi.Output<outputs.organization.UserPolicy[] | undefined>;
    /**
     * User's role.
     */
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * A list of the user groups to register the given user to (should be existing user groups only)
     */
    public readonly userGroupIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Email.
     */
    email?: pulumi.Input<string>;
    /**
     * The first name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * Password.
     */
    password?: pulumi.Input<string>;
    /**
     * The policies to register under the given group
     * (should be existing policies only).
     */
    policies?: pulumi.Input<pulumi.Input<inputs.organization.UserPolicy>[]>;
    /**
     * User's role.
     */
    role?: pulumi.Input<string>;
    /**
     * A list of the user groups to register the given user to (should be existing user groups only)
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Email.
     */
    email: pulumi.Input<string>;
    /**
     * The first name of the user.
     */
    firstName: pulumi.Input<string>;
    /**
     * The last name of the user.
     */
    lastName: pulumi.Input<string>;
    /**
     * Password.
     */
    password?: pulumi.Input<string>;
    /**
     * The policies to register under the given group
     * (should be existing policies only).
     */
    policies?: pulumi.Input<pulumi.Input<inputs.organization.UserPolicy>[]>;
    /**
     * User's role.
     */
    role?: pulumi.Input<string>;
    /**
     * A list of the user groups to register the given user to (should be existing user groups only)
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
