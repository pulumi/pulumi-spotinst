// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Spotinst access policy.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const terraformPolicy = new spotinst.organization.Policy("terraform_policy", {
 *     name: "test-policy",
 *     description: "policy by terraform",
 *     policyContents: [{
 *         statements: [
 *             {
 *                 actions: ["ocean:deleteCluster"],
 *                 effect: "DENY",
 *                 resources: [
 *                     "o-abcd1234",
 *                     "o-defg6789",
 *                 ],
 *             },
 *             {
 *                 actions: ["ocean:createCluster"],
 *                 effect: "DENY",
 *                 resources: [
 *                     "o-fhau4752",
 *                     "o-761owf4r3",
 *                 ],
 *             },
 *         ],
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:organization/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Short description of policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the Policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set permissions objects list.
     */
    public readonly policyContents!: pulumi.Output<outputs.organization.PolicyPolicyContent[]>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyContents"] = state ? state.policyContents : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.policyContents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyContents'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyContents"] = args ? args.policyContents : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Short description of policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Set permissions objects list.
     */
    policyContents?: pulumi.Input<pulumi.Input<inputs.organization.PolicyPolicyContent>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Short description of policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Set permissions objects list.
     */
    policyContents: pulumi.Input<pulumi.Input<inputs.organization.PolicyPolicyContent>[]>;
}
