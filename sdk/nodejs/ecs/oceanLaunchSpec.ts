// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a custom Spotinst Ocean ECS Launch Spec resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const example = new spotinst.ecs.OceanLaunchSpec("example", {
 *     oceanId: "o-123456",
 *     imageId: "ami-123456",
 *     userData: "echo hello world",
 *     iamInstanceProfile: "iam-profile",
 *     subnetIds: ["subnet-12345"],
 *     securityGroupIds: ["awseb-12345"],
 *     restrictScaleDown: true,
 *     instanceTypes: [
 *         "m3.large",
 *         "m3.xlarge",
 *         "m3.2xlarge",
 *         "m4.large",
 *         "m4.xlarge",
 *         "m4.4xlarge",
 *         "m4.2xlarge",
 *         "m4.10xlarge",
 *         "m4.16xlarge",
 *         "m5.large",
 *         "m5.xlarge",
 *         "m5.2xlarge",
 *         "m5.4xlarge",
 *         "m5.12xlarge",
 *         "m5.24xlarge",
 *     ],
 *     preferredSpotTypes: [
 *         "m3.large",
 *         "m3.xlarge",
 *         "m3.2xlarge",
 *         "m4.large",
 *         "m4.xlarge",
 *     ],
 *     blockDeviceMappings: [{
 *         deviceName: "/dev/xvda1",
 *         ebs: {
 *             deleteOnTermination: true,
 *             encrypted: false,
 *             volumeType: "gp2",
 *             volumeSize: 50,
 *             throughput: 500,
 *             dynamicVolumeSize: {
 *                 baseSize: 50,
 *                 resource: "CPU",
 *                 sizePerResourceUnit: 20,
 *             },
 *         },
 *     }],
 *     attributes: [{
 *         key: "fakeKey",
 *         value: "fakeValue",
 *     }],
 *     instanceMetadataOptions: {
 *         httpTokens: "required",
 *         httpPutResponseHopLimit: 10,
 *     },
 *     autoscaleHeadrooms: [{
 *         numOfUnits: 5,
 *         cpuPerUnit: 1000,
 *         memoryPerUnit: 2048,
 *     }],
 *     strategies: [{
 *         spotPercentage: 50,
 *     }],
 *     tags: [{
 *         key: "Env",
 *         value: "production",
 *     }],
 *     images: [
 *         {
 *             imageId: "ami-12345",
 *         },
 *         {
 *             imageId: "ami-67890",
 *         },
 *     ],
 *     schedulingTasks: [{
 *         isEnabled: true,
 *         cronExpression: "0 1 * * *",
 *         taskType: "manualHeadroomUpdate",
 *         taskHeadrooms: [{
 *             numOfUnits: 5,
 *             cpuPerUnit: 1000,
 *             memoryPerUnit: 2048,
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Launch_Specs can be imported using the Launch_Spec `id`, e.g.,
 *
 * hcl
 *
 * ```sh
 * $ pulumi import spotinst:ecs/oceanLaunchSpec:OceanLaunchSpec nameOfTheResource ols-1a2345
 * ```
 */
export class OceanLaunchSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceanLaunchSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions): OceanLaunchSpec {
        return new OceanLaunchSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:ecs/oceanLaunchSpec:OceanLaunchSpec';

    /**
     * Returns true if the given object is an instance of OceanLaunchSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanLaunchSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanLaunchSpec.__pulumiType;
    }

    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    declare public readonly attributes: pulumi.Output<outputs.ecs.OceanLaunchSpecAttribute[] | undefined>;
    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    declare public readonly autoscaleHeadrooms: pulumi.Output<outputs.ecs.OceanLaunchSpecAutoscaleHeadroom[] | undefined>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    declare public readonly blockDeviceMappings: pulumi.Output<outputs.ecs.OceanLaunchSpecBlockDeviceMapping[] | undefined>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    declare public readonly iamInstanceProfile: pulumi.Output<string | undefined>;
    /**
     * ID of the image used to launch the instances.
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    /**
     * You can configure VNG with either the imageId or images objects, but not both simultaneously. For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element
     */
    declare public readonly images: pulumi.Output<outputs.ecs.OceanLaunchSpecImage[] | undefined>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    declare public readonly instanceMetadataOptions: pulumi.Output<outputs.ecs.OceanLaunchSpecInstanceMetadataOptions | undefined>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
     */
    declare public readonly instanceTypes: pulumi.Output<string[] | undefined>;
    /**
     * The Ocean Launch Specification name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Ocean cluster ID .
     */
    declare public readonly oceanId: pulumi.Output<string>;
    /**
     * When Ocean scales up instances, it takes your preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    declare public readonly preferredSpotTypes: pulumi.Output<string[] | undefined>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    declare public readonly restrictScaleDown: pulumi.Output<boolean | undefined>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    declare public readonly schedulingTasks: pulumi.Output<outputs.ecs.OceanLaunchSpecSchedulingTask[] | undefined>;
    /**
     * One or more security group ids.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * Similar to a strategy for an Ocean cluster, but applying only to a virtual node group.
     */
    declare public readonly strategies: pulumi.Output<outputs.ecs.OceanLaunchSpecStrategy[] | undefined>;
    /**
     * Set subnets in launchSpec. Each element in the array should be a subnet ID.
     */
    declare public readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    declare public readonly tags: pulumi.Output<outputs.ecs.OceanLaunchSpecTag[] | undefined>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;

    /**
     * Create a OceanLaunchSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanLaunchSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanLaunchSpecArgs | OceanLaunchSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanLaunchSpecState | undefined;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["autoscaleHeadrooms"] = state?.autoscaleHeadrooms;
            resourceInputs["blockDeviceMappings"] = state?.blockDeviceMappings;
            resourceInputs["iamInstanceProfile"] = state?.iamInstanceProfile;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["images"] = state?.images;
            resourceInputs["instanceMetadataOptions"] = state?.instanceMetadataOptions;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["name"] = state?.name;
            resourceInputs["oceanId"] = state?.oceanId;
            resourceInputs["preferredSpotTypes"] = state?.preferredSpotTypes;
            resourceInputs["restrictScaleDown"] = state?.restrictScaleDown;
            resourceInputs["schedulingTasks"] = state?.schedulingTasks;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["strategies"] = state?.strategies;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["userData"] = state?.userData;
        } else {
            const args = argsOrState as OceanLaunchSpecArgs | undefined;
            if (args?.oceanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["autoscaleHeadrooms"] = args?.autoscaleHeadrooms;
            resourceInputs["blockDeviceMappings"] = args?.blockDeviceMappings;
            resourceInputs["iamInstanceProfile"] = args?.iamInstanceProfile;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["images"] = args?.images;
            resourceInputs["instanceMetadataOptions"] = args?.instanceMetadataOptions;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["name"] = args?.name;
            resourceInputs["oceanId"] = args?.oceanId;
            resourceInputs["preferredSpotTypes"] = args?.preferredSpotTypes;
            resourceInputs["restrictScaleDown"] = args?.restrictScaleDown;
            resourceInputs["schedulingTasks"] = args?.schedulingTasks;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["strategies"] = args?.strategies;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userData"] = args?.userData;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanLaunchSpec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OceanLaunchSpec resources.
 */
export interface OceanLaunchSpecState {
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecAttribute>[]>;
    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecBlockDeviceMapping>[]>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * You can configure VNG with either the imageId or images objects, but not both simultaneously. For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element
     */
    images?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecImage>[]>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.ecs.OceanLaunchSpecInstanceMetadataOptions>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Ocean Launch Specification name.
     */
    name?: pulumi.Input<string>;
    /**
     * The Ocean cluster ID .
     */
    oceanId?: pulumi.Input<string>;
    /**
     * When Ocean scales up instances, it takes your preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecSchedulingTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Similar to a strategy for an Ocean cluster, but applying only to a virtual node group.
     */
    strategies?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecStrategy>[]>;
    /**
     * Set subnets in launchSpec. Each element in the array should be a subnet ID.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecTag>[]>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OceanLaunchSpec resource.
 */
export interface OceanLaunchSpecArgs {
    /**
     * Optionally adds labels to instances launched in an Ocean cluster.
     */
    attributes?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecAttribute>[]>;
    /**
     * Set custom headroom per launch spec. provide list of headrooms object.
     */
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecAutoscaleHeadroom>[]>;
    /**
     * Object. Array list of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecBlockDeviceMapping>[]>;
    /**
     * The ARN or name of an IAM instance profile to associate with launched instances.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * You can configure VNG with either the imageId or images objects, but not both simultaneously. For each architecture type (amd64, arm64) only one AMI is allowed. Valid values: null, or an array with at least one element
     */
    images?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecImage>[]>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.ecs.OceanLaunchSpecInstanceMetadataOptions>;
    /**
     * A list of instance types allowed to be provisioned for pods pending under the specified launch specification. The list overrides the list defined for the Ocean cluster.
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Ocean Launch Specification name.
     */
    name?: pulumi.Input<string>;
    /**
     * The Ocean cluster ID .
     */
    oceanId: pulumi.Input<string>;
    /**
     * When Ocean scales up instances, it takes your preferred types into consideration while maintaining a variety of machine types running for optimized distribution.
     */
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean. When set to `true`, VNG nodes will be treated as if all pods running have the restrict-scale-down label. Therefore, Ocean will not scale nodes down unless empty.
     */
    restrictScaleDown?: pulumi.Input<boolean>;
    /**
     * Used to define scheduled tasks such as a manual headroom update.
     */
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecSchedulingTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Similar to a strategy for an Ocean cluster, but applying only to a virtual node group.
     */
    strategies?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecStrategy>[]>;
    /**
     * Set subnets in launchSpec. Each element in the array should be a subnet ID.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A key/value mapping of tags to assign to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.OceanLaunchSpecTag>[]>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
}
