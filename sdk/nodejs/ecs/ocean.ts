// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a Spotinst Ocean ECS resource.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Clusters can be imported using the Ocean `id`, e.g.,
 *
 * hcl
 *
 * ```sh
 * $ pulumi import spotinst:ecs/ocean:Ocean nameOfTheResource o-12345678
 * ```
 */
export class Ocean extends pulumi.CustomResource {
    /**
     * Get an existing Ocean resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanState, opts?: pulumi.CustomResourceOptions): Ocean {
        return new Ocean(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:ecs/ocean:Ocean';

    /**
     * Returns true if the given object is an instance of Ocean.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ocean {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ocean.__pulumiType;
    }

    /**
     * Configure public IP address allocation.
     */
    declare public readonly associatePublicIpAddress: pulumi.Output<boolean | undefined>;
    /**
     * Describes the Ocean ECS autoscaler.
     */
    declare public readonly autoscaler: pulumi.Output<outputs.ecs.OceanAutoscaler | undefined>;
    declare public readonly blacklists: pulumi.Output<string[] | undefined>;
    /**
     * Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    declare public readonly blockDeviceMappings: pulumi.Output<outputs.ecs.OceanBlockDeviceMapping[] | undefined>;
    /**
     * The name of the ECS cluster.
     */
    declare public readonly clusterName: pulumi.Output<string>;
    declare public readonly clusterOrientations: pulumi.Output<outputs.ecs.OceanClusterOrientation[] | undefined>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    declare public readonly desiredCapacity: pulumi.Output<number>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    declare public readonly drainingTimeout: pulumi.Output<number | undefined>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    declare public readonly ebsOptimized: pulumi.Output<boolean | undefined>;
    /**
     * If no Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    declare public readonly fallbackToOndemand: pulumi.Output<boolean | undefined>;
    declare public readonly filters: pulumi.Output<outputs.ecs.OceanFilters | undefined>;
    /**
     * The instance profile iam role.
     */
    declare public readonly iamInstanceProfile: pulumi.Output<string | undefined>;
    /**
     * ID of the image used to launch the instances.
     */
    declare public readonly imageId: pulumi.Output<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    declare public readonly instanceMetadataOptions: pulumi.Output<outputs.ecs.OceanInstanceMetadataOptions | undefined>;
    /**
     * The key pair to attach the instances.
     */
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    /**
     * Logging configuration.
     */
    declare public readonly logging: pulumi.Output<outputs.ecs.OceanLogging | undefined>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    declare public readonly maxSize: pulumi.Output<number>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    declare public readonly minSize: pulumi.Output<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    declare public readonly monitoring: pulumi.Output<boolean | undefined>;
    /**
     * The Ocean cluster name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Object. Set auto image update settings.
     */
    declare public readonly optimizeImages: pulumi.Output<outputs.ecs.OceanOptimizeImages | undefined>;
    /**
     * The region the cluster will run in.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    declare public readonly scheduledTasks: pulumi.Output<outputs.ecs.OceanScheduledTask[] | undefined>;
    /**
     * One or more security group ids.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    declare public readonly spotPercentage: pulumi.Output<number | undefined>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
     */
    declare public readonly subnetIds: pulumi.Output<string[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    declare public readonly tags: pulumi.Output<outputs.ecs.OceanTag[] | undefined>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    declare public readonly updatePolicy: pulumi.Output<outputs.ecs.OceanUpdatePolicy | undefined>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     */
    declare public readonly useAsTemplateOnly: pulumi.Output<boolean | undefined>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    declare public readonly userData: pulumi.Output<string | undefined>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    declare public readonly utilizeCommitments: pulumi.Output<boolean | undefined>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    declare public readonly utilizeReservedInstances: pulumi.Output<boolean | undefined>;
    declare public readonly whitelists: pulumi.Output<string[] | undefined>;

    /**
     * Create a Ocean resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanArgs | OceanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanState | undefined;
            resourceInputs["associatePublicIpAddress"] = state?.associatePublicIpAddress;
            resourceInputs["autoscaler"] = state?.autoscaler;
            resourceInputs["blacklists"] = state?.blacklists;
            resourceInputs["blockDeviceMappings"] = state?.blockDeviceMappings;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["clusterOrientations"] = state?.clusterOrientations;
            resourceInputs["desiredCapacity"] = state?.desiredCapacity;
            resourceInputs["drainingTimeout"] = state?.drainingTimeout;
            resourceInputs["ebsOptimized"] = state?.ebsOptimized;
            resourceInputs["fallbackToOndemand"] = state?.fallbackToOndemand;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["iamInstanceProfile"] = state?.iamInstanceProfile;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["instanceMetadataOptions"] = state?.instanceMetadataOptions;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["maxSize"] = state?.maxSize;
            resourceInputs["minSize"] = state?.minSize;
            resourceInputs["monitoring"] = state?.monitoring;
            resourceInputs["name"] = state?.name;
            resourceInputs["optimizeImages"] = state?.optimizeImages;
            resourceInputs["region"] = state?.region;
            resourceInputs["scheduledTasks"] = state?.scheduledTasks;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["spotPercentage"] = state?.spotPercentage;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatePolicy"] = state?.updatePolicy;
            resourceInputs["useAsTemplateOnly"] = state?.useAsTemplateOnly;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["utilizeCommitments"] = state?.utilizeCommitments;
            resourceInputs["utilizeReservedInstances"] = state?.utilizeReservedInstances;
            resourceInputs["whitelists"] = state?.whitelists;
        } else {
            const args = argsOrState as OceanArgs | undefined;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (args?.imageId === undefined && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.securityGroupIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if (args?.subnetIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["associatePublicIpAddress"] = args?.associatePublicIpAddress;
            resourceInputs["autoscaler"] = args?.autoscaler;
            resourceInputs["blacklists"] = args?.blacklists;
            resourceInputs["blockDeviceMappings"] = args?.blockDeviceMappings;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["clusterOrientations"] = args?.clusterOrientations;
            resourceInputs["desiredCapacity"] = args?.desiredCapacity;
            resourceInputs["drainingTimeout"] = args?.drainingTimeout;
            resourceInputs["ebsOptimized"] = args?.ebsOptimized;
            resourceInputs["fallbackToOndemand"] = args?.fallbackToOndemand;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["iamInstanceProfile"] = args?.iamInstanceProfile;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["instanceMetadataOptions"] = args?.instanceMetadataOptions;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["maxSize"] = args?.maxSize;
            resourceInputs["minSize"] = args?.minSize;
            resourceInputs["monitoring"] = args?.monitoring;
            resourceInputs["name"] = args?.name;
            resourceInputs["optimizeImages"] = args?.optimizeImages;
            resourceInputs["region"] = args?.region;
            resourceInputs["scheduledTasks"] = args?.scheduledTasks;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["spotPercentage"] = args?.spotPercentage;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["updatePolicy"] = args?.updatePolicy;
            resourceInputs["useAsTemplateOnly"] = args?.useAsTemplateOnly;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["utilizeCommitments"] = args?.utilizeCommitments;
            resourceInputs["utilizeReservedInstances"] = args?.utilizeReservedInstances;
            resourceInputs["whitelists"] = args?.whitelists;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ocean.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ocean resources.
 */
export interface OceanState {
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Describes the Ocean ECS autoscaler.
     */
    autoscaler?: pulumi.Input<inputs.ecs.OceanAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ecs.OceanBlockDeviceMapping>[]>;
    /**
     * The name of the ECS cluster.
     */
    clusterName?: pulumi.Input<string>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.ecs.OceanClusterOrientation>[]>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * If no Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.ecs.OceanFilters>;
    /**
     * The instance profile iam role.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.ecs.OceanInstanceMetadataOptions>;
    /**
     * The key pair to attach the instances.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.ecs.OceanLogging>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The Ocean cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Object. Set auto image update settings.
     */
    optimizeImages?: pulumi.Input<inputs.ecs.OceanOptimizeImages>;
    /**
     * The region the cluster will run in.
     */
    region?: pulumi.Input<string>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.ecs.OceanScheduledTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    spotPercentage?: pulumi.Input<number>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.OceanTag>[]>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    updatePolicy?: pulumi.Input<inputs.ecs.OceanUpdatePolicy>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     */
    useAsTemplateOnly?: pulumi.Input<boolean>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Ocean resource.
 */
export interface OceanArgs {
    /**
     * Configure public IP address allocation.
     */
    associatePublicIpAddress?: pulumi.Input<boolean>;
    /**
     * Describes the Ocean ECS autoscaler.
     */
    autoscaler?: pulumi.Input<inputs.ecs.OceanAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Object. List of block devices that are exposed to the instance, specify either virtual devices and EBS volumes.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ecs.OceanBlockDeviceMapping>[]>;
    /**
     * The name of the ECS cluster.
     */
    clusterName: pulumi.Input<string>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.ecs.OceanClusterOrientation>[]>;
    /**
     * The number of instances to launch and maintain in the cluster.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     */
    drainingTimeout?: pulumi.Input<number>;
    /**
     * Enable EBS optimized for cluster. Flag will enable optimized capacity for high bandwidth connectivity to the EB service for non EBS optimized instance types. For instances that are EBS optimized this flag will be ignored.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * If no Spot instance markets are available, enable Ocean to launch On-Demand instances instead.
     */
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.ecs.OceanFilters>;
    /**
     * The instance profile iam role.
     */
    iamInstanceProfile?: pulumi.Input<string>;
    /**
     * ID of the image used to launch the instances.
     */
    imageId: pulumi.Input<string>;
    /**
     * Ocean instance metadata options object for IMDSv2.
     */
    instanceMetadataOptions?: pulumi.Input<inputs.ecs.OceanInstanceMetadataOptions>;
    /**
     * The key pair to attach the instances.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Logging configuration.
     */
    logging?: pulumi.Input<inputs.ecs.OceanLogging>;
    /**
     * The upper limit of instances the cluster can scale up to.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The lower limit of instances the cluster can scale down to.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Enable detailed monitoring for cluster. Flag will enable Cloud Watch detailed monitoring (one minute increments). Note: there are additional hourly costs for this service based on the region used.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The Ocean cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Object. Set auto image update settings.
     */
    optimizeImages?: pulumi.Input<inputs.ecs.OceanOptimizeImages>;
    /**
     * The region the cluster will run in.
     */
    region: pulumi.Input<string>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.ecs.OceanScheduledTask>[]>;
    /**
     * One or more security group ids.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The percentage of Spot instances that would spin up from the `desiredCapacity` number.
     */
    spotPercentage?: pulumi.Input<number>;
    /**
     * A comma-separated list of subnet identifiers for the Ocean cluster. Subnet IDs should be configured with auto assign public ip.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optionally adds tags to instances launched in an Ocean cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.OceanTag>[]>;
    /**
     * While used, you can control whether the group should perform a deployment after an update to the configuration.
     */
    updatePolicy?: pulumi.Input<inputs.ecs.OceanUpdatePolicy>;
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     */
    useAsTemplateOnly?: pulumi.Input<boolean>;
    /**
     * Base64-encoded MIME user data to make available to the instances.
     */
    userData?: pulumi.Input<string>;
    /**
     * If savings plans exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeCommitments?: pulumi.Input<boolean>;
    /**
     * If Reserved instances exist, Ocean will utilize them before launching Spot instances.
     */
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
