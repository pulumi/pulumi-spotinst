// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Spotinst Health Check resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as spotinst from "@pulumi/spotinst";
 *
 * const httpCheck = new spotinst.HealthCheck("http_check", {
 *     name: "sample_health_check",
 *     resourceId: "sig-123",
 *     check: {
 *         protocol: "http",
 *         endpoint: "http://endpoint.com",
 *         port: 1337,
 *         interval: 10,
 *         timeout: 10,
 *         healthy: 1,
 *         unhealthy: 1,
 *     },
 *     proxyAddress: "http://proxy.com",
 *     proxyPort: 80,
 * });
 * ```
 */
export class HealthCheck extends pulumi.CustomResource {
    /**
     * Get an existing HealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthCheckState, opts?: pulumi.CustomResourceOptions): HealthCheck {
        return new HealthCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/healthCheck:HealthCheck';

    /**
     * Returns true if the given object is an instance of HealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthCheck.__pulumiType;
    }

    /**
     * Describes the check to execute.
     */
    declare public readonly check: pulumi.Output<outputs.HealthCheckCheck | undefined>;
    /**
     * The name of the health check.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly proxyAddress: pulumi.Output<string>;
    declare public readonly proxyPort: pulumi.Output<number | undefined>;
    /**
     * The ID of the resource to check.
     */
    declare public readonly resourceId: pulumi.Output<string>;

    /**
     * Create a HealthCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthCheckArgs | HealthCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthCheckState | undefined;
            resourceInputs["check"] = state?.check;
            resourceInputs["name"] = state?.name;
            resourceInputs["proxyAddress"] = state?.proxyAddress;
            resourceInputs["proxyPort"] = state?.proxyPort;
            resourceInputs["resourceId"] = state?.resourceId;
        } else {
            const args = argsOrState as HealthCheckArgs | undefined;
            if (args?.proxyAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'proxyAddress'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["check"] = args?.check;
            resourceInputs["name"] = args?.name;
            resourceInputs["proxyAddress"] = args?.proxyAddress;
            resourceInputs["proxyPort"] = args?.proxyPort;
            resourceInputs["resourceId"] = args?.resourceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HealthCheck resources.
 */
export interface HealthCheckState {
    /**
     * Describes the check to execute.
     */
    check?: pulumi.Input<inputs.HealthCheckCheck>;
    /**
     * The name of the health check.
     */
    name?: pulumi.Input<string>;
    proxyAddress?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    /**
     * The ID of the resource to check.
     */
    resourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthCheck resource.
 */
export interface HealthCheckArgs {
    /**
     * Describes the check to execute.
     */
    check?: pulumi.Input<inputs.HealthCheckCheck>;
    /**
     * The name of the health check.
     */
    name?: pulumi.Input<string>;
    proxyAddress: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
    /**
     * The ID of the resource to check.
     */
    resourceId: pulumi.Input<string>;
}
