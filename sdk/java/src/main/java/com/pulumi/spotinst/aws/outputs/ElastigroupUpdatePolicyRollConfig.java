// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.aws.outputs.ElastigroupUpdatePolicyRollConfigStrategy;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ElastigroupUpdatePolicyRollConfig {
    /**
     * @return The percentage size of each batch in the scheduled deployment roll.
     * 
     */
    private Integer batchSizePercentage;
    /**
     * @return The period of time (seconds) to wait before checking a batch&#39;s health after it&#39;s deployment.
     * 
     */
    private @Nullable Integer gracePeriod;
    /**
     * @return The service that will perform health checks for the instance. Valid values: `&#34;ELB&#34;`, `&#34;HCS&#34;`, `&#34;TARGET_GROUP&#34;`, `&#34;EC2&#34;`, `&#34;K8S_NODE&#34;`, `&#34;NOMAD_NODE&#34;`, `&#34;ECS_CLUSTER_INSTANCE&#34;`.
     * 
     */
    private @Nullable String healthCheckType;
    /**
     * @return Strategy parameters
     * 
     */
    private @Nullable ElastigroupUpdatePolicyRollConfigStrategy strategy;
    /**
     * @return For use with `should_roll`. Sets minimum % of roll required to complete before continuing the plan. Required if `wait_for_roll_timeout` is set.
     * 
     */
    private @Nullable Double waitForRollPercentage;
    /**
     * @return For use with `should_roll`. Sets how long to wait for the deployed % of a roll to exceed `wait_for_roll_percentage` before continuing the plan. Required if `wait_for_roll_percentage` is set.
     * 
     */
    private @Nullable Integer waitForRollTimeout;

    private ElastigroupUpdatePolicyRollConfig() {}
    /**
     * @return The percentage size of each batch in the scheduled deployment roll.
     * 
     */
    public Integer batchSizePercentage() {
        return this.batchSizePercentage;
    }
    /**
     * @return The period of time (seconds) to wait before checking a batch&#39;s health after it&#39;s deployment.
     * 
     */
    public Optional<Integer> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    /**
     * @return The service that will perform health checks for the instance. Valid values: `&#34;ELB&#34;`, `&#34;HCS&#34;`, `&#34;TARGET_GROUP&#34;`, `&#34;EC2&#34;`, `&#34;K8S_NODE&#34;`, `&#34;NOMAD_NODE&#34;`, `&#34;ECS_CLUSTER_INSTANCE&#34;`.
     * 
     */
    public Optional<String> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }
    /**
     * @return Strategy parameters
     * 
     */
    public Optional<ElastigroupUpdatePolicyRollConfigStrategy> strategy() {
        return Optional.ofNullable(this.strategy);
    }
    /**
     * @return For use with `should_roll`. Sets minimum % of roll required to complete before continuing the plan. Required if `wait_for_roll_timeout` is set.
     * 
     */
    public Optional<Double> waitForRollPercentage() {
        return Optional.ofNullable(this.waitForRollPercentage);
    }
    /**
     * @return For use with `should_roll`. Sets how long to wait for the deployed % of a roll to exceed `wait_for_roll_percentage` before continuing the plan. Required if `wait_for_roll_percentage` is set.
     * 
     */
    public Optional<Integer> waitForRollTimeout() {
        return Optional.ofNullable(this.waitForRollTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ElastigroupUpdatePolicyRollConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer batchSizePercentage;
        private @Nullable Integer gracePeriod;
        private @Nullable String healthCheckType;
        private @Nullable ElastigroupUpdatePolicyRollConfigStrategy strategy;
        private @Nullable Double waitForRollPercentage;
        private @Nullable Integer waitForRollTimeout;
        public Builder() {}
        public Builder(ElastigroupUpdatePolicyRollConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSizePercentage = defaults.batchSizePercentage;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.healthCheckType = defaults.healthCheckType;
    	      this.strategy = defaults.strategy;
    	      this.waitForRollPercentage = defaults.waitForRollPercentage;
    	      this.waitForRollTimeout = defaults.waitForRollTimeout;
        }

        @CustomType.Setter
        public Builder batchSizePercentage(Integer batchSizePercentage) {
            if (batchSizePercentage == null) {
              throw new MissingRequiredPropertyException("ElastigroupUpdatePolicyRollConfig", "batchSizePercentage");
            }
            this.batchSizePercentage = batchSizePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder gracePeriod(@Nullable Integer gracePeriod) {

            this.gracePeriod = gracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckType(@Nullable String healthCheckType) {

            this.healthCheckType = healthCheckType;
            return this;
        }
        @CustomType.Setter
        public Builder strategy(@Nullable ElastigroupUpdatePolicyRollConfigStrategy strategy) {

            this.strategy = strategy;
            return this;
        }
        @CustomType.Setter
        public Builder waitForRollPercentage(@Nullable Double waitForRollPercentage) {

            this.waitForRollPercentage = waitForRollPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder waitForRollTimeout(@Nullable Integer waitForRollTimeout) {

            this.waitForRollTimeout = waitForRollTimeout;
            return this;
        }
        public ElastigroupUpdatePolicyRollConfig build() {
            final var _resultValue = new ElastigroupUpdatePolicyRollConfig();
            _resultValue.batchSizePercentage = batchSizePercentage;
            _resultValue.gracePeriod = gracePeriod;
            _resultValue.healthCheckType = healthCheckType;
            _resultValue.strategy = strategy;
            _resultValue.waitForRollPercentage = waitForRollPercentage;
            _resultValue.waitForRollTimeout = waitForRollTimeout;
            return _resultValue;
        }
    }
}
