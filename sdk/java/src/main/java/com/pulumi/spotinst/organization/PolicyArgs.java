// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.organization;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.organization.inputs.PolicyPolicyContentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * Short description of policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Short description of policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the Policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set permissions objects list.
     * 
     */
    @Import(name="policyContents", required=true)
    private Output<List<PolicyPolicyContentArgs>> policyContents;

    /**
     * @return Set permissions objects list.
     * 
     */
    public Output<List<PolicyPolicyContentArgs>> policyContents() {
        return this.policyContents;
    }

    private PolicyArgs() {}

    private PolicyArgs(PolicyArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.policyContents = $.policyContents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyArgs $;

        public Builder() {
            $ = new PolicyArgs();
        }

        public Builder(PolicyArgs defaults) {
            $ = new PolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Short description of policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Short description of policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyContents Set permissions objects list.
         * 
         * @return builder
         * 
         */
        public Builder policyContents(Output<List<PolicyPolicyContentArgs>> policyContents) {
            $.policyContents = policyContents;
            return this;
        }

        /**
         * @param policyContents Set permissions objects list.
         * 
         * @return builder
         * 
         */
        public Builder policyContents(List<PolicyPolicyContentArgs> policyContents) {
            return policyContents(Output.of(policyContents));
        }

        /**
         * @param policyContents Set permissions objects list.
         * 
         * @return builder
         * 
         */
        public Builder policyContents(PolicyPolicyContentArgs... policyContents) {
            return policyContents(List.of(policyContents));
        }

        public PolicyArgs build() {
            if ($.policyContents == null) {
                throw new MissingRequiredPropertyException("PolicyArgs", "policyContents");
            }
            return $;
        }
    }

}
