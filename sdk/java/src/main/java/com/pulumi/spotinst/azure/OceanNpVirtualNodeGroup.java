// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.azure;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.spotinst.Utilities;
import com.pulumi.spotinst.azure.OceanNpVirtualNodeGroupArgs;
import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupState;
import com.pulumi.spotinst.azure.outputs.OceanNpVirtualNodeGroupFilters;
import com.pulumi.spotinst.azure.outputs.OceanNpVirtualNodeGroupHeadroom;
import com.pulumi.spotinst.azure.outputs.OceanNpVirtualNodeGroupTaint;
import com.pulumi.spotinst.azure.outputs.OceanNpVirtualNodeGroupUpdatePolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Spotinst Ocean AKS Virtual Node Groups resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.spotinst.azure.OceanNpVirtualNodeGroup;
 * import com.pulumi.spotinst.azure.OceanNpVirtualNodeGroupArgs;
 * import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupHeadroomArgs;
 * import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupTaintArgs;
 * import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupFiltersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new OceanNpVirtualNodeGroup("example", OceanNpVirtualNodeGroupArgs.builder()
 *             .name("testVng")
 *             .oceanId("o-134abcd")
 *             .headrooms(OceanNpVirtualNodeGroupHeadroomArgs.builder()
 *                 .cpuPerUnit(1024)
 *                 .memoryPerUnit(512)
 *                 .gpuPerUnit(0)
 *                 .numOfUnits(2)
 *                 .build())
 *             .availabilityZones(            
 *                 "1",
 *                 "2",
 *                 "3")
 *             .labels(Map.ofEntries(
 *                 Map.entry("key", "env"),
 *                 Map.entry("value", "test")
 *             ))
 *             .minCount(1)
 *             .maxCount(100)
 *             .maxPodsPerNode(30)
 *             .enableNodePublicIp(true)
 *             .osDiskSizeGb(30)
 *             .osDiskType("Managed")
 *             .osType("Linux")
 *             .osSku("Ubuntu")
 *             .kubernetesVersion("1.26")
 *             .podSubnetIds("/subscriptions/123456-1234-1234-1234-123456789/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/virtualNetworks/ExampleVirtualNetwork/subnets/default")
 *             .vnetSubnetIds("/subscriptions/123456-1234-1234-1234-123456789/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/virtualNetworks/ExampleVirtualNetwork/subnets/default")
 *             .spotPercentage(50)
 *             .fallbackToOndemand(true)
 *             .taints(OceanNpVirtualNodeGroupTaintArgs.builder()
 *                 .key("taintKey")
 *                 .value("taintValue")
 *                 .effect("NoSchedule")
 *                 .build())
 *             .tags(Map.ofEntries(
 *                 Map.entry("tagKey", "env"),
 *                 Map.entry("tagValue", "staging")
 *             ))
 *             .filters(OceanNpVirtualNodeGroupFiltersArgs.builder()
 *                 .minVcpu(2)
 *                 .maxVcpu(16)
 *                 .minMemoryGib(8)
 *                 .maxMemoryGib(128)
 *                 .architectures(                
 *                     "x86_64",
 *                     "arm64")
 *                 .series(                
 *                     "D v3",
 *                     "Dds_v4",
 *                     "Dsv2")
 *                 .excludeSeries(                
 *                     "Av2",
 *                     "A",
 *                     "Bs",
 *                     "D",
 *                     "E")
 *                 .acceleratedNetworking("Enabled")
 *                 .diskPerformance("Premium")
 *                 .minGpu(1)
 *                 .maxGpu(2)
 *                 .minNics(1)
 *                 .vmTypes(                
 *                     "generalPurpose",
 *                     "GPU")
 *                 .minDisk(1)
 *                 .gpuTypes("nvidia-tesla-t4")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="spotinst:azure/oceanNpVirtualNodeGroup:OceanNpVirtualNodeGroup")
public class OceanNpVirtualNodeGroup extends com.pulumi.resources.CustomResource {
    /**
     * An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     * 
     */
    @Export(name="availabilityZones", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> availabilityZones;

    /**
     * @return An Array holding Availability Zones, this configures the availability zones the Ocean may launch instances in per VNG.
     * 
     */
    public Output<Optional<List<String>>> availabilityZones() {
        return Codegen.optional(this.availabilityZones);
    }
    /**
     * Enable node public IP.
     * 
     */
    @Export(name="enableNodePublicIp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableNodePublicIp;

    /**
     * @return Enable node public IP.
     * 
     */
    public Output<Optional<Boolean>> enableNodePublicIp() {
        return Codegen.optional(this.enableNodePublicIp);
    }
    /**
     * If no spot instance markets are available, enable Ocean to launch on-demand instances instead.
     * 
     */
    @Export(name="fallbackToOndemand", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fallbackToOndemand;

    /**
     * @return If no spot instance markets are available, enable Ocean to launch on-demand instances instead.
     * 
     */
    public Output<Optional<Boolean>> fallbackToOndemand() {
        return Codegen.optional(this.fallbackToOndemand);
    }
    /**
     * Filters for the VM sizes that can be launched from the virtual node group.
     * 
     */
    @Export(name="filters", refs={OceanNpVirtualNodeGroupFilters.class}, tree="[0]")
    private Output</* @Nullable */ OceanNpVirtualNodeGroupFilters> filters;

    /**
     * @return Filters for the VM sizes that can be launched from the virtual node group.
     * 
     */
    public Output<Optional<OceanNpVirtualNodeGroupFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * Specify the custom headroom per VNG. Provide a list of headroom objects.
     * 
     */
    @Export(name="headrooms", refs={List.class,OceanNpVirtualNodeGroupHeadroom.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanNpVirtualNodeGroupHeadroom>> headrooms;

    /**
     * @return Specify the custom headroom per VNG. Provide a list of headroom objects.
     * 
     */
    public Output<Optional<List<OceanNpVirtualNodeGroupHeadroom>>> headrooms() {
        return Codegen.optional(this.headrooms);
    }
    /**
     * The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     * 
     */
    @Export(name="kubernetesVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kubernetesVersion;

    /**
     * @return The desired Kubernetes version of the launched nodes. In case the value is null, the Kubernetes version of the control plane is used.
     * 
     */
    public Output<Optional<String>> kubernetesVersion() {
        return Codegen.optional(this.kubernetesVersion);
    }
    /**
     * An array of labels to add to the virtual node group.Only custom user labels are allowed, and not Kubernetes built-in labels or Spot internal labels.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> labels;

    /**
     * @return An array of labels to add to the virtual node group.Only custom user labels are allowed, and not Kubernetes built-in labels or Spot internal labels.
     * 
     */
    public Output<Optional<Map<String,Object>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Maximum node count limit.
     * 
     */
    @Export(name="maxCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxCount;

    /**
     * @return Maximum node count limit.
     * 
     */
    public Output<Optional<Integer>> maxCount() {
        return Codegen.optional(this.maxCount);
    }
    /**
     * The maximum number of pods per node in the node pools.
     * 
     */
    @Export(name="maxPodsPerNode", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxPodsPerNode;

    /**
     * @return The maximum number of pods per node in the node pools.
     * 
     */
    public Output<Optional<Integer>> maxPodsPerNode() {
        return Codegen.optional(this.maxPodsPerNode);
    }
    /**
     * Minimum node count limit.
     * 
     */
    @Export(name="minCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minCount;

    /**
     * @return Minimum node count limit.
     * 
     */
    public Output<Optional<Integer>> minCount() {
        return Codegen.optional(this.minCount);
    }
    /**
     * Enter a name for the virtual node group.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Enter a name for the virtual node group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Ocean cluster identifier. Required for Launch Spec creation.
     * 
     */
    @Export(name="oceanId", refs={String.class}, tree="[0]")
    private Output<String> oceanId;

    /**
     * @return The Ocean cluster identifier. Required for Launch Spec creation.
     * 
     */
    public Output<String> oceanId() {
        return this.oceanId;
    }
    /**
     * The size of the OS disk in GB.
     * 
     */
    @Export(name="osDiskSizeGb", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> osDiskSizeGb;

    /**
     * @return The size of the OS disk in GB.
     * 
     */
    public Output<Optional<Integer>> osDiskSizeGb() {
        return Codegen.optional(this.osDiskSizeGb);
    }
    /**
     * The type of the OS disk.
     * 
     */
    @Export(name="osDiskType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> osDiskType;

    /**
     * @return The type of the OS disk.
     * 
     */
    public Output<Optional<String>> osDiskType() {
        return Codegen.optional(this.osDiskType);
    }
    /**
     * The OS SKU of the OS type. Must correlate with the os type.
     * 
     */
    @Export(name="osSku", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> osSku;

    /**
     * @return The OS SKU of the OS type. Must correlate with the os type.
     * 
     */
    public Output<Optional<String>> osSku() {
        return Codegen.optional(this.osSku);
    }
    /**
     * The OS type of the OS disk. Can&#39;t be modified once set.
     * 
     */
    @Export(name="osType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> osType;

    /**
     * @return The OS type of the OS disk. Can&#39;t be modified once set.
     * 
     */
    public Output<Optional<String>> osType() {
        return Codegen.optional(this.osType);
    }
    /**
     * The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     * 
     */
    @Export(name="podSubnetIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> podSubnetIds;

    /**
     * @return The IDs of subnets in an existing VNet into which to assign pods in the cluster (requires azure network-plugin).
     * 
     */
    public Output<Optional<List<String>>> podSubnetIds() {
        return Codegen.optional(this.podSubnetIds);
    }
    /**
     * Percentage of spot VMs to maintain.
     * 
     */
    @Export(name="spotPercentage", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> spotPercentage;

    /**
     * @return Percentage of spot VMs to maintain.
     * 
     */
    public Output<Optional<Integer>> spotPercentage() {
        return Codegen.optional(this.spotPercentage);
    }
    @Export(name="tags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> tags;

    public Output<Optional<Map<String,Object>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Add taints to a virtual node group.
     * 
     */
    @Export(name="taints", refs={List.class,OceanNpVirtualNodeGroupTaint.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanNpVirtualNodeGroupTaint>> taints;

    /**
     * @return Add taints to a virtual node group.
     * 
     */
    public Output<Optional<List<OceanNpVirtualNodeGroupTaint>>> taints() {
        return Codegen.optional(this.taints);
    }
    @Export(name="updatePolicy", refs={OceanNpVirtualNodeGroupUpdatePolicy.class}, tree="[0]")
    private Output</* @Nullable */ OceanNpVirtualNodeGroupUpdatePolicy> updatePolicy;

    public Output<Optional<OceanNpVirtualNodeGroupUpdatePolicy>> updatePolicy() {
        return Codegen.optional(this.updatePolicy);
    }
    /**
     * The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     * 
     */
    @Export(name="vnetSubnetIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> vnetSubnetIds;

    /**
     * @return The IDs of subnets in an existing VNet into which to assign nodes in the cluster (requires azure network-plugin).
     * 
     */
    public Output<Optional<List<String>>> vnetSubnetIds() {
        return Codegen.optional(this.vnetSubnetIds);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OceanNpVirtualNodeGroup(String name) {
        this(name, OceanNpVirtualNodeGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OceanNpVirtualNodeGroup(String name, OceanNpVirtualNodeGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OceanNpVirtualNodeGroup(String name, OceanNpVirtualNodeGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("spotinst:azure/oceanNpVirtualNodeGroup:OceanNpVirtualNodeGroup", name, args == null ? OceanNpVirtualNodeGroupArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OceanNpVirtualNodeGroup(String name, Output<String> id, @Nullable OceanNpVirtualNodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("spotinst:azure/oceanNpVirtualNodeGroup:OceanNpVirtualNodeGroup", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OceanNpVirtualNodeGroup get(String name, Output<String> id, @Nullable OceanNpVirtualNodeGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OceanNpVirtualNodeGroup(name, id, state, options);
    }
}
