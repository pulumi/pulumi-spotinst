// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.gke.inputs.ElastigroupScalingDownPolicyDimensionArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupScalingDownPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupScalingDownPolicyArgs Empty = new ElastigroupScalingDownPolicyArgs();

    @Import(name="actionType")
    private @Nullable Output<String> actionType;

    public Optional<Output<String>> actionType() {
        return Optional.ofNullable(this.actionType);
    }

    @Import(name="adjustment")
    private @Nullable Output<Integer> adjustment;

    public Optional<Output<Integer>> adjustment() {
        return Optional.ofNullable(this.adjustment);
    }

    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<ElastigroupScalingDownPolicyDimensionArgs>> dimensions;

    public Optional<Output<List<ElastigroupScalingDownPolicyDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Amount of cooldown evaluation periods for scale down.
     * 
     */
    @Import(name="evaluationPeriods")
    private @Nullable Output<Integer> evaluationPeriods;

    /**
     * @return Amount of cooldown evaluation periods for scale down.
     * 
     */
    public Optional<Output<Integer>> evaluationPeriods() {
        return Optional.ofNullable(this.evaluationPeriods);
    }

    @Import(name="metricName", required=true)
    private Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    @Import(name="namespace", required=true)
    private Output<String> namespace;

    public Output<String> namespace() {
        return this.namespace;
    }

    @Import(name="operator")
    private @Nullable Output<String> operator;

    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    @Import(name="period")
    private @Nullable Output<Integer> period;

    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    @Import(name="policyName", required=true)
    private Output<String> policyName;

    public Output<String> policyName() {
        return this.policyName;
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    @Import(name="unit", required=true)
    private Output<String> unit;

    public Output<String> unit() {
        return this.unit;
    }

    private ElastigroupScalingDownPolicyArgs() {}

    private ElastigroupScalingDownPolicyArgs(ElastigroupScalingDownPolicyArgs $) {
        this.actionType = $.actionType;
        this.adjustment = $.adjustment;
        this.cooldown = $.cooldown;
        this.dimensions = $.dimensions;
        this.evaluationPeriods = $.evaluationPeriods;
        this.metricName = $.metricName;
        this.namespace = $.namespace;
        this.operator = $.operator;
        this.period = $.period;
        this.policyName = $.policyName;
        this.source = $.source;
        this.statistic = $.statistic;
        this.threshold = $.threshold;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupScalingDownPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupScalingDownPolicyArgs $;

        public Builder() {
            $ = new ElastigroupScalingDownPolicyArgs();
        }

        public Builder(ElastigroupScalingDownPolicyArgs defaults) {
            $ = new ElastigroupScalingDownPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder actionType(@Nullable Output<String> actionType) {
            $.actionType = actionType;
            return this;
        }

        public Builder actionType(String actionType) {
            return actionType(Output.of(actionType));
        }

        public Builder adjustment(@Nullable Output<Integer> adjustment) {
            $.adjustment = adjustment;
            return this;
        }

        public Builder adjustment(Integer adjustment) {
            return adjustment(Output.of(adjustment));
        }

        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        public Builder dimensions(@Nullable Output<List<ElastigroupScalingDownPolicyDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<ElastigroupScalingDownPolicyDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(ElastigroupScalingDownPolicyDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param evaluationPeriods Amount of cooldown evaluation periods for scale down.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(@Nullable Output<Integer> evaluationPeriods) {
            $.evaluationPeriods = evaluationPeriods;
            return this;
        }

        /**
         * @param evaluationPeriods Amount of cooldown evaluation periods for scale down.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(Integer evaluationPeriods) {
            return evaluationPeriods(Output.of(evaluationPeriods));
        }

        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        public Builder policyName(Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public ElastigroupScalingDownPolicyArgs build() {
            if ($.metricName == null) {
                throw new MissingRequiredPropertyException("ElastigroupScalingDownPolicyArgs", "metricName");
            }
            if ($.namespace == null) {
                throw new MissingRequiredPropertyException("ElastigroupScalingDownPolicyArgs", "namespace");
            }
            if ($.policyName == null) {
                throw new MissingRequiredPropertyException("ElastigroupScalingDownPolicyArgs", "policyName");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("ElastigroupScalingDownPolicyArgs", "threshold");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("ElastigroupScalingDownPolicyArgs", "unit");
            }
            return $;
        }
    }

}
