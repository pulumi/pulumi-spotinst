// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.aws.inputs.BeanstalkDeploymentPreferencesArgs;
import com.pulumi.spotinst.aws.inputs.BeanstalkManagedActionsArgs;
import com.pulumi.spotinst.aws.inputs.BeanstalkScheduledTaskArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BeanstalkState extends com.pulumi.resources.ResourceArgs {

    public static final BeanstalkState Empty = new BeanstalkState();

    /**
     * The id of an existing Beanstalk environment.
     * 
     */
    @Import(name="beanstalkEnvironmentId")
    private @Nullable Output<String> beanstalkEnvironmentId;

    /**
     * @return The id of an existing Beanstalk environment.
     * 
     */
    public Optional<Output<String>> beanstalkEnvironmentId() {
        return Optional.ofNullable(this.beanstalkEnvironmentId);
    }

    /**
     * The name of an existing Beanstalk environment.
     * 
     */
    @Import(name="beanstalkEnvironmentName")
    private @Nullable Output<String> beanstalkEnvironmentName;

    /**
     * @return The name of an existing Beanstalk environment.
     * 
     */
    public Optional<Output<String>> beanstalkEnvironmentName() {
        return Optional.ofNullable(this.beanstalkEnvironmentName);
    }

    /**
     * Preferences when performing a roll
     * 
     */
    @Import(name="deploymentPreferences")
    private @Nullable Output<BeanstalkDeploymentPreferencesArgs> deploymentPreferences;

    /**
     * @return Preferences when performing a roll
     * 
     */
    public Optional<Output<BeanstalkDeploymentPreferencesArgs>> deploymentPreferences() {
        return Optional.ofNullable(this.deploymentPreferences);
    }

    /**
     * The desired number of instances the group should have at any time.
     * 
     */
    @Import(name="desiredCapacity")
    private @Nullable Output<Integer> desiredCapacity;

    /**
     * @return The desired number of instances the group should have at any time.
     * 
     */
    public Optional<Output<Integer>> desiredCapacity() {
        return Optional.ofNullable(this.desiredCapacity);
    }

    /**
     * One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
     * 
     */
    @Import(name="instanceTypesSpots")
    private @Nullable Output<List<String>> instanceTypesSpots;

    /**
     * @return One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
     * 
     */
    public Optional<Output<List<String>>> instanceTypesSpots() {
        return Optional.ofNullable(this.instanceTypesSpots);
    }

    @Import(name="maintenance")
    private @Nullable Output<String> maintenance;

    public Optional<Output<String>> maintenance() {
        return Optional.ofNullable(this.maintenance);
    }

    /**
     * Managed Actions parameters
     * 
     */
    @Import(name="managedActions")
    private @Nullable Output<BeanstalkManagedActionsArgs> managedActions;

    /**
     * @return Managed Actions parameters
     * 
     */
    public Optional<Output<BeanstalkManagedActionsArgs>> managedActions() {
        return Optional.ofNullable(this.managedActions);
    }

    /**
     * The maximum number of instances the group should have at any time.
     * 
     */
    @Import(name="maxSize")
    private @Nullable Output<Integer> maxSize;

    /**
     * @return The maximum number of instances the group should have at any time.
     * 
     */
    public Optional<Output<Integer>> maxSize() {
        return Optional.ofNullable(this.maxSize);
    }

    /**
     * The minimum number of instances the group should have at any time.
     * 
     */
    @Import(name="minSize")
    private @Nullable Output<Integer> minSize;

    /**
     * @return The minimum number of instances the group should have at any time.
     * 
     */
    public Optional<Output<Integer>> minSize() {
        return Optional.ofNullable(this.minSize);
    }

    /**
     * The group name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The group name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Operation system type. Valid values: `&#34;Linux/UNIX&#34;`, `&#34;SUSE Linux&#34;`, `&#34;Windows&#34;`.
     * For EC2 Classic instances:  `&#34;Linux/UNIX (Amazon VPC)&#34;`, `&#34;SUSE Linux (Amazon VPC)&#34;`, `&#34;Windows (Amazon VPC)&#34;`.
     * 
     */
    @Import(name="product")
    private @Nullable Output<String> product;

    /**
     * @return Operation system type. Valid values: `&#34;Linux/UNIX&#34;`, `&#34;SUSE Linux&#34;`, `&#34;Windows&#34;`.
     * For EC2 Classic instances:  `&#34;Linux/UNIX (Amazon VPC)&#34;`, `&#34;SUSE Linux (Amazon VPC)&#34;`, `&#34;Windows (Amazon VPC)&#34;`.
     * 
     */
    public Optional<Output<String>> product() {
        return Optional.ofNullable(this.product);
    }

    /**
     * The AWS region your group will be created in. Cannot be changed after the group has been created.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The AWS region your group will be created in. Cannot be changed after the group has been created.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="scheduledTasks")
    private @Nullable Output<List<BeanstalkScheduledTaskArgs>> scheduledTasks;

    public Optional<Output<List<BeanstalkScheduledTaskArgs>>> scheduledTasks() {
        return Optional.ofNullable(this.scheduledTasks);
    }

    private BeanstalkState() {}

    private BeanstalkState(BeanstalkState $) {
        this.beanstalkEnvironmentId = $.beanstalkEnvironmentId;
        this.beanstalkEnvironmentName = $.beanstalkEnvironmentName;
        this.deploymentPreferences = $.deploymentPreferences;
        this.desiredCapacity = $.desiredCapacity;
        this.instanceTypesSpots = $.instanceTypesSpots;
        this.maintenance = $.maintenance;
        this.managedActions = $.managedActions;
        this.maxSize = $.maxSize;
        this.minSize = $.minSize;
        this.name = $.name;
        this.product = $.product;
        this.region = $.region;
        this.scheduledTasks = $.scheduledTasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BeanstalkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BeanstalkState $;

        public Builder() {
            $ = new BeanstalkState();
        }

        public Builder(BeanstalkState defaults) {
            $ = new BeanstalkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param beanstalkEnvironmentId The id of an existing Beanstalk environment.
         * 
         * @return builder
         * 
         */
        public Builder beanstalkEnvironmentId(@Nullable Output<String> beanstalkEnvironmentId) {
            $.beanstalkEnvironmentId = beanstalkEnvironmentId;
            return this;
        }

        /**
         * @param beanstalkEnvironmentId The id of an existing Beanstalk environment.
         * 
         * @return builder
         * 
         */
        public Builder beanstalkEnvironmentId(String beanstalkEnvironmentId) {
            return beanstalkEnvironmentId(Output.of(beanstalkEnvironmentId));
        }

        /**
         * @param beanstalkEnvironmentName The name of an existing Beanstalk environment.
         * 
         * @return builder
         * 
         */
        public Builder beanstalkEnvironmentName(@Nullable Output<String> beanstalkEnvironmentName) {
            $.beanstalkEnvironmentName = beanstalkEnvironmentName;
            return this;
        }

        /**
         * @param beanstalkEnvironmentName The name of an existing Beanstalk environment.
         * 
         * @return builder
         * 
         */
        public Builder beanstalkEnvironmentName(String beanstalkEnvironmentName) {
            return beanstalkEnvironmentName(Output.of(beanstalkEnvironmentName));
        }

        /**
         * @param deploymentPreferences Preferences when performing a roll
         * 
         * @return builder
         * 
         */
        public Builder deploymentPreferences(@Nullable Output<BeanstalkDeploymentPreferencesArgs> deploymentPreferences) {
            $.deploymentPreferences = deploymentPreferences;
            return this;
        }

        /**
         * @param deploymentPreferences Preferences when performing a roll
         * 
         * @return builder
         * 
         */
        public Builder deploymentPreferences(BeanstalkDeploymentPreferencesArgs deploymentPreferences) {
            return deploymentPreferences(Output.of(deploymentPreferences));
        }

        /**
         * @param desiredCapacity The desired number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder desiredCapacity(@Nullable Output<Integer> desiredCapacity) {
            $.desiredCapacity = desiredCapacity;
            return this;
        }

        /**
         * @param desiredCapacity The desired number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder desiredCapacity(Integer desiredCapacity) {
            return desiredCapacity(Output.of(desiredCapacity));
        }

        /**
         * @param instanceTypesSpots One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypesSpots(@Nullable Output<List<String>> instanceTypesSpots) {
            $.instanceTypesSpots = instanceTypesSpots;
            return this;
        }

        /**
         * @param instanceTypesSpots One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypesSpots(List<String> instanceTypesSpots) {
            return instanceTypesSpots(Output.of(instanceTypesSpots));
        }

        /**
         * @param instanceTypesSpots One or more instance types. To maximize the availability of Spot instances, select as many instance types as possible.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypesSpots(String... instanceTypesSpots) {
            return instanceTypesSpots(List.of(instanceTypesSpots));
        }

        public Builder maintenance(@Nullable Output<String> maintenance) {
            $.maintenance = maintenance;
            return this;
        }

        public Builder maintenance(String maintenance) {
            return maintenance(Output.of(maintenance));
        }

        /**
         * @param managedActions Managed Actions parameters
         * 
         * @return builder
         * 
         */
        public Builder managedActions(@Nullable Output<BeanstalkManagedActionsArgs> managedActions) {
            $.managedActions = managedActions;
            return this;
        }

        /**
         * @param managedActions Managed Actions parameters
         * 
         * @return builder
         * 
         */
        public Builder managedActions(BeanstalkManagedActionsArgs managedActions) {
            return managedActions(Output.of(managedActions));
        }

        /**
         * @param maxSize The maximum number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder maxSize(@Nullable Output<Integer> maxSize) {
            $.maxSize = maxSize;
            return this;
        }

        /**
         * @param maxSize The maximum number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder maxSize(Integer maxSize) {
            return maxSize(Output.of(maxSize));
        }

        /**
         * @param minSize The minimum number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder minSize(@Nullable Output<Integer> minSize) {
            $.minSize = minSize;
            return this;
        }

        /**
         * @param minSize The minimum number of instances the group should have at any time.
         * 
         * @return builder
         * 
         */
        public Builder minSize(Integer minSize) {
            return minSize(Output.of(minSize));
        }

        /**
         * @param name The group name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The group name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param product Operation system type. Valid values: `&#34;Linux/UNIX&#34;`, `&#34;SUSE Linux&#34;`, `&#34;Windows&#34;`.
         * For EC2 Classic instances:  `&#34;Linux/UNIX (Amazon VPC)&#34;`, `&#34;SUSE Linux (Amazon VPC)&#34;`, `&#34;Windows (Amazon VPC)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder product(@Nullable Output<String> product) {
            $.product = product;
            return this;
        }

        /**
         * @param product Operation system type. Valid values: `&#34;Linux/UNIX&#34;`, `&#34;SUSE Linux&#34;`, `&#34;Windows&#34;`.
         * For EC2 Classic instances:  `&#34;Linux/UNIX (Amazon VPC)&#34;`, `&#34;SUSE Linux (Amazon VPC)&#34;`, `&#34;Windows (Amazon VPC)&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder product(String product) {
            return product(Output.of(product));
        }

        /**
         * @param region The AWS region your group will be created in. Cannot be changed after the group has been created.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The AWS region your group will be created in. Cannot be changed after the group has been created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder scheduledTasks(@Nullable Output<List<BeanstalkScheduledTaskArgs>> scheduledTasks) {
            $.scheduledTasks = scheduledTasks;
            return this;
        }

        public Builder scheduledTasks(List<BeanstalkScheduledTaskArgs> scheduledTasks) {
            return scheduledTasks(Output.of(scheduledTasks));
        }

        public Builder scheduledTasks(BeanstalkScheduledTaskArgs... scheduledTasks) {
            return scheduledTasks(List.of(scheduledTasks));
        }

        public BeanstalkState build() {
            return $;
        }
    }

}
