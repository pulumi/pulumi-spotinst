// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.oceancd.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs Empty = new RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs();

    /**
     * The port of the TLS Route desired to be matched in the given Istio VirtualService.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port of the TLS Route desired to be matched in the given Istio VirtualService.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
     * 
     */
    @Import(name="sniHosts")
    private @Nullable Output<List<String>> sniHosts;

    /**
     * @return A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
     * 
     */
    public Optional<Output<List<String>>> sniHosts() {
        return Optional.ofNullable(this.sniHosts);
    }

    private RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs() {}

    private RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs(RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs $) {
        this.port = $.port;
        this.sniHosts = $.sniHosts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs $;

        public Builder() {
            $ = new RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs();
        }

        public Builder(RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs defaults) {
            $ = new RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param port The port of the TLS Route desired to be matched in the given Istio VirtualService.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port of the TLS Route desired to be matched in the given Istio VirtualService.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param sniHosts A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
         * 
         * @return builder
         * 
         */
        public Builder sniHosts(@Nullable Output<List<String>> sniHosts) {
            $.sniHosts = sniHosts;
            return this;
        }

        /**
         * @param sniHosts A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
         * 
         * @return builder
         * 
         */
        public Builder sniHosts(List<String> sniHosts) {
            return sniHosts(Output.of(sniHosts));
        }

        /**
         * @param sniHosts A list of all the SNI Hosts of the TLS Route desired to be matched in the given Istio VirtualService.
         * 
         * @return builder
         * 
         */
        public Builder sniHosts(String... sniHosts) {
            return sniHosts(List.of(sniHosts));
        }

        public RolloutSpecTrafficIstioVirtualServiceTlsRouteArgs build() {
            return $;
        }
    }

}
