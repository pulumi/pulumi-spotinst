// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MrScalarCoreScalingUpPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final MrScalarCoreScalingUpPolicyArgs Empty = new MrScalarCoreScalingUpPolicyArgs();

    /**
     * The type of action to perform. Allowed values are : &#39;adjustment&#39;, &#39;setMinTarget&#39;, &#39;setMaxTarget&#39;, &#39;updateCapacity&#39;, &#39;percentageAdjustment&#39;
     * 
     */
    @Import(name="actionType")
    private @Nullable Output<String> actionType;

    /**
     * @return The type of action to perform. Allowed values are : &#39;adjustment&#39;, &#39;setMinTarget&#39;, &#39;setMaxTarget&#39;, &#39;updateCapacity&#39;, &#39;percentageAdjustment&#39;
     * 
     */
    public Optional<Output<String>> actionType() {
        return Optional.ofNullable(this.actionType);
    }

    /**
     * The number of instances to add/remove to/from the target capacity when scale is needed.
     * 
     */
    @Import(name="adjustment")
    private @Nullable Output<String> adjustment;

    /**
     * @return The number of instances to add/remove to/from the target capacity when scale is needed.
     * 
     */
    public Optional<Output<String>> adjustment() {
        return Optional.ofNullable(this.adjustment);
    }

    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    /**
     * @return The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    /**
     * A mapping of dimensions describing qualities of the metric.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<Map<String,Object>> dimensions;

    /**
     * @return A mapping of dimensions describing qualities of the metric.
     * 
     */
    public Optional<Output<Map<String,Object>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The number of periods over which data is compared to the specified threshold.
     * 
     */
    @Import(name="evaluationPeriods")
    private @Nullable Output<Integer> evaluationPeriods;

    /**
     * @return The number of periods over which data is compared to the specified threshold.
     * 
     */
    public Optional<Output<Integer>> evaluationPeriods() {
        return Optional.ofNullable(this.evaluationPeriods);
    }

    /**
     * Max target capacity for scale down.
     * 
     */
    @Import(name="maxTargetCapacity")
    private @Nullable Output<String> maxTargetCapacity;

    /**
     * @return Max target capacity for scale down.
     * 
     */
    public Optional<Output<String>> maxTargetCapacity() {
        return Optional.ofNullable(this.maxTargetCapacity);
    }

    /**
     * The maximum to set when scale is needed.
     * 
     */
    @Import(name="maximum")
    private @Nullable Output<String> maximum;

    /**
     * @return The maximum to set when scale is needed.
     * 
     */
    public Optional<Output<String>> maximum() {
        return Optional.ofNullable(this.maximum);
    }

    /**
     * The name of the metric, with or without spaces.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The name of the metric, with or without spaces.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Min target capacity for scale up.
     * 
     */
    @Import(name="minTargetCapacity")
    private @Nullable Output<String> minTargetCapacity;

    /**
     * @return Min target capacity for scale up.
     * 
     */
    public Optional<Output<String>> minTargetCapacity() {
        return Optional.ofNullable(this.minTargetCapacity);
    }

    /**
     * The minimum to set when scale is needed.
     * 
     */
    @Import(name="minimum")
    private @Nullable Output<String> minimum;

    /**
     * @return The minimum to set when scale is needed.
     * 
     */
    public Optional<Output<String>> minimum() {
        return Optional.ofNullable(this.minimum);
    }

    /**
     * The namespace for the metric.
     * 
     */
    @Import(name="namespace", required=true)
    private Output<String> namespace;

    /**
     * @return The namespace for the metric.
     * 
     */
    public Output<String> namespace() {
        return this.namespace;
    }

    /**
     * The operator to use. Allowed values are : &#39;gt&#39;, &#39;gte&#39;, &#39;lt&#39; , &#39;lte&#39;.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return The operator to use. Allowed values are : &#39;gt&#39;, &#39;gte&#39;, &#39;lt&#39; , &#39;lte&#39;.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The name of the policy.
     * 
     */
    @Import(name="policyName", required=true)
    private Output<String> policyName;

    /**
     * @return The name of the policy.
     * 
     */
    public Output<String> policyName() {
        return this.policyName;
    }

    /**
     * The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
     * 
     */
    @Import(name="statistic")
    private @Nullable Output<String> statistic;

    /**
     * @return The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
     * 
     */
    public Optional<Output<String>> statistic() {
        return Optional.ofNullable(this.statistic);
    }

    /**
     * The number of instances to set when scale is needed.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The number of instances to set when scale is needed.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The value against which the specified statistic is compared.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The value against which the specified statistic is compared.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * The unit for the metric.
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return The unit for the metric.
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    private MrScalarCoreScalingUpPolicyArgs() {}

    private MrScalarCoreScalingUpPolicyArgs(MrScalarCoreScalingUpPolicyArgs $) {
        this.actionType = $.actionType;
        this.adjustment = $.adjustment;
        this.cooldown = $.cooldown;
        this.dimensions = $.dimensions;
        this.evaluationPeriods = $.evaluationPeriods;
        this.maxTargetCapacity = $.maxTargetCapacity;
        this.maximum = $.maximum;
        this.metricName = $.metricName;
        this.minTargetCapacity = $.minTargetCapacity;
        this.minimum = $.minimum;
        this.namespace = $.namespace;
        this.operator = $.operator;
        this.period = $.period;
        this.policyName = $.policyName;
        this.statistic = $.statistic;
        this.target = $.target;
        this.threshold = $.threshold;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MrScalarCoreScalingUpPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MrScalarCoreScalingUpPolicyArgs $;

        public Builder() {
            $ = new MrScalarCoreScalingUpPolicyArgs();
        }

        public Builder(MrScalarCoreScalingUpPolicyArgs defaults) {
            $ = new MrScalarCoreScalingUpPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionType The type of action to perform. Allowed values are : &#39;adjustment&#39;, &#39;setMinTarget&#39;, &#39;setMaxTarget&#39;, &#39;updateCapacity&#39;, &#39;percentageAdjustment&#39;
         * 
         * @return builder
         * 
         */
        public Builder actionType(@Nullable Output<String> actionType) {
            $.actionType = actionType;
            return this;
        }

        /**
         * @param actionType The type of action to perform. Allowed values are : &#39;adjustment&#39;, &#39;setMinTarget&#39;, &#39;setMaxTarget&#39;, &#39;updateCapacity&#39;, &#39;percentageAdjustment&#39;
         * 
         * @return builder
         * 
         */
        public Builder actionType(String actionType) {
            return actionType(Output.of(actionType));
        }

        /**
         * @param adjustment The number of instances to add/remove to/from the target capacity when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder adjustment(@Nullable Output<String> adjustment) {
            $.adjustment = adjustment;
            return this;
        }

        /**
         * @param adjustment The number of instances to add/remove to/from the target capacity when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder adjustment(String adjustment) {
            return adjustment(Output.of(adjustment));
        }

        /**
         * @param cooldown The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        /**
         * @param cooldown The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        /**
         * @param dimensions A mapping of dimensions describing qualities of the metric.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<Map<String,Object>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions A mapping of dimensions describing qualities of the metric.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(Map<String,Object> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param evaluationPeriods The number of periods over which data is compared to the specified threshold.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(@Nullable Output<Integer> evaluationPeriods) {
            $.evaluationPeriods = evaluationPeriods;
            return this;
        }

        /**
         * @param evaluationPeriods The number of periods over which data is compared to the specified threshold.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(Integer evaluationPeriods) {
            return evaluationPeriods(Output.of(evaluationPeriods));
        }

        /**
         * @param maxTargetCapacity Max target capacity for scale down.
         * 
         * @return builder
         * 
         */
        public Builder maxTargetCapacity(@Nullable Output<String> maxTargetCapacity) {
            $.maxTargetCapacity = maxTargetCapacity;
            return this;
        }

        /**
         * @param maxTargetCapacity Max target capacity for scale down.
         * 
         * @return builder
         * 
         */
        public Builder maxTargetCapacity(String maxTargetCapacity) {
            return maxTargetCapacity(Output.of(maxTargetCapacity));
        }

        /**
         * @param maximum The maximum to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder maximum(@Nullable Output<String> maximum) {
            $.maximum = maximum;
            return this;
        }

        /**
         * @param maximum The maximum to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder maximum(String maximum) {
            return maximum(Output.of(maximum));
        }

        /**
         * @param metricName The name of the metric, with or without spaces.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the metric, with or without spaces.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param minTargetCapacity Min target capacity for scale up.
         * 
         * @return builder
         * 
         */
        public Builder minTargetCapacity(@Nullable Output<String> minTargetCapacity) {
            $.minTargetCapacity = minTargetCapacity;
            return this;
        }

        /**
         * @param minTargetCapacity Min target capacity for scale up.
         * 
         * @return builder
         * 
         */
        public Builder minTargetCapacity(String minTargetCapacity) {
            return minTargetCapacity(Output.of(minTargetCapacity));
        }

        /**
         * @param minimum The minimum to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder minimum(@Nullable Output<String> minimum) {
            $.minimum = minimum;
            return this;
        }

        /**
         * @param minimum The minimum to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder minimum(String minimum) {
            return minimum(Output.of(minimum));
        }

        /**
         * @param namespace The namespace for the metric.
         * 
         * @return builder
         * 
         */
        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace The namespace for the metric.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param operator The operator to use. Allowed values are : &#39;gt&#39;, &#39;gte&#39;, &#39;lt&#39; , &#39;lte&#39;.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator The operator to use. Allowed values are : &#39;gt&#39;, &#39;gte&#39;, &#39;lt&#39; , &#39;lte&#39;.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param period The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param policyName The name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyName(Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName The name of the policy.
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param statistic The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder statistic(@Nullable Output<String> statistic) {
            $.statistic = statistic;
            return this;
        }

        /**
         * @param statistic The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
         * 
         * @return builder
         * 
         */
        public Builder statistic(String statistic) {
            return statistic(Output.of(statistic));
        }

        /**
         * @param target The number of instances to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The number of instances to set when scale is needed.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param threshold The value against which the specified statistic is compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The value against which the specified statistic is compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param unit The unit for the metric.
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The unit for the metric.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public MrScalarCoreScalingUpPolicyArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.policyName = Objects.requireNonNull($.policyName, "expected parameter 'policyName' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.unit = Objects.requireNonNull($.unit, "expected parameter 'unit' to be non-null");
            return $;
        }
    }

}
