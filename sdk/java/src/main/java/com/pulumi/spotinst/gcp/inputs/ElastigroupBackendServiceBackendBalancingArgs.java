// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gcp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupBackendServiceBackendBalancingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupBackendServiceBackendBalancingArgs Empty = new ElastigroupBackendServiceBackendBalancingArgs();

    /**
     * The backend balancing mode. Valid values: `RATE`, `UTILIZATION`.
     * 
     */
    @Import(name="backendBalancingMode")
    private @Nullable Output<String> backendBalancingMode;

    /**
     * @return The backend balancing mode. Valid values: `RATE`, `UTILIZATION`.
     * 
     */
    public Optional<Output<String>> backendBalancingMode() {
        return Optional.ofNullable(this.backendBalancingMode);
    }

    /**
     * If the backendBalancingMode is set to RATE, this field is required.
     * 
     * Usage:
     * 
     */
    @Import(name="maxRatePerInstance")
    private @Nullable Output<Integer> maxRatePerInstance;

    /**
     * @return If the backendBalancingMode is set to RATE, this field is required.
     * 
     * Usage:
     * 
     */
    public Optional<Output<Integer>> maxRatePerInstance() {
        return Optional.ofNullable(this.maxRatePerInstance);
    }

    private ElastigroupBackendServiceBackendBalancingArgs() {}

    private ElastigroupBackendServiceBackendBalancingArgs(ElastigroupBackendServiceBackendBalancingArgs $) {
        this.backendBalancingMode = $.backendBalancingMode;
        this.maxRatePerInstance = $.maxRatePerInstance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupBackendServiceBackendBalancingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupBackendServiceBackendBalancingArgs $;

        public Builder() {
            $ = new ElastigroupBackendServiceBackendBalancingArgs();
        }

        public Builder(ElastigroupBackendServiceBackendBalancingArgs defaults) {
            $ = new ElastigroupBackendServiceBackendBalancingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendBalancingMode The backend balancing mode. Valid values: `RATE`, `UTILIZATION`.
         * 
         * @return builder
         * 
         */
        public Builder backendBalancingMode(@Nullable Output<String> backendBalancingMode) {
            $.backendBalancingMode = backendBalancingMode;
            return this;
        }

        /**
         * @param backendBalancingMode The backend balancing mode. Valid values: `RATE`, `UTILIZATION`.
         * 
         * @return builder
         * 
         */
        public Builder backendBalancingMode(String backendBalancingMode) {
            return backendBalancingMode(Output.of(backendBalancingMode));
        }

        /**
         * @param maxRatePerInstance If the backendBalancingMode is set to RATE, this field is required.
         * 
         * Usage:
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerInstance(@Nullable Output<Integer> maxRatePerInstance) {
            $.maxRatePerInstance = maxRatePerInstance;
            return this;
        }

        /**
         * @param maxRatePerInstance If the backendBalancingMode is set to RATE, this field is required.
         * 
         * Usage:
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerInstance(Integer maxRatePerInstance) {
            return maxRatePerInstance(Output.of(maxRatePerInstance));
        }

        public ElastigroupBackendServiceBackendBalancingArgs build() {
            return $;
        }
    }

}
