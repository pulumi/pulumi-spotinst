// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanLaunchSpecStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanLaunchSpecStrategyArgs Empty = new OceanLaunchSpecStrategyArgs();

    /**
     * The configurable amount of time that Ocean will wait for the draining process to complete before terminating an instance. If you have not defined a draining timeout, the default of 300 seconds will be used.
     * 
     */
    @Import(name="drainingTimeout")
    private @Nullable Output<Integer> drainingTimeout;

    /**
     * @return The configurable amount of time that Ocean will wait for the draining process to complete before terminating an instance. If you have not defined a draining timeout, the default of 300 seconds will be used.
     * 
     */
    public Optional<Output<Integer>> drainingTimeout() {
        return Optional.ofNullable(this.drainingTimeout);
    }

    /**
     * The desired percentage of the Spot instances out of all running instances for this VNG. Only available when the field is not set in the cluster directly (cluster.strategy.spotPercentage).
     * 
     */
    @Import(name="spotPercentage")
    private @Nullable Output<Integer> spotPercentage;

    /**
     * @return The desired percentage of the Spot instances out of all running instances for this VNG. Only available when the field is not set in the cluster directly (cluster.strategy.spotPercentage).
     * 
     */
    public Optional<Output<Integer>> spotPercentage() {
        return Optional.ofNullable(this.spotPercentage);
    }

    /**
     * When set as ‘true’, if savings plans commitments have available capacity, Ocean will utilize them alongside RIs (if exist) to maximize cost efficiency. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
     * 
     */
    @Import(name="utilizeCommitments")
    private @Nullable Output<Boolean> utilizeCommitments;

    /**
     * @return When set as ‘true’, if savings plans commitments have available capacity, Ocean will utilize them alongside RIs (if exist) to maximize cost efficiency. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
     * 
     */
    public Optional<Output<Boolean>> utilizeCommitments() {
        return Optional.ofNullable(this.utilizeCommitments);
    }

    /**
     * When set as ‘true’, if reserved instances exist, Ocean will utilize them before launching spot instances. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
     * 
     */
    @Import(name="utilizeReservedInstances")
    private @Nullable Output<Boolean> utilizeReservedInstances;

    /**
     * @return When set as ‘true’, if reserved instances exist, Ocean will utilize them before launching spot instances. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
     * 
     */
    public Optional<Output<Boolean>> utilizeReservedInstances() {
        return Optional.ofNullable(this.utilizeReservedInstances);
    }

    private OceanLaunchSpecStrategyArgs() {}

    private OceanLaunchSpecStrategyArgs(OceanLaunchSpecStrategyArgs $) {
        this.drainingTimeout = $.drainingTimeout;
        this.spotPercentage = $.spotPercentage;
        this.utilizeCommitments = $.utilizeCommitments;
        this.utilizeReservedInstances = $.utilizeReservedInstances;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanLaunchSpecStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanLaunchSpecStrategyArgs $;

        public Builder() {
            $ = new OceanLaunchSpecStrategyArgs();
        }

        public Builder(OceanLaunchSpecStrategyArgs defaults) {
            $ = new OceanLaunchSpecStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainingTimeout The configurable amount of time that Ocean will wait for the draining process to complete before terminating an instance. If you have not defined a draining timeout, the default of 300 seconds will be used.
         * 
         * @return builder
         * 
         */
        public Builder drainingTimeout(@Nullable Output<Integer> drainingTimeout) {
            $.drainingTimeout = drainingTimeout;
            return this;
        }

        /**
         * @param drainingTimeout The configurable amount of time that Ocean will wait for the draining process to complete before terminating an instance. If you have not defined a draining timeout, the default of 300 seconds will be used.
         * 
         * @return builder
         * 
         */
        public Builder drainingTimeout(Integer drainingTimeout) {
            return drainingTimeout(Output.of(drainingTimeout));
        }

        /**
         * @param spotPercentage The desired percentage of the Spot instances out of all running instances for this VNG. Only available when the field is not set in the cluster directly (cluster.strategy.spotPercentage).
         * 
         * @return builder
         * 
         */
        public Builder spotPercentage(@Nullable Output<Integer> spotPercentage) {
            $.spotPercentage = spotPercentage;
            return this;
        }

        /**
         * @param spotPercentage The desired percentage of the Spot instances out of all running instances for this VNG. Only available when the field is not set in the cluster directly (cluster.strategy.spotPercentage).
         * 
         * @return builder
         * 
         */
        public Builder spotPercentage(Integer spotPercentage) {
            return spotPercentage(Output.of(spotPercentage));
        }

        /**
         * @param utilizeCommitments When set as ‘true’, if savings plans commitments have available capacity, Ocean will utilize them alongside RIs (if exist) to maximize cost efficiency. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
         * 
         * @return builder
         * 
         */
        public Builder utilizeCommitments(@Nullable Output<Boolean> utilizeCommitments) {
            $.utilizeCommitments = utilizeCommitments;
            return this;
        }

        /**
         * @param utilizeCommitments When set as ‘true’, if savings plans commitments have available capacity, Ocean will utilize them alongside RIs (if exist) to maximize cost efficiency. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
         * 
         * @return builder
         * 
         */
        public Builder utilizeCommitments(Boolean utilizeCommitments) {
            return utilizeCommitments(Output.of(utilizeCommitments));
        }

        /**
         * @param utilizeReservedInstances When set as ‘true’, if reserved instances exist, Ocean will utilize them before launching spot instances. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
         * 
         * @return builder
         * 
         */
        public Builder utilizeReservedInstances(@Nullable Output<Boolean> utilizeReservedInstances) {
            $.utilizeReservedInstances = utilizeReservedInstances;
            return this;
        }

        /**
         * @param utilizeReservedInstances When set as ‘true’, if reserved instances exist, Ocean will utilize them before launching spot instances. If the value is set as &#39;null&#39;, it will automatically be inherited from the cluster level.
         * 
         * @return builder
         * 
         */
        public Builder utilizeReservedInstances(Boolean utilizeReservedInstances) {
            return utilizeReservedInstances(Output.of(utilizeReservedInstances));
        }

        public OceanLaunchSpecStrategyArgs build() {
            return $;
        }
    }

}
