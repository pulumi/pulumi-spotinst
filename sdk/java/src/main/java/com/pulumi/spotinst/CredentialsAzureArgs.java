// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CredentialsAzureArgs extends com.pulumi.resources.ResourceArgs {

    public static final CredentialsAzureArgs Empty = new CredentialsAzureArgs();

    /**
     * The ID of the account associated with your token.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The ID of the account associated with your token.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Set the application ID.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Set the application ID.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Set the key secret.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return Set the key secret.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the key secret expiration date.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Set the key secret expiration date.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Set the subscription ID.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return Set the subscription ID.
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the directory ID.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    /**
     * @return Set the directory ID.
     * 
     */
    public Output<String> tenantId() {
        return this.tenantId;
    }

    private CredentialsAzureArgs() {}

    private CredentialsAzureArgs(CredentialsAzureArgs $) {
        this.accountId = $.accountId;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.expirationDate = $.expirationDate;
        this.subscriptionId = $.subscriptionId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CredentialsAzureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CredentialsAzureArgs $;

        public Builder() {
            $ = new CredentialsAzureArgs();
        }

        public Builder(CredentialsAzureArgs defaults) {
            $ = new CredentialsAzureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The ID of the account associated with your token.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The ID of the account associated with your token.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param clientId Set the application ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Set the application ID.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Set the key secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Set the key secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param expirationDate Set the key secret expiration date.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Set the key secret expiration date.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param subscriptionId Set the subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Set the subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tenantId Set the directory ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Set the directory ID.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public CredentialsAzureArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("CredentialsAzureArgs", "accountId");
            }
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("CredentialsAzureArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("CredentialsAzureArgs", "clientSecret");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("CredentialsAzureArgs", "subscriptionId");
            }
            if ($.tenantId == null) {
                throw new MissingRequiredPropertyException("CredentialsAzureArgs", "tenantId");
            }
            return $;
        }
    }

}
