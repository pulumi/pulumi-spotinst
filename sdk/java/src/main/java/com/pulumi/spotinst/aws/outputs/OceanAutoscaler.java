// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.spotinst.aws.outputs.OceanAutoscalerAutoscaleDown;
import com.pulumi.spotinst.aws.outputs.OceanAutoscalerAutoscaleHeadroom;
import com.pulumi.spotinst.aws.outputs.OceanAutoscalerResourceLimits;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OceanAutoscaler {
    /**
     * @return Set the auto headroom percentage (a number in the range [0, 200]) which controls the percentage of headroom from the cluster. Relevant only when `autoscaleIsAutoConfig` toggled on.
     * 
     */
    private @Nullable Integer autoHeadroomPercentage;
    /**
     * @return Cooldown period between scaling actions.
     * 
     */
    private @Nullable Integer autoscaleCooldown;
    /**
     * @return Auto Scaling scale down operations.
     * 
     */
    private @Nullable OceanAutoscalerAutoscaleDown autoscaleDown;
    /**
     * @return Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
     * 
     */
    private @Nullable OceanAutoscalerAutoscaleHeadroom autoscaleHeadroom;
    /**
     * @return Automatically configure and optimize headroom resources.
     * 
     */
    private @Nullable Boolean autoscaleIsAutoConfig;
    /**
     * @return Enable the Ocean Kubernetes Auto Scaler.
     * 
     */
    private @Nullable Boolean autoscaleIsEnabled;
    /**
     * @return enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
     * 
     */
    private @Nullable Boolean enableAutomaticAndManualHeadroom;
    /**
     * @return List of Ocean extended resource definitions to use in this cluster.
     * 
     */
    private @Nullable List<String> extendedResourceDefinitions;
    /**
     * @return Optionally set upper and lower bounds on the resource usage of the cluster.
     * 
     */
    private @Nullable OceanAutoscalerResourceLimits resourceLimits;

    private OceanAutoscaler() {}
    /**
     * @return Set the auto headroom percentage (a number in the range [0, 200]) which controls the percentage of headroom from the cluster. Relevant only when `autoscaleIsAutoConfig` toggled on.
     * 
     */
    public Optional<Integer> autoHeadroomPercentage() {
        return Optional.ofNullable(this.autoHeadroomPercentage);
    }
    /**
     * @return Cooldown period between scaling actions.
     * 
     */
    public Optional<Integer> autoscaleCooldown() {
        return Optional.ofNullable(this.autoscaleCooldown);
    }
    /**
     * @return Auto Scaling scale down operations.
     * 
     */
    public Optional<OceanAutoscalerAutoscaleDown> autoscaleDown() {
        return Optional.ofNullable(this.autoscaleDown);
    }
    /**
     * @return Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
     * 
     */
    public Optional<OceanAutoscalerAutoscaleHeadroom> autoscaleHeadroom() {
        return Optional.ofNullable(this.autoscaleHeadroom);
    }
    /**
     * @return Automatically configure and optimize headroom resources.
     * 
     */
    public Optional<Boolean> autoscaleIsAutoConfig() {
        return Optional.ofNullable(this.autoscaleIsAutoConfig);
    }
    /**
     * @return Enable the Ocean Kubernetes Auto Scaler.
     * 
     */
    public Optional<Boolean> autoscaleIsEnabled() {
        return Optional.ofNullable(this.autoscaleIsEnabled);
    }
    /**
     * @return enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
     * 
     */
    public Optional<Boolean> enableAutomaticAndManualHeadroom() {
        return Optional.ofNullable(this.enableAutomaticAndManualHeadroom);
    }
    /**
     * @return List of Ocean extended resource definitions to use in this cluster.
     * 
     */
    public List<String> extendedResourceDefinitions() {
        return this.extendedResourceDefinitions == null ? List.of() : this.extendedResourceDefinitions;
    }
    /**
     * @return Optionally set upper and lower bounds on the resource usage of the cluster.
     * 
     */
    public Optional<OceanAutoscalerResourceLimits> resourceLimits() {
        return Optional.ofNullable(this.resourceLimits);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OceanAutoscaler defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer autoHeadroomPercentage;
        private @Nullable Integer autoscaleCooldown;
        private @Nullable OceanAutoscalerAutoscaleDown autoscaleDown;
        private @Nullable OceanAutoscalerAutoscaleHeadroom autoscaleHeadroom;
        private @Nullable Boolean autoscaleIsAutoConfig;
        private @Nullable Boolean autoscaleIsEnabled;
        private @Nullable Boolean enableAutomaticAndManualHeadroom;
        private @Nullable List<String> extendedResourceDefinitions;
        private @Nullable OceanAutoscalerResourceLimits resourceLimits;
        public Builder() {}
        public Builder(OceanAutoscaler defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoHeadroomPercentage = defaults.autoHeadroomPercentage;
    	      this.autoscaleCooldown = defaults.autoscaleCooldown;
    	      this.autoscaleDown = defaults.autoscaleDown;
    	      this.autoscaleHeadroom = defaults.autoscaleHeadroom;
    	      this.autoscaleIsAutoConfig = defaults.autoscaleIsAutoConfig;
    	      this.autoscaleIsEnabled = defaults.autoscaleIsEnabled;
    	      this.enableAutomaticAndManualHeadroom = defaults.enableAutomaticAndManualHeadroom;
    	      this.extendedResourceDefinitions = defaults.extendedResourceDefinitions;
    	      this.resourceLimits = defaults.resourceLimits;
        }

        @CustomType.Setter
        public Builder autoHeadroomPercentage(@Nullable Integer autoHeadroomPercentage) {

            this.autoHeadroomPercentage = autoHeadroomPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder autoscaleCooldown(@Nullable Integer autoscaleCooldown) {

            this.autoscaleCooldown = autoscaleCooldown;
            return this;
        }
        @CustomType.Setter
        public Builder autoscaleDown(@Nullable OceanAutoscalerAutoscaleDown autoscaleDown) {

            this.autoscaleDown = autoscaleDown;
            return this;
        }
        @CustomType.Setter
        public Builder autoscaleHeadroom(@Nullable OceanAutoscalerAutoscaleHeadroom autoscaleHeadroom) {

            this.autoscaleHeadroom = autoscaleHeadroom;
            return this;
        }
        @CustomType.Setter
        public Builder autoscaleIsAutoConfig(@Nullable Boolean autoscaleIsAutoConfig) {

            this.autoscaleIsAutoConfig = autoscaleIsAutoConfig;
            return this;
        }
        @CustomType.Setter
        public Builder autoscaleIsEnabled(@Nullable Boolean autoscaleIsEnabled) {

            this.autoscaleIsEnabled = autoscaleIsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutomaticAndManualHeadroom(@Nullable Boolean enableAutomaticAndManualHeadroom) {

            this.enableAutomaticAndManualHeadroom = enableAutomaticAndManualHeadroom;
            return this;
        }
        @CustomType.Setter
        public Builder extendedResourceDefinitions(@Nullable List<String> extendedResourceDefinitions) {

            this.extendedResourceDefinitions = extendedResourceDefinitions;
            return this;
        }
        public Builder extendedResourceDefinitions(String... extendedResourceDefinitions) {
            return extendedResourceDefinitions(List.of(extendedResourceDefinitions));
        }
        @CustomType.Setter
        public Builder resourceLimits(@Nullable OceanAutoscalerResourceLimits resourceLimits) {

            this.resourceLimits = resourceLimits;
            return this;
        }
        public OceanAutoscaler build() {
            final var _resultValue = new OceanAutoscaler();
            _resultValue.autoHeadroomPercentage = autoHeadroomPercentage;
            _resultValue.autoscaleCooldown = autoscaleCooldown;
            _resultValue.autoscaleDown = autoscaleDown;
            _resultValue.autoscaleHeadroom = autoscaleHeadroom;
            _resultValue.autoscaleIsAutoConfig = autoscaleIsAutoConfig;
            _resultValue.autoscaleIsEnabled = autoscaleIsEnabled;
            _resultValue.enableAutomaticAndManualHeadroom = enableAutomaticAndManualHeadroom;
            _resultValue.extendedResourceDefinitions = extendedResourceDefinitions;
            _resultValue.resourceLimits = resourceLimits;
            return _resultValue;
        }
    }
}
