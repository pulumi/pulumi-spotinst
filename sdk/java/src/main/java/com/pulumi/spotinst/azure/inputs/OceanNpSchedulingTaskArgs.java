// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.azure.inputs.OceanNpSchedulingTaskParametersArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanNpSchedulingTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanNpSchedulingTaskArgs Empty = new OceanNpSchedulingTaskArgs();

    @Import(name="cronExpression", required=true)
    private Output<String> cronExpression;

    public Output<String> cronExpression() {
        return this.cronExpression;
    }

    /**
     * Enable automatic headroom. When set to True, Ocean configures and optimizes headroom automatically.
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return Enable automatic headroom. When set to True, Ocean configures and optimizes headroom automatically.
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    @Import(name="parameters")
    private @Nullable Output<OceanNpSchedulingTaskParametersArgs> parameters;

    public Optional<Output<OceanNpSchedulingTaskParametersArgs>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="taskType", required=true)
    private Output<String> taskType;

    public Output<String> taskType() {
        return this.taskType;
    }

    private OceanNpSchedulingTaskArgs() {}

    private OceanNpSchedulingTaskArgs(OceanNpSchedulingTaskArgs $) {
        this.cronExpression = $.cronExpression;
        this.isEnabled = $.isEnabled;
        this.parameters = $.parameters;
        this.taskType = $.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanNpSchedulingTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanNpSchedulingTaskArgs $;

        public Builder() {
            $ = new OceanNpSchedulingTaskArgs();
        }

        public Builder(OceanNpSchedulingTaskArgs defaults) {
            $ = new OceanNpSchedulingTaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder cronExpression(Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        /**
         * @param isEnabled Enable automatic headroom. When set to True, Ocean configures and optimizes headroom automatically.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Enable automatic headroom. When set to True, Ocean configures and optimizes headroom automatically.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        public Builder parameters(@Nullable Output<OceanNpSchedulingTaskParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(OceanNpSchedulingTaskParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder taskType(Output<String> taskType) {
            $.taskType = taskType;
            return this;
        }

        public Builder taskType(String taskType) {
            return taskType(Output.of(taskType));
        }

        public OceanNpSchedulingTaskArgs build() {
            if ($.cronExpression == null) {
                throw new MissingRequiredPropertyException("OceanNpSchedulingTaskArgs", "cronExpression");
            }
            if ($.isEnabled == null) {
                throw new MissingRequiredPropertyException("OceanNpSchedulingTaskArgs", "isEnabled");
            }
            if ($.taskType == null) {
                throw new MissingRequiredPropertyException("OceanNpSchedulingTaskArgs", "taskType");
            }
            return $;
        }
    }

}
