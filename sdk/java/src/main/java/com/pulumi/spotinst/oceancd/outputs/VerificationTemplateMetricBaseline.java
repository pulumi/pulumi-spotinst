// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.oceancd.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.oceancd.outputs.VerificationTemplateMetricBaselineBaselineProvider;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VerificationTemplateMetricBaseline {
    /**
     * @return The name of the monitoring tool chosen for the metric.
     * 
     */
    private List<VerificationTemplateMetricBaselineBaselineProvider> baselineProviders;
    /**
     * @return Number in percent we allow the new version’s data result to be under baseline data result.
     * 
     */
    private @Nullable Integer maxRange;
    /**
     * @return Number in percent we allow the new version’s data result to be under baseline data result.*
     * 
     */
    private @Nullable Integer minRange;
    /**
     * @return A mathematical expression needed for the comparison. Enum: &#34;&lt;&#34; &#34;&gt;&#34; &#34;&lt;=&#34; &#34;&gt;=&#34; &#34;=&#34; &#34;range&#34;
     * 
     */
    private String threshold;

    private VerificationTemplateMetricBaseline() {}
    /**
     * @return The name of the monitoring tool chosen for the metric.
     * 
     */
    public List<VerificationTemplateMetricBaselineBaselineProvider> baselineProviders() {
        return this.baselineProviders;
    }
    /**
     * @return Number in percent we allow the new version’s data result to be under baseline data result.
     * 
     */
    public Optional<Integer> maxRange() {
        return Optional.ofNullable(this.maxRange);
    }
    /**
     * @return Number in percent we allow the new version’s data result to be under baseline data result.*
     * 
     */
    public Optional<Integer> minRange() {
        return Optional.ofNullable(this.minRange);
    }
    /**
     * @return A mathematical expression needed for the comparison. Enum: &#34;&lt;&#34; &#34;&gt;&#34; &#34;&lt;=&#34; &#34;&gt;=&#34; &#34;=&#34; &#34;range&#34;
     * 
     */
    public String threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VerificationTemplateMetricBaseline defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<VerificationTemplateMetricBaselineBaselineProvider> baselineProviders;
        private @Nullable Integer maxRange;
        private @Nullable Integer minRange;
        private String threshold;
        public Builder() {}
        public Builder(VerificationTemplateMetricBaseline defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baselineProviders = defaults.baselineProviders;
    	      this.maxRange = defaults.maxRange;
    	      this.minRange = defaults.minRange;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder baselineProviders(List<VerificationTemplateMetricBaselineBaselineProvider> baselineProviders) {
            if (baselineProviders == null) {
              throw new MissingRequiredPropertyException("VerificationTemplateMetricBaseline", "baselineProviders");
            }
            this.baselineProviders = baselineProviders;
            return this;
        }
        public Builder baselineProviders(VerificationTemplateMetricBaselineBaselineProvider... baselineProviders) {
            return baselineProviders(List.of(baselineProviders));
        }
        @CustomType.Setter
        public Builder maxRange(@Nullable Integer maxRange) {

            this.maxRange = maxRange;
            return this;
        }
        @CustomType.Setter
        public Builder minRange(@Nullable Integer minRange) {

            this.minRange = minRange;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(String threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("VerificationTemplateMetricBaseline", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public VerificationTemplateMetricBaseline build() {
            final var _resultValue = new VerificationTemplateMetricBaseline();
            _resultValue.baselineProviders = baselineProviders;
            _resultValue.maxRange = maxRange;
            _resultValue.minRange = minRange;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
