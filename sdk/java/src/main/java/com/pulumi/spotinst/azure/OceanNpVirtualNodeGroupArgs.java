// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.azure;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupHeadroomArgs;
import com.pulumi.spotinst.azure.inputs.OceanNpVirtualNodeGroupTaintArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanNpVirtualNodeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanNpVirtualNodeGroupArgs Empty = new OceanNpVirtualNodeGroupArgs();

    @Import(name="availabilityZones")
    private @Nullable Output<List<String>> availabilityZones;

    public Optional<Output<List<String>>> availabilityZones() {
        return Optional.ofNullable(this.availabilityZones);
    }

    @Import(name="enableNodePublicIp")
    private @Nullable Output<Boolean> enableNodePublicIp;

    public Optional<Output<Boolean>> enableNodePublicIp() {
        return Optional.ofNullable(this.enableNodePublicIp);
    }

    @Import(name="fallbackToOndemand")
    private @Nullable Output<Boolean> fallbackToOndemand;

    public Optional<Output<Boolean>> fallbackToOndemand() {
        return Optional.ofNullable(this.fallbackToOndemand);
    }

    @Import(name="headrooms")
    private @Nullable Output<List<OceanNpVirtualNodeGroupHeadroomArgs>> headrooms;

    public Optional<Output<List<OceanNpVirtualNodeGroupHeadroomArgs>>> headrooms() {
        return Optional.ofNullable(this.headrooms);
    }

    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="maxCount")
    private @Nullable Output<Integer> maxCount;

    public Optional<Output<Integer>> maxCount() {
        return Optional.ofNullable(this.maxCount);
    }

    @Import(name="maxPodsPerNode")
    private @Nullable Output<Integer> maxPodsPerNode;

    public Optional<Output<Integer>> maxPodsPerNode() {
        return Optional.ofNullable(this.maxPodsPerNode);
    }

    @Import(name="minCount")
    private @Nullable Output<Integer> minCount;

    public Optional<Output<Integer>> minCount() {
        return Optional.ofNullable(this.minCount);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="oceanId", required=true)
    private Output<String> oceanId;

    public Output<String> oceanId() {
        return this.oceanId;
    }

    @Import(name="osDiskSizeGb")
    private @Nullable Output<Integer> osDiskSizeGb;

    public Optional<Output<Integer>> osDiskSizeGb() {
        return Optional.ofNullable(this.osDiskSizeGb);
    }

    @Import(name="osDiskType")
    private @Nullable Output<String> osDiskType;

    public Optional<Output<String>> osDiskType() {
        return Optional.ofNullable(this.osDiskType);
    }

    @Import(name="osType")
    private @Nullable Output<String> osType;

    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    @Import(name="spotPercentage")
    private @Nullable Output<Integer> spotPercentage;

    public Optional<Output<Integer>> spotPercentage() {
        return Optional.ofNullable(this.spotPercentage);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="taints")
    private @Nullable Output<List<OceanNpVirtualNodeGroupTaintArgs>> taints;

    public Optional<Output<List<OceanNpVirtualNodeGroupTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    private OceanNpVirtualNodeGroupArgs() {}

    private OceanNpVirtualNodeGroupArgs(OceanNpVirtualNodeGroupArgs $) {
        this.availabilityZones = $.availabilityZones;
        this.enableNodePublicIp = $.enableNodePublicIp;
        this.fallbackToOndemand = $.fallbackToOndemand;
        this.headrooms = $.headrooms;
        this.labels = $.labels;
        this.maxCount = $.maxCount;
        this.maxPodsPerNode = $.maxPodsPerNode;
        this.minCount = $.minCount;
        this.name = $.name;
        this.oceanId = $.oceanId;
        this.osDiskSizeGb = $.osDiskSizeGb;
        this.osDiskType = $.osDiskType;
        this.osType = $.osType;
        this.spotPercentage = $.spotPercentage;
        this.tags = $.tags;
        this.taints = $.taints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanNpVirtualNodeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanNpVirtualNodeGroupArgs $;

        public Builder() {
            $ = new OceanNpVirtualNodeGroupArgs();
        }

        public Builder(OceanNpVirtualNodeGroupArgs defaults) {
            $ = new OceanNpVirtualNodeGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        public Builder enableNodePublicIp(@Nullable Output<Boolean> enableNodePublicIp) {
            $.enableNodePublicIp = enableNodePublicIp;
            return this;
        }

        public Builder enableNodePublicIp(Boolean enableNodePublicIp) {
            return enableNodePublicIp(Output.of(enableNodePublicIp));
        }

        public Builder fallbackToOndemand(@Nullable Output<Boolean> fallbackToOndemand) {
            $.fallbackToOndemand = fallbackToOndemand;
            return this;
        }

        public Builder fallbackToOndemand(Boolean fallbackToOndemand) {
            return fallbackToOndemand(Output.of(fallbackToOndemand));
        }

        public Builder headrooms(@Nullable Output<List<OceanNpVirtualNodeGroupHeadroomArgs>> headrooms) {
            $.headrooms = headrooms;
            return this;
        }

        public Builder headrooms(List<OceanNpVirtualNodeGroupHeadroomArgs> headrooms) {
            return headrooms(Output.of(headrooms));
        }

        public Builder headrooms(OceanNpVirtualNodeGroupHeadroomArgs... headrooms) {
            return headrooms(List.of(headrooms));
        }

        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        public Builder maxCount(@Nullable Output<Integer> maxCount) {
            $.maxCount = maxCount;
            return this;
        }

        public Builder maxCount(Integer maxCount) {
            return maxCount(Output.of(maxCount));
        }

        public Builder maxPodsPerNode(@Nullable Output<Integer> maxPodsPerNode) {
            $.maxPodsPerNode = maxPodsPerNode;
            return this;
        }

        public Builder maxPodsPerNode(Integer maxPodsPerNode) {
            return maxPodsPerNode(Output.of(maxPodsPerNode));
        }

        public Builder minCount(@Nullable Output<Integer> minCount) {
            $.minCount = minCount;
            return this;
        }

        public Builder minCount(Integer minCount) {
            return minCount(Output.of(minCount));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder oceanId(Output<String> oceanId) {
            $.oceanId = oceanId;
            return this;
        }

        public Builder oceanId(String oceanId) {
            return oceanId(Output.of(oceanId));
        }

        public Builder osDiskSizeGb(@Nullable Output<Integer> osDiskSizeGb) {
            $.osDiskSizeGb = osDiskSizeGb;
            return this;
        }

        public Builder osDiskSizeGb(Integer osDiskSizeGb) {
            return osDiskSizeGb(Output.of(osDiskSizeGb));
        }

        public Builder osDiskType(@Nullable Output<String> osDiskType) {
            $.osDiskType = osDiskType;
            return this;
        }

        public Builder osDiskType(String osDiskType) {
            return osDiskType(Output.of(osDiskType));
        }

        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        public Builder spotPercentage(@Nullable Output<Integer> spotPercentage) {
            $.spotPercentage = spotPercentage;
            return this;
        }

        public Builder spotPercentage(Integer spotPercentage) {
            return spotPercentage(Output.of(spotPercentage));
        }

        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public Builder taints(@Nullable Output<List<OceanNpVirtualNodeGroupTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        public Builder taints(List<OceanNpVirtualNodeGroupTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        public Builder taints(OceanNpVirtualNodeGroupTaintArgs... taints) {
            return taints(List.of(taints));
        }

        public OceanNpVirtualNodeGroupArgs build() {
            $.oceanId = Objects.requireNonNull($.oceanId, "expected parameter 'oceanId' to be non-null");
            return $;
        }
    }

}
