// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs Empty = new ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs();

    @Import(name="actionType", required=true)
    private Output<String> actionType;

    public Output<String> actionType() {
        return this.actionType;
    }

    @Import(name="batchNum")
    private @Nullable Output<Integer> batchNum;

    public Optional<Output<Integer>> batchNum() {
        return Optional.ofNullable(this.batchNum);
    }

    /**
     * The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     * 
     */
    @Import(name="drainingTimeout")
    private @Nullable Output<Integer> drainingTimeout;

    /**
     * @return The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
     * 
     */
    public Optional<Output<Integer>> drainingTimeout() {
        return Optional.ofNullable(this.drainingTimeout);
    }

    @Import(name="shouldDecrementTargetCapacity")
    private @Nullable Output<Boolean> shouldDecrementTargetCapacity;

    public Optional<Output<Boolean>> shouldDecrementTargetCapacity() {
        return Optional.ofNullable(this.shouldDecrementTargetCapacity);
    }

    @Import(name="shouldHandleAllBatches")
    private @Nullable Output<Boolean> shouldHandleAllBatches;

    public Optional<Output<Boolean>> shouldHandleAllBatches() {
        return Optional.ofNullable(this.shouldHandleAllBatches);
    }

    private ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs() {}

    private ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs(ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs $) {
        this.actionType = $.actionType;
        this.batchNum = $.batchNum;
        this.drainingTimeout = $.drainingTimeout;
        this.shouldDecrementTargetCapacity = $.shouldDecrementTargetCapacity;
        this.shouldHandleAllBatches = $.shouldHandleAllBatches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs $;

        public Builder() {
            $ = new ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs();
        }

        public Builder(ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs defaults) {
            $ = new ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs(Objects.requireNonNull(defaults));
        }

        public Builder actionType(Output<String> actionType) {
            $.actionType = actionType;
            return this;
        }

        public Builder actionType(String actionType) {
            return actionType(Output.of(actionType));
        }

        public Builder batchNum(@Nullable Output<Integer> batchNum) {
            $.batchNum = batchNum;
            return this;
        }

        public Builder batchNum(Integer batchNum) {
            return batchNum(Output.of(batchNum));
        }

        /**
         * @param drainingTimeout The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
         * 
         * @return builder
         * 
         */
        public Builder drainingTimeout(@Nullable Output<Integer> drainingTimeout) {
            $.drainingTimeout = drainingTimeout;
            return this;
        }

        /**
         * @param drainingTimeout The time in seconds, the instance is allowed to run while detached from the ELB. This is to allow the instance time to be drained from incoming TCP connections before terminating it, during a scale down operation.
         * 
         * @return builder
         * 
         */
        public Builder drainingTimeout(Integer drainingTimeout) {
            return drainingTimeout(Output.of(drainingTimeout));
        }

        public Builder shouldDecrementTargetCapacity(@Nullable Output<Boolean> shouldDecrementTargetCapacity) {
            $.shouldDecrementTargetCapacity = shouldDecrementTargetCapacity;
            return this;
        }

        public Builder shouldDecrementTargetCapacity(Boolean shouldDecrementTargetCapacity) {
            return shouldDecrementTargetCapacity(Output.of(shouldDecrementTargetCapacity));
        }

        public Builder shouldHandleAllBatches(@Nullable Output<Boolean> shouldHandleAllBatches) {
            $.shouldHandleAllBatches = shouldHandleAllBatches;
            return this;
        }

        public Builder shouldHandleAllBatches(Boolean shouldHandleAllBatches) {
            return shouldHandleAllBatches(Output.of(shouldHandleAllBatches));
        }

        public ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs build() {
            if ($.actionType == null) {
                throw new MissingRequiredPropertyException("ElastigroupUpdatePolicyRollConfigStrategyOnFailureArgs", "actionType");
            }
            return $;
        }
    }

}
