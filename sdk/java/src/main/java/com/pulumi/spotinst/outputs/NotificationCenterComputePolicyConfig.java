// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.outputs.NotificationCenterComputePolicyConfigDynamicRule;
import com.pulumi.spotinst.outputs.NotificationCenterComputePolicyConfigEvent;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationCenterComputePolicyConfig {
    private @Nullable List<NotificationCenterComputePolicyConfigDynamicRule> dynamicRules;
    private List<NotificationCenterComputePolicyConfigEvent> events;
    private @Nullable List<String> resourceIds;
    private @Nullable Boolean shouldIncludeAllResources;

    private NotificationCenterComputePolicyConfig() {}
    public List<NotificationCenterComputePolicyConfigDynamicRule> dynamicRules() {
        return this.dynamicRules == null ? List.of() : this.dynamicRules;
    }
    public List<NotificationCenterComputePolicyConfigEvent> events() {
        return this.events;
    }
    public List<String> resourceIds() {
        return this.resourceIds == null ? List.of() : this.resourceIds;
    }
    public Optional<Boolean> shouldIncludeAllResources() {
        return Optional.ofNullable(this.shouldIncludeAllResources);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationCenterComputePolicyConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<NotificationCenterComputePolicyConfigDynamicRule> dynamicRules;
        private List<NotificationCenterComputePolicyConfigEvent> events;
        private @Nullable List<String> resourceIds;
        private @Nullable Boolean shouldIncludeAllResources;
        public Builder() {}
        public Builder(NotificationCenterComputePolicyConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dynamicRules = defaults.dynamicRules;
    	      this.events = defaults.events;
    	      this.resourceIds = defaults.resourceIds;
    	      this.shouldIncludeAllResources = defaults.shouldIncludeAllResources;
        }

        @CustomType.Setter
        public Builder dynamicRules(@Nullable List<NotificationCenterComputePolicyConfigDynamicRule> dynamicRules) {

            this.dynamicRules = dynamicRules;
            return this;
        }
        public Builder dynamicRules(NotificationCenterComputePolicyConfigDynamicRule... dynamicRules) {
            return dynamicRules(List.of(dynamicRules));
        }
        @CustomType.Setter
        public Builder events(List<NotificationCenterComputePolicyConfigEvent> events) {
            if (events == null) {
              throw new MissingRequiredPropertyException("NotificationCenterComputePolicyConfig", "events");
            }
            this.events = events;
            return this;
        }
        public Builder events(NotificationCenterComputePolicyConfigEvent... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder resourceIds(@Nullable List<String> resourceIds) {

            this.resourceIds = resourceIds;
            return this;
        }
        public Builder resourceIds(String... resourceIds) {
            return resourceIds(List.of(resourceIds));
        }
        @CustomType.Setter
        public Builder shouldIncludeAllResources(@Nullable Boolean shouldIncludeAllResources) {

            this.shouldIncludeAllResources = shouldIncludeAllResources;
            return this;
        }
        public NotificationCenterComputePolicyConfig build() {
            final var _resultValue = new NotificationCenterComputePolicyConfig();
            _resultValue.dynamicRules = dynamicRules;
            _resultValue.events = events;
            _resultValue.resourceIds = resourceIds;
            _resultValue.shouldIncludeAllResources = shouldIncludeAllResources;
            return _resultValue;
        }
    }
}
