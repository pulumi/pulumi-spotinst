// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.aws.inputs.ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs Empty = new ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs();

    /**
     * Should roll perform automatically
     * 
     */
    @Import(name="automaticRoll")
    private @Nullable Output<Boolean> automaticRoll;

    /**
     * @return Should roll perform automatically
     * 
     */
    public Optional<Output<Boolean>> automaticRoll() {
        return Optional.ofNullable(this.automaticRoll);
    }

    /**
     * Percent size of each batch
     * 
     */
    @Import(name="batchSizePercentage")
    private @Nullable Output<Integer> batchSizePercentage;

    /**
     * @return Percent size of each batch
     * 
     */
    public Optional<Output<Integer>> batchSizePercentage() {
        return Optional.ofNullable(this.batchSizePercentage);
    }

    /**
     * Amount of time to wait between batches
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<Integer> gracePeriod;

    /**
     * @return Amount of time to wait between batches
     * 
     */
    public Optional<Output<Integer>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * Strategy parameters
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategyArgs> strategy;

    /**
     * @return Strategy parameters
     * 
     */
    public Optional<Output<ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategyArgs>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs() {}

    private ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs(ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs $) {
        this.automaticRoll = $.automaticRoll;
        this.batchSizePercentage = $.batchSizePercentage;
        this.gracePeriod = $.gracePeriod;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs $;

        public Builder() {
            $ = new ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs();
        }

        public Builder(ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs defaults) {
            $ = new ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticRoll Should roll perform automatically
         * 
         * @return builder
         * 
         */
        public Builder automaticRoll(@Nullable Output<Boolean> automaticRoll) {
            $.automaticRoll = automaticRoll;
            return this;
        }

        /**
         * @param automaticRoll Should roll perform automatically
         * 
         * @return builder
         * 
         */
        public Builder automaticRoll(Boolean automaticRoll) {
            return automaticRoll(Output.of(automaticRoll));
        }

        /**
         * @param batchSizePercentage Percent size of each batch
         * 
         * @return builder
         * 
         */
        public Builder batchSizePercentage(@Nullable Output<Integer> batchSizePercentage) {
            $.batchSizePercentage = batchSizePercentage;
            return this;
        }

        /**
         * @param batchSizePercentage Percent size of each batch
         * 
         * @return builder
         * 
         */
        public Builder batchSizePercentage(Integer batchSizePercentage) {
            return batchSizePercentage(Output.of(batchSizePercentage));
        }

        /**
         * @param gracePeriod Amount of time to wait between batches
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<Integer> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod Amount of time to wait between batches
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(Integer gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param strategy Strategy parameters
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategyArgs> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Strategy parameters
         * 
         * @return builder
         * 
         */
        public Builder strategy(ElastigroupIntegrationBeanstalkDeploymentPreferencesStrategyArgs strategy) {
            return strategy(Output.of(strategy));
        }

        public ElastigroupIntegrationBeanstalkDeploymentPreferencesArgs build() {
            return $;
        }
    }

}
