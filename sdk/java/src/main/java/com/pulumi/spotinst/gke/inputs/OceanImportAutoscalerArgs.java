// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.gke.inputs.OceanImportAutoscalerDownArgs;
import com.pulumi.spotinst.gke.inputs.OceanImportAutoscalerHeadroomArgs;
import com.pulumi.spotinst.gke.inputs.OceanImportAutoscalerResourceLimitsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanImportAutoscalerArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanImportAutoscalerArgs Empty = new OceanImportAutoscalerArgs();

    /**
     * Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
     * 
     */
    @Import(name="autoHeadroomPercentage")
    private @Nullable Output<Integer> autoHeadroomPercentage;

    /**
     * @return Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
     * 
     */
    public Optional<Output<Integer>> autoHeadroomPercentage() {
        return Optional.ofNullable(this.autoHeadroomPercentage);
    }

    /**
     * Cooldown period between scaling actions.
     * 
     */
    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    /**
     * @return Cooldown period between scaling actions.
     * 
     */
    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    /**
     * Auto Scaling scale down operations.
     * 
     */
    @Import(name="down")
    private @Nullable Output<OceanImportAutoscalerDownArgs> down;

    /**
     * @return Auto Scaling scale down operations.
     * 
     */
    public Optional<Output<OceanImportAutoscalerDownArgs>> down() {
        return Optional.ofNullable(this.down);
    }

    /**
     * enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
     * 
     */
    @Import(name="enableAutomaticAndManualHeadroom")
    private @Nullable Output<Boolean> enableAutomaticAndManualHeadroom;

    /**
     * @return enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
     * 
     */
    public Optional<Output<Boolean>> enableAutomaticAndManualHeadroom() {
        return Optional.ofNullable(this.enableAutomaticAndManualHeadroom);
    }

    /**
     * Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
     * 
     */
    @Import(name="headroom")
    private @Nullable Output<OceanImportAutoscalerHeadroomArgs> headroom;

    /**
     * @return Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
     * 
     */
    public Optional<Output<OceanImportAutoscalerHeadroomArgs>> headroom() {
        return Optional.ofNullable(this.headroom);
    }

    /**
     * Automatically configure and optimize headroom resources.
     * 
     */
    @Import(name="isAutoConfig")
    private @Nullable Output<Boolean> isAutoConfig;

    /**
     * @return Automatically configure and optimize headroom resources.
     * 
     */
    public Optional<Output<Boolean>> isAutoConfig() {
        return Optional.ofNullable(this.isAutoConfig);
    }

    /**
     * Enable the Ocean Kubernetes Autoscaler.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Enable the Ocean Kubernetes Autoscaler.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Optionally set upper and lower bounds on the resource usage of the cluster.
     * 
     */
    @Import(name="resourceLimits")
    private @Nullable Output<OceanImportAutoscalerResourceLimitsArgs> resourceLimits;

    /**
     * @return Optionally set upper and lower bounds on the resource usage of the cluster.
     * 
     */
    public Optional<Output<OceanImportAutoscalerResourceLimitsArgs>> resourceLimits() {
        return Optional.ofNullable(this.resourceLimits);
    }

    private OceanImportAutoscalerArgs() {}

    private OceanImportAutoscalerArgs(OceanImportAutoscalerArgs $) {
        this.autoHeadroomPercentage = $.autoHeadroomPercentage;
        this.cooldown = $.cooldown;
        this.down = $.down;
        this.enableAutomaticAndManualHeadroom = $.enableAutomaticAndManualHeadroom;
        this.headroom = $.headroom;
        this.isAutoConfig = $.isAutoConfig;
        this.isEnabled = $.isEnabled;
        this.resourceLimits = $.resourceLimits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanImportAutoscalerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanImportAutoscalerArgs $;

        public Builder() {
            $ = new OceanImportAutoscalerArgs();
        }

        public Builder(OceanImportAutoscalerArgs defaults) {
            $ = new OceanImportAutoscalerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoHeadroomPercentage Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
         * 
         * @return builder
         * 
         */
        public Builder autoHeadroomPercentage(@Nullable Output<Integer> autoHeadroomPercentage) {
            $.autoHeadroomPercentage = autoHeadroomPercentage;
            return this;
        }

        /**
         * @param autoHeadroomPercentage Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
         * 
         * @return builder
         * 
         */
        public Builder autoHeadroomPercentage(Integer autoHeadroomPercentage) {
            return autoHeadroomPercentage(Output.of(autoHeadroomPercentage));
        }

        /**
         * @param cooldown Cooldown period between scaling actions.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        /**
         * @param cooldown Cooldown period between scaling actions.
         * 
         * @return builder
         * 
         */
        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        /**
         * @param down Auto Scaling scale down operations.
         * 
         * @return builder
         * 
         */
        public Builder down(@Nullable Output<OceanImportAutoscalerDownArgs> down) {
            $.down = down;
            return this;
        }

        /**
         * @param down Auto Scaling scale down operations.
         * 
         * @return builder
         * 
         */
        public Builder down(OceanImportAutoscalerDownArgs down) {
            return down(Output.of(down));
        }

        /**
         * @param enableAutomaticAndManualHeadroom enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
         * 
         * @return builder
         * 
         */
        public Builder enableAutomaticAndManualHeadroom(@Nullable Output<Boolean> enableAutomaticAndManualHeadroom) {
            $.enableAutomaticAndManualHeadroom = enableAutomaticAndManualHeadroom;
            return this;
        }

        /**
         * @param enableAutomaticAndManualHeadroom enables automatic and manual headroom to work in parallel. When set to false, automatic headroom overrides all other headroom definitions manually configured, whether they are at cluster or VNG level.
         * 
         * @return builder
         * 
         */
        public Builder enableAutomaticAndManualHeadroom(Boolean enableAutomaticAndManualHeadroom) {
            return enableAutomaticAndManualHeadroom(Output.of(enableAutomaticAndManualHeadroom));
        }

        /**
         * @param headroom Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
         * 
         * @return builder
         * 
         */
        public Builder headroom(@Nullable Output<OceanImportAutoscalerHeadroomArgs> headroom) {
            $.headroom = headroom;
            return this;
        }

        /**
         * @param headroom Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
         * 
         * @return builder
         * 
         */
        public Builder headroom(OceanImportAutoscalerHeadroomArgs headroom) {
            return headroom(Output.of(headroom));
        }

        /**
         * @param isAutoConfig Automatically configure and optimize headroom resources.
         * 
         * @return builder
         * 
         */
        public Builder isAutoConfig(@Nullable Output<Boolean> isAutoConfig) {
            $.isAutoConfig = isAutoConfig;
            return this;
        }

        /**
         * @param isAutoConfig Automatically configure and optimize headroom resources.
         * 
         * @return builder
         * 
         */
        public Builder isAutoConfig(Boolean isAutoConfig) {
            return isAutoConfig(Output.of(isAutoConfig));
        }

        /**
         * @param isEnabled Enable the Ocean Kubernetes Autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Enable the Ocean Kubernetes Autoscaler.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param resourceLimits Optionally set upper and lower bounds on the resource usage of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceLimits(@Nullable Output<OceanImportAutoscalerResourceLimitsArgs> resourceLimits) {
            $.resourceLimits = resourceLimits;
            return this;
        }

        /**
         * @param resourceLimits Optionally set upper and lower bounds on the resource usage of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceLimits(OceanImportAutoscalerResourceLimitsArgs resourceLimits) {
            return resourceLimits(Output.of(resourceLimits));
        }

        public OceanImportAutoscalerArgs build() {
            return $;
        }
    }

}
