// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedInstanceDelete {
    private @Nullable Boolean amiBackupShouldDeleteImages;
    private @Nullable Boolean deallocationConfigShouldDeleteImages;
    private @Nullable Boolean shouldDeleteNetworkInterfaces;
    private @Nullable Boolean shouldDeleteSnapshots;
    private @Nullable Boolean shouldDeleteVolumes;
    private @Nullable Boolean shouldTerminateInstance;

    private ManagedInstanceDelete() {}
    public Optional<Boolean> amiBackupShouldDeleteImages() {
        return Optional.ofNullable(this.amiBackupShouldDeleteImages);
    }
    public Optional<Boolean> deallocationConfigShouldDeleteImages() {
        return Optional.ofNullable(this.deallocationConfigShouldDeleteImages);
    }
    public Optional<Boolean> shouldDeleteNetworkInterfaces() {
        return Optional.ofNullable(this.shouldDeleteNetworkInterfaces);
    }
    public Optional<Boolean> shouldDeleteSnapshots() {
        return Optional.ofNullable(this.shouldDeleteSnapshots);
    }
    public Optional<Boolean> shouldDeleteVolumes() {
        return Optional.ofNullable(this.shouldDeleteVolumes);
    }
    public Optional<Boolean> shouldTerminateInstance() {
        return Optional.ofNullable(this.shouldTerminateInstance);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedInstanceDelete defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean amiBackupShouldDeleteImages;
        private @Nullable Boolean deallocationConfigShouldDeleteImages;
        private @Nullable Boolean shouldDeleteNetworkInterfaces;
        private @Nullable Boolean shouldDeleteSnapshots;
        private @Nullable Boolean shouldDeleteVolumes;
        private @Nullable Boolean shouldTerminateInstance;
        public Builder() {}
        public Builder(ManagedInstanceDelete defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amiBackupShouldDeleteImages = defaults.amiBackupShouldDeleteImages;
    	      this.deallocationConfigShouldDeleteImages = defaults.deallocationConfigShouldDeleteImages;
    	      this.shouldDeleteNetworkInterfaces = defaults.shouldDeleteNetworkInterfaces;
    	      this.shouldDeleteSnapshots = defaults.shouldDeleteSnapshots;
    	      this.shouldDeleteVolumes = defaults.shouldDeleteVolumes;
    	      this.shouldTerminateInstance = defaults.shouldTerminateInstance;
        }

        @CustomType.Setter
        public Builder amiBackupShouldDeleteImages(@Nullable Boolean amiBackupShouldDeleteImages) {

            this.amiBackupShouldDeleteImages = amiBackupShouldDeleteImages;
            return this;
        }
        @CustomType.Setter
        public Builder deallocationConfigShouldDeleteImages(@Nullable Boolean deallocationConfigShouldDeleteImages) {

            this.deallocationConfigShouldDeleteImages = deallocationConfigShouldDeleteImages;
            return this;
        }
        @CustomType.Setter
        public Builder shouldDeleteNetworkInterfaces(@Nullable Boolean shouldDeleteNetworkInterfaces) {

            this.shouldDeleteNetworkInterfaces = shouldDeleteNetworkInterfaces;
            return this;
        }
        @CustomType.Setter
        public Builder shouldDeleteSnapshots(@Nullable Boolean shouldDeleteSnapshots) {

            this.shouldDeleteSnapshots = shouldDeleteSnapshots;
            return this;
        }
        @CustomType.Setter
        public Builder shouldDeleteVolumes(@Nullable Boolean shouldDeleteVolumes) {

            this.shouldDeleteVolumes = shouldDeleteVolumes;
            return this;
        }
        @CustomType.Setter
        public Builder shouldTerminateInstance(@Nullable Boolean shouldTerminateInstance) {

            this.shouldTerminateInstance = shouldTerminateInstance;
            return this;
        }
        public ManagedInstanceDelete build() {
            final var _resultValue = new ManagedInstanceDelete();
            _resultValue.amiBackupShouldDeleteImages = amiBackupShouldDeleteImages;
            _resultValue.deallocationConfigShouldDeleteImages = deallocationConfigShouldDeleteImages;
            _resultValue.shouldDeleteNetworkInterfaces = shouldDeleteNetworkInterfaces;
            _resultValue.shouldDeleteSnapshots = shouldDeleteSnapshots;
            _resultValue.shouldDeleteVolumes = shouldDeleteVolumes;
            _resultValue.shouldTerminateInstance = shouldTerminateInstance;
            return _resultValue;
        }
    }
}
