// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StatefulNodeAzureDetachDataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final StatefulNodeAzureDetachDataDiskArgs Empty = new StatefulNodeAzureDetachDataDiskArgs();

    @Import(name="dataDiskName", required=true)
    private Output<String> dataDiskName;

    public Output<String> dataDiskName() {
        return this.dataDiskName;
    }

    @Import(name="dataDiskResourceGroupName", required=true)
    private Output<String> dataDiskResourceGroupName;

    public Output<String> dataDiskResourceGroupName() {
        return this.dataDiskResourceGroupName;
    }

    @Import(name="shouldDeallocate", required=true)
    private Output<Boolean> shouldDeallocate;

    public Output<Boolean> shouldDeallocate() {
        return this.shouldDeallocate;
    }

    @Import(name="ttlInHours")
    private @Nullable Output<Integer> ttlInHours;

    public Optional<Output<Integer>> ttlInHours() {
        return Optional.ofNullable(this.ttlInHours);
    }

    private StatefulNodeAzureDetachDataDiskArgs() {}

    private StatefulNodeAzureDetachDataDiskArgs(StatefulNodeAzureDetachDataDiskArgs $) {
        this.dataDiskName = $.dataDiskName;
        this.dataDiskResourceGroupName = $.dataDiskResourceGroupName;
        this.shouldDeallocate = $.shouldDeallocate;
        this.ttlInHours = $.ttlInHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StatefulNodeAzureDetachDataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StatefulNodeAzureDetachDataDiskArgs $;

        public Builder() {
            $ = new StatefulNodeAzureDetachDataDiskArgs();
        }

        public Builder(StatefulNodeAzureDetachDataDiskArgs defaults) {
            $ = new StatefulNodeAzureDetachDataDiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataDiskName(Output<String> dataDiskName) {
            $.dataDiskName = dataDiskName;
            return this;
        }

        public Builder dataDiskName(String dataDiskName) {
            return dataDiskName(Output.of(dataDiskName));
        }

        public Builder dataDiskResourceGroupName(Output<String> dataDiskResourceGroupName) {
            $.dataDiskResourceGroupName = dataDiskResourceGroupName;
            return this;
        }

        public Builder dataDiskResourceGroupName(String dataDiskResourceGroupName) {
            return dataDiskResourceGroupName(Output.of(dataDiskResourceGroupName));
        }

        public Builder shouldDeallocate(Output<Boolean> shouldDeallocate) {
            $.shouldDeallocate = shouldDeallocate;
            return this;
        }

        public Builder shouldDeallocate(Boolean shouldDeallocate) {
            return shouldDeallocate(Output.of(shouldDeallocate));
        }

        public Builder ttlInHours(@Nullable Output<Integer> ttlInHours) {
            $.ttlInHours = ttlInHours;
            return this;
        }

        public Builder ttlInHours(Integer ttlInHours) {
            return ttlInHours(Output.of(ttlInHours));
        }

        public StatefulNodeAzureDetachDataDiskArgs build() {
            if ($.dataDiskName == null) {
                throw new MissingRequiredPropertyException("StatefulNodeAzureDetachDataDiskArgs", "dataDiskName");
            }
            if ($.dataDiskResourceGroupName == null) {
                throw new MissingRequiredPropertyException("StatefulNodeAzureDetachDataDiskArgs", "dataDiskResourceGroupName");
            }
            if ($.shouldDeallocate == null) {
                throw new MissingRequiredPropertyException("StatefulNodeAzureDetachDataDiskArgs", "shouldDeallocate");
            }
            return $;
        }
    }

}
