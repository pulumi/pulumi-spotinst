// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.organization;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.organization.inputs.UserGroupPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupArgs Empty = new UserGroupArgs();

    /**
     * User group description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User group description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User group name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return User group name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The policies to register under the given group
     * (should be existing policies only).
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<UserGroupPolicyArgs>> policies;

    /**
     * @return The policies to register under the given group
     * (should be existing policies only).
     * 
     */
    public Optional<Output<List<UserGroupPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * The users to register under the created group
     * (should be existing users only).
     * 
     */
    @Import(name="userIds")
    private @Nullable Output<List<String>> userIds;

    /**
     * @return The users to register under the created group
     * (should be existing users only).
     * 
     */
    public Optional<Output<List<String>>> userIds() {
        return Optional.ofNullable(this.userIds);
    }

    private UserGroupArgs() {}

    private UserGroupArgs(UserGroupArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.policies = $.policies;
        this.userIds = $.userIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupArgs $;

        public Builder() {
            $ = new UserGroupArgs();
        }

        public Builder(UserGroupArgs defaults) {
            $ = new UserGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User group description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User group description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name User group name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name User group name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policies The policies to register under the given group
         * (should be existing policies only).
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<UserGroupPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies The policies to register under the given group
         * (should be existing policies only).
         * 
         * @return builder
         * 
         */
        public Builder policies(List<UserGroupPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies The policies to register under the given group
         * (should be existing policies only).
         * 
         * @return builder
         * 
         */
        public Builder policies(UserGroupPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param userIds The users to register under the created group
         * (should be existing users only).
         * 
         * @return builder
         * 
         */
        public Builder userIds(@Nullable Output<List<String>> userIds) {
            $.userIds = userIds;
            return this;
        }

        /**
         * @param userIds The users to register under the created group
         * (should be existing users only).
         * 
         * @return builder
         * 
         */
        public Builder userIds(List<String> userIds) {
            return userIds(Output.of(userIds));
        }

        /**
         * @param userIds The users to register under the created group
         * (should be existing users only).
         * 
         * @return builder
         * 
         */
        public Builder userIds(String... userIds) {
            return userIds(List.of(userIds));
        }

        public UserGroupArgs build() {
            return $;
        }
    }

}
