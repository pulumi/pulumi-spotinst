// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupScalingUpPolicyStepAdjustmentActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupScalingUpPolicyStepAdjustmentActionArgs Empty = new ElastigroupScalingUpPolicyStepAdjustmentActionArgs();

    /**
     * The number of instances to add or remove.
     * 
     */
    @Import(name="adjustment")
    private @Nullable Output<String> adjustment;

    /**
     * @return The number of instances to add or remove.
     * 
     */
    public Optional<Output<String>> adjustment() {
        return Optional.ofNullable(this.adjustment);
    }

    /**
     * The desired target capacity of a group. Required if using `&#34;setMaxTarget&#34;` as action type
     * 
     */
    @Import(name="maxTargetCapacity")
    private @Nullable Output<String> maxTargetCapacity;

    /**
     * @return The desired target capacity of a group. Required if using `&#34;setMaxTarget&#34;` as action type
     * 
     */
    public Optional<Output<String>> maxTargetCapacity() {
        return Optional.ofNullable(this.maxTargetCapacity);
    }

    /**
     * The upper limit number of instances that you can scale up to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;minimum&#34;` are not defined.
     * 
     */
    @Import(name="maximum")
    private @Nullable Output<String> maximum;

    /**
     * @return The upper limit number of instances that you can scale up to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;minimum&#34;` are not defined.
     * 
     */
    public Optional<Output<String>> maximum() {
        return Optional.ofNullable(this.maximum);
    }

    /**
     * The desired target capacity of a group. Required if using `&#34;setMinTarget&#34;` as action type
     * 
     */
    @Import(name="minTargetCapacity")
    private @Nullable Output<String> minTargetCapacity;

    /**
     * @return The desired target capacity of a group. Required if using `&#34;setMinTarget&#34;` as action type
     * 
     */
    public Optional<Output<String>> minTargetCapacity() {
        return Optional.ofNullable(this.minTargetCapacity);
    }

    /**
     * The lower limit number of instances that you can scale down to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;maximum&#34;` are not defined.
     * 
     */
    @Import(name="minimum")
    private @Nullable Output<String> minimum;

    /**
     * @return The lower limit number of instances that you can scale down to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;maximum&#34;` are not defined.
     * 
     */
    public Optional<Output<String>> minimum() {
        return Optional.ofNullable(this.minimum);
    }

    /**
     * The desired number of instances. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;minimum&#34;` nor `&#34;maximum&#34;` are not defined.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return The desired number of instances. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;minimum&#34;` nor `&#34;maximum&#34;` are not defined.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The type of the action to take when scale up is needed. Valid types: `&#34;adjustment&#34;`, `&#34;updateCapacity&#34;`, `&#34;setMinTarget&#34;`, `&#34;percentageAdjustment&#34;`.
     * 
     * Usage:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the action to take when scale up is needed. Valid types: `&#34;adjustment&#34;`, `&#34;updateCapacity&#34;`, `&#34;setMinTarget&#34;`, `&#34;percentageAdjustment&#34;`.
     * 
     * Usage:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ElastigroupScalingUpPolicyStepAdjustmentActionArgs() {}

    private ElastigroupScalingUpPolicyStepAdjustmentActionArgs(ElastigroupScalingUpPolicyStepAdjustmentActionArgs $) {
        this.adjustment = $.adjustment;
        this.maxTargetCapacity = $.maxTargetCapacity;
        this.maximum = $.maximum;
        this.minTargetCapacity = $.minTargetCapacity;
        this.minimum = $.minimum;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupScalingUpPolicyStepAdjustmentActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupScalingUpPolicyStepAdjustmentActionArgs $;

        public Builder() {
            $ = new ElastigroupScalingUpPolicyStepAdjustmentActionArgs();
        }

        public Builder(ElastigroupScalingUpPolicyStepAdjustmentActionArgs defaults) {
            $ = new ElastigroupScalingUpPolicyStepAdjustmentActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adjustment The number of instances to add or remove.
         * 
         * @return builder
         * 
         */
        public Builder adjustment(@Nullable Output<String> adjustment) {
            $.adjustment = adjustment;
            return this;
        }

        /**
         * @param adjustment The number of instances to add or remove.
         * 
         * @return builder
         * 
         */
        public Builder adjustment(String adjustment) {
            return adjustment(Output.of(adjustment));
        }

        /**
         * @param maxTargetCapacity The desired target capacity of a group. Required if using `&#34;setMaxTarget&#34;` as action type
         * 
         * @return builder
         * 
         */
        public Builder maxTargetCapacity(@Nullable Output<String> maxTargetCapacity) {
            $.maxTargetCapacity = maxTargetCapacity;
            return this;
        }

        /**
         * @param maxTargetCapacity The desired target capacity of a group. Required if using `&#34;setMaxTarget&#34;` as action type
         * 
         * @return builder
         * 
         */
        public Builder maxTargetCapacity(String maxTargetCapacity) {
            return maxTargetCapacity(Output.of(maxTargetCapacity));
        }

        /**
         * @param maximum The upper limit number of instances that you can scale up to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;minimum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder maximum(@Nullable Output<String> maximum) {
            $.maximum = maximum;
            return this;
        }

        /**
         * @param maximum The upper limit number of instances that you can scale up to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;minimum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder maximum(String maximum) {
            return maximum(Output.of(maximum));
        }

        /**
         * @param minTargetCapacity The desired target capacity of a group. Required if using `&#34;setMinTarget&#34;` as action type
         * 
         * @return builder
         * 
         */
        public Builder minTargetCapacity(@Nullable Output<String> minTargetCapacity) {
            $.minTargetCapacity = minTargetCapacity;
            return this;
        }

        /**
         * @param minTargetCapacity The desired target capacity of a group. Required if using `&#34;setMinTarget&#34;` as action type
         * 
         * @return builder
         * 
         */
        public Builder minTargetCapacity(String minTargetCapacity) {
            return minTargetCapacity(Output.of(minTargetCapacity));
        }

        /**
         * @param minimum The lower limit number of instances that you can scale down to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;maximum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder minimum(@Nullable Output<String> minimum) {
            $.minimum = minimum;
            return this;
        }

        /**
         * @param minimum The lower limit number of instances that you can scale down to. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;target&#34;` nor `&#34;maximum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder minimum(String minimum) {
            return minimum(Output.of(minimum));
        }

        /**
         * @param target The desired number of instances. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;minimum&#34;` nor `&#34;maximum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The desired number of instances. Required if using `&#34;updateCapacity&#34;` as action type and neither `&#34;minimum&#34;` nor `&#34;maximum&#34;` are not defined.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param type The type of the action to take when scale up is needed. Valid types: `&#34;adjustment&#34;`, `&#34;updateCapacity&#34;`, `&#34;setMinTarget&#34;`, `&#34;percentageAdjustment&#34;`.
         * 
         * Usage:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the action to take when scale up is needed. Valid types: `&#34;adjustment&#34;`, `&#34;updateCapacity&#34;`, `&#34;setMinTarget&#34;`, `&#34;percentageAdjustment&#34;`.
         * 
         * Usage:
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ElastigroupScalingUpPolicyStepAdjustmentActionArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
