// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.inputs.NotificationCenterComputePolicyConfigDynamicRuleArgs;
import com.pulumi.spotinst.inputs.NotificationCenterComputePolicyConfigEventArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationCenterComputePolicyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationCenterComputePolicyConfigArgs Empty = new NotificationCenterComputePolicyConfigArgs();

    @Import(name="dynamicRules")
    private @Nullable Output<List<NotificationCenterComputePolicyConfigDynamicRuleArgs>> dynamicRules;

    public Optional<Output<List<NotificationCenterComputePolicyConfigDynamicRuleArgs>>> dynamicRules() {
        return Optional.ofNullable(this.dynamicRules);
    }

    @Import(name="events", required=true)
    private Output<List<NotificationCenterComputePolicyConfigEventArgs>> events;

    public Output<List<NotificationCenterComputePolicyConfigEventArgs>> events() {
        return this.events;
    }

    @Import(name="resourceIds")
    private @Nullable Output<List<String>> resourceIds;

    public Optional<Output<List<String>>> resourceIds() {
        return Optional.ofNullable(this.resourceIds);
    }

    @Import(name="shouldIncludeAllResources")
    private @Nullable Output<Boolean> shouldIncludeAllResources;

    public Optional<Output<Boolean>> shouldIncludeAllResources() {
        return Optional.ofNullable(this.shouldIncludeAllResources);
    }

    private NotificationCenterComputePolicyConfigArgs() {}

    private NotificationCenterComputePolicyConfigArgs(NotificationCenterComputePolicyConfigArgs $) {
        this.dynamicRules = $.dynamicRules;
        this.events = $.events;
        this.resourceIds = $.resourceIds;
        this.shouldIncludeAllResources = $.shouldIncludeAllResources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationCenterComputePolicyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationCenterComputePolicyConfigArgs $;

        public Builder() {
            $ = new NotificationCenterComputePolicyConfigArgs();
        }

        public Builder(NotificationCenterComputePolicyConfigArgs defaults) {
            $ = new NotificationCenterComputePolicyConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder dynamicRules(@Nullable Output<List<NotificationCenterComputePolicyConfigDynamicRuleArgs>> dynamicRules) {
            $.dynamicRules = dynamicRules;
            return this;
        }

        public Builder dynamicRules(List<NotificationCenterComputePolicyConfigDynamicRuleArgs> dynamicRules) {
            return dynamicRules(Output.of(dynamicRules));
        }

        public Builder dynamicRules(NotificationCenterComputePolicyConfigDynamicRuleArgs... dynamicRules) {
            return dynamicRules(List.of(dynamicRules));
        }

        public Builder events(Output<List<NotificationCenterComputePolicyConfigEventArgs>> events) {
            $.events = events;
            return this;
        }

        public Builder events(List<NotificationCenterComputePolicyConfigEventArgs> events) {
            return events(Output.of(events));
        }

        public Builder events(NotificationCenterComputePolicyConfigEventArgs... events) {
            return events(List.of(events));
        }

        public Builder resourceIds(@Nullable Output<List<String>> resourceIds) {
            $.resourceIds = resourceIds;
            return this;
        }

        public Builder resourceIds(List<String> resourceIds) {
            return resourceIds(Output.of(resourceIds));
        }

        public Builder resourceIds(String... resourceIds) {
            return resourceIds(List.of(resourceIds));
        }

        public Builder shouldIncludeAllResources(@Nullable Output<Boolean> shouldIncludeAllResources) {
            $.shouldIncludeAllResources = shouldIncludeAllResources;
            return this;
        }

        public Builder shouldIncludeAllResources(Boolean shouldIncludeAllResources) {
            return shouldIncludeAllResources(Output.of(shouldIncludeAllResources));
        }

        public NotificationCenterComputePolicyConfigArgs build() {
            if ($.events == null) {
                throw new MissingRequiredPropertyException("NotificationCenterComputePolicyConfigArgs", "events");
            }
            return $;
        }
    }

}
