// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.oceancd;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.oceancd.inputs.RolloutSpecFailurePolicyArgs;
import com.pulumi.spotinst.oceancd.inputs.RolloutSpecSpotDeploymentArgs;
import com.pulumi.spotinst.oceancd.inputs.RolloutSpecStrategyArgs;
import com.pulumi.spotinst.oceancd.inputs.RolloutSpecTrafficArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutSpecArgs Empty = new RolloutSpecArgs();

    /**
     * Holds information on how to react when failure happens.
     * 
     */
    @Import(name="failurePolicy")
    private @Nullable Output<RolloutSpecFailurePolicyArgs> failurePolicy;

    /**
     * @return Holds information on how to react when failure happens.
     * 
     */
    public Optional<Output<RolloutSpecFailurePolicyArgs>> failurePolicy() {
        return Optional.ofNullable(this.failurePolicy);
    }

    /**
     * Identifier name for Ocean CD Rollout Spec. Must be unique
     * 
     */
    @Import(name="rolloutSpecName", required=true)
    private Output<String> rolloutSpecName;

    /**
     * @return Identifier name for Ocean CD Rollout Spec. Must be unique
     * 
     */
    public Output<String> rolloutSpecName() {
        return this.rolloutSpecName;
    }

    /**
     * Represents the SpotDeployment selector.
     * 
     */
    @Import(name="spotDeployment")
    private @Nullable Output<RolloutSpecSpotDeploymentArgs> spotDeployment;

    /**
     * @return Represents the SpotDeployment selector.
     * 
     */
    public Optional<Output<RolloutSpecSpotDeploymentArgs>> spotDeployment() {
        return Optional.ofNullable(this.spotDeployment);
    }

    /**
     * You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
     * 
     */
    @Import(name="spotDeployments")
    private @Nullable Output<List<RolloutSpecSpotDeploymentArgs>> spotDeployments;

    /**
     * @return You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
     * 
     */
    public Optional<Output<List<RolloutSpecSpotDeploymentArgs>>> spotDeployments() {
        return Optional.ofNullable(this.spotDeployments);
    }

    /**
     * Determines the Ocean CD strategy
     * 
     */
    @Import(name="strategy", required=true)
    private Output<RolloutSpecStrategyArgs> strategy;

    /**
     * @return Determines the Ocean CD strategy
     * 
     */
    public Output<RolloutSpecStrategyArgs> strategy() {
        return this.strategy;
    }

    /**
     * Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
     * 
     */
    @Import(name="traffic")
    private @Nullable Output<RolloutSpecTrafficArgs> traffic;

    /**
     * @return Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
     * 
     */
    public Optional<Output<RolloutSpecTrafficArgs>> traffic() {
        return Optional.ofNullable(this.traffic);
    }

    private RolloutSpecArgs() {}

    private RolloutSpecArgs(RolloutSpecArgs $) {
        this.failurePolicy = $.failurePolicy;
        this.rolloutSpecName = $.rolloutSpecName;
        this.spotDeployment = $.spotDeployment;
        this.spotDeployments = $.spotDeployments;
        this.strategy = $.strategy;
        this.traffic = $.traffic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutSpecArgs $;

        public Builder() {
            $ = new RolloutSpecArgs();
        }

        public Builder(RolloutSpecArgs defaults) {
            $ = new RolloutSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param failurePolicy Holds information on how to react when failure happens.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(@Nullable Output<RolloutSpecFailurePolicyArgs> failurePolicy) {
            $.failurePolicy = failurePolicy;
            return this;
        }

        /**
         * @param failurePolicy Holds information on how to react when failure happens.
         * 
         * @return builder
         * 
         */
        public Builder failurePolicy(RolloutSpecFailurePolicyArgs failurePolicy) {
            return failurePolicy(Output.of(failurePolicy));
        }

        /**
         * @param rolloutSpecName Identifier name for Ocean CD Rollout Spec. Must be unique
         * 
         * @return builder
         * 
         */
        public Builder rolloutSpecName(Output<String> rolloutSpecName) {
            $.rolloutSpecName = rolloutSpecName;
            return this;
        }

        /**
         * @param rolloutSpecName Identifier name for Ocean CD Rollout Spec. Must be unique
         * 
         * @return builder
         * 
         */
        public Builder rolloutSpecName(String rolloutSpecName) {
            return rolloutSpecName(Output.of(rolloutSpecName));
        }

        /**
         * @param spotDeployment Represents the SpotDeployment selector.
         * 
         * @return builder
         * 
         */
        public Builder spotDeployment(@Nullable Output<RolloutSpecSpotDeploymentArgs> spotDeployment) {
            $.spotDeployment = spotDeployment;
            return this;
        }

        /**
         * @param spotDeployment Represents the SpotDeployment selector.
         * 
         * @return builder
         * 
         */
        public Builder spotDeployment(RolloutSpecSpotDeploymentArgs spotDeployment) {
            return spotDeployment(Output.of(spotDeployment));
        }

        /**
         * @param spotDeployments You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder spotDeployments(@Nullable Output<List<RolloutSpecSpotDeploymentArgs>> spotDeployments) {
            $.spotDeployments = spotDeployments;
            return this;
        }

        /**
         * @param spotDeployments You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder spotDeployments(List<RolloutSpecSpotDeploymentArgs> spotDeployments) {
            return spotDeployments(Output.of(spotDeployments));
        }

        /**
         * @param spotDeployments You must specify either `spotDeployment` OR `spotDeployments` but not both. Every SpotDeployment has to be unique. If more than one `SpotDeployment` has been configured, no `traffic` managers can be set as part of the RolloutSpec.For such case ensure that each of the chosen SpotDeployments are being exposed with different Kubernetes services.
         * 
         * @return builder
         * 
         */
        public Builder spotDeployments(RolloutSpecSpotDeploymentArgs... spotDeployments) {
            return spotDeployments(List.of(spotDeployments));
        }

        /**
         * @param strategy Determines the Ocean CD strategy
         * 
         * @return builder
         * 
         */
        public Builder strategy(Output<RolloutSpecStrategyArgs> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Determines the Ocean CD strategy
         * 
         * @return builder
         * 
         */
        public Builder strategy(RolloutSpecStrategyArgs strategy) {
            return strategy(Output.of(strategy));
        }

        /**
         * @param traffic Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
         * 
         * @return builder
         * 
         */
        public Builder traffic(@Nullable Output<RolloutSpecTrafficArgs> traffic) {
            $.traffic = traffic;
            return this;
        }

        /**
         * @param traffic Hosts all of the supported service meshes needed to enable more fine-grained traffic routing. In case `SpotDeployments` contains more than one SpotDeployment the `traffic` manager may not be configured.
         * 
         * @return builder
         * 
         */
        public Builder traffic(RolloutSpecTrafficArgs traffic) {
            return traffic(Output.of(traffic));
        }

        public RolloutSpecArgs build() {
            if ($.rolloutSpecName == null) {
                throw new MissingRequiredPropertyException("RolloutSpecArgs", "rolloutSpecName");
            }
            if ($.strategy == null) {
                throw new MissingRequiredPropertyException("RolloutSpecArgs", "strategy");
            }
            return $;
        }
    }

}
