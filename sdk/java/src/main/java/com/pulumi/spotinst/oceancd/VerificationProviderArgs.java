// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.oceancd;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.spotinst.oceancd.inputs.VerificationProviderCloudWatchArgs;
import com.pulumi.spotinst.oceancd.inputs.VerificationProviderDatadogArgs;
import com.pulumi.spotinst.oceancd.inputs.VerificationProviderJenkinsArgs;
import com.pulumi.spotinst.oceancd.inputs.VerificationProviderNewRelicArgs;
import com.pulumi.spotinst.oceancd.inputs.VerificationProviderPrometheusArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VerificationProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final VerificationProviderArgs Empty = new VerificationProviderArgs();

    /**
     * Specify the credentials for CloudWatch verification provider.
     * 
     */
    @Import(name="cloudWatch")
    private @Nullable Output<VerificationProviderCloudWatchArgs> cloudWatch;

    /**
     * @return Specify the credentials for CloudWatch verification provider.
     * 
     */
    public Optional<Output<VerificationProviderCloudWatchArgs>> cloudWatch() {
        return Optional.ofNullable(this.cloudWatch);
    }

    /**
     * List of cluster IDs that this Verification Provider will be applied to.
     * 
     */
    @Import(name="clusterIds", required=true)
    private Output<List<String>> clusterIds;

    /**
     * @return List of cluster IDs that this Verification Provider will be applied to.
     * 
     */
    public Output<List<String>> clusterIds() {
        return this.clusterIds;
    }

    /**
     * Specify the credentials for datadog verification provider.
     * 
     */
    @Import(name="datadog")
    private @Nullable Output<VerificationProviderDatadogArgs> datadog;

    /**
     * @return Specify the credentials for datadog verification provider.
     * 
     */
    public Optional<Output<VerificationProviderDatadogArgs>> datadog() {
        return Optional.ofNullable(this.datadog);
    }

    /**
     * Specify the credentials for Jenkins verification provider.
     * 
     */
    @Import(name="jenkins")
    private @Nullable Output<VerificationProviderJenkinsArgs> jenkins;

    /**
     * @return Specify the credentials for Jenkins verification provider.
     * 
     */
    public Optional<Output<VerificationProviderJenkinsArgs>> jenkins() {
        return Optional.ofNullable(this.jenkins);
    }

    /**
     * Identifier name for Ocean CD Verification Provider. Must be unique.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier name for Ocean CD Verification Provider. Must be unique.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify the credentials for New Relic verification provider.
     * 
     */
    @Import(name="newRelic")
    private @Nullable Output<VerificationProviderNewRelicArgs> newRelic;

    /**
     * @return Specify the credentials for New Relic verification provider.
     * 
     */
    public Optional<Output<VerificationProviderNewRelicArgs>> newRelic() {
        return Optional.ofNullable(this.newRelic);
    }

    /**
     * Specify the credentials for prometheus verification provider.
     * 
     */
    @Import(name="prometheus")
    private @Nullable Output<VerificationProviderPrometheusArgs> prometheus;

    /**
     * @return Specify the credentials for prometheus verification provider.
     * 
     */
    public Optional<Output<VerificationProviderPrometheusArgs>> prometheus() {
        return Optional.ofNullable(this.prometheus);
    }

    private VerificationProviderArgs() {}

    private VerificationProviderArgs(VerificationProviderArgs $) {
        this.cloudWatch = $.cloudWatch;
        this.clusterIds = $.clusterIds;
        this.datadog = $.datadog;
        this.jenkins = $.jenkins;
        this.name = $.name;
        this.newRelic = $.newRelic;
        this.prometheus = $.prometheus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VerificationProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VerificationProviderArgs $;

        public Builder() {
            $ = new VerificationProviderArgs();
        }

        public Builder(VerificationProviderArgs defaults) {
            $ = new VerificationProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudWatch Specify the credentials for CloudWatch verification provider.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatch(@Nullable Output<VerificationProviderCloudWatchArgs> cloudWatch) {
            $.cloudWatch = cloudWatch;
            return this;
        }

        /**
         * @param cloudWatch Specify the credentials for CloudWatch verification provider.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatch(VerificationProviderCloudWatchArgs cloudWatch) {
            return cloudWatch(Output.of(cloudWatch));
        }

        /**
         * @param clusterIds List of cluster IDs that this Verification Provider will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder clusterIds(Output<List<String>> clusterIds) {
            $.clusterIds = clusterIds;
            return this;
        }

        /**
         * @param clusterIds List of cluster IDs that this Verification Provider will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder clusterIds(List<String> clusterIds) {
            return clusterIds(Output.of(clusterIds));
        }

        /**
         * @param clusterIds List of cluster IDs that this Verification Provider will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder clusterIds(String... clusterIds) {
            return clusterIds(List.of(clusterIds));
        }

        /**
         * @param datadog Specify the credentials for datadog verification provider.
         * 
         * @return builder
         * 
         */
        public Builder datadog(@Nullable Output<VerificationProviderDatadogArgs> datadog) {
            $.datadog = datadog;
            return this;
        }

        /**
         * @param datadog Specify the credentials for datadog verification provider.
         * 
         * @return builder
         * 
         */
        public Builder datadog(VerificationProviderDatadogArgs datadog) {
            return datadog(Output.of(datadog));
        }

        /**
         * @param jenkins Specify the credentials for Jenkins verification provider.
         * 
         * @return builder
         * 
         */
        public Builder jenkins(@Nullable Output<VerificationProviderJenkinsArgs> jenkins) {
            $.jenkins = jenkins;
            return this;
        }

        /**
         * @param jenkins Specify the credentials for Jenkins verification provider.
         * 
         * @return builder
         * 
         */
        public Builder jenkins(VerificationProviderJenkinsArgs jenkins) {
            return jenkins(Output.of(jenkins));
        }

        /**
         * @param name Identifier name for Ocean CD Verification Provider. Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier name for Ocean CD Verification Provider. Must be unique.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param newRelic Specify the credentials for New Relic verification provider.
         * 
         * @return builder
         * 
         */
        public Builder newRelic(@Nullable Output<VerificationProviderNewRelicArgs> newRelic) {
            $.newRelic = newRelic;
            return this;
        }

        /**
         * @param newRelic Specify the credentials for New Relic verification provider.
         * 
         * @return builder
         * 
         */
        public Builder newRelic(VerificationProviderNewRelicArgs newRelic) {
            return newRelic(Output.of(newRelic));
        }

        /**
         * @param prometheus Specify the credentials for prometheus verification provider.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(@Nullable Output<VerificationProviderPrometheusArgs> prometheus) {
            $.prometheus = prometheus;
            return this;
        }

        /**
         * @param prometheus Specify the credentials for prometheus verification provider.
         * 
         * @return builder
         * 
         */
        public Builder prometheus(VerificationProviderPrometheusArgs prometheus) {
            return prometheus(Output.of(prometheus));
        }

        public VerificationProviderArgs build() {
            if ($.clusterIds == null) {
                throw new MissingRequiredPropertyException("VerificationProviderArgs", "clusterIds");
            }
            return $;
        }
    }

}
