// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OceanRightSizingRuleRecommendationApplicationMinThreshold {
    private @Nullable Double cpuPercentage;
    private @Nullable Double memoryPercentage;

    private OceanRightSizingRuleRecommendationApplicationMinThreshold() {}
    public Optional<Double> cpuPercentage() {
        return Optional.ofNullable(this.cpuPercentage);
    }
    public Optional<Double> memoryPercentage() {
        return Optional.ofNullable(this.memoryPercentage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OceanRightSizingRuleRecommendationApplicationMinThreshold defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double cpuPercentage;
        private @Nullable Double memoryPercentage;
        public Builder() {}
        public Builder(OceanRightSizingRuleRecommendationApplicationMinThreshold defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuPercentage = defaults.cpuPercentage;
    	      this.memoryPercentage = defaults.memoryPercentage;
        }

        @CustomType.Setter
        public Builder cpuPercentage(@Nullable Double cpuPercentage) {

            this.cpuPercentage = cpuPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder memoryPercentage(@Nullable Double memoryPercentage) {

            this.memoryPercentage = memoryPercentage;
            return this;
        }
        public OceanRightSizingRuleRecommendationApplicationMinThreshold build() {
            final var _resultValue = new OceanRightSizingRuleRecommendationApplicationMinThreshold();
            _resultValue.cpuPercentage = cpuPercentage;
            _resultValue.memoryPercentage = memoryPercentage;
            return _resultValue;
        }
    }
}
