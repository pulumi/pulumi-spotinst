// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanLaunchSpecDeleteOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanLaunchSpecDeleteOptionsArgs Empty = new OceanLaunchSpecDeleteOptionsArgs();

    /**
     * When set to &#34;true&#34;, all instances belonging to the deleted launch specification will be drained, detached, and terminated.
     * 
     */
    @Import(name="deleteNodes")
    private @Nullable Output<Boolean> deleteNodes;

    /**
     * @return When set to &#34;true&#34;, all instances belonging to the deleted launch specification will be drained, detached, and terminated.
     * 
     */
    public Optional<Output<Boolean>> deleteNodes() {
        return Optional.ofNullable(this.deleteNodes);
    }

    /**
     * When set to `true`, delete even if it is the last Virtual Node Group (also, the default Virtual Node Group must be configured with `useAsTemlateOnly = true`). Should be set at creation or update, but will be used only at deletion.
     * 
     */
    @Import(name="forceDelete", required=true)
    private Output<Boolean> forceDelete;

    /**
     * @return When set to `true`, delete even if it is the last Virtual Node Group (also, the default Virtual Node Group must be configured with `useAsTemlateOnly = true`). Should be set at creation or update, but will be used only at deletion.
     * 
     */
    public Output<Boolean> forceDelete() {
        return this.forceDelete;
    }

    private OceanLaunchSpecDeleteOptionsArgs() {}

    private OceanLaunchSpecDeleteOptionsArgs(OceanLaunchSpecDeleteOptionsArgs $) {
        this.deleteNodes = $.deleteNodes;
        this.forceDelete = $.forceDelete;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanLaunchSpecDeleteOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanLaunchSpecDeleteOptionsArgs $;

        public Builder() {
            $ = new OceanLaunchSpecDeleteOptionsArgs();
        }

        public Builder(OceanLaunchSpecDeleteOptionsArgs defaults) {
            $ = new OceanLaunchSpecDeleteOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteNodes When set to &#34;true&#34;, all instances belonging to the deleted launch specification will be drained, detached, and terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteNodes(@Nullable Output<Boolean> deleteNodes) {
            $.deleteNodes = deleteNodes;
            return this;
        }

        /**
         * @param deleteNodes When set to &#34;true&#34;, all instances belonging to the deleted launch specification will be drained, detached, and terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteNodes(Boolean deleteNodes) {
            return deleteNodes(Output.of(deleteNodes));
        }

        /**
         * @param forceDelete When set to `true`, delete even if it is the last Virtual Node Group (also, the default Virtual Node Group must be configured with `useAsTemlateOnly = true`). Should be set at creation or update, but will be used only at deletion.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete When set to `true`, delete even if it is the last Virtual Node Group (also, the default Virtual Node Group must be configured with `useAsTemlateOnly = true`). Should be set at creation or update, but will be used only at deletion.
         * 
         * @return builder
         * 
         */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        public OceanLaunchSpecDeleteOptionsArgs build() {
            if ($.forceDelete == null) {
                throw new MissingRequiredPropertyException("OceanLaunchSpecDeleteOptionsArgs", "forceDelete");
            }
            return $;
        }
    }

}
