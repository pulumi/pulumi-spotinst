// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gcp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElastigroupScheduledTaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElastigroupScheduledTaskArgs Empty = new ElastigroupScheduledTaskArgs();

    /**
     * A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    @Import(name="cronExpression")
    private @Nullable Output<String> cronExpression;

    /**
     * @return A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    public Optional<Output<String>> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }

    /**
     * Setting the task to being enabled or disabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    /**
     * @return Setting the task to being enabled or disabled.
     * 
     */
    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * The maximum number of instances the group should have.
     * 
     * Usage:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    @Import(name="maxCapacity")
    private @Nullable Output<String> maxCapacity;

    /**
     * @return The maximum number of instances the group should have.
     * 
     * Usage:
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public Optional<Output<String>> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }

    /**
     * The minimum number of instances the group should have.
     * 
     */
    @Import(name="minCapacity")
    private @Nullable Output<String> minCapacity;

    /**
     * @return The minimum number of instances the group should have.
     * 
     */
    public Optional<Output<String>> minCapacity() {
        return Optional.ofNullable(this.minCapacity);
    }

    /**
     * The desired number of instances the group should have.
     * 
     */
    @Import(name="targetCapacity")
    private @Nullable Output<String> targetCapacity;

    /**
     * @return The desired number of instances the group should have.
     * 
     */
    public Optional<Output<String>> targetCapacity() {
        return Optional.ofNullable(this.targetCapacity);
    }

    /**
     * The task type to run. Valid values: `&#34;setCapacity&#34;`.
     * 
     */
    @Import(name="taskType", required=true)
    private Output<String> taskType;

    /**
     * @return The task type to run. Valid values: `&#34;setCapacity&#34;`.
     * 
     */
    public Output<String> taskType() {
        return this.taskType;
    }

    private ElastigroupScheduledTaskArgs() {}

    private ElastigroupScheduledTaskArgs(ElastigroupScheduledTaskArgs $) {
        this.cronExpression = $.cronExpression;
        this.isEnabled = $.isEnabled;
        this.maxCapacity = $.maxCapacity;
        this.minCapacity = $.minCapacity;
        this.targetCapacity = $.targetCapacity;
        this.taskType = $.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElastigroupScheduledTaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElastigroupScheduledTaskArgs $;

        public Builder() {
            $ = new ElastigroupScheduledTaskArgs();
        }

        public Builder(ElastigroupScheduledTaskArgs defaults) {
            $ = new ElastigroupScheduledTaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cronExpression A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(@Nullable Output<String> cronExpression) {
            $.cronExpression = cronExpression;
            return this;
        }

        /**
         * @param cronExpression A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
         * 
         * @return builder
         * 
         */
        public Builder cronExpression(String cronExpression) {
            return cronExpression(Output.of(cronExpression));
        }

        /**
         * @param isEnabled Setting the task to being enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Setting the task to being enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param maxCapacity The maximum number of instances the group should have.
         * 
         * Usage:
         * 
         * &lt;!--Start PulumiCodeChooser --&gt;
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * &lt;!--End PulumiCodeChooser --&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(@Nullable Output<String> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        /**
         * @param maxCapacity The maximum number of instances the group should have.
         * 
         * Usage:
         * 
         * &lt;!--Start PulumiCodeChooser --&gt;
         * ```java
         * package generated_program;
         * 
         * import com.pulumi.Context;
         * import com.pulumi.Pulumi;
         * import com.pulumi.core.Output;
         * import java.util.List;
         * import java.util.ArrayList;
         * import java.util.Map;
         * import java.io.File;
         * import java.nio.file.Files;
         * import java.nio.file.Paths;
         * 
         * public class App {
         *     public static void main(String[] args) {
         *         Pulumi.run(App::stack);
         *     }
         * 
         *     public static void stack(Context ctx) {
         *     }
         * }
         * ```
         * &lt;!--End PulumiCodeChooser --&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(String maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        /**
         * @param minCapacity The minimum number of instances the group should have.
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(@Nullable Output<String> minCapacity) {
            $.minCapacity = minCapacity;
            return this;
        }

        /**
         * @param minCapacity The minimum number of instances the group should have.
         * 
         * @return builder
         * 
         */
        public Builder minCapacity(String minCapacity) {
            return minCapacity(Output.of(minCapacity));
        }

        /**
         * @param targetCapacity The desired number of instances the group should have.
         * 
         * @return builder
         * 
         */
        public Builder targetCapacity(@Nullable Output<String> targetCapacity) {
            $.targetCapacity = targetCapacity;
            return this;
        }

        /**
         * @param targetCapacity The desired number of instances the group should have.
         * 
         * @return builder
         * 
         */
        public Builder targetCapacity(String targetCapacity) {
            return targetCapacity(Output.of(targetCapacity));
        }

        /**
         * @param taskType The task type to run. Valid values: `&#34;setCapacity&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder taskType(Output<String> taskType) {
            $.taskType = taskType;
            return this;
        }

        /**
         * @param taskType The task type to run. Valid values: `&#34;setCapacity&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder taskType(String taskType) {
            return taskType(Output.of(taskType));
        }

        public ElastigroupScheduledTaskArgs build() {
            if ($.taskType == null) {
                throw new MissingRequiredPropertyException("ElastigroupScheduledTaskArgs", "taskType");
            }
            return $;
        }
    }

}
