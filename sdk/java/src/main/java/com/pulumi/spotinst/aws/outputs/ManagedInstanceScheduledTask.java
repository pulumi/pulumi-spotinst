// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedInstanceScheduledTask {
    /**
     * @return A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of ‘frequency’ or ‘cronExpression’ should be used at a time.
     * Example: `&#34;0 1 * * *&#34;`.
     * 
     */
    private @Nullable String cronExpression;
    /**
     * @return Set frequency for the task. Valid values: &#34;hourly&#34;, &#34;daily&#34;, &#34;weekly&#34;, &#34;continuous&#34;.
     * 
     */
    private @Nullable String frequency;
    /**
     * @return Describes whether the task is enabled. When true the task should run when false it should not run.
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return DATETIME in ISO-8601 format. Sets a start time for scheduled actions. If &#34;frequency&#34; or &#34;cronExpression&#34; are not used - the task will run only once at the start time and will then be deleted from the instance configuration.
     * Example: `&#34;2019-05-23T10:55:09Z&#34;`
     * 
     */
    private @Nullable String startTime;
    /**
     * @return The task type to run. Valid values: `&#34;pause&#34;`, `&#34;resume&#34;`, `&#34;recycle&#34;`.
     * 
     */
    private String taskType;

    private ManagedInstanceScheduledTask() {}
    /**
     * @return A valid cron expression. The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of ‘frequency’ or ‘cronExpression’ should be used at a time.
     * Example: `&#34;0 1 * * *&#34;`.
     * 
     */
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    /**
     * @return Set frequency for the task. Valid values: &#34;hourly&#34;, &#34;daily&#34;, &#34;weekly&#34;, &#34;continuous&#34;.
     * 
     */
    public Optional<String> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    /**
     * @return Describes whether the task is enabled. When true the task should run when false it should not run.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return DATETIME in ISO-8601 format. Sets a start time for scheduled actions. If &#34;frequency&#34; or &#34;cronExpression&#34; are not used - the task will run only once at the start time and will then be deleted from the instance configuration.
     * Example: `&#34;2019-05-23T10:55:09Z&#34;`
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return The task type to run. Valid values: `&#34;pause&#34;`, `&#34;resume&#34;`, `&#34;recycle&#34;`.
     * 
     */
    public String taskType() {
        return this.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedInstanceScheduledTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable String frequency;
        private @Nullable Boolean isEnabled;
        private @Nullable String startTime;
        private String taskType;
        public Builder() {}
        public Builder(ManagedInstanceScheduledTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.frequency = defaults.frequency;
    	      this.isEnabled = defaults.isEnabled;
    	      this.startTime = defaults.startTime;
    	      this.taskType = defaults.taskType;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {
            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable String frequency) {
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder taskType(String taskType) {
            this.taskType = Objects.requireNonNull(taskType);
            return this;
        }
        public ManagedInstanceScheduledTask build() {
            final var o = new ManagedInstanceScheduledTask();
            o.cronExpression = cronExpression;
            o.frequency = frequency;
            o.isEnabled = isEnabled;
            o.startTime = startTime;
            o.taskType = taskType;
            return o;
        }
    }
}
