// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedInstanceScheduledTask {
    private @Nullable String cronExpression;
    private @Nullable String frequency;
    private @Nullable Boolean isEnabled;
    private @Nullable String startTime;
    private String taskType;

    private ManagedInstanceScheduledTask() {}
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    public Optional<String> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    public String taskType() {
        return this.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedInstanceScheduledTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable String frequency;
        private @Nullable Boolean isEnabled;
        private @Nullable String startTime;
        private String taskType;
        public Builder() {}
        public Builder(ManagedInstanceScheduledTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.frequency = defaults.frequency;
    	      this.isEnabled = defaults.isEnabled;
    	      this.startTime = defaults.startTime;
    	      this.taskType = defaults.taskType;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable String frequency) {

            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {

            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {

            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder taskType(String taskType) {
            if (taskType == null) {
              throw new MissingRequiredPropertyException("ManagedInstanceScheduledTask", "taskType");
            }
            this.taskType = taskType;
            return this;
        }
        public ManagedInstanceScheduledTask build() {
            final var _resultValue = new ManagedInstanceScheduledTask();
            _resultValue.cronExpression = cronExpression;
            _resultValue.frequency = frequency;
            _resultValue.isEnabled = isEnabled;
            _resultValue.startTime = startTime;
            _resultValue.taskType = taskType;
            return _resultValue;
        }
    }
}
