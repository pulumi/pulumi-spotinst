// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.aws.inputs.BeanstalkDeploymentPreferencesStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BeanstalkDeploymentPreferencesArgs extends com.pulumi.resources.ResourceArgs {

    public static final BeanstalkDeploymentPreferencesArgs Empty = new BeanstalkDeploymentPreferencesArgs();

    /**
     * Should roll perform automatically
     * 
     */
    @Import(name="automaticRoll")
    private @Nullable Output<Boolean> automaticRoll;

    /**
     * @return Should roll perform automatically
     * 
     */
    public Optional<Output<Boolean>> automaticRoll() {
        return Optional.ofNullable(this.automaticRoll);
    }

    /**
     * Percent size of each batch
     * 
     */
    @Import(name="batchSizePercentage")
    private @Nullable Output<Integer> batchSizePercentage;

    /**
     * @return Percent size of each batch
     * 
     */
    public Optional<Output<Integer>> batchSizePercentage() {
        return Optional.ofNullable(this.batchSizePercentage);
    }

    /**
     * Amount of time to wait between batches
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<Integer> gracePeriod;

    /**
     * @return Amount of time to wait between batches
     * 
     */
    public Optional<Output<Integer>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * Strategy parameters
     * 
     */
    @Import(name="strategies")
    private @Nullable Output<List<BeanstalkDeploymentPreferencesStrategyArgs>> strategies;

    /**
     * @return Strategy parameters
     * 
     */
    public Optional<Output<List<BeanstalkDeploymentPreferencesStrategyArgs>>> strategies() {
        return Optional.ofNullable(this.strategies);
    }

    private BeanstalkDeploymentPreferencesArgs() {}

    private BeanstalkDeploymentPreferencesArgs(BeanstalkDeploymentPreferencesArgs $) {
        this.automaticRoll = $.automaticRoll;
        this.batchSizePercentage = $.batchSizePercentage;
        this.gracePeriod = $.gracePeriod;
        this.strategies = $.strategies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BeanstalkDeploymentPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BeanstalkDeploymentPreferencesArgs $;

        public Builder() {
            $ = new BeanstalkDeploymentPreferencesArgs();
        }

        public Builder(BeanstalkDeploymentPreferencesArgs defaults) {
            $ = new BeanstalkDeploymentPreferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticRoll Should roll perform automatically
         * 
         * @return builder
         * 
         */
        public Builder automaticRoll(@Nullable Output<Boolean> automaticRoll) {
            $.automaticRoll = automaticRoll;
            return this;
        }

        /**
         * @param automaticRoll Should roll perform automatically
         * 
         * @return builder
         * 
         */
        public Builder automaticRoll(Boolean automaticRoll) {
            return automaticRoll(Output.of(automaticRoll));
        }

        /**
         * @param batchSizePercentage Percent size of each batch
         * 
         * @return builder
         * 
         */
        public Builder batchSizePercentage(@Nullable Output<Integer> batchSizePercentage) {
            $.batchSizePercentage = batchSizePercentage;
            return this;
        }

        /**
         * @param batchSizePercentage Percent size of each batch
         * 
         * @return builder
         * 
         */
        public Builder batchSizePercentage(Integer batchSizePercentage) {
            return batchSizePercentage(Output.of(batchSizePercentage));
        }

        /**
         * @param gracePeriod Amount of time to wait between batches
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<Integer> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod Amount of time to wait between batches
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(Integer gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param strategies Strategy parameters
         * 
         * @return builder
         * 
         */
        public Builder strategies(@Nullable Output<List<BeanstalkDeploymentPreferencesStrategyArgs>> strategies) {
            $.strategies = strategies;
            return this;
        }

        /**
         * @param strategies Strategy parameters
         * 
         * @return builder
         * 
         */
        public Builder strategies(List<BeanstalkDeploymentPreferencesStrategyArgs> strategies) {
            return strategies(Output.of(strategies));
        }

        /**
         * @param strategies Strategy parameters
         * 
         * @return builder
         * 
         */
        public Builder strategies(BeanstalkDeploymentPreferencesStrategyArgs... strategies) {
            return strategies(List.of(strategies));
        }

        public BeanstalkDeploymentPreferencesArgs build() {
            return $;
        }
    }

}
