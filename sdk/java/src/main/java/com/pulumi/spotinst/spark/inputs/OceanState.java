// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.spark.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.spark.inputs.OceanComputeArgs;
import com.pulumi.spotinst.spark.inputs.OceanIngressArgs;
import com.pulumi.spotinst.spark.inputs.OceanLogCollectionArgs;
import com.pulumi.spotinst.spark.inputs.OceanSparkArgs;
import com.pulumi.spotinst.spark.inputs.OceanWebhookArgs;
import com.pulumi.spotinst.spark.inputs.OceanWorkspacesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanState extends com.pulumi.resources.ResourceArgs {

    public static final OceanState Empty = new OceanState();

    @Import(name="compute")
    private @Nullable Output<OceanComputeArgs> compute;

    public Optional<Output<OceanComputeArgs>> compute() {
        return Optional.ofNullable(this.compute);
    }

    @Import(name="ingress")
    private @Nullable Output<OceanIngressArgs> ingress;

    public Optional<Output<OceanIngressArgs>> ingress() {
        return Optional.ofNullable(this.ingress);
    }

    @Import(name="logCollection")
    private @Nullable Output<OceanLogCollectionArgs> logCollection;

    public Optional<Output<OceanLogCollectionArgs>> logCollection() {
        return Optional.ofNullable(this.logCollection);
    }

    /**
     * - The ID of the Ocean cluster that Ocean for Apache Spark should be installed on.
     * 
     */
    @Import(name="oceanClusterId")
    private @Nullable Output<String> oceanClusterId;

    /**
     * @return - The ID of the Ocean cluster that Ocean for Apache Spark should be installed on.
     * 
     */
    public Optional<Output<String>> oceanClusterId() {
        return Optional.ofNullable(this.oceanClusterId);
    }

    @Import(name="spark")
    private @Nullable Output<OceanSparkArgs> spark;

    public Optional<Output<OceanSparkArgs>> spark() {
        return Optional.ofNullable(this.spark);
    }

    @Import(name="webhook")
    private @Nullable Output<OceanWebhookArgs> webhook;

    public Optional<Output<OceanWebhookArgs>> webhook() {
        return Optional.ofNullable(this.webhook);
    }

    @Import(name="workspaces")
    private @Nullable Output<OceanWorkspacesArgs> workspaces;

    public Optional<Output<OceanWorkspacesArgs>> workspaces() {
        return Optional.ofNullable(this.workspaces);
    }

    private OceanState() {}

    private OceanState(OceanState $) {
        this.compute = $.compute;
        this.ingress = $.ingress;
        this.logCollection = $.logCollection;
        this.oceanClusterId = $.oceanClusterId;
        this.spark = $.spark;
        this.webhook = $.webhook;
        this.workspaces = $.workspaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanState $;

        public Builder() {
            $ = new OceanState();
        }

        public Builder(OceanState defaults) {
            $ = new OceanState(Objects.requireNonNull(defaults));
        }

        public Builder compute(@Nullable Output<OceanComputeArgs> compute) {
            $.compute = compute;
            return this;
        }

        public Builder compute(OceanComputeArgs compute) {
            return compute(Output.of(compute));
        }

        public Builder ingress(@Nullable Output<OceanIngressArgs> ingress) {
            $.ingress = ingress;
            return this;
        }

        public Builder ingress(OceanIngressArgs ingress) {
            return ingress(Output.of(ingress));
        }

        public Builder logCollection(@Nullable Output<OceanLogCollectionArgs> logCollection) {
            $.logCollection = logCollection;
            return this;
        }

        public Builder logCollection(OceanLogCollectionArgs logCollection) {
            return logCollection(Output.of(logCollection));
        }

        /**
         * @param oceanClusterId - The ID of the Ocean cluster that Ocean for Apache Spark should be installed on.
         * 
         * @return builder
         * 
         */
        public Builder oceanClusterId(@Nullable Output<String> oceanClusterId) {
            $.oceanClusterId = oceanClusterId;
            return this;
        }

        /**
         * @param oceanClusterId - The ID of the Ocean cluster that Ocean for Apache Spark should be installed on.
         * 
         * @return builder
         * 
         */
        public Builder oceanClusterId(String oceanClusterId) {
            return oceanClusterId(Output.of(oceanClusterId));
        }

        public Builder spark(@Nullable Output<OceanSparkArgs> spark) {
            $.spark = spark;
            return this;
        }

        public Builder spark(OceanSparkArgs spark) {
            return spark(Output.of(spark));
        }

        public Builder webhook(@Nullable Output<OceanWebhookArgs> webhook) {
            $.webhook = webhook;
            return this;
        }

        public Builder webhook(OceanWebhookArgs webhook) {
            return webhook(Output.of(webhook));
        }

        public Builder workspaces(@Nullable Output<OceanWorkspacesArgs> workspaces) {
            $.workspaces = workspaces;
            return this;
        }

        public Builder workspaces(OceanWorkspacesArgs workspaces) {
            return workspaces(Output.of(workspaces));
        }

        public OceanState build() {
            return $;
        }
    }

}
