// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BeanstalkScheduledTask {
    /**
     * @return The number of instances to add or remove.
     * 
     */
    private @Nullable String adjustment;
    /**
     * @return The percentage of instances to add or remove.
     * 
     * Usage:
     * 
     */
    private @Nullable String adjustmentPercentage;
    /**
     * @return The percentage size of each batch in the scheduled deployment roll.
     * 
     */
    private @Nullable String batchSizePercentage;
    /**
     * @return A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    private @Nullable String cronExpression;
    /**
     * @return The recurrence frequency to run this task. Supported values are `&#34;hourly&#34;`, `&#34;daily&#34;`, `&#34;weekly&#34;` and `&#34;continuous&#34;`.
     * 
     */
    private @Nullable String frequency;
    /**
     * @return The period of time (seconds) to wait before checking a batch&#39;s health after it&#39;s deployment.
     * 
     */
    private @Nullable String gracePeriod;
    /**
     * @return Setting the task to being enabled or disabled.
     * 
     */
    private @Nullable Boolean isEnabled;
    /**
     * @return The maximum number of instances the group should have.
     * 
     */
    private @Nullable String maxCapacity;
    /**
     * @return The minimum number of instances the group should have.
     * 
     */
    private @Nullable String minCapacity;
    /**
     * @return The maximum number of instances the group should have.
     * 
     */
    private @Nullable String scaleMaxCapacity;
    /**
     * @return The minimum number of instances the group should have.
     * 
     */
    private @Nullable String scaleMinCapacity;
    /**
     * @return The desired number of instances the group should have.
     * 
     */
    private @Nullable String scaleTargetCapacity;
    /**
     * @return Set a start time for one time tasks.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return The desired number of instances the group should have.
     * 
     */
    private @Nullable String targetCapacity;
    /**
     * @return The task type to run. Supported task types are: `&#34;scale&#34;`, `&#34;backup_ami&#34;`, `&#34;roll&#34;`, `&#34;scaleUp&#34;`, `&#34;percentageScaleUp&#34;`, `&#34;scaleDown&#34;`, `&#34;percentageScaleDown&#34;`, `&#34;statefulUpdateCapacity&#34;`.
     * 
     */
    private String taskType;

    private BeanstalkScheduledTask() {}
    /**
     * @return The number of instances to add or remove.
     * 
     */
    public Optional<String> adjustment() {
        return Optional.ofNullable(this.adjustment);
    }
    /**
     * @return The percentage of instances to add or remove.
     * 
     * Usage:
     * 
     */
    public Optional<String> adjustmentPercentage() {
        return Optional.ofNullable(this.adjustmentPercentage);
    }
    /**
     * @return The percentage size of each batch in the scheduled deployment roll.
     * 
     */
    public Optional<String> batchSizePercentage() {
        return Optional.ofNullable(this.batchSizePercentage);
    }
    /**
     * @return A valid cron expression. The cron is running in UTC time zone and is in [Unix cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     */
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    /**
     * @return The recurrence frequency to run this task. Supported values are `&#34;hourly&#34;`, `&#34;daily&#34;`, `&#34;weekly&#34;` and `&#34;continuous&#34;`.
     * 
     */
    public Optional<String> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    /**
     * @return The period of time (seconds) to wait before checking a batch&#39;s health after it&#39;s deployment.
     * 
     */
    public Optional<String> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    /**
     * @return Setting the task to being enabled or disabled.
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * @return The maximum number of instances the group should have.
     * 
     */
    public Optional<String> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }
    /**
     * @return The minimum number of instances the group should have.
     * 
     */
    public Optional<String> minCapacity() {
        return Optional.ofNullable(this.minCapacity);
    }
    /**
     * @return The maximum number of instances the group should have.
     * 
     */
    public Optional<String> scaleMaxCapacity() {
        return Optional.ofNullable(this.scaleMaxCapacity);
    }
    /**
     * @return The minimum number of instances the group should have.
     * 
     */
    public Optional<String> scaleMinCapacity() {
        return Optional.ofNullable(this.scaleMinCapacity);
    }
    /**
     * @return The desired number of instances the group should have.
     * 
     */
    public Optional<String> scaleTargetCapacity() {
        return Optional.ofNullable(this.scaleTargetCapacity);
    }
    /**
     * @return Set a start time for one time tasks.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return The desired number of instances the group should have.
     * 
     */
    public Optional<String> targetCapacity() {
        return Optional.ofNullable(this.targetCapacity);
    }
    /**
     * @return The task type to run. Supported task types are: `&#34;scale&#34;`, `&#34;backup_ami&#34;`, `&#34;roll&#34;`, `&#34;scaleUp&#34;`, `&#34;percentageScaleUp&#34;`, `&#34;scaleDown&#34;`, `&#34;percentageScaleDown&#34;`, `&#34;statefulUpdateCapacity&#34;`.
     * 
     */
    public String taskType() {
        return this.taskType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BeanstalkScheduledTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adjustment;
        private @Nullable String adjustmentPercentage;
        private @Nullable String batchSizePercentage;
        private @Nullable String cronExpression;
        private @Nullable String frequency;
        private @Nullable String gracePeriod;
        private @Nullable Boolean isEnabled;
        private @Nullable String maxCapacity;
        private @Nullable String minCapacity;
        private @Nullable String scaleMaxCapacity;
        private @Nullable String scaleMinCapacity;
        private @Nullable String scaleTargetCapacity;
        private @Nullable String startTime;
        private @Nullable String targetCapacity;
        private String taskType;
        public Builder() {}
        public Builder(BeanstalkScheduledTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adjustment = defaults.adjustment;
    	      this.adjustmentPercentage = defaults.adjustmentPercentage;
    	      this.batchSizePercentage = defaults.batchSizePercentage;
    	      this.cronExpression = defaults.cronExpression;
    	      this.frequency = defaults.frequency;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.isEnabled = defaults.isEnabled;
    	      this.maxCapacity = defaults.maxCapacity;
    	      this.minCapacity = defaults.minCapacity;
    	      this.scaleMaxCapacity = defaults.scaleMaxCapacity;
    	      this.scaleMinCapacity = defaults.scaleMinCapacity;
    	      this.scaleTargetCapacity = defaults.scaleTargetCapacity;
    	      this.startTime = defaults.startTime;
    	      this.targetCapacity = defaults.targetCapacity;
    	      this.taskType = defaults.taskType;
        }

        @CustomType.Setter
        public Builder adjustment(@Nullable String adjustment) {

            this.adjustment = adjustment;
            return this;
        }
        @CustomType.Setter
        public Builder adjustmentPercentage(@Nullable String adjustmentPercentage) {

            this.adjustmentPercentage = adjustmentPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder batchSizePercentage(@Nullable String batchSizePercentage) {

            this.batchSizePercentage = batchSizePercentage;
            return this;
        }
        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable String frequency) {

            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder gracePeriod(@Nullable String gracePeriod) {

            this.gracePeriod = gracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(@Nullable Boolean isEnabled) {

            this.isEnabled = isEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxCapacity(@Nullable String maxCapacity) {

            this.maxCapacity = maxCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder minCapacity(@Nullable String minCapacity) {

            this.minCapacity = minCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder scaleMaxCapacity(@Nullable String scaleMaxCapacity) {

            this.scaleMaxCapacity = scaleMaxCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder scaleMinCapacity(@Nullable String scaleMinCapacity) {

            this.scaleMinCapacity = scaleMinCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder scaleTargetCapacity(@Nullable String scaleTargetCapacity) {

            this.scaleTargetCapacity = scaleTargetCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {

            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder targetCapacity(@Nullable String targetCapacity) {

            this.targetCapacity = targetCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder taskType(String taskType) {
            if (taskType == null) {
              throw new MissingRequiredPropertyException("BeanstalkScheduledTask", "taskType");
            }
            this.taskType = taskType;
            return this;
        }
        public BeanstalkScheduledTask build() {
            final var _resultValue = new BeanstalkScheduledTask();
            _resultValue.adjustment = adjustment;
            _resultValue.adjustmentPercentage = adjustmentPercentage;
            _resultValue.batchSizePercentage = batchSizePercentage;
            _resultValue.cronExpression = cronExpression;
            _resultValue.frequency = frequency;
            _resultValue.gracePeriod = gracePeriod;
            _resultValue.isEnabled = isEnabled;
            _resultValue.maxCapacity = maxCapacity;
            _resultValue.minCapacity = minCapacity;
            _resultValue.scaleMaxCapacity = scaleMaxCapacity;
            _resultValue.scaleMinCapacity = scaleMinCapacity;
            _resultValue.scaleTargetCapacity = scaleTargetCapacity;
            _resultValue.startTime = startTime;
            _resultValue.targetCapacity = targetCapacity;
            _resultValue.taskType = taskType;
            return _resultValue;
        }
    }
}
