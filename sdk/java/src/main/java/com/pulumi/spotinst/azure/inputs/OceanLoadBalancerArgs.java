// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanLoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanLoadBalancerArgs Empty = new OceanLoadBalancerArgs();

    /**
     * Names of the Backend Pools to register the Cluster VMs to. Each Backend Pool is a separate load balancer.
     * 
     */
    @Import(name="backendPoolNames")
    private @Nullable Output<List<String>> backendPoolNames;

    /**
     * @return Names of the Backend Pools to register the Cluster VMs to. Each Backend Pool is a separate load balancer.
     * 
     */
    public Optional<Output<List<String>>> backendPoolNames() {
        return Optional.ofNullable(this.backendPoolNames);
    }

    /**
     * Supported values: `Standard`, `Basic`.
     * 
     */
    @Import(name="loadBalancerSku")
    private @Nullable Output<String> loadBalancerSku;

    /**
     * @return Supported values: `Standard`, `Basic`.
     * 
     */
    public Optional<Output<String>> loadBalancerSku() {
        return Optional.ofNullable(this.loadBalancerSku);
    }

    /**
     * Name of the Load Balancer.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Load Balancer.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Resource Group name of the Load Balancer.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The Resource Group name of the Load Balancer.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The type of load balancer. Supported value: `loadBalancer`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of load balancer. Supported value: `loadBalancer`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private OceanLoadBalancerArgs() {}

    private OceanLoadBalancerArgs(OceanLoadBalancerArgs $) {
        this.backendPoolNames = $.backendPoolNames;
        this.loadBalancerSku = $.loadBalancerSku;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanLoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanLoadBalancerArgs $;

        public Builder() {
            $ = new OceanLoadBalancerArgs();
        }

        public Builder(OceanLoadBalancerArgs defaults) {
            $ = new OceanLoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPoolNames Names of the Backend Pools to register the Cluster VMs to. Each Backend Pool is a separate load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendPoolNames(@Nullable Output<List<String>> backendPoolNames) {
            $.backendPoolNames = backendPoolNames;
            return this;
        }

        /**
         * @param backendPoolNames Names of the Backend Pools to register the Cluster VMs to. Each Backend Pool is a separate load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendPoolNames(List<String> backendPoolNames) {
            return backendPoolNames(Output.of(backendPoolNames));
        }

        /**
         * @param backendPoolNames Names of the Backend Pools to register the Cluster VMs to. Each Backend Pool is a separate load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendPoolNames(String... backendPoolNames) {
            return backendPoolNames(List.of(backendPoolNames));
        }

        /**
         * @param loadBalancerSku Supported values: `Standard`, `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSku(@Nullable Output<String> loadBalancerSku) {
            $.loadBalancerSku = loadBalancerSku;
            return this;
        }

        /**
         * @param loadBalancerSku Supported values: `Standard`, `Basic`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSku(String loadBalancerSku) {
            return loadBalancerSku(Output.of(loadBalancerSku));
        }

        /**
         * @param name Name of the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The Resource Group name of the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The Resource Group name of the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param type The type of load balancer. Supported value: `loadBalancer`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of load balancer. Supported value: `loadBalancer`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OceanLoadBalancerArgs build() {
            return $;
        }
    }

}
