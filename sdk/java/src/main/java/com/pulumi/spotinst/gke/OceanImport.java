// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gke;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.spotinst.Utilities;
import com.pulumi.spotinst.gke.OceanImportArgs;
import com.pulumi.spotinst.gke.inputs.OceanImportState;
import com.pulumi.spotinst.gke.outputs.OceanImportAutoUpdate;
import com.pulumi.spotinst.gke.outputs.OceanImportAutoscaler;
import com.pulumi.spotinst.gke.outputs.OceanImportBackendService;
import com.pulumi.spotinst.gke.outputs.OceanImportFilters;
import com.pulumi.spotinst.gke.outputs.OceanImportScheduledTask;
import com.pulumi.spotinst.gke.outputs.OceanImportShieldedInstanceConfig;
import com.pulumi.spotinst.gke.outputs.OceanImportStrategy;
import com.pulumi.spotinst.gke.outputs.OceanImportUpdatePolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.spotinst.gke.OceanImport;
 * import com.pulumi.spotinst.gke.OceanImportArgs;
 * import com.pulumi.spotinst.gke.inputs.OceanImportAutoUpdateArgs;
 * import com.pulumi.spotinst.gke.inputs.OceanImportFiltersArgs;
 * import com.pulumi.spotinst.gke.inputs.OceanImportBackendServiceArgs;
 * import com.pulumi.spotinst.gke.inputs.OceanImportShieldedInstanceConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new OceanImport("example", OceanImportArgs.builder()
 *             .clusterName("example-cluster-name")
 *             .controllerClusterId("example-controller-123124")
 *             .location("us-central1-a")
 *             .minSize(0)
 *             .maxSize(2)
 *             .desiredCapacity(0)
 *             .autoUpdates(OceanImportAutoUpdateArgs.builder()
 *                 .isEnabled(true)
 *                 .build())
 *             .whitelists(            
 *                 "n1-standard-1",
 *                 "n1-standard-2")
 *             .filters(OceanImportFiltersArgs.builder()
 *                 .excludeFamilies("n2")
 *                 .includeFamilies(                
 *                     "c2",
 *                     "c3")
 *                 .minMemoryGib(8.0)
 *                 .maxMemoryGib(16.0)
 *                 .minVcpu(2)
 *                 .maxVcpu(16)
 *                 .build())
 *             .backendServices(OceanImportBackendServiceArgs.builder()
 *                 .serviceName("example-backend-service")
 *                 .locationType("regional")
 *                 .scheme("INTERNAL")
 *                 .namedPorts(OceanImportBackendServiceNamedPortArgs.builder()
 *                     .name("http")
 *                     .ports(                    
 *                         "80",
 *                         "8080")
 *                     .build())
 *                 .build())
 *             .rootVolumeType("pd-ssd")
 *             .shieldedInstanceConfig(OceanImportShieldedInstanceConfigArgs.builder()
 *                 .enableSecureBoot(true)
 *                 .enableIntegrityMonitoring(true)
 *                 .build())
 *             .useAsTemplateOnly(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="spotinst:gke/oceanImport:OceanImport")
public class OceanImport extends com.pulumi.resources.CustomResource {
    /**
     * The Ocean Kubernetes AutoUpdate object. If set to &#39;true&#39;, Ocean will ensure that your clusters have an up-to-date configuration according to the respective GKE cluster.
     * 
     */
    @Export(name="autoUpdates", refs={List.class,OceanImportAutoUpdate.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanImportAutoUpdate>> autoUpdates;

    /**
     * @return The Ocean Kubernetes AutoUpdate object. If set to &#39;true&#39;, Ocean will ensure that your clusters have an up-to-date configuration according to the respective GKE cluster.
     * 
     */
    public Output<Optional<List<OceanImportAutoUpdate>>> autoUpdates() {
        return Codegen.optional(this.autoUpdates);
    }
    /**
     * The Ocean Kubernetes Autoscaler object.
     * 
     */
    @Export(name="autoscaler", refs={OceanImportAutoscaler.class}, tree="[0]")
    private Output<OceanImportAutoscaler> autoscaler;

    /**
     * @return The Ocean Kubernetes Autoscaler object.
     * 
     */
    public Output<OceanImportAutoscaler> autoscaler() {
        return this.autoscaler;
    }
    /**
     * Describes the backend service configurations.
     * 
     */
    @Export(name="backendServices", refs={List.class,OceanImportBackendService.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanImportBackendService>> backendServices;

    /**
     * @return Describes the backend service configurations.
     * 
     */
    public Output<Optional<List<OceanImportBackendService>>> backendServices() {
        return Codegen.optional(this.backendServices);
    }
    /**
     * Instance types to avoid launching in the Ocean cluster. Cannot be configured if whitelist list is configured.
     * 
     */
    @Export(name="blacklists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blacklists;

    /**
     * @return Instance types to avoid launching in the Ocean cluster. Cannot be configured if whitelist list is configured.
     * 
     */
    public Output<Optional<List<String>>> blacklists() {
        return Codegen.optional(this.blacklists);
    }
    @Export(name="clusterControllerId", refs={String.class}, tree="[0]")
    private Output<String> clusterControllerId;

    public Output<String> clusterControllerId() {
        return this.clusterControllerId;
    }
    /**
     * The GKE cluster name.
     * 
     */
    @Export(name="clusterName", refs={String.class}, tree="[0]")
    private Output<String> clusterName;

    /**
     * @return The GKE cluster name.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }
    /**
     * A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
     * 
     */
    @Export(name="controllerClusterId", refs={String.class}, tree="[0]")
    private Output<String> controllerClusterId;

    /**
     * @return A unique identifier used for connecting the Ocean SaaS platform and the Kubernetes cluster. Typically, the cluster name is used as its identifier.
     * 
     */
    public Output<String> controllerClusterId() {
        return this.controllerClusterId;
    }
    /**
     * The number of instances to launch and maintain in the cluster.
     * 
     */
    @Export(name="desiredCapacity", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> desiredCapacity;

    /**
     * @return The number of instances to launch and maintain in the cluster.
     * 
     */
    public Output<Optional<Integer>> desiredCapacity() {
        return Codegen.optional(this.desiredCapacity);
    }
    /**
     * List of filters. The Instance types that match with all filters compose the Ocean&#39;s whitelist parameter. Cannot be configured together with whitelist/blacklist.
     * 
     */
    @Export(name="filters", refs={OceanImportFilters.class}, tree="[0]")
    private Output</* @Nullable */ OceanImportFilters> filters;

    /**
     * @return List of filters. The Instance types that match with all filters compose the Ocean&#39;s whitelist parameter. Cannot be configured together with whitelist/blacklist.
     * 
     */
    public Output<Optional<OceanImportFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * The zone the master cluster is located in.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The zone the master cluster is located in.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The upper limit of instances the cluster can scale up to.
     * 
     */
    @Export(name="maxSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxSize;

    /**
     * @return The upper limit of instances the cluster can scale up to.
     * 
     */
    public Output<Optional<Integer>> maxSize() {
        return Codegen.optional(this.maxSize);
    }
    /**
     * The lower limit of instances the cluster can scale down to.
     * 
     */
    @Export(name="minSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minSize;

    /**
     * @return The lower limit of instances the cluster can scale down to.
     * 
     */
    public Output<Optional<Integer>> minSize() {
        return Codegen.optional(this.minSize);
    }
    /**
     * The root volume disk type.
     * 
     */
    @Export(name="rootVolumeType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rootVolumeType;

    /**
     * @return The root volume disk type.
     * 
     */
    public Output<Optional<String>> rootVolumeType() {
        return Codegen.optional(this.rootVolumeType);
    }
    /**
     * Set scheduling object.
     * 
     */
    @Export(name="scheduledTasks", refs={List.class,OceanImportScheduledTask.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanImportScheduledTask>> scheduledTasks;

    /**
     * @return Set scheduling object.
     * 
     */
    public Output<Optional<List<OceanImportScheduledTask>>> scheduledTasks() {
        return Codegen.optional(this.scheduledTasks);
    }
    /**
     * The Ocean shielded instance configuration object.
     * 
     */
    @Export(name="shieldedInstanceConfig", refs={OceanImportShieldedInstanceConfig.class}, tree="[0]")
    private Output<OceanImportShieldedInstanceConfig> shieldedInstanceConfig;

    /**
     * @return The Ocean shielded instance configuration object.
     * 
     */
    public Output<OceanImportShieldedInstanceConfig> shieldedInstanceConfig() {
        return this.shieldedInstanceConfig;
    }
    /**
     * Strategy object.
     * 
     */
    @Export(name="strategies", refs={List.class,OceanImportStrategy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<OceanImportStrategy>> strategies;

    /**
     * @return Strategy object.
     * 
     */
    public Output<Optional<List<OceanImportStrategy>>> strategies() {
        return Codegen.optional(this.strategies);
    }
    @Export(name="updatePolicy", refs={OceanImportUpdatePolicy.class}, tree="[0]")
    private Output</* @Nullable */ OceanImportUpdatePolicy> updatePolicy;

    public Output<Optional<OceanImportUpdatePolicy>> updatePolicy() {
        return Codegen.optional(this.updatePolicy);
    }
    /**
     * launch specification defined on the Ocean object will function only as a template for virtual node groups.
     * 
     */
    @Export(name="useAsTemplateOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useAsTemplateOnly;

    /**
     * @return launch specification defined on the Ocean object will function only as a template for virtual node groups.
     * 
     */
    public Output<Optional<Boolean>> useAsTemplateOnly() {
        return Codegen.optional(this.useAsTemplateOnly);
    }
    /**
     * Instance types allowed in the Ocean cluster. Cannot be configured if blacklist list is configured.
     * 
     */
    @Export(name="whitelists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> whitelists;

    /**
     * @return Instance types allowed in the Ocean cluster. Cannot be configured if blacklist list is configured.
     * 
     */
    public Output<Optional<List<String>>> whitelists() {
        return Codegen.optional(this.whitelists);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OceanImport(java.lang.String name) {
        this(name, OceanImportArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OceanImport(java.lang.String name, OceanImportArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OceanImport(java.lang.String name, OceanImportArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("spotinst:gke/oceanImport:OceanImport", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private OceanImport(java.lang.String name, Output<java.lang.String> id, @Nullable OceanImportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("spotinst:gke/oceanImport:OceanImport", name, state, makeResourceOptions(options, id), false);
    }

    private static OceanImportArgs makeArgs(OceanImportArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? OceanImportArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OceanImport get(java.lang.String name, Output<java.lang.String> id, @Nullable OceanImportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OceanImport(name, id, state, options);
    }
}
