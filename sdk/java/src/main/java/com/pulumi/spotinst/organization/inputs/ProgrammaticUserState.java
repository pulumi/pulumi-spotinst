// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.organization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.organization.inputs.ProgrammaticUserAccountArgs;
import com.pulumi.spotinst.organization.inputs.ProgrammaticUserPolicyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProgrammaticUserState extends com.pulumi.resources.ResourceArgs {

    public static final ProgrammaticUserState Empty = new ProgrammaticUserState();

    /**
     * All the accounts the programmatic user will have access to.
     * If used - Cannot be empty.
     * 
     */
    @Import(name="accounts")
    private @Nullable Output<List<ProgrammaticUserAccountArgs>> accounts;

    /**
     * @return All the accounts the programmatic user will have access to.
     * If used - Cannot be empty.
     * 
     */
    public Optional<Output<List<ProgrammaticUserAccountArgs>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    /**
     * Brief description of the user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Brief description of the user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the programmatic user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the programmatic user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * All the policies the programmatic user will have access to.
     * If used - Cannot be empty.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<ProgrammaticUserPolicyArgs>> policies;

    /**
     * @return All the policies the programmatic user will have access to.
     * If used - Cannot be empty.
     * 
     */
    public Optional<Output<List<ProgrammaticUserPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * A list of the user groups to register the given user to (should be existing user groups only)
     * 
     */
    @Import(name="userGroupIds")
    private @Nullable Output<List<String>> userGroupIds;

    /**
     * @return A list of the user groups to register the given user to (should be existing user groups only)
     * 
     */
    public Optional<Output<List<String>>> userGroupIds() {
        return Optional.ofNullable(this.userGroupIds);
    }

    private ProgrammaticUserState() {}

    private ProgrammaticUserState(ProgrammaticUserState $) {
        this.accounts = $.accounts;
        this.description = $.description;
        this.name = $.name;
        this.policies = $.policies;
        this.userGroupIds = $.userGroupIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProgrammaticUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProgrammaticUserState $;

        public Builder() {
            $ = new ProgrammaticUserState();
        }

        public Builder(ProgrammaticUserState defaults) {
            $ = new ProgrammaticUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accounts All the accounts the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder accounts(@Nullable Output<List<ProgrammaticUserAccountArgs>> accounts) {
            $.accounts = accounts;
            return this;
        }

        /**
         * @param accounts All the accounts the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder accounts(List<ProgrammaticUserAccountArgs> accounts) {
            return accounts(Output.of(accounts));
        }

        /**
         * @param accounts All the accounts the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder accounts(ProgrammaticUserAccountArgs... accounts) {
            return accounts(List.of(accounts));
        }

        /**
         * @param description Brief description of the user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Brief description of the user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the programmatic user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the programmatic user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policies All the policies the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<ProgrammaticUserPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies All the policies the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<ProgrammaticUserPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies All the policies the programmatic user will have access to.
         * If used - Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder policies(ProgrammaticUserPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param userGroupIds A list of the user groups to register the given user to (should be existing user groups only)
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(@Nullable Output<List<String>> userGroupIds) {
            $.userGroupIds = userGroupIds;
            return this;
        }

        /**
         * @param userGroupIds A list of the user groups to register the given user to (should be existing user groups only)
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(List<String> userGroupIds) {
            return userGroupIds(Output.of(userGroupIds));
        }

        /**
         * @param userGroupIds A list of the user groups to register the given user to (should be existing user groups only)
         * 
         * @return builder
         * 
         */
        public Builder userGroupIds(String... userGroupIds) {
            return userGroupIds(List.of(userGroupIds));
        }

        public ProgrammaticUserState build() {
            return $;
        }
    }

}
