// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.aws.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceResourceRequirementArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceResourceRequirementArgs Empty = new ManagedInstanceResourceRequirementArgs();

    @Import(name="excludedInstanceFamilies")
    private @Nullable Output<List<String>> excludedInstanceFamilies;

    public Optional<Output<List<String>>> excludedInstanceFamilies() {
        return Optional.ofNullable(this.excludedInstanceFamilies);
    }

    @Import(name="excludedInstanceGenerations")
    private @Nullable Output<List<String>> excludedInstanceGenerations;

    public Optional<Output<List<String>>> excludedInstanceGenerations() {
        return Optional.ofNullable(this.excludedInstanceGenerations);
    }

    @Import(name="excludedInstanceTypes")
    private @Nullable Output<List<String>> excludedInstanceTypes;

    public Optional<Output<List<String>>> excludedInstanceTypes() {
        return Optional.ofNullable(this.excludedInstanceTypes);
    }

    @Import(name="requiredGpuMaximum")
    private @Nullable Output<Integer> requiredGpuMaximum;

    public Optional<Output<Integer>> requiredGpuMaximum() {
        return Optional.ofNullable(this.requiredGpuMaximum);
    }

    @Import(name="requiredGpuMinimum")
    private @Nullable Output<Integer> requiredGpuMinimum;

    public Optional<Output<Integer>> requiredGpuMinimum() {
        return Optional.ofNullable(this.requiredGpuMinimum);
    }

    @Import(name="requiredMemoryMaximum", required=true)
    private Output<Integer> requiredMemoryMaximum;

    public Output<Integer> requiredMemoryMaximum() {
        return this.requiredMemoryMaximum;
    }

    @Import(name="requiredMemoryMinimum", required=true)
    private Output<Integer> requiredMemoryMinimum;

    public Output<Integer> requiredMemoryMinimum() {
        return this.requiredMemoryMinimum;
    }

    @Import(name="requiredVcpuMaximum", required=true)
    private Output<Integer> requiredVcpuMaximum;

    public Output<Integer> requiredVcpuMaximum() {
        return this.requiredVcpuMaximum;
    }

    @Import(name="requiredVcpuMinimum", required=true)
    private Output<Integer> requiredVcpuMinimum;

    public Output<Integer> requiredVcpuMinimum() {
        return this.requiredVcpuMinimum;
    }

    private ManagedInstanceResourceRequirementArgs() {}

    private ManagedInstanceResourceRequirementArgs(ManagedInstanceResourceRequirementArgs $) {
        this.excludedInstanceFamilies = $.excludedInstanceFamilies;
        this.excludedInstanceGenerations = $.excludedInstanceGenerations;
        this.excludedInstanceTypes = $.excludedInstanceTypes;
        this.requiredGpuMaximum = $.requiredGpuMaximum;
        this.requiredGpuMinimum = $.requiredGpuMinimum;
        this.requiredMemoryMaximum = $.requiredMemoryMaximum;
        this.requiredMemoryMinimum = $.requiredMemoryMinimum;
        this.requiredVcpuMaximum = $.requiredVcpuMaximum;
        this.requiredVcpuMinimum = $.requiredVcpuMinimum;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceResourceRequirementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceResourceRequirementArgs $;

        public Builder() {
            $ = new ManagedInstanceResourceRequirementArgs();
        }

        public Builder(ManagedInstanceResourceRequirementArgs defaults) {
            $ = new ManagedInstanceResourceRequirementArgs(Objects.requireNonNull(defaults));
        }

        public Builder excludedInstanceFamilies(@Nullable Output<List<String>> excludedInstanceFamilies) {
            $.excludedInstanceFamilies = excludedInstanceFamilies;
            return this;
        }

        public Builder excludedInstanceFamilies(List<String> excludedInstanceFamilies) {
            return excludedInstanceFamilies(Output.of(excludedInstanceFamilies));
        }

        public Builder excludedInstanceFamilies(String... excludedInstanceFamilies) {
            return excludedInstanceFamilies(List.of(excludedInstanceFamilies));
        }

        public Builder excludedInstanceGenerations(@Nullable Output<List<String>> excludedInstanceGenerations) {
            $.excludedInstanceGenerations = excludedInstanceGenerations;
            return this;
        }

        public Builder excludedInstanceGenerations(List<String> excludedInstanceGenerations) {
            return excludedInstanceGenerations(Output.of(excludedInstanceGenerations));
        }

        public Builder excludedInstanceGenerations(String... excludedInstanceGenerations) {
            return excludedInstanceGenerations(List.of(excludedInstanceGenerations));
        }

        public Builder excludedInstanceTypes(@Nullable Output<List<String>> excludedInstanceTypes) {
            $.excludedInstanceTypes = excludedInstanceTypes;
            return this;
        }

        public Builder excludedInstanceTypes(List<String> excludedInstanceTypes) {
            return excludedInstanceTypes(Output.of(excludedInstanceTypes));
        }

        public Builder excludedInstanceTypes(String... excludedInstanceTypes) {
            return excludedInstanceTypes(List.of(excludedInstanceTypes));
        }

        public Builder requiredGpuMaximum(@Nullable Output<Integer> requiredGpuMaximum) {
            $.requiredGpuMaximum = requiredGpuMaximum;
            return this;
        }

        public Builder requiredGpuMaximum(Integer requiredGpuMaximum) {
            return requiredGpuMaximum(Output.of(requiredGpuMaximum));
        }

        public Builder requiredGpuMinimum(@Nullable Output<Integer> requiredGpuMinimum) {
            $.requiredGpuMinimum = requiredGpuMinimum;
            return this;
        }

        public Builder requiredGpuMinimum(Integer requiredGpuMinimum) {
            return requiredGpuMinimum(Output.of(requiredGpuMinimum));
        }

        public Builder requiredMemoryMaximum(Output<Integer> requiredMemoryMaximum) {
            $.requiredMemoryMaximum = requiredMemoryMaximum;
            return this;
        }

        public Builder requiredMemoryMaximum(Integer requiredMemoryMaximum) {
            return requiredMemoryMaximum(Output.of(requiredMemoryMaximum));
        }

        public Builder requiredMemoryMinimum(Output<Integer> requiredMemoryMinimum) {
            $.requiredMemoryMinimum = requiredMemoryMinimum;
            return this;
        }

        public Builder requiredMemoryMinimum(Integer requiredMemoryMinimum) {
            return requiredMemoryMinimum(Output.of(requiredMemoryMinimum));
        }

        public Builder requiredVcpuMaximum(Output<Integer> requiredVcpuMaximum) {
            $.requiredVcpuMaximum = requiredVcpuMaximum;
            return this;
        }

        public Builder requiredVcpuMaximum(Integer requiredVcpuMaximum) {
            return requiredVcpuMaximum(Output.of(requiredVcpuMaximum));
        }

        public Builder requiredVcpuMinimum(Output<Integer> requiredVcpuMinimum) {
            $.requiredVcpuMinimum = requiredVcpuMinimum;
            return this;
        }

        public Builder requiredVcpuMinimum(Integer requiredVcpuMinimum) {
            return requiredVcpuMinimum(Output.of(requiredVcpuMinimum));
        }

        public ManagedInstanceResourceRequirementArgs build() {
            if ($.requiredMemoryMaximum == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceResourceRequirementArgs", "requiredMemoryMaximum");
            }
            if ($.requiredMemoryMinimum == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceResourceRequirementArgs", "requiredMemoryMinimum");
            }
            if ($.requiredVcpuMaximum == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceResourceRequirementArgs", "requiredVcpuMaximum");
            }
            if ($.requiredVcpuMinimum == null) {
                throw new MissingRequiredPropertyException("ManagedInstanceResourceRequirementArgs", "requiredVcpuMinimum");
            }
            return $;
        }
    }

}
