// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.inputs.HealthCheckCheckArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HealthCheckState extends com.pulumi.resources.ResourceArgs {

    public static final HealthCheckState Empty = new HealthCheckState();

    /**
     * Describes the check to execute.
     * 
     */
    @Import(name="check")
    private @Nullable Output<HealthCheckCheckArgs> check;

    /**
     * @return Describes the check to execute.
     * 
     */
    public Optional<Output<HealthCheckCheckArgs>> check() {
        return Optional.ofNullable(this.check);
    }

    /**
     * The name of the health check.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the health check.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="proxyAddress")
    private @Nullable Output<String> proxyAddress;

    public Optional<Output<String>> proxyAddress() {
        return Optional.ofNullable(this.proxyAddress);
    }

    @Import(name="proxyPort")
    private @Nullable Output<Integer> proxyPort;

    public Optional<Output<Integer>> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }

    /**
     * The ID of the resource to check.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID of the resource to check.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private HealthCheckState() {}

    private HealthCheckState(HealthCheckState $) {
        this.check = $.check;
        this.name = $.name;
        this.proxyAddress = $.proxyAddress;
        this.proxyPort = $.proxyPort;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthCheckState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthCheckState $;

        public Builder() {
            $ = new HealthCheckState();
        }

        public Builder(HealthCheckState defaults) {
            $ = new HealthCheckState(Objects.requireNonNull(defaults));
        }

        /**
         * @param check Describes the check to execute.
         * 
         * @return builder
         * 
         */
        public Builder check(@Nullable Output<HealthCheckCheckArgs> check) {
            $.check = check;
            return this;
        }

        /**
         * @param check Describes the check to execute.
         * 
         * @return builder
         * 
         */
        public Builder check(HealthCheckCheckArgs check) {
            return check(Output.of(check));
        }

        /**
         * @param name The name of the health check.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the health check.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder proxyAddress(@Nullable Output<String> proxyAddress) {
            $.proxyAddress = proxyAddress;
            return this;
        }

        public Builder proxyAddress(String proxyAddress) {
            return proxyAddress(Output.of(proxyAddress));
        }

        public Builder proxyPort(@Nullable Output<Integer> proxyPort) {
            $.proxyPort = proxyPort;
            return this;
        }

        public Builder proxyPort(Integer proxyPort) {
            return proxyPort(Output.of(proxyPort));
        }

        /**
         * @param resourceId The ID of the resource to check.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the resource to check.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public HealthCheckState build() {
            return $;
        }
    }

}
