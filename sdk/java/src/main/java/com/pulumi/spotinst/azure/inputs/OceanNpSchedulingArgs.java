// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.azure.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.azure.inputs.OceanNpSchedulingShutdownHoursArgs;
import com.pulumi.spotinst.azure.inputs.OceanNpSchedulingSuspensionHoursArgs;
import com.pulumi.spotinst.azure.inputs.OceanNpSchedulingTaskArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanNpSchedulingArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanNpSchedulingArgs Empty = new OceanNpSchedulingArgs();

    /**
     * An object used to specify times that the nodes in the virtual node group will be stopped.
     * 
     */
    @Import(name="shutdownHours")
    private @Nullable Output<OceanNpSchedulingShutdownHoursArgs> shutdownHours;

    /**
     * @return An object used to specify times that the nodes in the virtual node group will be stopped.
     * 
     */
    public Optional<Output<OceanNpSchedulingShutdownHoursArgs>> shutdownHours() {
        return Optional.ofNullable(this.shutdownHours);
    }

    @Import(name="suspensionHours")
    private @Nullable Output<OceanNpSchedulingSuspensionHoursArgs> suspensionHours;

    public Optional<Output<OceanNpSchedulingSuspensionHoursArgs>> suspensionHours() {
        return Optional.ofNullable(this.suspensionHours);
    }

    @Import(name="tasks")
    private @Nullable Output<List<OceanNpSchedulingTaskArgs>> tasks;

    public Optional<Output<List<OceanNpSchedulingTaskArgs>>> tasks() {
        return Optional.ofNullable(this.tasks);
    }

    private OceanNpSchedulingArgs() {}

    private OceanNpSchedulingArgs(OceanNpSchedulingArgs $) {
        this.shutdownHours = $.shutdownHours;
        this.suspensionHours = $.suspensionHours;
        this.tasks = $.tasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanNpSchedulingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanNpSchedulingArgs $;

        public Builder() {
            $ = new OceanNpSchedulingArgs();
        }

        public Builder(OceanNpSchedulingArgs defaults) {
            $ = new OceanNpSchedulingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param shutdownHours An object used to specify times that the nodes in the virtual node group will be stopped.
         * 
         * @return builder
         * 
         */
        public Builder shutdownHours(@Nullable Output<OceanNpSchedulingShutdownHoursArgs> shutdownHours) {
            $.shutdownHours = shutdownHours;
            return this;
        }

        /**
         * @param shutdownHours An object used to specify times that the nodes in the virtual node group will be stopped.
         * 
         * @return builder
         * 
         */
        public Builder shutdownHours(OceanNpSchedulingShutdownHoursArgs shutdownHours) {
            return shutdownHours(Output.of(shutdownHours));
        }

        public Builder suspensionHours(@Nullable Output<OceanNpSchedulingSuspensionHoursArgs> suspensionHours) {
            $.suspensionHours = suspensionHours;
            return this;
        }

        public Builder suspensionHours(OceanNpSchedulingSuspensionHoursArgs suspensionHours) {
            return suspensionHours(Output.of(suspensionHours));
        }

        public Builder tasks(@Nullable Output<List<OceanNpSchedulingTaskArgs>> tasks) {
            $.tasks = tasks;
            return this;
        }

        public Builder tasks(List<OceanNpSchedulingTaskArgs> tasks) {
            return tasks(Output.of(tasks));
        }

        public Builder tasks(OceanNpSchedulingTaskArgs... tasks) {
            return tasks(List.of(tasks));
        }

        public OceanNpSchedulingArgs build() {
            return $;
        }
    }

}
