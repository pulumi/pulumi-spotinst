// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.gke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OceanImportFiltersArgs extends com.pulumi.resources.ResourceArgs {

    public static final OceanImportFiltersArgs Empty = new OceanImportFiltersArgs();

    /**
     * Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
     * 
     */
    @Import(name="excludeFamilies")
    private @Nullable Output<List<String>> excludeFamilies;

    /**
     * @return Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
     * 
     */
    public Optional<Output<List<String>>> excludeFamilies() {
        return Optional.ofNullable(this.excludeFamilies);
    }

    /**
     * Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
     * 
     */
    @Import(name="includeFamilies")
    private @Nullable Output<List<String>> includeFamilies;

    /**
     * @return Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
     * 
     */
    public Optional<Output<List<String>>> includeFamilies() {
        return Optional.ofNullable(this.includeFamilies);
    }

    /**
     * Maximum amount of Memory (GiB).
     * 
     */
    @Import(name="maxMemoryGib")
    private @Nullable Output<Double> maxMemoryGib;

    /**
     * @return Maximum amount of Memory (GiB).
     * 
     */
    public Optional<Output<Double>> maxMemoryGib() {
        return Optional.ofNullable(this.maxMemoryGib);
    }

    /**
     * Maximum number of vcpus available.
     * 
     */
    @Import(name="maxVcpu")
    private @Nullable Output<Integer> maxVcpu;

    /**
     * @return Maximum number of vcpus available.
     * 
     */
    public Optional<Output<Integer>> maxVcpu() {
        return Optional.ofNullable(this.maxVcpu);
    }

    /**
     * Minimum amount of Memory (GiB).
     * 
     */
    @Import(name="minMemoryGib")
    private @Nullable Output<Double> minMemoryGib;

    /**
     * @return Minimum amount of Memory (GiB).
     * 
     */
    public Optional<Output<Double>> minMemoryGib() {
        return Optional.ofNullable(this.minMemoryGib);
    }

    /**
     * Minimum number of vcpus available.
     * 
     */
    @Import(name="minVcpu")
    private @Nullable Output<Integer> minVcpu;

    /**
     * @return Minimum number of vcpus available.
     * 
     */
    public Optional<Output<Integer>> minVcpu() {
        return Optional.ofNullable(this.minVcpu);
    }

    private OceanImportFiltersArgs() {}

    private OceanImportFiltersArgs(OceanImportFiltersArgs $) {
        this.excludeFamilies = $.excludeFamilies;
        this.includeFamilies = $.includeFamilies;
        this.maxMemoryGib = $.maxMemoryGib;
        this.maxVcpu = $.maxVcpu;
        this.minMemoryGib = $.minMemoryGib;
        this.minVcpu = $.minVcpu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OceanImportFiltersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OceanImportFiltersArgs $;

        public Builder() {
            $ = new OceanImportFiltersArgs();
        }

        public Builder(OceanImportFiltersArgs defaults) {
            $ = new OceanImportFiltersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeFamilies Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder excludeFamilies(@Nullable Output<List<String>> excludeFamilies) {
            $.excludeFamilies = excludeFamilies;
            return this;
        }

        /**
         * @param excludeFamilies Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder excludeFamilies(List<String> excludeFamilies) {
            return excludeFamilies(Output.of(excludeFamilies));
        }

        /**
         * @param excludeFamilies Types belonging to a family from the ExcludeFamilies will not be available for scaling (asterisk wildcard is also supported). For example, C* will exclude instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder excludeFamilies(String... excludeFamilies) {
            return excludeFamilies(List.of(excludeFamilies));
        }

        /**
         * @param includeFamilies Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder includeFamilies(@Nullable Output<List<String>> includeFamilies) {
            $.includeFamilies = includeFamilies;
            return this;
        }

        /**
         * @param includeFamilies Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder includeFamilies(List<String> includeFamilies) {
            return includeFamilies(Output.of(includeFamilies));
        }

        /**
         * @param includeFamilies Types belonging to a family from the IncludeFamilies will be available for scaling (asterisk wildcard is also supported). For example, C* will include instance types from these families: c5, c4, c4a, etc.
         * 
         * @return builder
         * 
         */
        public Builder includeFamilies(String... includeFamilies) {
            return includeFamilies(List.of(includeFamilies));
        }

        /**
         * @param maxMemoryGib Maximum amount of Memory (GiB).
         * 
         * @return builder
         * 
         */
        public Builder maxMemoryGib(@Nullable Output<Double> maxMemoryGib) {
            $.maxMemoryGib = maxMemoryGib;
            return this;
        }

        /**
         * @param maxMemoryGib Maximum amount of Memory (GiB).
         * 
         * @return builder
         * 
         */
        public Builder maxMemoryGib(Double maxMemoryGib) {
            return maxMemoryGib(Output.of(maxMemoryGib));
        }

        /**
         * @param maxVcpu Maximum number of vcpus available.
         * 
         * @return builder
         * 
         */
        public Builder maxVcpu(@Nullable Output<Integer> maxVcpu) {
            $.maxVcpu = maxVcpu;
            return this;
        }

        /**
         * @param maxVcpu Maximum number of vcpus available.
         * 
         * @return builder
         * 
         */
        public Builder maxVcpu(Integer maxVcpu) {
            return maxVcpu(Output.of(maxVcpu));
        }

        /**
         * @param minMemoryGib Minimum amount of Memory (GiB).
         * 
         * @return builder
         * 
         */
        public Builder minMemoryGib(@Nullable Output<Double> minMemoryGib) {
            $.minMemoryGib = minMemoryGib;
            return this;
        }

        /**
         * @param minMemoryGib Minimum amount of Memory (GiB).
         * 
         * @return builder
         * 
         */
        public Builder minMemoryGib(Double minMemoryGib) {
            return minMemoryGib(Output.of(minMemoryGib));
        }

        /**
         * @param minVcpu Minimum number of vcpus available.
         * 
         * @return builder
         * 
         */
        public Builder minVcpu(@Nullable Output<Integer> minVcpu) {
            $.minVcpu = minVcpu;
            return this;
        }

        /**
         * @param minVcpu Minimum number of vcpus available.
         * 
         * @return builder
         * 
         */
        public Builder minVcpu(Integer minVcpu) {
            return minVcpu(Output.of(minVcpu));
        }

        public OceanImportFiltersArgs build() {
            return $;
        }
    }

}
