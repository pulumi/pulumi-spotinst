// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.spotinst.multai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.spotinst.multai.inputs.TargetTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetArgs Empty = new TargetArgs();

    @Import(name="balancerId", required=true)
    private Output<String> balancerId;

    public Output<String> balancerId() {
        return this.balancerId;
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="tags")
    private @Nullable Output<List<TargetTagArgs>> tags;

    public Optional<Output<List<TargetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="targetSetId", required=true)
    private Output<String> targetSetId;

    public Output<String> targetSetId() {
        return this.targetSetId;
    }

    @Import(name="weight", required=true)
    private Output<Integer> weight;

    public Output<Integer> weight() {
        return this.weight;
    }

    private TargetArgs() {}

    private TargetArgs(TargetArgs $) {
        this.balancerId = $.balancerId;
        this.host = $.host;
        this.name = $.name;
        this.port = $.port;
        this.tags = $.tags;
        this.targetSetId = $.targetSetId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetArgs $;

        public Builder() {
            $ = new TargetArgs();
        }

        public Builder(TargetArgs defaults) {
            $ = new TargetArgs(Objects.requireNonNull(defaults));
        }

        public Builder balancerId(Output<String> balancerId) {
            $.balancerId = balancerId;
            return this;
        }

        public Builder balancerId(String balancerId) {
            return balancerId(Output.of(balancerId));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder tags(@Nullable Output<List<TargetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<TargetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(TargetTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder targetSetId(Output<String> targetSetId) {
            $.targetSetId = targetSetId;
            return this;
        }

        public Builder targetSetId(String targetSetId) {
            return targetSetId(Output.of(targetSetId));
        }

        public Builder weight(Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public TargetArgs build() {
            $.balancerId = Objects.requireNonNull($.balancerId, "expected parameter 'balancerId' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.targetSetId = Objects.requireNonNull($.targetSetId, "expected parameter 'targetSetId' to be non-null");
            $.weight = Objects.requireNonNull($.weight, "expected parameter 'weight' to be non-null");
            return $;
        }
    }

}
