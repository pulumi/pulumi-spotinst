# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Elastigroup(pulumi.CustomResource):
    custom_data: pulumi.Output[str]
    desired_capacity: pulumi.Output[float]
    """
    The desired number of instances the group should have at any time.
    """
    health_check: pulumi.Output[dict]
    images: pulumi.Output[list]
    integration_kubernetes: pulumi.Output[dict]
    integration_multai_runtime: pulumi.Output[dict]
    load_balancers: pulumi.Output[list]
    login: pulumi.Output[dict]
    low_priority_sizes: pulumi.Output[list]
    """
    Available Low-Priority sizes.
    """
    managed_service_identities: pulumi.Output[list]
    max_size: pulumi.Output[float]
    """
    The maximum number of instances the group should have at any time.
    """
    min_size: pulumi.Output[float]
    """
    The minimum number of instances the group should have at any time.
    """
    name: pulumi.Output[str]
    """
    The name of the managed identity.
    """
    network: pulumi.Output[dict]
    od_sizes: pulumi.Output[list]
    """
    Available On-Demand sizes
    """
    product: pulumi.Output[str]
    """
    Operation system type. Valid values: `"Linux"`, `"Windows"`.
    """
    region: pulumi.Output[str]
    """
    The region your Azure group will be created in.
    """
    resource_group_name: pulumi.Output[str]
    """
    The Resource Group that the user-assigned managed identity resides in.
    """
    scaling_down_policies: pulumi.Output[list]
    scaling_up_policies: pulumi.Output[list]
    scheduled_tasks: pulumi.Output[list]
    shutdown_script: pulumi.Output[str]
    """
    Shutdown script for the group. Value should be passed as a string encoded at Base64 only.
    """
    strategy: pulumi.Output[dict]
    """
    Describes the deployment strategy.

      * `draining_timeout` (`float`) - Time (seconds) to allow the instance to be drained from incoming TCP connections and detached from MLB before terminating it during a scale-down operation.
      * `lowPriorityPercentage` (`float`) - Percentage of Low Priority instances to maintain. Required if `od_count` is not specified.
      * `odCount` (`float`) - Number of On-Demand instances to maintain. Required if low_priority_percentage is not specified.
    """
    update_policy: pulumi.Output[dict]
    user_data: pulumi.Output[str]
    """
    Base64-encoded MIME user data to make available to the instances.
    """
    def __init__(__self__, resource_name, opts=None, custom_data=None, desired_capacity=None, health_check=None, images=None, integration_kubernetes=None, integration_multai_runtime=None, load_balancers=None, login=None, low_priority_sizes=None, managed_service_identities=None, max_size=None, min_size=None, name=None, network=None, od_sizes=None, product=None, region=None, resource_group_name=None, scaling_down_policies=None, scaling_up_policies=None, scheduled_tasks=None, shutdown_script=None, strategy=None, update_policy=None, user_data=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst elastigroup Azure resource.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        test_azure_group = spotinst.azure.Elastigroup("testAzureGroup",
            desired_capacity=1,
            health_check={
                "auto_healing": True,
                "grace_period": 120,
                "health_check_type": "INSTANCE_STATE",
            },
            images=[{
                "marketplace": [{
                    "offer": "UbuntuServer",
                    "publisher": "Canonical",
                    "sku": "16.04-LTS",
                }],
            }],
            load_balancers=[{
                "autoWeight": True,
                "balancer_id": "lb-1ee2e3q",
                "target_set_id": "ts-3eq",
                "type": "MULTAI_TARGET_SET",
            }],
            login={
                "sshPublicKey": "33a2s1f3g5a1df5g1ad3f2g1adfg56dfg==",
                "userName": "admin",
            },
            low_priority_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            managed_service_identities=[{
                "name": "example-identity",
                "resource_group_name": "spotinst-azure",
            }],
            max_size=1,
            min_size=0,
            network={
                "assignPublicIp": True,
                "resource_group_name": "subnetResourceGroup",
                "subnetName": "my-subnet-name",
                "virtualNetworkName": "vname",
            },
            od_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            product="Linux",
            region="eastus",
            resource_group_name="spotinst-azure",
            scaling_down_policies=[{
                "actionType": "adjustment",
                "adjustment": "MIN(5,10)",
                "cooldown": 60,
                "dimensions": [{
                    "name": "name-1",
                    "value": "value-1",
                }],
                "evaluationPeriods": "10",
                "metricName": "CPUUtilization",
                "namespace": "Microsoft.Compute",
                "operator": "gt",
                "period": "60",
                "policyName": "policy-name",
                "statistic": "average",
                "threshold": 10,
                "unit": "percent",
            }],
            scaling_up_policies=[{
                "actionType": "setMinTarget",
                "cooldown": 60,
                "dimensions": [
                    {
                        "name": "resourceName",
                        "value": "resource-name",
                    },
                    {
                        "name": "resourceGroupName",
                        "value": "resource-group-name",
                    },
                ],
                "evaluationPeriods": "10",
                "metricName": "CPUUtilization",
                "minTargetCapacity": 1,
                "namespace": "Microsoft.Compute",
                "operator": "gt",
                "period": "60",
                "policyName": "policy-name",
                "statistic": "average",
                "threshold": 10,
                "unit": "percent",
            }],
            scheduled_tasks=[{
                "adjustment": 2,
                "adjustmentPercentage": 50,
                "batchSizePercentage": 33,
                "cronExpression": "* * * * *",
                "grace_period": 300,
                "isEnabled": True,
                "scaleMaxCapacity": 8,
                "scaleMinCapacity": 5,
                "scaleTargetCapacity": 6,
                "taskType": "scale",
            }],
            shutdown_script="",
            strategy={
                "draining_timeout": 300,
                "odCount": 1,
            },
            user_data="")
        ```

        ## Load Balancers

        * `load_balancers` - (Required) Describes a set of one or more classic load balancer target groups and/or Multai load balancer target sets.
        * `type` - (Required) The resource type. Valid values: CLASSIC, TARGET_GROUP, MULTAI_TARGET_SET.
        * `balancer_id` - (Required) The balancer ID.
        * `target_set_id` - (Required) The scale set ID associated with the load balancer.
        * `auto_weight` - (Optional, Default: `false`)

        ```python
        import pulumi
        ```

        <a id="image"></a>
        ## Image

        * `image` - (Required) Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        * `publisher` - (Optional) Image publisher. Required if resource_group_name is not specified.
        * `offer` - (Optional) Name of the image to use. Required if publisher is specified.
        * `sku` - (Optional) Image's Stock Keeping Unit, which is the specific version of the image. Required if publisher is specified.
        * `resource_group_name` - (Optional) Name of Resource Group for custom image. Required if publisher not specified.
        * `image_name` - (Optional) Name of the custom image. Required if resource_group_name is specified.

        ```python
        import pulumi
        ```

        <a id="health-check"></a>
        ## Health Check

        * `health_check` - (Optional) Describes the health check configuration.
        * `health_check_type` - (Optional) Health check used to validate VM health. Valid values: “INSTANCE_STATE”.
        * `grace_period` - (Optional) Period of time (seconds) to wait for VM to reach healthiness before monitoring for unhealthiness.
        * `auto_healing` - (Optional) Enable auto-healing of unhealthy VMs.

        ```python
        import pulumi
        ```

        <a id="network"></a>
        ## Network

        * `network` - (Required) Defines the Virtual Network and Subnet for your Elastigroup.
        * `virtual_network_name` - (Required) Name of Vnet.
        * `subnet_name` - (Required) ID of subnet.
        * `resource_group_name` - (Required) Vnet Resource Group Name.
        * `assign_public_up` - (Optional, Default: `false`) Assign a public IP to each VM in the Elastigroup.
        * `additional_ip_configs` - (Optional) Array of additional IP configuration objects.
        * `name` - (Required) The IP configuration name.
        * `private_ip_version` - (Optional) Available from Azure Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Valid values: `IPv4`, `IPv6`.

        ```python
        import pulumi
        ```

        <a id="login"></a>
        ## Login

        ```python
        import pulumi
        ```

        <a id="login"></a>
        ## Login

        * `login` - (Required) Describes the login configuration.
        * `user_name` - (Required) Set admin access for accessing your VMs.
        * `ssh_public_key` - (Optional) SSH for admin access to Linux VMs. Required for Linux product types.
        * `password` - (Optional) Password for admin access to Windows VMs. Required for Windows product types.

        ```python
        import pulumi
        ```

        <a id="scaling-policy"></a>
        ## Scheduling

        * `scheduled_task` - (Optional) Describes the configuration of one or more scheduled tasks.
        * `is_enabled` - (Optional, Default: `true`) Describes whether the task is enabled. When true the task should run when false it should not run.
        * `cron_expression` - (Required) A valid cron expression (`* * * * *`). The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script.
        * `task_type` - (Required) The task type to run. Valid Values: `backup_ami`, `scale`, `scaleUp`, `roll`, `statefulUpdateCapacity`, `statefulRecycle`.
        * `scale_min_capacity` - (Optional) The min capacity of the group. Should be used when choosing ‘task_type' of ‘scale'.
        * `scale_max_capacity` - (Optional) The max capacity of the group. Required when ‘task_type' is ‘scale'.
        * `scale_target_capacity` - (Optional) The target capacity of the group. Should be used when choosing ‘task_type' of ‘scale'.
        * `adjustment` - (Optional) The number of instances to add/remove to/from the target capacity when scale is needed.
        * `adjustment_percentage` - (Optional) The percent of instances to add/remove to/from the target capacity when scale is needed.
        * `batch_size_percentage` - (Optional) The percentage size of each batch in the scheduled deployment roll. Required when the 'task_type' is 'roll'.
        * `grace_period` - (Optional) The time to allow instances to become healthy.

        ```python
        import pulumi
        ```

        <a id="update-policy"></a>
        ## Update Policy

        * `update_policy` - (Optional)

            * `should_roll` - (Required) Sets the enablement of the roll option.
            * `roll_config` - (Required) While used, you can control whether the group should perform a deployment after an update to the configuration.
                * `batch_size_percentage` - (Required) Sets the percentage of the instances to deploy in each batch.
                * `health_check_type` - (Optional) Sets the health check type to use. Valid values: `"INSTANCE_STATE"`, `"NONE"`.
                * `grace_period` - (Optional) Sets the grace period for new instances to become healthy.
               
        ```python
        import pulumi
        ```

        <a id="third-party-integrations"></a>
        ## Third-Party Integrations

        * `integration_kubernetes` - (Optional) Describes the [Kubernetes](https://kubernetes.io/) integration.
            * `cluster_identifier` - (Required) The cluster ID.

        Usage:

        ```python
        import pulumi
        ```

        * `integration_multai_runtime` - (Optional) Describes the [Multai Runtime](https://spotinst.com/) integration.
            * `deployment_id` - (Optional) The deployment id you want to get

        Usage:

        ```python
        import pulumi
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[list] low_priority_sizes: Available Low-Priority sizes.
        :param pulumi.Input[float] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[float] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: The name of the managed identity.
        :param pulumi.Input[list] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] product: Operation system type. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: The Resource Group that the user-assigned managed identity resides in.
        :param pulumi.Input[str] shutdown_script: Shutdown script for the group. Value should be passed as a string encoded at Base64 only.
        :param pulumi.Input[dict] strategy: Describes the deployment strategy.
        :param pulumi.Input[str] user_data: Base64-encoded MIME user data to make available to the instances.

        The **health_check** object supports the following:

          * `auto_healing` (`pulumi.Input[bool]`)
          * `grace_period` (`pulumi.Input[float]`)
          * `health_check_type` (`pulumi.Input[str]`)

        The **images** object supports the following:

          * `customs` (`pulumi.Input[list]`)
            * `imageName` (`pulumi.Input[str]`)
            * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.

          * `marketplaces` (`pulumi.Input[list]`)
            * `offer` (`pulumi.Input[str]`)
            * `publisher` (`pulumi.Input[str]`)
            * `sku` (`pulumi.Input[str]`)

        The **integration_kubernetes** object supports the following:

          * `clusterIdentifier` (`pulumi.Input[str]`)

        The **integration_multai_runtime** object supports the following:

          * `deployment_id` (`pulumi.Input[str]`)

        The **load_balancers** object supports the following:

          * `autoWeight` (`pulumi.Input[bool]`)
          * `balancer_id` (`pulumi.Input[str]`)
          * `target_set_id` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **login** object supports the following:

          * `password` (`pulumi.Input[str]`)
          * `sshPublicKey` (`pulumi.Input[str]`)
          * `userName` (`pulumi.Input[str]`)

        The **managed_service_identities** object supports the following:

          * `name` (`pulumi.Input[str]`) - The name of the managed identity.
          * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.

        The **network** object supports the following:

          * `additionalIpConfigs` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `privateIpVersion` (`pulumi.Input[str]`)

          * `assignPublicIp` (`pulumi.Input[bool]`)
          * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.
          * `subnetName` (`pulumi.Input[str]`)
          * `virtualNetworkName` (`pulumi.Input[str]`)

        The **scaling_down_policies** object supports the following:

          * `actionType` (`pulumi.Input[str]`)
          * `adjustment` (`pulumi.Input[str]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `dimensions` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `value` (`pulumi.Input[str]`)

          * `evaluationPeriods` (`pulumi.Input[float]`)
          * `maxTargetCapacity` (`pulumi.Input[str]`)
          * `maximum` (`pulumi.Input[str]`)
          * `metricName` (`pulumi.Input[str]`)
          * `minTargetCapacity` (`pulumi.Input[str]`)
          * `minimum` (`pulumi.Input[str]`)
          * `namespace` (`pulumi.Input[str]`)
          * `operator` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `policyName` (`pulumi.Input[str]`)
          * `statistic` (`pulumi.Input[str]`)
          * `target` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `unit` (`pulumi.Input[str]`)

        The **scaling_up_policies** object supports the following:

          * `actionType` (`pulumi.Input[str]`)
          * `adjustment` (`pulumi.Input[str]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `dimensions` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `value` (`pulumi.Input[str]`)

          * `evaluationPeriods` (`pulumi.Input[float]`)
          * `maxTargetCapacity` (`pulumi.Input[str]`)
          * `maximum` (`pulumi.Input[str]`)
          * `metricName` (`pulumi.Input[str]`)
          * `minTargetCapacity` (`pulumi.Input[str]`)
          * `minimum` (`pulumi.Input[str]`)
          * `namespace` (`pulumi.Input[str]`)
          * `operator` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `policyName` (`pulumi.Input[str]`)
          * `statistic` (`pulumi.Input[str]`)
          * `target` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `unit` (`pulumi.Input[str]`)

        The **scheduled_tasks** object supports the following:

          * `adjustment` (`pulumi.Input[str]`)
          * `adjustmentPercentage` (`pulumi.Input[str]`)
          * `batchSizePercentage` (`pulumi.Input[str]`)
          * `cronExpression` (`pulumi.Input[str]`)
          * `grace_period` (`pulumi.Input[str]`)
          * `isEnabled` (`pulumi.Input[bool]`)
          * `scaleMaxCapacity` (`pulumi.Input[str]`)
          * `scaleMinCapacity` (`pulumi.Input[str]`)
          * `scaleTargetCapacity` (`pulumi.Input[str]`)
          * `taskType` (`pulumi.Input[str]`)

        The **strategy** object supports the following:

          * `draining_timeout` (`pulumi.Input[float]`) - Time (seconds) to allow the instance to be drained from incoming TCP connections and detached from MLB before terminating it during a scale-down operation.
          * `lowPriorityPercentage` (`pulumi.Input[float]`) - Percentage of Low Priority instances to maintain. Required if `od_count` is not specified.
          * `odCount` (`pulumi.Input[float]`) - Number of On-Demand instances to maintain. Required if low_priority_percentage is not specified.

        The **update_policy** object supports the following:

          * `rollConfig` (`pulumi.Input[dict]`)
            * `batchSizePercentage` (`pulumi.Input[float]`)
            * `grace_period` (`pulumi.Input[float]`)
            * `health_check_type` (`pulumi.Input[str]`)

          * `shouldRoll` (`pulumi.Input[bool]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['custom_data'] = custom_data
            __props__['desired_capacity'] = desired_capacity
            __props__['health_check'] = health_check
            __props__['images'] = images
            __props__['integration_kubernetes'] = integration_kubernetes
            __props__['integration_multai_runtime'] = integration_multai_runtime
            __props__['load_balancers'] = load_balancers
            __props__['login'] = login
            if low_priority_sizes is None:
                raise TypeError("Missing required property 'low_priority_sizes'")
            __props__['low_priority_sizes'] = low_priority_sizes
            __props__['managed_service_identities'] = managed_service_identities
            __props__['max_size'] = max_size
            __props__['min_size'] = min_size
            __props__['name'] = name
            if network is None:
                raise TypeError("Missing required property 'network'")
            __props__['network'] = network
            if od_sizes is None:
                raise TypeError("Missing required property 'od_sizes'")
            __props__['od_sizes'] = od_sizes
            if product is None:
                raise TypeError("Missing required property 'product'")
            __props__['product'] = product
            if region is None:
                raise TypeError("Missing required property 'region'")
            __props__['region'] = region
            if resource_group_name is None:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['scaling_down_policies'] = scaling_down_policies
            __props__['scaling_up_policies'] = scaling_up_policies
            __props__['scheduled_tasks'] = scheduled_tasks
            __props__['shutdown_script'] = shutdown_script
            if strategy is None:
                raise TypeError("Missing required property 'strategy'")
            __props__['strategy'] = strategy
            __props__['update_policy'] = update_policy
            __props__['user_data'] = user_data
        super(Elastigroup, __self__).__init__(
            'spotinst:azure/elastigroup:Elastigroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, custom_data=None, desired_capacity=None, health_check=None, images=None, integration_kubernetes=None, integration_multai_runtime=None, load_balancers=None, login=None, low_priority_sizes=None, managed_service_identities=None, max_size=None, min_size=None, name=None, network=None, od_sizes=None, product=None, region=None, resource_group_name=None, scaling_down_policies=None, scaling_up_policies=None, scheduled_tasks=None, shutdown_script=None, strategy=None, update_policy=None, user_data=None):
        """
        Get an existing Elastigroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[list] low_priority_sizes: Available Low-Priority sizes.
        :param pulumi.Input[float] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[float] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: The name of the managed identity.
        :param pulumi.Input[list] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] product: Operation system type. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: The Resource Group that the user-assigned managed identity resides in.
        :param pulumi.Input[str] shutdown_script: Shutdown script for the group. Value should be passed as a string encoded at Base64 only.
        :param pulumi.Input[dict] strategy: Describes the deployment strategy.
        :param pulumi.Input[str] user_data: Base64-encoded MIME user data to make available to the instances.

        The **health_check** object supports the following:

          * `auto_healing` (`pulumi.Input[bool]`)
          * `grace_period` (`pulumi.Input[float]`)
          * `health_check_type` (`pulumi.Input[str]`)

        The **images** object supports the following:

          * `customs` (`pulumi.Input[list]`)
            * `imageName` (`pulumi.Input[str]`)
            * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.

          * `marketplaces` (`pulumi.Input[list]`)
            * `offer` (`pulumi.Input[str]`)
            * `publisher` (`pulumi.Input[str]`)
            * `sku` (`pulumi.Input[str]`)

        The **integration_kubernetes** object supports the following:

          * `clusterIdentifier` (`pulumi.Input[str]`)

        The **integration_multai_runtime** object supports the following:

          * `deployment_id` (`pulumi.Input[str]`)

        The **load_balancers** object supports the following:

          * `autoWeight` (`pulumi.Input[bool]`)
          * `balancer_id` (`pulumi.Input[str]`)
          * `target_set_id` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **login** object supports the following:

          * `password` (`pulumi.Input[str]`)
          * `sshPublicKey` (`pulumi.Input[str]`)
          * `userName` (`pulumi.Input[str]`)

        The **managed_service_identities** object supports the following:

          * `name` (`pulumi.Input[str]`) - The name of the managed identity.
          * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.

        The **network** object supports the following:

          * `additionalIpConfigs` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `privateIpVersion` (`pulumi.Input[str]`)

          * `assignPublicIp` (`pulumi.Input[bool]`)
          * `resource_group_name` (`pulumi.Input[str]`) - The Resource Group that the user-assigned managed identity resides in.
          * `subnetName` (`pulumi.Input[str]`)
          * `virtualNetworkName` (`pulumi.Input[str]`)

        The **scaling_down_policies** object supports the following:

          * `actionType` (`pulumi.Input[str]`)
          * `adjustment` (`pulumi.Input[str]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `dimensions` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `value` (`pulumi.Input[str]`)

          * `evaluationPeriods` (`pulumi.Input[float]`)
          * `maxTargetCapacity` (`pulumi.Input[str]`)
          * `maximum` (`pulumi.Input[str]`)
          * `metricName` (`pulumi.Input[str]`)
          * `minTargetCapacity` (`pulumi.Input[str]`)
          * `minimum` (`pulumi.Input[str]`)
          * `namespace` (`pulumi.Input[str]`)
          * `operator` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `policyName` (`pulumi.Input[str]`)
          * `statistic` (`pulumi.Input[str]`)
          * `target` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `unit` (`pulumi.Input[str]`)

        The **scaling_up_policies** object supports the following:

          * `actionType` (`pulumi.Input[str]`)
          * `adjustment` (`pulumi.Input[str]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `dimensions` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`) - The name of the managed identity.
            * `value` (`pulumi.Input[str]`)

          * `evaluationPeriods` (`pulumi.Input[float]`)
          * `maxTargetCapacity` (`pulumi.Input[str]`)
          * `maximum` (`pulumi.Input[str]`)
          * `metricName` (`pulumi.Input[str]`)
          * `minTargetCapacity` (`pulumi.Input[str]`)
          * `minimum` (`pulumi.Input[str]`)
          * `namespace` (`pulumi.Input[str]`)
          * `operator` (`pulumi.Input[str]`)
          * `period` (`pulumi.Input[float]`)
          * `policyName` (`pulumi.Input[str]`)
          * `statistic` (`pulumi.Input[str]`)
          * `target` (`pulumi.Input[str]`)
          * `threshold` (`pulumi.Input[float]`)
          * `unit` (`pulumi.Input[str]`)

        The **scheduled_tasks** object supports the following:

          * `adjustment` (`pulumi.Input[str]`)
          * `adjustmentPercentage` (`pulumi.Input[str]`)
          * `batchSizePercentage` (`pulumi.Input[str]`)
          * `cronExpression` (`pulumi.Input[str]`)
          * `grace_period` (`pulumi.Input[str]`)
          * `isEnabled` (`pulumi.Input[bool]`)
          * `scaleMaxCapacity` (`pulumi.Input[str]`)
          * `scaleMinCapacity` (`pulumi.Input[str]`)
          * `scaleTargetCapacity` (`pulumi.Input[str]`)
          * `taskType` (`pulumi.Input[str]`)

        The **strategy** object supports the following:

          * `draining_timeout` (`pulumi.Input[float]`) - Time (seconds) to allow the instance to be drained from incoming TCP connections and detached from MLB before terminating it during a scale-down operation.
          * `lowPriorityPercentage` (`pulumi.Input[float]`) - Percentage of Low Priority instances to maintain. Required if `od_count` is not specified.
          * `odCount` (`pulumi.Input[float]`) - Number of On-Demand instances to maintain. Required if low_priority_percentage is not specified.

        The **update_policy** object supports the following:

          * `rollConfig` (`pulumi.Input[dict]`)
            * `batchSizePercentage` (`pulumi.Input[float]`)
            * `grace_period` (`pulumi.Input[float]`)
            * `health_check_type` (`pulumi.Input[str]`)

          * `shouldRoll` (`pulumi.Input[bool]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["custom_data"] = custom_data
        __props__["desired_capacity"] = desired_capacity
        __props__["health_check"] = health_check
        __props__["images"] = images
        __props__["integration_kubernetes"] = integration_kubernetes
        __props__["integration_multai_runtime"] = integration_multai_runtime
        __props__["load_balancers"] = load_balancers
        __props__["login"] = login
        __props__["low_priority_sizes"] = low_priority_sizes
        __props__["managed_service_identities"] = managed_service_identities
        __props__["max_size"] = max_size
        __props__["min_size"] = min_size
        __props__["name"] = name
        __props__["network"] = network
        __props__["od_sizes"] = od_sizes
        __props__["product"] = product
        __props__["region"] = region
        __props__["resource_group_name"] = resource_group_name
        __props__["scaling_down_policies"] = scaling_down_policies
        __props__["scaling_up_policies"] = scaling_up_policies
        __props__["scheduled_tasks"] = scheduled_tasks
        __props__["shutdown_script"] = shutdown_script
        __props__["strategy"] = strategy
        __props__["update_policy"] = update_policy
        __props__["user_data"] = user_data
        return Elastigroup(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

