# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'StrategyCanaryArgs',
    'StrategyCanaryBackgroundVerificationArgs',
    'StrategyCanaryStepArgs',
    'StrategyCanaryStepPauseArgs',
    'StrategyCanaryStepSetCanaryScaleArgs',
    'StrategyCanaryStepSetHeaderRouteArgs',
    'StrategyCanaryStepSetHeaderRouteMatchArgs',
    'StrategyCanaryStepSetHeaderRouteMatchHeaderValueArgs',
    'StrategyCanaryStepVerificationArgs',
    'StrategyRollingArgs',
    'StrategyRollingStepArgs',
    'StrategyRollingStepPauseArgs',
    'StrategyRollingStepVerificationArgs',
    'VerificationProviderCloudWatchArgs',
    'VerificationProviderDatadogArgs',
    'VerificationProviderJenkinsArgs',
    'VerificationProviderNewRelicArgs',
    'VerificationProviderPrometheusArgs',
]

@pulumi.input_type
class StrategyCanaryArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepArgs']]],
                 background_verification: Optional[pulumi.Input['StrategyCanaryBackgroundVerificationArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepArgs']]] steps: A set of separate conditions of rollout processing.
        :param pulumi.Input['StrategyCanaryBackgroundVerificationArgs'] background_verification: A list of background verifications.
        """
        pulumi.set(__self__, "steps", steps)
        if background_verification is not None:
            pulumi.set(__self__, "background_verification", background_verification)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepArgs']]]:
        """
        A set of separate conditions of rollout processing.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepArgs']]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter(name="backgroundVerification")
    def background_verification(self) -> Optional[pulumi.Input['StrategyCanaryBackgroundVerificationArgs']]:
        """
        A list of background verifications.
        """
        return pulumi.get(self, "background_verification")

    @background_verification.setter
    def background_verification(self, value: Optional[pulumi.Input['StrategyCanaryBackgroundVerificationArgs']]):
        pulumi.set(self, "background_verification", value)


@pulumi.input_type
class StrategyCanaryBackgroundVerificationArgs:
    def __init__(__self__, *,
                 template_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "template_names")

    @template_names.setter
    def template_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "template_names", value)


@pulumi.input_type
class StrategyCanaryStepArgs:
    def __init__(__self__, *,
                 pause: Optional[pulumi.Input['StrategyCanaryStepPauseArgs']] = None,
                 set_canary_scale: Optional[pulumi.Input['StrategyCanaryStepSetCanaryScaleArgs']] = None,
                 set_header_route: Optional[pulumi.Input['StrategyCanaryStepSetHeaderRouteArgs']] = None,
                 set_weight: Optional[pulumi.Input[int]] = None,
                 step_name: Optional[pulumi.Input[str]] = None,
                 verification: Optional[pulumi.Input['StrategyCanaryStepVerificationArgs']] = None):
        if pause is not None:
            pulumi.set(__self__, "pause", pause)
        if set_canary_scale is not None:
            pulumi.set(__self__, "set_canary_scale", set_canary_scale)
        if set_header_route is not None:
            pulumi.set(__self__, "set_header_route", set_header_route)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if verification is not None:
            pulumi.set(__self__, "verification", verification)

    @property
    @pulumi.getter
    def pause(self) -> Optional[pulumi.Input['StrategyCanaryStepPauseArgs']]:
        return pulumi.get(self, "pause")

    @pause.setter
    def pause(self, value: Optional[pulumi.Input['StrategyCanaryStepPauseArgs']]):
        pulumi.set(self, "pause", value)

    @property
    @pulumi.getter(name="setCanaryScale")
    def set_canary_scale(self) -> Optional[pulumi.Input['StrategyCanaryStepSetCanaryScaleArgs']]:
        return pulumi.get(self, "set_canary_scale")

    @set_canary_scale.setter
    def set_canary_scale(self, value: Optional[pulumi.Input['StrategyCanaryStepSetCanaryScaleArgs']]):
        pulumi.set(self, "set_canary_scale", value)

    @property
    @pulumi.getter(name="setHeaderRoute")
    def set_header_route(self) -> Optional[pulumi.Input['StrategyCanaryStepSetHeaderRouteArgs']]:
        return pulumi.get(self, "set_header_route")

    @set_header_route.setter
    def set_header_route(self, value: Optional[pulumi.Input['StrategyCanaryStepSetHeaderRouteArgs']]):
        pulumi.set(self, "set_header_route", value)

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_weight")

    @set_weight.setter
    def set_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_weight", value)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "step_name")

    @step_name.setter
    def step_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_name", value)

    @property
    @pulumi.getter
    def verification(self) -> Optional[pulumi.Input['StrategyCanaryStepVerificationArgs']]:
        return pulumi.get(self, "verification")

    @verification.setter
    def verification(self, value: Optional[pulumi.Input['StrategyCanaryStepVerificationArgs']]):
        pulumi.set(self, "verification", value)


@pulumi.input_type
class StrategyCanaryStepPauseArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class StrategyCanaryStepSetCanaryScaleArgs:
    def __init__(__self__, *,
                 match_traffic_weight: Optional[pulumi.Input[bool]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        if match_traffic_weight is not None:
            pulumi.set(__self__, "match_traffic_weight", match_traffic_weight)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="matchTrafficWeight")
    def match_traffic_weight(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_traffic_weight")

    @match_traffic_weight.setter
    def match_traffic_weight(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_traffic_weight", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class StrategyCanaryStepSetHeaderRouteArgs:
    def __init__(__self__, *,
                 header_route_name: pulumi.Input[str],
                 matches: pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchArgs']]]):
        pulumi.set(__self__, "header_route_name", header_route_name)
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter(name="headerRouteName")
    def header_route_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_route_name")

    @header_route_name.setter
    def header_route_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_route_name", value)

    @property
    @pulumi.getter
    def matches(self) -> pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchArgs']]]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: pulumi.Input[Sequence[pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchArgs']]]):
        pulumi.set(self, "matches", value)


@pulumi.input_type
class StrategyCanaryStepSetHeaderRouteMatchArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchHeaderValueArgs']):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchHeaderValueArgs']:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input['StrategyCanaryStepSetHeaderRouteMatchHeaderValueArgs']):
        pulumi.set(self, "header_value", value)


@pulumi.input_type
class StrategyCanaryStepSetHeaderRouteMatchHeaderValueArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class StrategyCanaryStepVerificationArgs:
    def __init__(__self__, *,
                 template_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "template_names")

    @template_names.setter
    def template_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "template_names", value)


@pulumi.input_type
class StrategyRollingArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[Sequence[pulumi.Input['StrategyRollingStepArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StrategyRollingStepArgs']]] steps: A set of separate conditions of rollout processing.
        """
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['StrategyRollingStepArgs']]]:
        """
        A set of separate conditions of rollout processing.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['StrategyRollingStepArgs']]]):
        pulumi.set(self, "steps", value)


@pulumi.input_type
class StrategyRollingStepArgs:
    def __init__(__self__, *,
                 pause: Optional[pulumi.Input['StrategyRollingStepPauseArgs']] = None,
                 steps_name: Optional[pulumi.Input[str]] = None,
                 verification: Optional[pulumi.Input['StrategyRollingStepVerificationArgs']] = None):
        if pause is not None:
            pulumi.set(__self__, "pause", pause)
        if steps_name is not None:
            pulumi.set(__self__, "steps_name", steps_name)
        if verification is not None:
            pulumi.set(__self__, "verification", verification)

    @property
    @pulumi.getter
    def pause(self) -> Optional[pulumi.Input['StrategyRollingStepPauseArgs']]:
        return pulumi.get(self, "pause")

    @pause.setter
    def pause(self, value: Optional[pulumi.Input['StrategyRollingStepPauseArgs']]):
        pulumi.set(self, "pause", value)

    @property
    @pulumi.getter(name="stepsName")
    def steps_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "steps_name")

    @steps_name.setter
    def steps_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "steps_name", value)

    @property
    @pulumi.getter
    def verification(self) -> Optional[pulumi.Input['StrategyRollingStepVerificationArgs']]:
        return pulumi.get(self, "verification")

    @verification.setter
    def verification(self, value: Optional[pulumi.Input['StrategyRollingStepVerificationArgs']]):
        pulumi.set(self, "verification", value)


@pulumi.input_type
class StrategyRollingStepPauseArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class StrategyRollingStepVerificationArgs:
    def __init__(__self__, *,
                 template_names: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "template_names")

    @template_names.setter
    def template_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "template_names", value)


@pulumi.input_type
class VerificationProviderCloudWatchArgs:
    def __init__(__self__, *,
                 iam_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] iam_arn: Set label key.
        """
        pulumi.set(__self__, "iam_arn", iam_arn)

    @property
    @pulumi.getter(name="iamArn")
    def iam_arn(self) -> pulumi.Input[str]:
        """
        Set label key.
        """
        return pulumi.get(self, "iam_arn")

    @iam_arn.setter
    def iam_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iam_arn", value)


@pulumi.input_type
class VerificationProviderDatadogArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 api_key: pulumi.Input[str],
                 app_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] address: DataDog API URL.
        :param pulumi.Input[str] api_key: API key required by the Datadog Agent to submit metrics and events to Datadog.
        :param pulumi.Input[str] app_key: API key that gives users access to Datadog’s programmatic API.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "app_key", app_key)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        DataDog API URL.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API key required by the Datadog Agent to submit metrics and events to Datadog.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Input[str]:
        """
        API key that gives users access to Datadog’s programmatic API.
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key", value)


@pulumi.input_type
class VerificationProviderJenkinsArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 base_url: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_token: The Jenkins server’s access apiToken.
        :param pulumi.Input[str] base_url: The address of the Jenkins server within the cluster.
        :param pulumi.Input[str] username: The Jenkins server’s access username.
        """
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        The Jenkins server’s access apiToken.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Input[str]:
        """
        The address of the Jenkins server within the cluster.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The Jenkins server’s access username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class VerificationProviderNewRelicArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 personal_api_key: pulumi.Input[str],
                 base_url_nerd_graph: Optional[pulumi.Input[str]] = None,
                 base_url_rest: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] personal_api_key: The NewRelic user key
        :param pulumi.Input[str] base_url_nerd_graph: The base URL for NerdGraph for a proxy.
        :param pulumi.Input[str] base_url_rest: The base URL of the New Relic REST API for a proxy.
        :param pulumi.Input[str] region: A region which the account is attached to. Default is "us".
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "personal_api_key", personal_api_key)
        if base_url_nerd_graph is not None:
            pulumi.set(__self__, "base_url_nerd_graph", base_url_nerd_graph)
        if base_url_rest is not None:
            pulumi.set(__self__, "base_url_rest", base_url_rest)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="personalApiKey")
    def personal_api_key(self) -> pulumi.Input[str]:
        """
        The NewRelic user key
        """
        return pulumi.get(self, "personal_api_key")

    @personal_api_key.setter
    def personal_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "personal_api_key", value)

    @property
    @pulumi.getter(name="baseUrlNerdGraph")
    def base_url_nerd_graph(self) -> Optional[pulumi.Input[str]]:
        """
        The base URL for NerdGraph for a proxy.
        """
        return pulumi.get(self, "base_url_nerd_graph")

    @base_url_nerd_graph.setter
    def base_url_nerd_graph(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url_nerd_graph", value)

    @property
    @pulumi.getter(name="baseUrlRest")
    def base_url_rest(self) -> Optional[pulumi.Input[str]]:
        """
        The base URL of the New Relic REST API for a proxy.
        """
        return pulumi.get(self, "base_url_rest")

    @base_url_rest.setter
    def base_url_rest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url_rest", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        A region which the account is attached to. Default is "us".
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class VerificationProviderPrometheusArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str]):
        """
        :param pulumi.Input[str] address: The address which the Prometheus server available on.
        """
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address which the Prometheus server available on.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)


