# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'StrategyCanary',
    'StrategyCanaryBackgroundVerification',
    'StrategyCanaryStep',
    'StrategyCanaryStepPause',
    'StrategyCanaryStepSetCanaryScale',
    'StrategyCanaryStepSetHeaderRoute',
    'StrategyCanaryStepSetHeaderRouteMatch',
    'StrategyCanaryStepSetHeaderRouteMatchHeaderValue',
    'StrategyCanaryStepVerification',
    'StrategyRolling',
    'StrategyRollingStep',
    'StrategyRollingStepPause',
    'StrategyRollingStepVerification',
    'VerificationProviderCloudWatch',
    'VerificationProviderDatadog',
    'VerificationProviderJenkins',
    'VerificationProviderNewRelic',
    'VerificationProviderPrometheus',
]

@pulumi.output_type
class StrategyCanary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundVerification":
            suggest = "background_verification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 steps: Sequence['outputs.StrategyCanaryStep'],
                 background_verification: Optional['outputs.StrategyCanaryBackgroundVerification'] = None):
        """
        :param Sequence['StrategyCanaryStepArgs'] steps: A set of separate conditions of rollout processing.
        :param 'StrategyCanaryBackgroundVerificationArgs' background_verification: A list of background verifications.
        """
        pulumi.set(__self__, "steps", steps)
        if background_verification is not None:
            pulumi.set(__self__, "background_verification", background_verification)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.StrategyCanaryStep']:
        """
        A set of separate conditions of rollout processing.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="backgroundVerification")
    def background_verification(self) -> Optional['outputs.StrategyCanaryBackgroundVerification']:
        """
        A list of background verifications.
        """
        return pulumi.get(self, "background_verification")


@pulumi.output_type
class StrategyCanaryBackgroundVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateNames":
            suggest = "template_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryBackgroundVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryBackgroundVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryBackgroundVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_names: Sequence[str]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> Sequence[str]:
        return pulumi.get(self, "template_names")


@pulumi.output_type
class StrategyCanaryStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "setCanaryScale":
            suggest = "set_canary_scale"
        elif key == "setHeaderRoute":
            suggest = "set_header_route"
        elif key == "setWeight":
            suggest = "set_weight"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pause: Optional['outputs.StrategyCanaryStepPause'] = None,
                 set_canary_scale: Optional['outputs.StrategyCanaryStepSetCanaryScale'] = None,
                 set_header_route: Optional['outputs.StrategyCanaryStepSetHeaderRoute'] = None,
                 set_weight: Optional[int] = None,
                 step_name: Optional[str] = None,
                 verification: Optional['outputs.StrategyCanaryStepVerification'] = None):
        if pause is not None:
            pulumi.set(__self__, "pause", pause)
        if set_canary_scale is not None:
            pulumi.set(__self__, "set_canary_scale", set_canary_scale)
        if set_header_route is not None:
            pulumi.set(__self__, "set_header_route", set_header_route)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if verification is not None:
            pulumi.set(__self__, "verification", verification)

    @property
    @pulumi.getter
    def pause(self) -> Optional['outputs.StrategyCanaryStepPause']:
        return pulumi.get(self, "pause")

    @property
    @pulumi.getter(name="setCanaryScale")
    def set_canary_scale(self) -> Optional['outputs.StrategyCanaryStepSetCanaryScale']:
        return pulumi.get(self, "set_canary_scale")

    @property
    @pulumi.getter(name="setHeaderRoute")
    def set_header_route(self) -> Optional['outputs.StrategyCanaryStepSetHeaderRoute']:
        return pulumi.get(self, "set_header_route")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[int]:
        return pulumi.get(self, "set_weight")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter
    def verification(self) -> Optional['outputs.StrategyCanaryStepVerification']:
        return pulumi.get(self, "verification")


@pulumi.output_type
class StrategyCanaryStepPause(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")


@pulumi.output_type
class StrategyCanaryStepSetCanaryScale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchTrafficWeight":
            suggest = "match_traffic_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryStepSetCanaryScale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryStepSetCanaryScale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryStepSetCanaryScale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_traffic_weight: Optional[bool] = None,
                 replicas: Optional[int] = None,
                 weight: Optional[int] = None):
        if match_traffic_weight is not None:
            pulumi.set(__self__, "match_traffic_weight", match_traffic_weight)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="matchTrafficWeight")
    def match_traffic_weight(self) -> Optional[bool]:
        return pulumi.get(self, "match_traffic_weight")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class StrategyCanaryStepSetHeaderRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerRouteName":
            suggest = "header_route_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryStepSetHeaderRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryStepSetHeaderRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryStepSetHeaderRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_route_name: str,
                 matches: Sequence['outputs.StrategyCanaryStepSetHeaderRouteMatch']):
        pulumi.set(__self__, "header_route_name", header_route_name)
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter(name="headerRouteName")
    def header_route_name(self) -> str:
        return pulumi.get(self, "header_route_name")

    @property
    @pulumi.getter
    def matches(self) -> Sequence['outputs.StrategyCanaryStepSetHeaderRouteMatch']:
        return pulumi.get(self, "matches")


@pulumi.output_type
class StrategyCanaryStepSetHeaderRouteMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryStepSetHeaderRouteMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryStepSetHeaderRouteMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryStepSetHeaderRouteMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: str,
                 header_value: 'outputs.StrategyCanaryStepSetHeaderRouteMatchHeaderValue'):
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> 'outputs.StrategyCanaryStepSetHeaderRouteMatchHeaderValue':
        return pulumi.get(self, "header_value")


@pulumi.output_type
class StrategyCanaryStepSetHeaderRouteMatchHeaderValue(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class StrategyCanaryStepVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateNames":
            suggest = "template_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyCanaryStepVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyCanaryStepVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyCanaryStepVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_names: Sequence[str]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> Sequence[str]:
        return pulumi.get(self, "template_names")


@pulumi.output_type
class StrategyRolling(dict):
    def __init__(__self__, *,
                 steps: Sequence['outputs.StrategyRollingStep']):
        """
        :param Sequence['StrategyRollingStepArgs'] steps: A set of separate conditions of rollout processing.
        """
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.StrategyRollingStep']:
        """
        A set of separate conditions of rollout processing.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class StrategyRollingStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepsName":
            suggest = "steps_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyRollingStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyRollingStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyRollingStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pause: Optional['outputs.StrategyRollingStepPause'] = None,
                 steps_name: Optional[str] = None,
                 verification: Optional['outputs.StrategyRollingStepVerification'] = None):
        if pause is not None:
            pulumi.set(__self__, "pause", pause)
        if steps_name is not None:
            pulumi.set(__self__, "steps_name", steps_name)
        if verification is not None:
            pulumi.set(__self__, "verification", verification)

    @property
    @pulumi.getter
    def pause(self) -> Optional['outputs.StrategyRollingStepPause']:
        return pulumi.get(self, "pause")

    @property
    @pulumi.getter(name="stepsName")
    def steps_name(self) -> Optional[str]:
        return pulumi.get(self, "steps_name")

    @property
    @pulumi.getter
    def verification(self) -> Optional['outputs.StrategyRollingStepVerification']:
        return pulumi.get(self, "verification")


@pulumi.output_type
class StrategyRollingStepPause(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")


@pulumi.output_type
class StrategyRollingStepVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateNames":
            suggest = "template_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StrategyRollingStepVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StrategyRollingStepVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StrategyRollingStepVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_names: Sequence[str]):
        pulumi.set(__self__, "template_names", template_names)

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> Sequence[str]:
        return pulumi.get(self, "template_names")


@pulumi.output_type
class VerificationProviderCloudWatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iamArn":
            suggest = "iam_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VerificationProviderCloudWatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VerificationProviderCloudWatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VerificationProviderCloudWatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iam_arn: str):
        """
        :param str iam_arn: Set label key.
        """
        pulumi.set(__self__, "iam_arn", iam_arn)

    @property
    @pulumi.getter(name="iamArn")
    def iam_arn(self) -> str:
        """
        Set label key.
        """
        return pulumi.get(self, "iam_arn")


@pulumi.output_type
class VerificationProviderDatadog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "appKey":
            suggest = "app_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VerificationProviderDatadog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VerificationProviderDatadog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VerificationProviderDatadog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 api_key: str,
                 app_key: str):
        """
        :param str address: DataDog API URL.
        :param str api_key: API key required by the Datadog Agent to submit metrics and events to Datadog.
        :param str app_key: API key that gives users access to Datadog’s programmatic API.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "app_key", app_key)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        DataDog API URL.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API key required by the Datadog Agent to submit metrics and events to Datadog.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> str:
        """
        API key that gives users access to Datadog’s programmatic API.
        """
        return pulumi.get(self, "app_key")


@pulumi.output_type
class VerificationProviderJenkins(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiToken":
            suggest = "api_token"
        elif key == "baseUrl":
            suggest = "base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VerificationProviderJenkins. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VerificationProviderJenkins.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VerificationProviderJenkins.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_token: str,
                 base_url: str,
                 username: str):
        """
        :param str api_token: The Jenkins server’s access apiToken.
        :param str base_url: The address of the Jenkins server within the cluster.
        :param str username: The Jenkins server’s access username.
        """
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> str:
        """
        The Jenkins server’s access apiToken.
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        The address of the Jenkins server within the cluster.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The Jenkins server’s access username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class VerificationProviderNewRelic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "personalApiKey":
            suggest = "personal_api_key"
        elif key == "baseUrlNerdGraph":
            suggest = "base_url_nerd_graph"
        elif key == "baseUrlRest":
            suggest = "base_url_rest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VerificationProviderNewRelic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VerificationProviderNewRelic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VerificationProviderNewRelic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 personal_api_key: str,
                 base_url_nerd_graph: Optional[str] = None,
                 base_url_rest: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str personal_api_key: The NewRelic user key
        :param str base_url_nerd_graph: The base URL for NerdGraph for a proxy.
        :param str base_url_rest: The base URL of the New Relic REST API for a proxy.
        :param str region: A region which the account is attached to. Default is "us".
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "personal_api_key", personal_api_key)
        if base_url_nerd_graph is not None:
            pulumi.set(__self__, "base_url_nerd_graph", base_url_nerd_graph)
        if base_url_rest is not None:
            pulumi.set(__self__, "base_url_rest", base_url_rest)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="personalApiKey")
    def personal_api_key(self) -> str:
        """
        The NewRelic user key
        """
        return pulumi.get(self, "personal_api_key")

    @property
    @pulumi.getter(name="baseUrlNerdGraph")
    def base_url_nerd_graph(self) -> Optional[str]:
        """
        The base URL for NerdGraph for a proxy.
        """
        return pulumi.get(self, "base_url_nerd_graph")

    @property
    @pulumi.getter(name="baseUrlRest")
    def base_url_rest(self) -> Optional[str]:
        """
        The base URL of the New Relic REST API for a proxy.
        """
        return pulumi.get(self, "base_url_rest")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        A region which the account is attached to. Default is "us".
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class VerificationProviderPrometheus(dict):
    def __init__(__self__, *,
                 address: str):
        """
        :param str address: The address which the Prometheus server available on.
        """
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address which the Prometheus server available on.
        """
        return pulumi.get(self, "address")


