# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Suspension']


class Suspension(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 suspensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuspensionSuspensionArgs']]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Suspend AWS Elastigroup processes. This resource provide the capavility of
        suspending elastigroup processes using this provider.

        For supported processes please visit: [Suspend Processes API reference](https://help.spot.io/spotinst-api/elastigroup/amazon-web-services/suspend-processes/)
        ## Example Usage

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        # Create a suspension for Elastigroup
        resource_name = spotinst.aws.Suspension("resourceName",
            group_id="sig-12345678",
            suspensions=[
                spotinst.aws.SuspensionSuspensionArgs(
                    name="OUT_OF_STRATEGY",
                ),
                spotinst.aws.SuspensionSuspensionArgs(
                    name="REVERT_PREFERRED",
                ),
                spotinst.aws.SuspensionSuspensionArgs(
                    name="PREVENTIVE_REPLACEMENT",
                ),
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_id: Elastigroup ID to apply the suspensions on.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuspensionSuspensionArgs']]]] suspensions: block of single process to suspend.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__['group_id'] = group_id
            if suspensions is None and not opts.urn:
                raise TypeError("Missing required property 'suspensions'")
            __props__['suspensions'] = suspensions
        super(Suspension, __self__).__init__(
            'spotinst:aws/suspension:Suspension',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            suspensions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuspensionSuspensionArgs']]]]] = None) -> 'Suspension':
        """
        Get an existing Suspension resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_id: Elastigroup ID to apply the suspensions on.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuspensionSuspensionArgs']]]] suspensions: block of single process to suspend.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["group_id"] = group_id
        __props__["suspensions"] = suspensions
        return Suspension(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        Elastigroup ID to apply the suspensions on.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def suspensions(self) -> pulumi.Output[Sequence['outputs.SuspensionSuspension']]:
        """
        block of single process to suspend.
        """
        return pulumi.get(self, "suspensions")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

