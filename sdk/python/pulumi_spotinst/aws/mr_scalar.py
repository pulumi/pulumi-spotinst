# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['MrScalar']


class MrScalar(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_info: Optional[pulumi.Input[str]] = None,
                 additional_primary_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_replica_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarApplicationArgs']]]]] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bootstrap_actions_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarBootstrapActionsFileArgs']]]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 configurations_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarConfigurationsFileArgs']]]]] = None,
                 core_desired_capacity: Optional[pulumi.Input[int]] = None,
                 core_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreEbsBlockDeviceArgs']]]]] = None,
                 core_ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 core_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 core_lifecycle: Optional[pulumi.Input[str]] = None,
                 core_max_size: Optional[pulumi.Input[int]] = None,
                 core_min_size: Optional[pulumi.Input[int]] = None,
                 core_scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreScalingDownPolicyArgs']]]]] = None,
                 core_scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreScalingUpPolicyArgs']]]]] = None,
                 core_unit: Optional[pulumi.Input[str]] = None,
                 custom_ami_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ebs_root_volume_size: Optional[pulumi.Input[int]] = None,
                 ec2_key_name: Optional[pulumi.Input[str]] = None,
                 expose_cluster_id: Optional[pulumi.Input[bool]] = None,
                 instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarInstanceWeightArgs']]]]] = None,
                 job_flow_role: Optional[pulumi.Input[str]] = None,
                 keep_job_flow_alive: Optional[pulumi.Input[bool]] = None,
                 log_uri: Optional[pulumi.Input[str]] = None,
                 managed_primary_security_group: Optional[pulumi.Input[str]] = None,
                 managed_replica_security_group: Optional[pulumi.Input[str]] = None,
                 master_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarMasterEbsBlockDeviceArgs']]]]] = None,
                 master_ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 master_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_lifecycle: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provisioning_timeout: Optional[pulumi.Input[pulumi.InputType['MrScalarProvisioningTimeoutArgs']]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 release_label: Optional[pulumi.Input[str]] = None,
                 repo_upgrade_on_boot: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 scheduled_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarScheduledTaskArgs']]]]] = None,
                 security_config: Optional[pulumi.Input[str]] = None,
                 service_access_security_group: Optional[pulumi.Input[str]] = None,
                 service_role: Optional[pulumi.Input[str]] = None,
                 steps_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarStepsFileArgs']]]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTagArgs']]]]] = None,
                 task_desired_capacity: Optional[pulumi.Input[int]] = None,
                 task_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskEbsBlockDeviceArgs']]]]] = None,
                 task_ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 task_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_lifecycle: Optional[pulumi.Input[str]] = None,
                 task_max_size: Optional[pulumi.Input[int]] = None,
                 task_min_size: Optional[pulumi.Input[int]] = None,
                 task_scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskScalingDownPolicyArgs']]]]] = None,
                 task_scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskScalingUpPolicyArgs']]]]] = None,
                 task_unit: Optional[pulumi.Input[str]] = None,
                 termination_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTerminationPolicyArgs']]]]] = None,
                 termination_protected: Optional[pulumi.Input[bool]] = None,
                 visible_to_all_users: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Spotinst AWS MrScaler resource.

        ## Provisioning Timeout (Clone, New strategies)

        * `timeout` - (Optional) The amount of time (minutes) after which the cluster is automatically terminated if it's still in provisioning status. Minimum: '15'.
        * `timeout_action` - (Optional) The action to take if the timeout is exceeded. Valid values: `terminate`, `terminateAndRetry`.

        <a id="cluster-config"></a>
        ## Cluster Configuration (New strategy only)

        * `log_uri` - (Optional) The path to the Amazon S3 location where logs for this cluster are stored.
        * `additional_info` - (Optional) This is meta information about third-party applications that third-party vendors use for testing purposes.
        * `security_config` - (Optional) The name of the security configuration applied to the cluster.
        * `service_role` - (Optional) The IAM role that will be assumed by the Amazon EMR service to access AWS resources on your behalf.
        * `job_flow_role` - (Optional) The IAM role that was specified when the job flow was launched. The EC2 instances of the job flow assume this role.
        * `termination_protected` - (Optional) Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        * `keep_job_flow_alive` - (Optional) Specifies whether the cluster should remain available after completing all steps.
        * `retries` - (Optional) Specifies the maximum number of times a capacity provisioning should be retried if the provisioning timeout is exceeded.

        <a id="task-group"></a>
        ## Task Group (Wrap, Clone, and New strategies)

        * `task_instance_types` - (Required) The MrScaler instance types for the task nodes.
        * `task_target` - (Required) amount of instances in task group.
        * `task_maximum` - (Optional) maximal amount of instances in task group.
        * `task_minimum` - (Optional) The minimal amount of instances in task group.
        * `task_unit` - (Optional, Default: `instance`) Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
        * `task_lifecycle` - (Required) The MrScaler lifecycle for instances in task group. Allowed values are 'SPOT' and 'ON_DEMAND'.
        * `task_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
        * `task_ebs_block_device` - (Required) This determines the ebs configuration for your task group instances. Only a single block is allowed.
            * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the task group.
            * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
            * `size_in_gb` - (Required) Size of the volume, in GBs.
            * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.

        <a id="core-group"></a>
        ## Core Group (Clone, New strategies)

        * `core_instance_types` - (Required) The MrScaler instance types for the core nodes.
        * `core_target` - (Required) amount of instances in core group.
        * `core_maximum` - (Optional) maximal amount of instances in core group.
        * `core_minimum` - (Optional) The minimal amount of instances in core group.
        * `core_unit` - (Optional, Default: `instance`) Unit of task group for target, min and max. The unit could be `instance` or `weight`. instance - amount of instances. weight - amount of vCPU.
        * `core_lifecycle` - (Required) The MrScaler lifecycle for instances in core group. Allowed values are 'SPOT' and 'ON_DEMAND'.
        * `core_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
        * `core_ebs_block_device` - (Required) This determines the ebs configuration for your core group instances. Only a single block is allowed.
            * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the core group.
            * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
            * `size_in_gb` - (Required) Size of the volume, in GBs.
            * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.

        <a id="master-group"></a>
        ## Master Group (Clone, New strategies)

        * `master_instance_types` - (Required) The MrScaler instance types for the master nodes.
        * `master_lifecycle` - (Required) The MrScaler lifecycle for instances in master group. Allowed values are 'SPOT' and 'ON_DEMAND'.
        * `master_ebs_optimized` - (Optional) EBS Optimization setting for instances in group.
        * `master_ebs_block_device` - (Required) This determines the ebs configuration for your master group instances. Only a single block is allowed.
            * `volumes_per_instance` - (Optional; Default 1) Amount of volumes per instance in the master group.
            * `volume_type` - (Required) volume type. Allowed values are 'gp2', 'io1' and others.
            * `size_in_gb` - (Required) Size of the volume, in GBs.
            * `iops` - (Optional) IOPS for the volume. Required in some volume types, such as io1.

        <a id="tags"></a>
        ## Tags (Clone, New strategies)

        * `tags` - (Optional) A list of tags to assign to the resource. You may define multiple tags.
            * `key` - (Required) Tag key.
            * `value` - (Required) Tag value.

        <a id="Optional Compute Parameters"></a>
        ## Optional Compute Parameters (New strategy)

        * `managed_primary_security_group` - (Optional) EMR Managed Security group that will be set to the primary instance group.
        * `managed_replica_security_group` - (Optional) EMR Managed Security group that will be set to the replica instance group.
        * `service_access_security_group` - (Optional) The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets.
        * `additional_primary_security_groups` - (Optional) A list of additional Amazon EC2 security group IDs for the master node.
        * `additional_replica_security_groups` - (Optional) A list of additional Amazon EC2 security group IDs for the core and task nodes.
        * `custom_ami_id` - (Optional) The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        * `repo_upgrade_on_boot` - (Optional) Applies only when `custom_ami_id` is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI. Possible values include: `SECURITY`, `NONE`.
        * `ec2_key_name` - (Optional) The name of an Amazon EC2 key pair that can be used to ssh to the master node.
        * `applications` - (Optional) A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster
            * `args` - (Optional) Arguments for EMR to pass to the application.
            * `name` - (Required) The application name.
            * `version`- (Optional)T he version of the application.
        * `instance_weights` - (Optional) Describes the instance and weights. Check out [Elastigroup Weighted Instances](https://api.spotinst.com/elastigroup-for-aws/concepts/general-concepts/elastigroup-capacity-instances-or-weighted) for more info.
            * `instance_type` - (Required) The type of the instance.
            * `weighted_capacity` - (Required) The weight given to the associated instance type.

        <a id="availability-zone"></a>
        ## Availability Zones (Clone, New strategies)

        * `availability_zones` - (Required in Clone) List of AZs and their subnet Ids. See example above for usage.

        <a id="configurations"></a>
        ## Configurations (Clone, New strategies)

        * `configurations_file` - (Optional) Describes path to S3 file containing description of configurations. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
            * `bucket` - (Required) S3 Bucket name for configurations.
            * `key`- (Required) S3 key for configurations.

        <a id="steps"></a>
        ## Steps (Clone, New strategies)

        * `steps_file` - (Optional) Steps from S3.
            * `bucket` - (Required) S3 Bucket name for steps.
            * `key`- (Required) S3 key for steps.

        <a id="boostrap-actions"></a>
        ## Bootstrap Actions (Clone, New strategies)

        * `bootstrap_actions_file` - (Optional) Describes path to S3 file containing description of bootstrap actions. [More Information](https://api.spotinst.com/elastigroup-for-aws/services-integrations/elastic-mapreduce/import-an-emr-cluster/advanced/)
            * `bucket` - (Required) S3 Bucket name for bootstrap actions.
            * `key`- (Required) S3 key for bootstrap actions.

        <a id="scaling-policy"></a>
        ## Scaling Policies

        Possible task group scaling policies (Wrap, Clone, and New strategies):
        * `task_scaling_up_policy`
        * `task_scaling_down_policy`

        Possible core group scaling policies (Clone, New strategies):
        * `core_scaling_up_policy`
        * `core_scaling_down_policy`

        Each `*_scaling_*_policy` supports the following:

        * `policy_name` - (Required) The name of the policy.
        * `metric_name` - (Required) The name of the metric, with or without spaces.
        * `statistic` - (Required) The metric statistics to return. For information about specific statistics go to [Statistics](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/index.html?CHAP_TerminologyandKeyConcepts.html#Statistic) in the Amazon CloudWatch Developer Guide.
        * `unit` - (Required) The unit for the metric.
        * `threshold` - (Required) The value against which the specified statistic is compared.
        * `adjustment` - (Optional) The number of instances to add/remove to/from the target capacity when scale is needed.
        * `min_target_capacity` - (Optional) Min target capacity for scale up.
        * `max_target_capacity` - (Optional) Max target capacity for scale down.
        * `namespace` - (Required) The namespace for the metric.
        * `operator` - (Required) The operator to use. Allowed values are : 'gt', 'gte', 'lt' , 'lte'.
        * `evaluation_periods` - (Required) The number of periods over which data is compared to the specified threshold.
        * `period` - (Required) The granularity, in seconds, of the returned datapoints. Period must be at least 60 seconds and must be a multiple of 60.
        * `cooldown` - (Required) The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        * `dimensions` - (Optional) A mapping of dimensions describing qualities of the metric.
        * `minimum` - (Optional) The minimum to set when scale is needed.
        * `maximum` - (Optional) The maximum to set when scale is needed.
        * `target` - (Optional) The number of instances to set when scale is needed.
        * `action_type` - (Required) The type of action to perform. Allowed values are : 'adjustment', 'setMinTarget', 'setMaxTarget', 'updateCapacity', 'percentageAdjustment'

        <a id="scheduled-task"></a>
        ## Scheduled Tasks

        * `scheduled_task` - (Optional) An array of scheduled tasks.
        * `is_enabled` - (Optional) Enable/Disable the specified scheduling task.
        * `task_type` - (Required) The type of task to be scheduled. Valid values: `setCapacity`.
        * `instance_group_type` - (Required) Select the EMR instance groups to execute the scheduled task on. Valid values: `task`.
        * `cron` - (Required) A cron expression representing the schedule for the task.
        * `desired_capacity` - (Optional) New desired capacity for the elastigroup.
        * `min_capacity` - (Optional) New min capacity for the elastigroup.
        * `max_capacity` - (Optional) New max capacity for the elastigroup.

        <a id="termination-policies"></a>
        ## Example Usage

        ```python
        import pulumi
        ```
        ### New Strategy

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        terraform__mr_scaler_01 = spotinst.aws.MrScalar("terraform-MrScaler-01",
            additional_info="{'test':'more information'}",
            additional_primary_security_groups=["sg-456321"],
            additional_replica_security_groups=["sg-123654"],
            applications=[
                spotinst.aws.MrScalarApplicationArgs(
                    name="Ganglia",
                    version="1.0",
                ),
                spotinst.aws.MrScalarApplicationArgs(
                    name="Hadoop",
                ),
                spotinst.aws.MrScalarApplicationArgs(
                    args=[
                        "fake",
                        "args",
                    ],
                    name="Pig",
                ),
            ],
            availability_zones=["us-west-2a:subnet-123456"],
            bootstrap_actions_files=[spotinst.aws.MrScalarBootstrapActionsFileArgs(
                bucket="terraform-emr-test",
                key="bootstrap-actions.json",
            )],
            configurations_files=[spotinst.aws.MrScalarConfigurationsFileArgs(
                bucket="example-bucket",
                key="configurations.json",
            )],
            core_desired_capacity=1,
            core_ebs_block_devices=[spotinst.aws.MrScalarCoreEbsBlockDeviceArgs(
                size_in_gb=40,
                volume_type="gp2",
                volumes_per_instance=2,
            )],
            core_ebs_optimized=False,
            core_instance_types=[
                "c3.xlarge",
                "c4.xlarge",
            ],
            core_lifecycle="ON_DEMAND",
            core_max_size=1,
            core_min_size=1,
            core_unit="instance",
            custom_ami_id="ami-123456",
            description="Testing MrScaler creation via Terraform",
            ec2_key_name="test-key",
            instance_weights=[
                spotinst.aws.MrScalarInstanceWeightArgs(
                    instance_type="t2.small",
                    weighted_capacity=10,
                ),
                spotinst.aws.MrScalarInstanceWeightArgs(
                    instance_type="t2.medium",
                    weighted_capacity=90,
                ),
            ],
            job_flow_role="EMR_EC2_ExampleRole",
            keep_job_flow_alive=True,
            log_uri="s3://example-logs",
            managed_primary_security_group="sg-123456",
            managed_replica_security_group="sg-987654",
            master_ebs_block_devices=[spotinst.aws.MrScalarMasterEbsBlockDeviceArgs(
                size_in_gb=30,
                volume_type="gp2",
                volumes_per_instance=1,
            )],
            master_ebs_optimized=True,
            master_instance_types=["c3.xlarge"],
            master_lifecycle="SPOT",
            provisioning_timeout=spotinst.aws.MrScalarProvisioningTimeoutArgs(
                timeout=15,
                timeout_action="terminate",
            ),
            region="us-west-2",
            release_label="emr-5.17.0",
            repo_upgrade_on_boot="NONE",
            retries=2,
            security_config="example-config",
            service_access_security_group="access-example",
            service_role="example-role",
            steps_files=[spotinst.aws.MrScalarStepsFileArgs(
                bucket="example-bucket",
                key="steps.json",
            )],
            strategy="new",
            tags=[spotinst.aws.MrScalarTagArgs(
                key="Creator",
                value="Terraform",
            )],
            task_desired_capacity=1,
            task_ebs_block_devices=[spotinst.aws.MrScalarTaskEbsBlockDeviceArgs(
                size_in_gb=40,
                volume_type="gp2",
                volumes_per_instance=2,
            )],
            task_ebs_optimized=False,
            task_instance_types=[
                "c3.xlarge",
                "c4.xlarge",
            ],
            task_lifecycle="SPOT",
            task_max_size=30,
            task_min_size=0,
            task_unit="instance",
            termination_protected=False)
        ```
        ### Clone Strategy

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        terraform__mr_scaler_01 = spotinst.aws.MrScalar("terraform-MrScaler-01",
            availability_zones=["us-west-2a:subnet-12345678"],
            cluster_id="j-123456789",
            core_desired_capacity=1,
            core_ebs_block_devices=[spotinst.aws.MrScalarCoreEbsBlockDeviceArgs(
                size_in_gb=40,
                volume_type="gp2",
                volumes_per_instance=2,
            )],
            core_ebs_optimized=False,
            core_instance_types=[
                "c3.xlarge",
                "c4.xlarge",
            ],
            core_lifecycle="ON_DEMAND",
            core_max_size=1,
            core_min_size=1,
            core_unit="instance",
            description="Testing MrScaler creation via Terraform",
            expose_cluster_id=True,
            master_ebs_block_devices=[spotinst.aws.MrScalarMasterEbsBlockDeviceArgs(
                size_in_gb=30,
                volume_type="gp2",
                volumes_per_instance=1,
            )],
            master_ebs_optimized=True,
            master_instance_types=["c3.xlarge"],
            master_lifecycle="SPOT",
            region="us-west-2",
            strategy="clone",
            tags=[spotinst.aws.MrScalarTagArgs(
                key="Creator",
                value="Terraform",
            )],
            task_desired_capacity=1,
            task_ebs_block_devices=[spotinst.aws.MrScalarTaskEbsBlockDeviceArgs(
                size_in_gb=40,
                volume_type="gp2",
                volumes_per_instance=2,
            )],
            task_ebs_optimized=False,
            task_instance_types=[
                "c3.xlarge",
                "c4.xlarge",
            ],
            task_lifecycle="SPOT",
            task_max_size=30,
            task_min_size=0,
            task_scaling_down_policies=[spotinst.aws.MrScalarTaskScalingDownPolicyArgs(
                action_type="",
                adjustment="1",
                cooldown=60,
                dimensions={
                    "name": "name-1",
                    "value": "value-1",
                },
                evaluation_periods=10,
                max_target_capacity="1",
                maximum="10",
                metric_name="CPUUtilization",
                minimum="0",
                namespace="AWS/EC2",
                operator="gt",
                period=60,
                policy_name="policy-name",
                statistic="average",
                target="5",
                threshold=10,
                unit="",
            )],
            task_unit="instance")
        pulumi.export("mrscaler-name", terraform__mr_scaler_01.name)
        pulumi.export("mrscaler-created-cluster-id", terraform__mr_scaler_01.output_cluster_id)
        ```
        ### Wrap Strategy

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        example_scaler_2 = spotinst.aws.MrScalar("example-scaler-2",
            cluster_id="j-27UVDEHXL4OQM",
            description="created by Terraform",
            region="us-west-2",
            strategy="wrap",
            task_desired_capacity=2,
            task_ebs_block_devices=[spotinst.aws.MrScalarTaskEbsBlockDeviceArgs(
                size_in_gb=20,
                volume_type="gp2",
                volumes_per_instance=1,
            )],
            task_instance_types=[
                "c3.xlarge",
                "c4.xlarge",
            ],
            task_lifecycle="SPOT",
            task_max_size=4,
            task_min_size=0,
            task_unit="instance")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The MrScaler cluster id.
        :param pulumi.Input[str] description: The MrScaler description.
        :param pulumi.Input[str] name: The MrScaler name.
        :param pulumi.Input[str] region: The MrScaler region.
        :param pulumi.Input[str] strategy: The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTerminationPolicyArgs']]]] termination_policies: Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['additional_info'] = additional_info
            __props__['additional_primary_security_groups'] = additional_primary_security_groups
            __props__['additional_replica_security_groups'] = additional_replica_security_groups
            __props__['applications'] = applications
            __props__['availability_zones'] = availability_zones
            __props__['bootstrap_actions_files'] = bootstrap_actions_files
            __props__['cluster_id'] = cluster_id
            __props__['configurations_files'] = configurations_files
            __props__['core_desired_capacity'] = core_desired_capacity
            __props__['core_ebs_block_devices'] = core_ebs_block_devices
            __props__['core_ebs_optimized'] = core_ebs_optimized
            __props__['core_instance_types'] = core_instance_types
            __props__['core_lifecycle'] = core_lifecycle
            __props__['core_max_size'] = core_max_size
            __props__['core_min_size'] = core_min_size
            __props__['core_scaling_down_policies'] = core_scaling_down_policies
            __props__['core_scaling_up_policies'] = core_scaling_up_policies
            __props__['core_unit'] = core_unit
            __props__['custom_ami_id'] = custom_ami_id
            __props__['description'] = description
            __props__['ebs_root_volume_size'] = ebs_root_volume_size
            __props__['ec2_key_name'] = ec2_key_name
            __props__['expose_cluster_id'] = expose_cluster_id
            __props__['instance_weights'] = instance_weights
            __props__['job_flow_role'] = job_flow_role
            __props__['keep_job_flow_alive'] = keep_job_flow_alive
            __props__['log_uri'] = log_uri
            __props__['managed_primary_security_group'] = managed_primary_security_group
            __props__['managed_replica_security_group'] = managed_replica_security_group
            __props__['master_ebs_block_devices'] = master_ebs_block_devices
            __props__['master_ebs_optimized'] = master_ebs_optimized
            __props__['master_instance_types'] = master_instance_types
            __props__['master_lifecycle'] = master_lifecycle
            __props__['name'] = name
            __props__['provisioning_timeout'] = provisioning_timeout
            __props__['region'] = region
            __props__['release_label'] = release_label
            __props__['repo_upgrade_on_boot'] = repo_upgrade_on_boot
            __props__['retries'] = retries
            __props__['scheduled_tasks'] = scheduled_tasks
            __props__['security_config'] = security_config
            __props__['service_access_security_group'] = service_access_security_group
            __props__['service_role'] = service_role
            __props__['steps_files'] = steps_files
            if strategy is None:
                raise TypeError("Missing required property 'strategy'")
            __props__['strategy'] = strategy
            __props__['tags'] = tags
            __props__['task_desired_capacity'] = task_desired_capacity
            __props__['task_ebs_block_devices'] = task_ebs_block_devices
            __props__['task_ebs_optimized'] = task_ebs_optimized
            __props__['task_instance_types'] = task_instance_types
            __props__['task_lifecycle'] = task_lifecycle
            __props__['task_max_size'] = task_max_size
            __props__['task_min_size'] = task_min_size
            __props__['task_scaling_down_policies'] = task_scaling_down_policies
            __props__['task_scaling_up_policies'] = task_scaling_up_policies
            __props__['task_unit'] = task_unit
            __props__['termination_policies'] = termination_policies
            __props__['termination_protected'] = termination_protected
            if visible_to_all_users is not None:
                warnings.warn("""This field has been removed from our API and is no longer functional.""", DeprecationWarning)
                pulumi.log.warn("visible_to_all_users is deprecated: This field has been removed from our API and is no longer functional.")
            __props__['visible_to_all_users'] = visible_to_all_users
            __props__['output_cluster_id'] = None
        super(MrScalar, __self__).__init__(
            'spotinst:aws/mrScalar:MrScalar',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_info: Optional[pulumi.Input[str]] = None,
            additional_primary_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            additional_replica_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarApplicationArgs']]]]] = None,
            availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bootstrap_actions_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarBootstrapActionsFileArgs']]]]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            configurations_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarConfigurationsFileArgs']]]]] = None,
            core_desired_capacity: Optional[pulumi.Input[int]] = None,
            core_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreEbsBlockDeviceArgs']]]]] = None,
            core_ebs_optimized: Optional[pulumi.Input[bool]] = None,
            core_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            core_lifecycle: Optional[pulumi.Input[str]] = None,
            core_max_size: Optional[pulumi.Input[int]] = None,
            core_min_size: Optional[pulumi.Input[int]] = None,
            core_scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreScalingDownPolicyArgs']]]]] = None,
            core_scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarCoreScalingUpPolicyArgs']]]]] = None,
            core_unit: Optional[pulumi.Input[str]] = None,
            custom_ami_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ebs_root_volume_size: Optional[pulumi.Input[int]] = None,
            ec2_key_name: Optional[pulumi.Input[str]] = None,
            expose_cluster_id: Optional[pulumi.Input[bool]] = None,
            instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarInstanceWeightArgs']]]]] = None,
            job_flow_role: Optional[pulumi.Input[str]] = None,
            keep_job_flow_alive: Optional[pulumi.Input[bool]] = None,
            log_uri: Optional[pulumi.Input[str]] = None,
            managed_primary_security_group: Optional[pulumi.Input[str]] = None,
            managed_replica_security_group: Optional[pulumi.Input[str]] = None,
            master_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarMasterEbsBlockDeviceArgs']]]]] = None,
            master_ebs_optimized: Optional[pulumi.Input[bool]] = None,
            master_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            master_lifecycle: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output_cluster_id: Optional[pulumi.Input[str]] = None,
            provisioning_timeout: Optional[pulumi.Input[pulumi.InputType['MrScalarProvisioningTimeoutArgs']]] = None,
            region: Optional[pulumi.Input[str]] = None,
            release_label: Optional[pulumi.Input[str]] = None,
            repo_upgrade_on_boot: Optional[pulumi.Input[str]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            scheduled_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarScheduledTaskArgs']]]]] = None,
            security_config: Optional[pulumi.Input[str]] = None,
            service_access_security_group: Optional[pulumi.Input[str]] = None,
            service_role: Optional[pulumi.Input[str]] = None,
            steps_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarStepsFileArgs']]]]] = None,
            strategy: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTagArgs']]]]] = None,
            task_desired_capacity: Optional[pulumi.Input[int]] = None,
            task_ebs_block_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskEbsBlockDeviceArgs']]]]] = None,
            task_ebs_optimized: Optional[pulumi.Input[bool]] = None,
            task_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            task_lifecycle: Optional[pulumi.Input[str]] = None,
            task_max_size: Optional[pulumi.Input[int]] = None,
            task_min_size: Optional[pulumi.Input[int]] = None,
            task_scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskScalingDownPolicyArgs']]]]] = None,
            task_scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTaskScalingUpPolicyArgs']]]]] = None,
            task_unit: Optional[pulumi.Input[str]] = None,
            termination_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTerminationPolicyArgs']]]]] = None,
            termination_protected: Optional[pulumi.Input[bool]] = None,
            visible_to_all_users: Optional[pulumi.Input[bool]] = None) -> 'MrScalar':
        """
        Get an existing MrScalar resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The MrScaler cluster id.
        :param pulumi.Input[str] description: The MrScaler description.
        :param pulumi.Input[str] name: The MrScaler name.
        :param pulumi.Input[str] region: The MrScaler region.
        :param pulumi.Input[str] strategy: The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MrScalarTerminationPolicyArgs']]]] termination_policies: Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["additional_info"] = additional_info
        __props__["additional_primary_security_groups"] = additional_primary_security_groups
        __props__["additional_replica_security_groups"] = additional_replica_security_groups
        __props__["applications"] = applications
        __props__["availability_zones"] = availability_zones
        __props__["bootstrap_actions_files"] = bootstrap_actions_files
        __props__["cluster_id"] = cluster_id
        __props__["configurations_files"] = configurations_files
        __props__["core_desired_capacity"] = core_desired_capacity
        __props__["core_ebs_block_devices"] = core_ebs_block_devices
        __props__["core_ebs_optimized"] = core_ebs_optimized
        __props__["core_instance_types"] = core_instance_types
        __props__["core_lifecycle"] = core_lifecycle
        __props__["core_max_size"] = core_max_size
        __props__["core_min_size"] = core_min_size
        __props__["core_scaling_down_policies"] = core_scaling_down_policies
        __props__["core_scaling_up_policies"] = core_scaling_up_policies
        __props__["core_unit"] = core_unit
        __props__["custom_ami_id"] = custom_ami_id
        __props__["description"] = description
        __props__["ebs_root_volume_size"] = ebs_root_volume_size
        __props__["ec2_key_name"] = ec2_key_name
        __props__["expose_cluster_id"] = expose_cluster_id
        __props__["instance_weights"] = instance_weights
        __props__["job_flow_role"] = job_flow_role
        __props__["keep_job_flow_alive"] = keep_job_flow_alive
        __props__["log_uri"] = log_uri
        __props__["managed_primary_security_group"] = managed_primary_security_group
        __props__["managed_replica_security_group"] = managed_replica_security_group
        __props__["master_ebs_block_devices"] = master_ebs_block_devices
        __props__["master_ebs_optimized"] = master_ebs_optimized
        __props__["master_instance_types"] = master_instance_types
        __props__["master_lifecycle"] = master_lifecycle
        __props__["name"] = name
        __props__["output_cluster_id"] = output_cluster_id
        __props__["provisioning_timeout"] = provisioning_timeout
        __props__["region"] = region
        __props__["release_label"] = release_label
        __props__["repo_upgrade_on_boot"] = repo_upgrade_on_boot
        __props__["retries"] = retries
        __props__["scheduled_tasks"] = scheduled_tasks
        __props__["security_config"] = security_config
        __props__["service_access_security_group"] = service_access_security_group
        __props__["service_role"] = service_role
        __props__["steps_files"] = steps_files
        __props__["strategy"] = strategy
        __props__["tags"] = tags
        __props__["task_desired_capacity"] = task_desired_capacity
        __props__["task_ebs_block_devices"] = task_ebs_block_devices
        __props__["task_ebs_optimized"] = task_ebs_optimized
        __props__["task_instance_types"] = task_instance_types
        __props__["task_lifecycle"] = task_lifecycle
        __props__["task_max_size"] = task_max_size
        __props__["task_min_size"] = task_min_size
        __props__["task_scaling_down_policies"] = task_scaling_down_policies
        __props__["task_scaling_up_policies"] = task_scaling_up_policies
        __props__["task_unit"] = task_unit
        __props__["termination_policies"] = termination_policies
        __props__["termination_protected"] = termination_protected
        __props__["visible_to_all_users"] = visible_to_all_users
        return MrScalar(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter(name="additionalPrimarySecurityGroups")
    def additional_primary_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "additional_primary_security_groups")

    @property
    @pulumi.getter(name="additionalReplicaSecurityGroups")
    def additional_replica_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "additional_replica_security_groups")

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarApplication']]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="bootstrapActionsFiles")
    def bootstrap_actions_files(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarBootstrapActionsFile']]]:
        return pulumi.get(self, "bootstrap_actions_files")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        The MrScaler cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="configurationsFiles")
    def configurations_files(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarConfigurationsFile']]]:
        return pulumi.get(self, "configurations_files")

    @property
    @pulumi.getter(name="coreDesiredCapacity")
    def core_desired_capacity(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "core_desired_capacity")

    @property
    @pulumi.getter(name="coreEbsBlockDevices")
    def core_ebs_block_devices(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarCoreEbsBlockDevice']]]:
        return pulumi.get(self, "core_ebs_block_devices")

    @property
    @pulumi.getter(name="coreEbsOptimized")
    def core_ebs_optimized(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "core_ebs_optimized")

    @property
    @pulumi.getter(name="coreInstanceTypes")
    def core_instance_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "core_instance_types")

    @property
    @pulumi.getter(name="coreLifecycle")
    def core_lifecycle(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "core_lifecycle")

    @property
    @pulumi.getter(name="coreMaxSize")
    def core_max_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "core_max_size")

    @property
    @pulumi.getter(name="coreMinSize")
    def core_min_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "core_min_size")

    @property
    @pulumi.getter(name="coreScalingDownPolicies")
    def core_scaling_down_policies(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarCoreScalingDownPolicy']]]:
        return pulumi.get(self, "core_scaling_down_policies")

    @property
    @pulumi.getter(name="coreScalingUpPolicies")
    def core_scaling_up_policies(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarCoreScalingUpPolicy']]]:
        return pulumi.get(self, "core_scaling_up_policies")

    @property
    @pulumi.getter(name="coreUnit")
    def core_unit(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "core_unit")

    @property
    @pulumi.getter(name="customAmiId")
    def custom_ami_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "custom_ami_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The MrScaler description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ebsRootVolumeSize")
    def ebs_root_volume_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "ebs_root_volume_size")

    @property
    @pulumi.getter(name="ec2KeyName")
    def ec2_key_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ec2_key_name")

    @property
    @pulumi.getter(name="exposeClusterId")
    def expose_cluster_id(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "expose_cluster_id")

    @property
    @pulumi.getter(name="instanceWeights")
    def instance_weights(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarInstanceWeight']]]:
        return pulumi.get(self, "instance_weights")

    @property
    @pulumi.getter(name="jobFlowRole")
    def job_flow_role(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "job_flow_role")

    @property
    @pulumi.getter(name="keepJobFlowAlive")
    def keep_job_flow_alive(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "keep_job_flow_alive")

    @property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "log_uri")

    @property
    @pulumi.getter(name="managedPrimarySecurityGroup")
    def managed_primary_security_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "managed_primary_security_group")

    @property
    @pulumi.getter(name="managedReplicaSecurityGroup")
    def managed_replica_security_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "managed_replica_security_group")

    @property
    @pulumi.getter(name="masterEbsBlockDevices")
    def master_ebs_block_devices(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarMasterEbsBlockDevice']]]:
        return pulumi.get(self, "master_ebs_block_devices")

    @property
    @pulumi.getter(name="masterEbsOptimized")
    def master_ebs_optimized(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "master_ebs_optimized")

    @property
    @pulumi.getter(name="masterInstanceTypes")
    def master_instance_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "master_instance_types")

    @property
    @pulumi.getter(name="masterLifecycle")
    def master_lifecycle(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "master_lifecycle")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The MrScaler name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputClusterId")
    def output_cluster_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "output_cluster_id")

    @property
    @pulumi.getter(name="provisioningTimeout")
    def provisioning_timeout(self) -> pulumi.Output[Optional['outputs.MrScalarProvisioningTimeout']]:
        return pulumi.get(self, "provisioning_timeout")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The MrScaler region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="releaseLabel")
    def release_label(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "release_label")

    @property
    @pulumi.getter(name="repoUpgradeOnBoot")
    def repo_upgrade_on_boot(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "repo_upgrade_on_boot")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="scheduledTasks")
    def scheduled_tasks(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarScheduledTask']]]:
        return pulumi.get(self, "scheduled_tasks")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "security_config")

    @property
    @pulumi.getter(name="serviceAccessSecurityGroup")
    def service_access_security_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_access_security_group")

    @property
    @pulumi.getter(name="serviceRole")
    def service_role(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_role")

    @property
    @pulumi.getter(name="stepsFiles")
    def steps_files(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarStepsFile']]]:
        return pulumi.get(self, "steps_files")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[str]:
        """
        The MrScaler strategy. Allowed values are `new` `clone` and `wrap`.
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskDesiredCapacity")
    def task_desired_capacity(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "task_desired_capacity")

    @property
    @pulumi.getter(name="taskEbsBlockDevices")
    def task_ebs_block_devices(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarTaskEbsBlockDevice']]]:
        return pulumi.get(self, "task_ebs_block_devices")

    @property
    @pulumi.getter(name="taskEbsOptimized")
    def task_ebs_optimized(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "task_ebs_optimized")

    @property
    @pulumi.getter(name="taskInstanceTypes")
    def task_instance_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "task_instance_types")

    @property
    @pulumi.getter(name="taskLifecycle")
    def task_lifecycle(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "task_lifecycle")

    @property
    @pulumi.getter(name="taskMaxSize")
    def task_max_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "task_max_size")

    @property
    @pulumi.getter(name="taskMinSize")
    def task_min_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "task_min_size")

    @property
    @pulumi.getter(name="taskScalingDownPolicies")
    def task_scaling_down_policies(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarTaskScalingDownPolicy']]]:
        return pulumi.get(self, "task_scaling_down_policies")

    @property
    @pulumi.getter(name="taskScalingUpPolicies")
    def task_scaling_up_policies(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarTaskScalingUpPolicy']]]:
        return pulumi.get(self, "task_scaling_up_policies")

    @property
    @pulumi.getter(name="taskUnit")
    def task_unit(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "task_unit")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> pulumi.Output[Optional[Sequence['outputs.MrScalarTerminationPolicy']]]:
        """
        Allows defining termination policies for EMR clusters based on CloudWatch Metrics.
        """
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter(name="terminationProtected")
    def termination_protected(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "termination_protected")

    @property
    @pulumi.getter(name="visibleToAllUsers")
    def visible_to_all_users(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "visible_to_all_users")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

