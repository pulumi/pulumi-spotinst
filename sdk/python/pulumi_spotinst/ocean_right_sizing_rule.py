# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OceanRightSizingRuleArgs', 'OceanRightSizingRule']

@pulumi.input_type
class OceanRightSizingRuleArgs:
    def __init__(__self__, *,
                 recommendation_application_intervals: pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]],
                 rule_name: pulumi.Input[_builtins.str],
                 attach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]] = None,
                 auto_apply_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]] = None,
                 detach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]] = None,
                 downside_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_preliminary_recommendations: Optional[pulumi.Input[_builtins.bool]] = None,
                 ocean_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recommendation_application_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]] = None,
                 recommendation_application_hpas: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]] = None,
                 recommendation_application_min_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]] = None,
                 recommendation_application_overhead_values: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]] = None,
                 restart_replicas: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OceanRightSizingRule resource.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]] recommendation_application_intervals: Determines the Ocean Rightsizing rule recommendation application intervals.
        :param pulumi.Input[_builtins.str] rule_name: The unique name of the rule.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]] auto_apply_definitions: Ocean Rightsizing Rule Auto Apply Configuration.
        :param pulumi.Input[_builtins.bool] exclude_preliminary_recommendations: Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        :param pulumi.Input[_builtins.str] ocean_id: Identifier of the Ocean cluster.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]] recommendation_application_boundaries: Determines the Ocean Rightsizing rule recommendation application boundaries.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]] recommendation_application_hpas: HPA Rightsizing Rule Recommendation Configuration
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]] recommendation_application_min_thresholds: Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]] recommendation_application_overhead_values: Determines the Ocean Rightsizing rule recommendation application overhead values.
        :param pulumi.Input[_builtins.str] restart_replicas: Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        """
        pulumi.set(__self__, "recommendation_application_intervals", recommendation_application_intervals)
        pulumi.set(__self__, "rule_name", rule_name)
        if attach_workloads is not None:
            pulumi.set(__self__, "attach_workloads", attach_workloads)
        if auto_apply_definitions is not None:
            pulumi.set(__self__, "auto_apply_definitions", auto_apply_definitions)
        if detach_workloads is not None:
            pulumi.set(__self__, "detach_workloads", detach_workloads)
        if downside_only is not None:
            pulumi.set(__self__, "downside_only", downside_only)
        if exclude_preliminary_recommendations is not None:
            pulumi.set(__self__, "exclude_preliminary_recommendations", exclude_preliminary_recommendations)
        if ocean_id is not None:
            pulumi.set(__self__, "ocean_id", ocean_id)
        if recommendation_application_boundaries is not None:
            pulumi.set(__self__, "recommendation_application_boundaries", recommendation_application_boundaries)
        if recommendation_application_hpas is not None:
            pulumi.set(__self__, "recommendation_application_hpas", recommendation_application_hpas)
        if recommendation_application_min_thresholds is not None:
            pulumi.set(__self__, "recommendation_application_min_thresholds", recommendation_application_min_thresholds)
        if recommendation_application_overhead_values is not None:
            pulumi.set(__self__, "recommendation_application_overhead_values", recommendation_application_overhead_values)
        if restart_replicas is not None:
            pulumi.set(__self__, "restart_replicas", restart_replicas)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationIntervals")
    def recommendation_application_intervals(self) -> pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]]:
        """
        Determines the Ocean Rightsizing rule recommendation application intervals.
        """
        return pulumi.get(self, "recommendation_application_intervals")

    @recommendation_application_intervals.setter
    def recommendation_application_intervals(self, value: pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]]):
        pulumi.set(self, "recommendation_application_intervals", value)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[_builtins.str]:
        """
        The unique name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule_name", value)

    @_builtins.property
    @pulumi.getter(name="attachWorkloads")
    def attach_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]]:
        return pulumi.get(self, "attach_workloads")

    @attach_workloads.setter
    def attach_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]]):
        pulumi.set(self, "attach_workloads", value)

    @_builtins.property
    @pulumi.getter(name="autoApplyDefinitions")
    def auto_apply_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]]:
        """
        Ocean Rightsizing Rule Auto Apply Configuration.
        """
        return pulumi.get(self, "auto_apply_definitions")

    @auto_apply_definitions.setter
    def auto_apply_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]]):
        pulumi.set(self, "auto_apply_definitions", value)

    @_builtins.property
    @pulumi.getter(name="detachWorkloads")
    def detach_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]]:
        return pulumi.get(self, "detach_workloads")

    @detach_workloads.setter
    def detach_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]]):
        pulumi.set(self, "detach_workloads", value)

    @_builtins.property
    @pulumi.getter(name="downsideOnly")
    def downside_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "downside_only")

    @downside_only.setter
    def downside_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "downside_only", value)

    @_builtins.property
    @pulumi.getter(name="excludePreliminaryRecommendations")
    def exclude_preliminary_recommendations(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        """
        return pulumi.get(self, "exclude_preliminary_recommendations")

    @exclude_preliminary_recommendations.setter
    def exclude_preliminary_recommendations(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_preliminary_recommendations", value)

    @_builtins.property
    @pulumi.getter(name="oceanId")
    def ocean_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the Ocean cluster.
        """
        return pulumi.get(self, "ocean_id")

    @ocean_id.setter
    def ocean_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ocean_id", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationBoundaries")
    def recommendation_application_boundaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]]:
        """
        Determines the Ocean Rightsizing rule recommendation application boundaries.
        """
        return pulumi.get(self, "recommendation_application_boundaries")

    @recommendation_application_boundaries.setter
    def recommendation_application_boundaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]]):
        pulumi.set(self, "recommendation_application_boundaries", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationHpas")
    def recommendation_application_hpas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]]:
        """
        HPA Rightsizing Rule Recommendation Configuration
        """
        return pulumi.get(self, "recommendation_application_hpas")

    @recommendation_application_hpas.setter
    def recommendation_application_hpas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]]):
        pulumi.set(self, "recommendation_application_hpas", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationMinThresholds")
    def recommendation_application_min_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]]:
        """
        Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        """
        return pulumi.get(self, "recommendation_application_min_thresholds")

    @recommendation_application_min_thresholds.setter
    def recommendation_application_min_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]]):
        pulumi.set(self, "recommendation_application_min_thresholds", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationOverheadValues")
    def recommendation_application_overhead_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]]:
        """
        Determines the Ocean Rightsizing rule recommendation application overhead values.
        """
        return pulumi.get(self, "recommendation_application_overhead_values")

    @recommendation_application_overhead_values.setter
    def recommendation_application_overhead_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]]):
        pulumi.set(self, "recommendation_application_overhead_values", value)

    @_builtins.property
    @pulumi.getter(name="restartReplicas")
    def restart_replicas(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        """
        return pulumi.get(self, "restart_replicas")

    @restart_replicas.setter
    def restart_replicas(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_replicas", value)


@pulumi.input_type
class _OceanRightSizingRuleState:
    def __init__(__self__, *,
                 attach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]] = None,
                 auto_apply_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]] = None,
                 detach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]] = None,
                 downside_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_preliminary_recommendations: Optional[pulumi.Input[_builtins.bool]] = None,
                 ocean_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recommendation_application_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]] = None,
                 recommendation_application_hpas: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]] = None,
                 recommendation_application_intervals: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]]] = None,
                 recommendation_application_min_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]] = None,
                 recommendation_application_overhead_values: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]] = None,
                 restart_replicas: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OceanRightSizingRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]] auto_apply_definitions: Ocean Rightsizing Rule Auto Apply Configuration.
        :param pulumi.Input[_builtins.bool] exclude_preliminary_recommendations: Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        :param pulumi.Input[_builtins.str] ocean_id: Identifier of the Ocean cluster.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]] recommendation_application_boundaries: Determines the Ocean Rightsizing rule recommendation application boundaries.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]] recommendation_application_hpas: HPA Rightsizing Rule Recommendation Configuration
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]] recommendation_application_intervals: Determines the Ocean Rightsizing rule recommendation application intervals.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]] recommendation_application_min_thresholds: Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        :param pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]] recommendation_application_overhead_values: Determines the Ocean Rightsizing rule recommendation application overhead values.
        :param pulumi.Input[_builtins.str] restart_replicas: Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        :param pulumi.Input[_builtins.str] rule_name: The unique name of the rule.
        """
        if attach_workloads is not None:
            pulumi.set(__self__, "attach_workloads", attach_workloads)
        if auto_apply_definitions is not None:
            pulumi.set(__self__, "auto_apply_definitions", auto_apply_definitions)
        if detach_workloads is not None:
            pulumi.set(__self__, "detach_workloads", detach_workloads)
        if downside_only is not None:
            pulumi.set(__self__, "downside_only", downside_only)
        if exclude_preliminary_recommendations is not None:
            pulumi.set(__self__, "exclude_preliminary_recommendations", exclude_preliminary_recommendations)
        if ocean_id is not None:
            pulumi.set(__self__, "ocean_id", ocean_id)
        if recommendation_application_boundaries is not None:
            pulumi.set(__self__, "recommendation_application_boundaries", recommendation_application_boundaries)
        if recommendation_application_hpas is not None:
            pulumi.set(__self__, "recommendation_application_hpas", recommendation_application_hpas)
        if recommendation_application_intervals is not None:
            pulumi.set(__self__, "recommendation_application_intervals", recommendation_application_intervals)
        if recommendation_application_min_thresholds is not None:
            pulumi.set(__self__, "recommendation_application_min_thresholds", recommendation_application_min_thresholds)
        if recommendation_application_overhead_values is not None:
            pulumi.set(__self__, "recommendation_application_overhead_values", recommendation_application_overhead_values)
        if restart_replicas is not None:
            pulumi.set(__self__, "restart_replicas", restart_replicas)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)

    @_builtins.property
    @pulumi.getter(name="attachWorkloads")
    def attach_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]]:
        return pulumi.get(self, "attach_workloads")

    @attach_workloads.setter
    def attach_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAttachWorkloadArgs']]]]):
        pulumi.set(self, "attach_workloads", value)

    @_builtins.property
    @pulumi.getter(name="autoApplyDefinitions")
    def auto_apply_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]]:
        """
        Ocean Rightsizing Rule Auto Apply Configuration.
        """
        return pulumi.get(self, "auto_apply_definitions")

    @auto_apply_definitions.setter
    def auto_apply_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleAutoApplyDefinitionArgs']]]]):
        pulumi.set(self, "auto_apply_definitions", value)

    @_builtins.property
    @pulumi.getter(name="detachWorkloads")
    def detach_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]]:
        return pulumi.get(self, "detach_workloads")

    @detach_workloads.setter
    def detach_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleDetachWorkloadArgs']]]]):
        pulumi.set(self, "detach_workloads", value)

    @_builtins.property
    @pulumi.getter(name="downsideOnly")
    def downside_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "downside_only")

    @downside_only.setter
    def downside_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "downside_only", value)

    @_builtins.property
    @pulumi.getter(name="excludePreliminaryRecommendations")
    def exclude_preliminary_recommendations(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        """
        return pulumi.get(self, "exclude_preliminary_recommendations")

    @exclude_preliminary_recommendations.setter
    def exclude_preliminary_recommendations(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_preliminary_recommendations", value)

    @_builtins.property
    @pulumi.getter(name="oceanId")
    def ocean_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the Ocean cluster.
        """
        return pulumi.get(self, "ocean_id")

    @ocean_id.setter
    def ocean_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ocean_id", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationBoundaries")
    def recommendation_application_boundaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]]:
        """
        Determines the Ocean Rightsizing rule recommendation application boundaries.
        """
        return pulumi.get(self, "recommendation_application_boundaries")

    @recommendation_application_boundaries.setter
    def recommendation_application_boundaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationBoundaryArgs']]]]):
        pulumi.set(self, "recommendation_application_boundaries", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationHpas")
    def recommendation_application_hpas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]]:
        """
        HPA Rightsizing Rule Recommendation Configuration
        """
        return pulumi.get(self, "recommendation_application_hpas")

    @recommendation_application_hpas.setter
    def recommendation_application_hpas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationHpaArgs']]]]):
        pulumi.set(self, "recommendation_application_hpas", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationIntervals")
    def recommendation_application_intervals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]]]:
        """
        Determines the Ocean Rightsizing rule recommendation application intervals.
        """
        return pulumi.get(self, "recommendation_application_intervals")

    @recommendation_application_intervals.setter
    def recommendation_application_intervals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationIntervalArgs']]]]):
        pulumi.set(self, "recommendation_application_intervals", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationMinThresholds")
    def recommendation_application_min_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]]:
        """
        Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        """
        return pulumi.get(self, "recommendation_application_min_thresholds")

    @recommendation_application_min_thresholds.setter
    def recommendation_application_min_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs']]]]):
        pulumi.set(self, "recommendation_application_min_thresholds", value)

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationOverheadValues")
    def recommendation_application_overhead_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]]:
        """
        Determines the Ocean Rightsizing rule recommendation application overhead values.
        """
        return pulumi.get(self, "recommendation_application_overhead_values")

    @recommendation_application_overhead_values.setter
    def recommendation_application_overhead_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs']]]]):
        pulumi.set(self, "recommendation_application_overhead_values", value)

    @_builtins.property
    @pulumi.getter(name="restartReplicas")
    def restart_replicas(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        """
        return pulumi.get(self, "restart_replicas")

    @restart_replicas.setter
    def restart_replicas(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_replicas", value)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique name of the rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_name", value)


@pulumi.type_token("spotinst:index/oceanRightSizingRule:OceanRightSizingRule")
class OceanRightSizingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAttachWorkloadArgs', 'OceanRightSizingRuleAttachWorkloadArgsDict']]]]] = None,
                 auto_apply_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAutoApplyDefinitionArgs', 'OceanRightSizingRuleAutoApplyDefinitionArgsDict']]]]] = None,
                 detach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleDetachWorkloadArgs', 'OceanRightSizingRuleDetachWorkloadArgsDict']]]]] = None,
                 downside_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_preliminary_recommendations: Optional[pulumi.Input[_builtins.bool]] = None,
                 ocean_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recommendation_application_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationBoundaryArgs', 'OceanRightSizingRuleRecommendationApplicationBoundaryArgsDict']]]]] = None,
                 recommendation_application_hpas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationHpaArgs', 'OceanRightSizingRuleRecommendationApplicationHpaArgsDict']]]]] = None,
                 recommendation_application_intervals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationIntervalArgs', 'OceanRightSizingRuleRecommendationApplicationIntervalArgsDict']]]]] = None,
                 recommendation_application_min_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs', 'OceanRightSizingRuleRecommendationApplicationMinThresholdArgsDict']]]]] = None,
                 recommendation_application_overhead_values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs', 'OceanRightSizingRuleRecommendationApplicationOverheadValueArgsDict']]]]] = None,
                 restart_replicas: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Spotinst Ocean right sizing rule resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        example = spotinst.OceanRightSizingRule("example",
            ocean_id="o-123456",
            rule_name="test-rule",
            exclude_preliminary_recommendations=True,
            restart_replicas="ALL_MANIFEST",
            recommendation_application_hpas=[{
                "allow_hpa_recommendations": True,
            }],
            recommendation_application_intervals=[
                {
                    "repetition_basis": "WEEKLY",
                    "weekly_repetition_bases": [{
                        "interval_days": [
                            "MONDAY",
                            "WEDNESDAY",
                        ],
                        "interval_hours_start_time": "12:00",
                        "interval_hours_end_time": "14:00",
                    }],
                },
                {
                    "repetition_basis": "MONTHLY",
                    "monthly_repetition_bases": [{
                        "interval_months": [
                            2,
                            6,
                            9,
                        ],
                        "week_of_the_months": [
                            "FIRST",
                            "LAST",
                        ],
                        "weekly_repetition_bases": [{
                            "interval_days": ["MONDAY"],
                            "interval_hours_start_time": "03:00",
                            "interval_hours_end_time": "04:00",
                        }],
                    }],
                },
            ],
            recommendation_application_boundaries=[{
                "cpu_min": 120,
                "cpu_max": 190,
                "memory_min": 160,
                "memory_max": 190,
            }],
            recommendation_application_min_thresholds=[{
                "cpu_percentage": 0.412,
                "memory_percentage": 0.36,
            }],
            recommendation_application_overhead_values=[{
                "cpu_percentage": 0.8,
                "memory_percentage": 0.5,
            }],
            auto_apply_definitions=[{
                "enabled": True,
                "namespaces": [
                    "kube-system",
                    "spot-system",
                ],
                "labels": {
                    "k8s-app": "kube-proxy",
                    "app.kubernetes.io/name": "metrics-server",
                },
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAutoApplyDefinitionArgs', 'OceanRightSizingRuleAutoApplyDefinitionArgsDict']]]] auto_apply_definitions: Ocean Rightsizing Rule Auto Apply Configuration.
        :param pulumi.Input[_builtins.bool] exclude_preliminary_recommendations: Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        :param pulumi.Input[_builtins.str] ocean_id: Identifier of the Ocean cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationBoundaryArgs', 'OceanRightSizingRuleRecommendationApplicationBoundaryArgsDict']]]] recommendation_application_boundaries: Determines the Ocean Rightsizing rule recommendation application boundaries.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationHpaArgs', 'OceanRightSizingRuleRecommendationApplicationHpaArgsDict']]]] recommendation_application_hpas: HPA Rightsizing Rule Recommendation Configuration
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationIntervalArgs', 'OceanRightSizingRuleRecommendationApplicationIntervalArgsDict']]]] recommendation_application_intervals: Determines the Ocean Rightsizing rule recommendation application intervals.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs', 'OceanRightSizingRuleRecommendationApplicationMinThresholdArgsDict']]]] recommendation_application_min_thresholds: Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs', 'OceanRightSizingRuleRecommendationApplicationOverheadValueArgsDict']]]] recommendation_application_overhead_values: Determines the Ocean Rightsizing rule recommendation application overhead values.
        :param pulumi.Input[_builtins.str] restart_replicas: Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        :param pulumi.Input[_builtins.str] rule_name: The unique name of the rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OceanRightSizingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Spotinst Ocean right sizing rule resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        example = spotinst.OceanRightSizingRule("example",
            ocean_id="o-123456",
            rule_name="test-rule",
            exclude_preliminary_recommendations=True,
            restart_replicas="ALL_MANIFEST",
            recommendation_application_hpas=[{
                "allow_hpa_recommendations": True,
            }],
            recommendation_application_intervals=[
                {
                    "repetition_basis": "WEEKLY",
                    "weekly_repetition_bases": [{
                        "interval_days": [
                            "MONDAY",
                            "WEDNESDAY",
                        ],
                        "interval_hours_start_time": "12:00",
                        "interval_hours_end_time": "14:00",
                    }],
                },
                {
                    "repetition_basis": "MONTHLY",
                    "monthly_repetition_bases": [{
                        "interval_months": [
                            2,
                            6,
                            9,
                        ],
                        "week_of_the_months": [
                            "FIRST",
                            "LAST",
                        ],
                        "weekly_repetition_bases": [{
                            "interval_days": ["MONDAY"],
                            "interval_hours_start_time": "03:00",
                            "interval_hours_end_time": "04:00",
                        }],
                    }],
                },
            ],
            recommendation_application_boundaries=[{
                "cpu_min": 120,
                "cpu_max": 190,
                "memory_min": 160,
                "memory_max": 190,
            }],
            recommendation_application_min_thresholds=[{
                "cpu_percentage": 0.412,
                "memory_percentage": 0.36,
            }],
            recommendation_application_overhead_values=[{
                "cpu_percentage": 0.8,
                "memory_percentage": 0.5,
            }],
            auto_apply_definitions=[{
                "enabled": True,
                "namespaces": [
                    "kube-system",
                    "spot-system",
                ],
                "labels": {
                    "k8s-app": "kube-proxy",
                    "app.kubernetes.io/name": "metrics-server",
                },
            }])
        ```

        :param str resource_name: The name of the resource.
        :param OceanRightSizingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OceanRightSizingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAttachWorkloadArgs', 'OceanRightSizingRuleAttachWorkloadArgsDict']]]]] = None,
                 auto_apply_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAutoApplyDefinitionArgs', 'OceanRightSizingRuleAutoApplyDefinitionArgsDict']]]]] = None,
                 detach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleDetachWorkloadArgs', 'OceanRightSizingRuleDetachWorkloadArgsDict']]]]] = None,
                 downside_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_preliminary_recommendations: Optional[pulumi.Input[_builtins.bool]] = None,
                 ocean_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recommendation_application_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationBoundaryArgs', 'OceanRightSizingRuleRecommendationApplicationBoundaryArgsDict']]]]] = None,
                 recommendation_application_hpas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationHpaArgs', 'OceanRightSizingRuleRecommendationApplicationHpaArgsDict']]]]] = None,
                 recommendation_application_intervals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationIntervalArgs', 'OceanRightSizingRuleRecommendationApplicationIntervalArgsDict']]]]] = None,
                 recommendation_application_min_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs', 'OceanRightSizingRuleRecommendationApplicationMinThresholdArgsDict']]]]] = None,
                 recommendation_application_overhead_values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs', 'OceanRightSizingRuleRecommendationApplicationOverheadValueArgsDict']]]]] = None,
                 restart_replicas: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OceanRightSizingRuleArgs.__new__(OceanRightSizingRuleArgs)

            __props__.__dict__["attach_workloads"] = attach_workloads
            __props__.__dict__["auto_apply_definitions"] = auto_apply_definitions
            __props__.__dict__["detach_workloads"] = detach_workloads
            __props__.__dict__["downside_only"] = downside_only
            __props__.__dict__["exclude_preliminary_recommendations"] = exclude_preliminary_recommendations
            __props__.__dict__["ocean_id"] = ocean_id
            __props__.__dict__["recommendation_application_boundaries"] = recommendation_application_boundaries
            __props__.__dict__["recommendation_application_hpas"] = recommendation_application_hpas
            if recommendation_application_intervals is None and not opts.urn:
                raise TypeError("Missing required property 'recommendation_application_intervals'")
            __props__.__dict__["recommendation_application_intervals"] = recommendation_application_intervals
            __props__.__dict__["recommendation_application_min_thresholds"] = recommendation_application_min_thresholds
            __props__.__dict__["recommendation_application_overhead_values"] = recommendation_application_overhead_values
            __props__.__dict__["restart_replicas"] = restart_replicas
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
        super(OceanRightSizingRule, __self__).__init__(
            'spotinst:index/oceanRightSizingRule:OceanRightSizingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAttachWorkloadArgs', 'OceanRightSizingRuleAttachWorkloadArgsDict']]]]] = None,
            auto_apply_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAutoApplyDefinitionArgs', 'OceanRightSizingRuleAutoApplyDefinitionArgsDict']]]]] = None,
            detach_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleDetachWorkloadArgs', 'OceanRightSizingRuleDetachWorkloadArgsDict']]]]] = None,
            downside_only: Optional[pulumi.Input[_builtins.bool]] = None,
            exclude_preliminary_recommendations: Optional[pulumi.Input[_builtins.bool]] = None,
            ocean_id: Optional[pulumi.Input[_builtins.str]] = None,
            recommendation_application_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationBoundaryArgs', 'OceanRightSizingRuleRecommendationApplicationBoundaryArgsDict']]]]] = None,
            recommendation_application_hpas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationHpaArgs', 'OceanRightSizingRuleRecommendationApplicationHpaArgsDict']]]]] = None,
            recommendation_application_intervals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationIntervalArgs', 'OceanRightSizingRuleRecommendationApplicationIntervalArgsDict']]]]] = None,
            recommendation_application_min_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs', 'OceanRightSizingRuleRecommendationApplicationMinThresholdArgsDict']]]]] = None,
            recommendation_application_overhead_values: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs', 'OceanRightSizingRuleRecommendationApplicationOverheadValueArgsDict']]]]] = None,
            restart_replicas: Optional[pulumi.Input[_builtins.str]] = None,
            rule_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'OceanRightSizingRule':
        """
        Get an existing OceanRightSizingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleAutoApplyDefinitionArgs', 'OceanRightSizingRuleAutoApplyDefinitionArgsDict']]]] auto_apply_definitions: Ocean Rightsizing Rule Auto Apply Configuration.
        :param pulumi.Input[_builtins.bool] exclude_preliminary_recommendations: Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        :param pulumi.Input[_builtins.str] ocean_id: Identifier of the Ocean cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationBoundaryArgs', 'OceanRightSizingRuleRecommendationApplicationBoundaryArgsDict']]]] recommendation_application_boundaries: Determines the Ocean Rightsizing rule recommendation application boundaries.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationHpaArgs', 'OceanRightSizingRuleRecommendationApplicationHpaArgsDict']]]] recommendation_application_hpas: HPA Rightsizing Rule Recommendation Configuration
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationIntervalArgs', 'OceanRightSizingRuleRecommendationApplicationIntervalArgsDict']]]] recommendation_application_intervals: Determines the Ocean Rightsizing rule recommendation application intervals.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationMinThresholdArgs', 'OceanRightSizingRuleRecommendationApplicationMinThresholdArgsDict']]]] recommendation_application_min_thresholds: Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OceanRightSizingRuleRecommendationApplicationOverheadValueArgs', 'OceanRightSizingRuleRecommendationApplicationOverheadValueArgsDict']]]] recommendation_application_overhead_values: Determines the Ocean Rightsizing rule recommendation application overhead values.
        :param pulumi.Input[_builtins.str] restart_replicas: Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        :param pulumi.Input[_builtins.str] rule_name: The unique name of the rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OceanRightSizingRuleState.__new__(_OceanRightSizingRuleState)

        __props__.__dict__["attach_workloads"] = attach_workloads
        __props__.__dict__["auto_apply_definitions"] = auto_apply_definitions
        __props__.__dict__["detach_workloads"] = detach_workloads
        __props__.__dict__["downside_only"] = downside_only
        __props__.__dict__["exclude_preliminary_recommendations"] = exclude_preliminary_recommendations
        __props__.__dict__["ocean_id"] = ocean_id
        __props__.__dict__["recommendation_application_boundaries"] = recommendation_application_boundaries
        __props__.__dict__["recommendation_application_hpas"] = recommendation_application_hpas
        __props__.__dict__["recommendation_application_intervals"] = recommendation_application_intervals
        __props__.__dict__["recommendation_application_min_thresholds"] = recommendation_application_min_thresholds
        __props__.__dict__["recommendation_application_overhead_values"] = recommendation_application_overhead_values
        __props__.__dict__["restart_replicas"] = restart_replicas
        __props__.__dict__["rule_name"] = rule_name
        return OceanRightSizingRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="attachWorkloads")
    def attach_workloads(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleAttachWorkload']]]:
        return pulumi.get(self, "attach_workloads")

    @_builtins.property
    @pulumi.getter(name="autoApplyDefinitions")
    def auto_apply_definitions(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleAutoApplyDefinition']]]:
        """
        Ocean Rightsizing Rule Auto Apply Configuration.
        """
        return pulumi.get(self, "auto_apply_definitions")

    @_builtins.property
    @pulumi.getter(name="detachWorkloads")
    def detach_workloads(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleDetachWorkload']]]:
        return pulumi.get(self, "detach_workloads")

    @_builtins.property
    @pulumi.getter(name="downsideOnly")
    def downside_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "downside_only")

    @_builtins.property
    @pulumi.getter(name="excludePreliminaryRecommendations")
    def exclude_preliminary_recommendations(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Exclude preliminary recommendations (recommendations based on less than 4 full days of data).
        """
        return pulumi.get(self, "exclude_preliminary_recommendations")

    @_builtins.property
    @pulumi.getter(name="oceanId")
    def ocean_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identifier of the Ocean cluster.
        """
        return pulumi.get(self, "ocean_id")

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationBoundaries")
    def recommendation_application_boundaries(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleRecommendationApplicationBoundary']]]:
        """
        Determines the Ocean Rightsizing rule recommendation application boundaries.
        """
        return pulumi.get(self, "recommendation_application_boundaries")

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationHpas")
    def recommendation_application_hpas(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleRecommendationApplicationHpa']]]:
        """
        HPA Rightsizing Rule Recommendation Configuration
        """
        return pulumi.get(self, "recommendation_application_hpas")

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationIntervals")
    def recommendation_application_intervals(self) -> pulumi.Output[Sequence['outputs.OceanRightSizingRuleRecommendationApplicationInterval']]:
        """
        Determines the Ocean Rightsizing rule recommendation application intervals.
        """
        return pulumi.get(self, "recommendation_application_intervals")

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationMinThresholds")
    def recommendation_application_min_thresholds(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleRecommendationApplicationMinThreshold']]]:
        """
        Determines the extent of difference between current request and recommendation to trigger a change in percentage.
        """
        return pulumi.get(self, "recommendation_application_min_thresholds")

    @_builtins.property
    @pulumi.getter(name="recommendationApplicationOverheadValues")
    def recommendation_application_overhead_values(self) -> pulumi.Output[Optional[Sequence['outputs.OceanRightSizingRuleRecommendationApplicationOverheadValue']]]:
        """
        Determines the Ocean Rightsizing rule recommendation application overhead values.
        """
        return pulumi.get(self, "recommendation_application_overhead_values")

    @_builtins.property
    @pulumi.getter(name="restartReplicas")
    def restart_replicas(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Valid values: "MORE_THAN_ONE_REPLICA" "ALL_MANIFEST" "NO_RESTART". Enable to sequentially restart pod batches according to recommendations, for all pods, only more than 1 replica, or not any pod.
        """
        return pulumi.get(self, "restart_replicas")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique name of the rule.
        """
        return pulumi.get(self, "rule_name")

