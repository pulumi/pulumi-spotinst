# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['RoutingRule']


class RoutingRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 balancer_id: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 middleware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleTagArgs']]]]] = None,
                 target_set_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a RoutingRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'balancer_id'")
            __props__['balancer_id'] = balancer_id
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__['listener_id'] = listener_id
            __props__['middleware_ids'] = middleware_ids
            __props__['priority'] = priority
            if route is None and not opts.urn:
                raise TypeError("Missing required property 'route'")
            __props__['route'] = route
            __props__['strategy'] = strategy
            __props__['tags'] = tags
            if target_set_ids is None and not opts.urn:
                raise TypeError("Missing required property 'target_set_ids'")
            __props__['target_set_ids'] = target_set_ids
        super(RoutingRule, __self__).__init__(
            'spotinst:multai/routingRule:RoutingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            balancer_id: Optional[pulumi.Input[str]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            middleware_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            route: Optional[pulumi.Input[str]] = None,
            strategy: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleTagArgs']]]]] = None,
            target_set_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'RoutingRule':
        """
        Get an existing RoutingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["balancer_id"] = balancer_id
        __props__["listener_id"] = listener_id
        __props__["middleware_ids"] = middleware_ids
        __props__["priority"] = priority
        __props__["route"] = route
        __props__["strategy"] = strategy
        __props__["tags"] = tags
        __props__["target_set_ids"] = target_set_ids
        return RoutingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="balancerId")
    def balancer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "balancer_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="middlewareIds")
    def middleware_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "middleware_ids")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def route(self) -> pulumi.Output[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.RoutingRuleTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetSetIds")
    def target_set_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "target_set_ids")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

