# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Listener(pulumi.CustomResource):
    balancer_id: pulumi.Output[str]
    port: pulumi.Output[float]
    protocol: pulumi.Output[str]
    tags: pulumi.Output[list]
    tls_config: pulumi.Output[dict]
    def __init__(__self__, resource_name, opts=None, balancer_id=None, port=None, protocol=None, tags=None, tls_config=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Listener resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **tags** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **tls_config** object supports the following:

          * `certificateIds` (`pulumi.Input[list]`)
          * `cipherSuites` (`pulumi.Input[list]`)
          * `maxVersion` (`pulumi.Input[str]`)
          * `minVersion` (`pulumi.Input[str]`)
          * `preferServerCipherSuites` (`pulumi.Input[bool]`)
          * `sessionTicketsDisabled` (`pulumi.Input[bool]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if balancer_id is None:
                raise TypeError("Missing required property 'balancer_id'")
            __props__['balancer_id'] = balancer_id
            if port is None:
                raise TypeError("Missing required property 'port'")
            __props__['port'] = port
            if protocol is None:
                raise TypeError("Missing required property 'protocol'")
            __props__['protocol'] = protocol
            __props__['tags'] = tags
            __props__['tls_config'] = tls_config
        super(Listener, __self__).__init__(
            'spotinst:multai/listener:Listener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, balancer_id=None, port=None, protocol=None, tags=None, tls_config=None):
        """
        Get an existing Listener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **tags** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **tls_config** object supports the following:

          * `certificateIds` (`pulumi.Input[list]`)
          * `cipherSuites` (`pulumi.Input[list]`)
          * `maxVersion` (`pulumi.Input[str]`)
          * `minVersion` (`pulumi.Input[str]`)
          * `preferServerCipherSuites` (`pulumi.Input[bool]`)
          * `sessionTicketsDisabled` (`pulumi.Input[bool]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["balancer_id"] = balancer_id
        __props__["port"] = port
        __props__["protocol"] = protocol
        __props__["tags"] = tags
        __props__["tls_config"] = tls_config
        return Listener(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
