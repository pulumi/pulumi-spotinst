# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Balancer(pulumi.CustomResource):
    connection_timeouts: pulumi.Output[dict]
    dns_cname_aliases: pulumi.Output[list]
    name: pulumi.Output[str]
    scheme: pulumi.Output[str]
    tags: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, connection_timeouts=None, dns_cname_aliases=None, name=None, scheme=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Balancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **connection_timeouts** object supports the following:

          * `draining` (`pulumi.Input[float]`)
          * `idle` (`pulumi.Input[float]`)

        The **tags** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['connection_timeouts'] = connection_timeouts
            __props__['dns_cname_aliases'] = dns_cname_aliases
            __props__['name'] = name
            __props__['scheme'] = scheme
            __props__['tags'] = tags
        super(Balancer, __self__).__init__(
            'spotinst:multai/balancer:Balancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, connection_timeouts=None, dns_cname_aliases=None, name=None, scheme=None, tags=None):
        """
        Get an existing Balancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **connection_timeouts** object supports the following:

          * `draining` (`pulumi.Input[float]`)
          * `idle` (`pulumi.Input[float]`)

        The **tags** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["connection_timeouts"] = connection_timeouts
        __props__["dns_cname_aliases"] = dns_cname_aliases
        __props__["name"] = name
        __props__["scheme"] = scheme
        __props__["tags"] = tags
        return Balancer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
