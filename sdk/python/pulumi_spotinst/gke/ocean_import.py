# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class OceanImport(pulumi.CustomResource):
    autoscaler: pulumi.Output[dict]
    backend_services: pulumi.Output[list]
    """
    Describes the backend service configurations.

      * `locationType` (`str`) - Sets which location the backend services will be active. Valid values: `regional`, `global`.
      * `namedPorts` (`list`)
        * `name` (`str`)
        * `ports` (`list`) - A list of ports.

      * `scheme` (`str`) - Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
      * `serviceName` (`str`) - The name of the backend service.
    """
    cluster_controller_id: pulumi.Output[str]
    cluster_name: pulumi.Output[str]
    """
    The GKE cluster name.
    """
    desired_capacity: pulumi.Output[float]
    """
    The number of instances to launch and maintain in the cluster. 
    """
    location: pulumi.Output[str]
    """
    The zone the master cluster is located in. 
    """
    max_size: pulumi.Output[float]
    """
    The upper limit of instances the cluster can scale up to.
    """
    min_size: pulumi.Output[float]
    """
    The lower limit of instances the cluster can scale down to.
    """
    scheduled_tasks: pulumi.Output[list]
    whitelists: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, autoscaler=None, backend_services=None, cluster_name=None, desired_capacity=None, location=None, max_size=None, min_size=None, scheduled_tasks=None, whitelists=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Spotinst Ocean GKE import resource.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        example = spotinst.gke.OceanImport("example",
            backend_services=[{
                "locationType": "regional",
                "namedPorts": [{
                    "name": "http",
                    "ports": [
                        80,
                        8080,
                    ],
                }],
                "scheme": "INTERNAL",
                "serviceName": "example-backend-service",
            }],
            cluster_name="example-cluster-name",
            desired_capacity=0,
            location="us-central1-a",
            max_size=2,
            min_size=0,
            whitelists=[
                "n1-standard-1",
                "n1-standard-2",
            ])
        ```

        ## scheduled task

        * `scheduled_task` - (Optional) Set scheduling object.
            * `shutdown_hours` - (Optional) Set shutdown hours for cluster object.
                * `is_enabled` - (Optional)  Flag to enable / disable the shutdown hours.
                                             Example: True
                * `time_windows` - (Required) Set time windows for shutdown hours. specify a list of 'timeWindows' with at least one time window Each string is in the format of - ddd:hh:mm-ddd:hh:mm ddd = day of week = Sun | Mon | Tue | Wed | Thu | Fri | Sat hh = hour 24 = 0 -23 mm = minute = 0 - 59. Time windows should not overlap. required on cluster.scheduling.isEnabled = True. API Times are in UTC
                                              Example: Fri:15:30-Wed:14:30
            * `tasks` - (Optional) The scheduling tasks for the cluster.
                * `is_enabled` - (Required)  Describes whether the task is enabled. When true the task should run when false it should not run. Required for cluster.scheduling.tasks object.
                * `cron_expression` - (Required) A valid cron expression. For example : " * * * * * ".The cron is running in UTC time zone and is in Unix cron format Cron Expression Validator Script. Only one of ‘frequency’ or ‘cronExpression’ should be used at a time. Required for cluster.scheduling.tasks object
                                                 Example: 0 1 * * *
                * `task_type` - (Required) Valid values: "clusterRoll". Required for cluster.scheduling.tasks object.
                * `batch_size_percentage` - (Optional)  Value in % to set size of batch in roll. Valid values are 0-100
                                                        Example: 20.
                                  
                     
        ```python
        import pulumi
        ```

        <a id="autoscaler"></a>
        ## Autoscaler

        * `autoscaler` - (Optional) The Ocean Kubernetes Autoscaler object.
        * `is_enabled` - (Optional, Default: `true`) Enable the Ocean Kubernetes Autoscaler.
        * `is_auto_config` - (Optional, Default: `true`) Automatically configure and optimize headroom resources.
        * `auto_headroom_percentage` - Optionally set the auto headroom percentage, set a number between 0-200 to control the headroom % from the cluster. Relevant when isAutoConfig=true.
        * `cooldown` - (Optional, Default: `null`) Cooldown period between scaling actions.
        * `headroom` - (Optional) Spare resource capacity management enabling fast assignment of Pods without waiting for new resources to launch.
        * `cpu_per_unit` - (Optional) Optionally configure the number of CPUs to allocate the headroom. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
        * `memory_per_unit` - (Optional) Optionally configure the amount of memory (MiB) to allocate the headroom.
        * `gpu_per_unit` - (Optional) How much GPU allocate for headroom unit.
        * `num_of_units` - (Optional) The number of units to retain as headroom, where each unit has the defined headroom CPU and memory.
        * `down` - (Optional) Auto Scaling scale down operations.
        * `evaluation_periods` - (Optional, Default: `null`) The number of evaluation periods that should accumulate before a scale down action takes place.
        * `max_scale_down_percentage` - (Optional) Would represent the maximum % to scale-down. Number between 1-100.
        * `resource_limits` - (Optional) Optionally set upper and lower bounds on the resource usage of the cluster.
        * `max_vcpu` - (Optional) The maximum cpu in vCpu units that can be allocated to the cluster.
        * `max_memory_gib` - (Optional) The maximum memory in GiB units that can be allocated to the cluster.

        ```python
        import pulumi
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] backend_services: Describes the backend service configurations.
        :param pulumi.Input[str] cluster_name: The GKE cluster name.
        :param pulumi.Input[float] desired_capacity: The number of instances to launch and maintain in the cluster. 
        :param pulumi.Input[str] location: The zone the master cluster is located in. 
        :param pulumi.Input[float] max_size: The upper limit of instances the cluster can scale up to.
        :param pulumi.Input[float] min_size: The lower limit of instances the cluster can scale down to.

        The **autoscaler** object supports the following:

          * `autoHeadroomPercentage` (`pulumi.Input[float]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `down` (`pulumi.Input[dict]`)
            * `evaluationPeriods` (`pulumi.Input[float]`)
            * `maxScaleDownPercentage` (`pulumi.Input[float]`)

          * `headroom` (`pulumi.Input[dict]`)
            * `cpuPerUnit` (`pulumi.Input[float]`)
            * `gpuPerUnit` (`pulumi.Input[float]`)
            * `memoryPerUnit` (`pulumi.Input[float]`)
            * `numOfUnits` (`pulumi.Input[float]`)

          * `isAutoConfig` (`pulumi.Input[bool]`)
          * `isEnabled` (`pulumi.Input[bool]`)
          * `resource_limits` (`pulumi.Input[dict]`)
            * `maxMemoryGib` (`pulumi.Input[float]`)
            * `maxVcpu` (`pulumi.Input[float]`)

        The **backend_services** object supports the following:

          * `locationType` (`pulumi.Input[str]`) - Sets which location the backend services will be active. Valid values: `regional`, `global`.
          * `namedPorts` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`)
            * `ports` (`pulumi.Input[list]`) - A list of ports.

          * `scheme` (`pulumi.Input[str]`) - Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
          * `serviceName` (`pulumi.Input[str]`) - The name of the backend service.

        The **scheduled_tasks** object supports the following:

          * `shutdownHours` (`pulumi.Input[dict]`)
            * `isEnabled` (`pulumi.Input[bool]`)
            * `timeWindows` (`pulumi.Input[list]`)

          * `tasks` (`pulumi.Input[list]`)
            * `batchSizePercentage` (`pulumi.Input[float]`)
            * `cronExpression` (`pulumi.Input[str]`)
            * `isEnabled` (`pulumi.Input[bool]`)
            * `taskType` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['autoscaler'] = autoscaler
            __props__['backend_services'] = backend_services
            if cluster_name is None:
                raise TypeError("Missing required property 'cluster_name'")
            __props__['cluster_name'] = cluster_name
            __props__['desired_capacity'] = desired_capacity
            if location is None:
                raise TypeError("Missing required property 'location'")
            __props__['location'] = location
            __props__['max_size'] = max_size
            __props__['min_size'] = min_size
            __props__['scheduled_tasks'] = scheduled_tasks
            __props__['whitelists'] = whitelists
            __props__['cluster_controller_id'] = None
        super(OceanImport, __self__).__init__(
            'spotinst:gke/oceanImport:OceanImport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, autoscaler=None, backend_services=None, cluster_controller_id=None, cluster_name=None, desired_capacity=None, location=None, max_size=None, min_size=None, scheduled_tasks=None, whitelists=None):
        """
        Get an existing OceanImport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] backend_services: Describes the backend service configurations.
        :param pulumi.Input[str] cluster_name: The GKE cluster name.
        :param pulumi.Input[float] desired_capacity: The number of instances to launch and maintain in the cluster. 
        :param pulumi.Input[str] location: The zone the master cluster is located in. 
        :param pulumi.Input[float] max_size: The upper limit of instances the cluster can scale up to.
        :param pulumi.Input[float] min_size: The lower limit of instances the cluster can scale down to.

        The **autoscaler** object supports the following:

          * `autoHeadroomPercentage` (`pulumi.Input[float]`)
          * `cooldown` (`pulumi.Input[float]`)
          * `down` (`pulumi.Input[dict]`)
            * `evaluationPeriods` (`pulumi.Input[float]`)
            * `maxScaleDownPercentage` (`pulumi.Input[float]`)

          * `headroom` (`pulumi.Input[dict]`)
            * `cpuPerUnit` (`pulumi.Input[float]`)
            * `gpuPerUnit` (`pulumi.Input[float]`)
            * `memoryPerUnit` (`pulumi.Input[float]`)
            * `numOfUnits` (`pulumi.Input[float]`)

          * `isAutoConfig` (`pulumi.Input[bool]`)
          * `isEnabled` (`pulumi.Input[bool]`)
          * `resource_limits` (`pulumi.Input[dict]`)
            * `maxMemoryGib` (`pulumi.Input[float]`)
            * `maxVcpu` (`pulumi.Input[float]`)

        The **backend_services** object supports the following:

          * `locationType` (`pulumi.Input[str]`) - Sets which location the backend services will be active. Valid values: `regional`, `global`.
          * `namedPorts` (`pulumi.Input[list]`)
            * `name` (`pulumi.Input[str]`)
            * `ports` (`pulumi.Input[list]`) - A list of ports.

          * `scheme` (`pulumi.Input[str]`) - Use when `location_type` is `regional`. Set the traffic for the backend service to either between the instances in the vpc or to traffic from the internet. Valid values: `INTERNAL`, `EXTERNAL`.
          * `serviceName` (`pulumi.Input[str]`) - The name of the backend service.

        The **scheduled_tasks** object supports the following:

          * `shutdownHours` (`pulumi.Input[dict]`)
            * `isEnabled` (`pulumi.Input[bool]`)
            * `timeWindows` (`pulumi.Input[list]`)

          * `tasks` (`pulumi.Input[list]`)
            * `batchSizePercentage` (`pulumi.Input[float]`)
            * `cronExpression` (`pulumi.Input[str]`)
            * `isEnabled` (`pulumi.Input[bool]`)
            * `taskType` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["autoscaler"] = autoscaler
        __props__["backend_services"] = backend_services
        __props__["cluster_controller_id"] = cluster_controller_id
        __props__["cluster_name"] = cluster_name
        __props__["desired_capacity"] = desired_capacity
        __props__["location"] = location
        __props__["max_size"] = max_size
        __props__["min_size"] = min_size
        __props__["scheduled_tasks"] = scheduled_tasks
        __props__["whitelists"] = whitelists
        return OceanImport(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

