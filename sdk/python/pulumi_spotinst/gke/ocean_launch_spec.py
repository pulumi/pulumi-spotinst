# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class OceanLaunchSpec(pulumi.CustomResource):
    autoscale_headrooms: pulumi.Output[list]
    """
    Set custom headroom per launch spec. provide list of headrooms object.

      * `cpuPerUnit` (`float`) - Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
      * `gpuPerUnit` (`float`) - Optionally configure the number of GPUS to allocate for each headroom unit.
      * `memoryPerUnit` (`float`) - Optionally configure the amount of memory (MB) to allocate for each headroom unit.
      * `numOfUnits` (`float`) - The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.
    """
    labels: pulumi.Output[list]
    """
    Cluster's labels.

      * `key` (`str`)
      * `value` (`str`)
    """
    metadatas: pulumi.Output[list]
    """
    Cluster's metadata.

      * `key` (`str`)
      * `value` (`str`)
    """
    ocean_id: pulumi.Output[str]
    """
    The Ocean cluster ID required for launchSpec create. 
    """
    source_image: pulumi.Output[str]
    """
    Image URL.
    """
    taints: pulumi.Output[list]
    """
    Cluster's taints.

      * `effect` (`str`)
      * `key` (`str`)
      * `value` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, autoscale_headrooms=None, labels=None, metadatas=None, ocean_id=None, source_image=None, taints=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a custom Spotinst Ocean GKE Launch Spec resource.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        example = spotinst.gke.OceanLaunchSpec("example",
            autoscale_headrooms=[{
                "cpuPerUnit": 1000,
                "gpuPerUnit": 0,
                "memoryPerUnit": 2048,
                "numOfUnits": 5,
            }],
            labels=[{
                "key": "labelKey",
                "value": "labelVal",
            }],
            metadatas=[{
                "key": "gci-update-strategy",
                "value": "update_disabled",
            }],
            ocean_id="o-123456",
            source_image="image",
            taints=[{
                "effect": "taintEffect",
                "key": "taintKey",
                "value": "taintVal",
            }])
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] autoscale_headrooms: Set custom headroom per launch spec. provide list of headrooms object.
        :param pulumi.Input[list] labels: Cluster's labels.
        :param pulumi.Input[list] metadatas: Cluster's metadata.
        :param pulumi.Input[str] ocean_id: The Ocean cluster ID required for launchSpec create. 
        :param pulumi.Input[str] source_image: Image URL.
        :param pulumi.Input[list] taints: Cluster's taints.

        The **autoscale_headrooms** object supports the following:

          * `cpuPerUnit` (`pulumi.Input[float]`) - Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
          * `gpuPerUnit` (`pulumi.Input[float]`) - Optionally configure the number of GPUS to allocate for each headroom unit.
          * `memoryPerUnit` (`pulumi.Input[float]`) - Optionally configure the amount of memory (MB) to allocate for each headroom unit.
          * `numOfUnits` (`pulumi.Input[float]`) - The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.

        The **labels** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **metadatas** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **taints** object supports the following:

          * `effect` (`pulumi.Input[str]`)
          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['autoscale_headrooms'] = autoscale_headrooms
            __props__['labels'] = labels
            if metadatas is None:
                raise TypeError("Missing required property 'metadatas'")
            __props__['metadatas'] = metadatas
            if ocean_id is None:
                raise TypeError("Missing required property 'ocean_id'")
            __props__['ocean_id'] = ocean_id
            if source_image is None:
                raise TypeError("Missing required property 'source_image'")
            __props__['source_image'] = source_image
            __props__['taints'] = taints
        super(OceanLaunchSpec, __self__).__init__(
            'spotinst:gke/oceanLaunchSpec:OceanLaunchSpec',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, autoscale_headrooms=None, labels=None, metadatas=None, ocean_id=None, source_image=None, taints=None):
        """
        Get an existing OceanLaunchSpec resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] autoscale_headrooms: Set custom headroom per launch spec. provide list of headrooms object.
        :param pulumi.Input[list] labels: Cluster's labels.
        :param pulumi.Input[list] metadatas: Cluster's metadata.
        :param pulumi.Input[str] ocean_id: The Ocean cluster ID required for launchSpec create. 
        :param pulumi.Input[str] source_image: Image URL.
        :param pulumi.Input[list] taints: Cluster's taints.

        The **autoscale_headrooms** object supports the following:

          * `cpuPerUnit` (`pulumi.Input[float]`) - Optionally configure the number of CPUs to allocate for each headroom unit. CPUs are denoted in millicores, where 1000 millicores = 1 vCPU.
          * `gpuPerUnit` (`pulumi.Input[float]`) - Optionally configure the number of GPUS to allocate for each headroom unit.
          * `memoryPerUnit` (`pulumi.Input[float]`) - Optionally configure the amount of memory (MB) to allocate for each headroom unit.
          * `numOfUnits` (`pulumi.Input[float]`) - The number of units to retain as headroom, where each unit has the defined headroom CPU, memory and GPU.

        The **labels** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **metadatas** object supports the following:

          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)

        The **taints** object supports the following:

          * `effect` (`pulumi.Input[str]`)
          * `key` (`pulumi.Input[str]`)
          * `value` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["autoscale_headrooms"] = autoscale_headrooms
        __props__["labels"] = labels
        __props__["metadatas"] = metadatas
        __props__["ocean_id"] = ocean_id
        __props__["source_image"] = source_image
        __props__["taints"] = taints
        return OceanLaunchSpec(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

