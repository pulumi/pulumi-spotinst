# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ElastigroupAzureV3Args', 'ElastigroupAzureV3']

@pulumi.input_type
class ElastigroupAzureV3Args:
    def __init__(__self__, *,
                 network: pulumi.Input['ElastigroupAzureV3NetworkArgs'],
                 od_sizes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 os: pulumi.Input[str],
                 region: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 spot_sizes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 strategy: pulumi.Input['ElastigroupAzureV3StrategyArgs'],
                 custom_data: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]] = None,
                 login: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ElastigroupAzureV3 resource.
        :param pulumi.Input['ElastigroupAzureV3NetworkArgs'] network: Defines the Virtual Network and Subnet for your Elastigroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] os: Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: - The resource group of the Application Security Group.
               }
        :param pulumi.Input[Sequence[pulumi.Input[str]]] spot_sizes: Available Low-Priority sizes.
        :param pulumi.Input['ElastigroupAzureV3StrategyArgs'] strategy: Describes the deployment strategy.
        :param pulumi.Input[str] custom_data: Custom init script file or text in Base64 encoded format.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]] images: Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        :param pulumi.Input['ElastigroupAzureV3LoginArgs'] login: Describes the login configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]] managed_service_identities: List of Managed Service Identity objects.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: - The name of the Application Security group.
        """
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "od_sizes", od_sizes)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "spot_sizes", spot_sizes)
        pulumi.set(__self__, "strategy", strategy)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if managed_service_identities is not None:
            pulumi.set(__self__, "managed_service_identities", managed_service_identities)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input['ElastigroupAzureV3NetworkArgs']:
        """
        Defines the Virtual Network and Subnet for your Elastigroup.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input['ElastigroupAzureV3NetworkArgs']):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="odSizes")
    def od_sizes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Available On-Demand sizes
        """
        return pulumi.get(self, "od_sizes")

    @od_sizes.setter
    def od_sizes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "od_sizes", value)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        """
        Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region your Azure group will be created in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        - The resource group of the Application Security Group.
        }
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="spotSizes")
    def spot_sizes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Available Low-Priority sizes.
        """
        return pulumi.get(self, "spot_sizes")

    @spot_sizes.setter
    def spot_sizes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "spot_sizes", value)

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Input['ElastigroupAzureV3StrategyArgs']:
        """
        Describes the deployment strategy.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input['ElastigroupAzureV3StrategyArgs']):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Custom init script file or text in Base64 encoded format.
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The desired number of instances the group should have at any time.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]:
        """
        Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]:
        """
        Describes the login configuration.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]:
        """
        List of Managed Service Identity objects.
        """
        return pulumi.get(self, "managed_service_identities")

    @managed_service_identities.setter
    def managed_service_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]):
        pulumi.set(self, "managed_service_identities", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of instances the group should have at any time.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of instances the group should have at any time.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - The name of the Application Security group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ElastigroupAzureV3State:
    def __init__(__self__, *,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]] = None,
                 login: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']] = None,
                 od_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 spot_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 strategy: Optional[pulumi.Input['ElastigroupAzureV3StrategyArgs']] = None):
        """
        Input properties used for looking up and filtering ElastigroupAzureV3 resources.
        :param pulumi.Input[str] custom_data: Custom init script file or text in Base64 encoded format.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]] images: Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        :param pulumi.Input['ElastigroupAzureV3LoginArgs'] login: Describes the login configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]] managed_service_identities: List of Managed Service Identity objects.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: - The name of the Application Security group.
        :param pulumi.Input['ElastigroupAzureV3NetworkArgs'] network: Defines the Virtual Network and Subnet for your Elastigroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] os: Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: - The resource group of the Application Security Group.
               }
        :param pulumi.Input[Sequence[pulumi.Input[str]]] spot_sizes: Available Low-Priority sizes.
        :param pulumi.Input['ElastigroupAzureV3StrategyArgs'] strategy: Describes the deployment strategy.
        """
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if managed_service_identities is not None:
            pulumi.set(__self__, "managed_service_identities", managed_service_identities)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if od_sizes is not None:
            pulumi.set(__self__, "od_sizes", od_sizes)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if spot_sizes is not None:
            pulumi.set(__self__, "spot_sizes", spot_sizes)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Custom init script file or text in Base64 encoded format.
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        The desired number of instances the group should have at any time.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]:
        """
        Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]:
        """
        Describes the login configuration.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]:
        """
        List of Managed Service Identity objects.
        """
        return pulumi.get(self, "managed_service_identities")

    @managed_service_identities.setter
    def managed_service_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]):
        pulumi.set(self, "managed_service_identities", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of instances the group should have at any time.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of instances the group should have at any time.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        - The name of the Application Security group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']]:
        """
        Defines the Virtual Network and Subnet for your Elastigroup.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="odSizes")
    def od_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Available On-Demand sizes
        """
        return pulumi.get(self, "od_sizes")

    @od_sizes.setter
    def od_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "od_sizes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region your Azure group will be created in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        - The resource group of the Application Security Group.
        }
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="spotSizes")
    def spot_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Available Low-Priority sizes.
        """
        return pulumi.get(self, "spot_sizes")

    @spot_sizes.setter
    def spot_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "spot_sizes", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['ElastigroupAzureV3StrategyArgs']]:
        """
        Describes the deployment strategy.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['ElastigroupAzureV3StrategyArgs']]):
        pulumi.set(self, "strategy", value)


class ElastigroupAzureV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ImageArgs']]]]] = None,
                 login: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3LoginArgs']]] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3NetworkArgs']]] = None,
                 od_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 spot_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 strategy: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3StrategyArgs']]] = None,
                 __props__=None):
        """
        Provides a Spotinst elastigroup Azure resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        test_azure_group = spotinst.ElastigroupAzureV3("testAzureGroup",
            custom_data="IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=",
            desired_capacity=1,
            images=[spotinst.ElastigroupAzureV3ImageArgs(
                marketplaces=[spotinst.ElastigroupAzureV3ImageMarketplaceArgs(
                    offer="UbuntuServer",
                    publisher="Canonical",
                    sku="18.04-LTS",
                    version="latest",
                )],
            )],
            login=spotinst.ElastigroupAzureV3LoginArgs(
                ssh_public_key="33a2s1f3g5a1df5g1ad3f2g1adfg56dfg==",
                user_name="admin",
            ),
            managed_service_identities=[spotinst.ElastigroupAzureV3ManagedServiceIdentityArgs(
                name="ocean-westus-dev-aks-agentpool",
                resource_group_name="MC_ocean-westus-dev_ocean-westus-dev-aks_westus",
            )],
            max_size=1,
            min_size=0,
            network=spotinst.ElastigroupAzureV3NetworkArgs(
                network_interfaces=[spotinst.ElastigroupAzureV3NetworkNetworkInterfaceArgs(
                    additional_ip_configs=[spotinst.ElastigroupAzureV3NetworkNetworkInterfaceAdditionalIpConfigArgs(
                        private_ip_version="IPv4",
                        name="SecondaryIPConfig",
                    )],
                    application_security_group=[{
                        "name": "ApplicationSecurityGroupName",
                        "resourceGroupName": "ResourceGroup",
                    }],
                    assign_public_ip=False,
                    is_primary=True,
                    subnet_name="default",
                )],
                resource_group_name="ResourceGroup",
                virtual_network_name="VirtualNetworkName",
            ),
            od_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            os="Linux",
            region="eastus",
            resource_group_name="spotinst-azure",
            spot_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            strategy=spotinst.ElastigroupAzureV3StrategyArgs(
                draining_timeout=300,
                fallback_to_on_demand=True,
                od_count=1,
                spot_percentage=65,
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_data: Custom init script file or text in Base64 encoded format.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ImageArgs']]]] images: Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3LoginArgs']] login: Describes the login configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] managed_service_identities: List of Managed Service Identity objects.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: - The name of the Application Security group.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3NetworkArgs']] network: Defines the Virtual Network and Subnet for your Elastigroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] os: Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: - The resource group of the Application Security Group.
               }
        :param pulumi.Input[Sequence[pulumi.Input[str]]] spot_sizes: Available Low-Priority sizes.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3StrategyArgs']] strategy: Describes the deployment strategy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ElastigroupAzureV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Spotinst elastigroup Azure resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_spotinst as spotinst

        test_azure_group = spotinst.ElastigroupAzureV3("testAzureGroup",
            custom_data="IyEvYmluL2Jhc2gKZWNobyAidGVzdCI=",
            desired_capacity=1,
            images=[spotinst.ElastigroupAzureV3ImageArgs(
                marketplaces=[spotinst.ElastigroupAzureV3ImageMarketplaceArgs(
                    offer="UbuntuServer",
                    publisher="Canonical",
                    sku="18.04-LTS",
                    version="latest",
                )],
            )],
            login=spotinst.ElastigroupAzureV3LoginArgs(
                ssh_public_key="33a2s1f3g5a1df5g1ad3f2g1adfg56dfg==",
                user_name="admin",
            ),
            managed_service_identities=[spotinst.ElastigroupAzureV3ManagedServiceIdentityArgs(
                name="ocean-westus-dev-aks-agentpool",
                resource_group_name="MC_ocean-westus-dev_ocean-westus-dev-aks_westus",
            )],
            max_size=1,
            min_size=0,
            network=spotinst.ElastigroupAzureV3NetworkArgs(
                network_interfaces=[spotinst.ElastigroupAzureV3NetworkNetworkInterfaceArgs(
                    additional_ip_configs=[spotinst.ElastigroupAzureV3NetworkNetworkInterfaceAdditionalIpConfigArgs(
                        private_ip_version="IPv4",
                        name="SecondaryIPConfig",
                    )],
                    application_security_group=[{
                        "name": "ApplicationSecurityGroupName",
                        "resourceGroupName": "ResourceGroup",
                    }],
                    assign_public_ip=False,
                    is_primary=True,
                    subnet_name="default",
                )],
                resource_group_name="ResourceGroup",
                virtual_network_name="VirtualNetworkName",
            ),
            od_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            os="Linux",
            region="eastus",
            resource_group_name="spotinst-azure",
            spot_sizes=[
                "standard_a1_v1",
                "standard_a1_v2",
            ],
            strategy=spotinst.ElastigroupAzureV3StrategyArgs(
                draining_timeout=300,
                fallback_to_on_demand=True,
                od_count=1,
                spot_percentage=65,
            ))
        ```

        :param str resource_name: The name of the resource.
        :param ElastigroupAzureV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ElastigroupAzureV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ImageArgs']]]]] = None,
                 login: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3LoginArgs']]] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3NetworkArgs']]] = None,
                 od_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 spot_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 strategy: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3StrategyArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ElastigroupAzureV3Args.__new__(ElastigroupAzureV3Args)

            __props__.__dict__["custom_data"] = custom_data
            __props__.__dict__["desired_capacity"] = desired_capacity
            __props__.__dict__["images"] = images
            __props__.__dict__["login"] = login
            __props__.__dict__["managed_service_identities"] = managed_service_identities
            __props__.__dict__["max_size"] = max_size
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["name"] = name
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            if od_sizes is None and not opts.urn:
                raise TypeError("Missing required property 'od_sizes'")
            __props__.__dict__["od_sizes"] = od_sizes
            if os is None and not opts.urn:
                raise TypeError("Missing required property 'os'")
            __props__.__dict__["os"] = os
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            if spot_sizes is None and not opts.urn:
                raise TypeError("Missing required property 'spot_sizes'")
            __props__.__dict__["spot_sizes"] = spot_sizes
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
        super(ElastigroupAzureV3, __self__).__init__(
            'spotinst:index/elastigroupAzureV3:ElastigroupAzureV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_data: Optional[pulumi.Input[str]] = None,
            desired_capacity: Optional[pulumi.Input[int]] = None,
            images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ImageArgs']]]]] = None,
            login: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3LoginArgs']]] = None,
            managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3NetworkArgs']]] = None,
            od_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            os: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            spot_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            strategy: Optional[pulumi.Input[pulumi.InputType['ElastigroupAzureV3StrategyArgs']]] = None) -> 'ElastigroupAzureV3':
        """
        Get an existing ElastigroupAzureV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_data: Custom init script file or text in Base64 encoded format.
        :param pulumi.Input[int] desired_capacity: The desired number of instances the group should have at any time.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ImageArgs']]]] images: Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3LoginArgs']] login: Describes the login configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] managed_service_identities: List of Managed Service Identity objects.
        :param pulumi.Input[int] max_size: The maximum number of instances the group should have at any time.
        :param pulumi.Input[int] min_size: The minimum number of instances the group should have at any time.
        :param pulumi.Input[str] name: - The name of the Application Security group.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3NetworkArgs']] network: Defines the Virtual Network and Subnet for your Elastigroup.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] od_sizes: Available On-Demand sizes
        :param pulumi.Input[str] os: Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        :param pulumi.Input[str] region: The region your Azure group will be created in.
        :param pulumi.Input[str] resource_group_name: - The resource group of the Application Security Group.
               }
        :param pulumi.Input[Sequence[pulumi.Input[str]]] spot_sizes: Available Low-Priority sizes.
        :param pulumi.Input[pulumi.InputType['ElastigroupAzureV3StrategyArgs']] strategy: Describes the deployment strategy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ElastigroupAzureV3State.__new__(_ElastigroupAzureV3State)

        __props__.__dict__["custom_data"] = custom_data
        __props__.__dict__["desired_capacity"] = desired_capacity
        __props__.__dict__["images"] = images
        __props__.__dict__["login"] = login
        __props__.__dict__["managed_service_identities"] = managed_service_identities
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["od_sizes"] = od_sizes
        __props__.__dict__["os"] = os
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["spot_sizes"] = spot_sizes
        __props__.__dict__["strategy"] = strategy
        return ElastigroupAzureV3(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> pulumi.Output[Optional[str]]:
        """
        Custom init script file or text in Base64 encoded format.
        """
        return pulumi.get(self, "custom_data")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> pulumi.Output[Optional[int]]:
        """
        The desired number of instances the group should have at any time.
        """
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter
    def images(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3Image']]]:
        """
        Image of a VM. An image is a template for creating new VMs. Choose from Azure image catalogue (marketplace) or use a custom image.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3Login']]:
        """
        Describes the login configuration.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3ManagedServiceIdentity']]]:
        """
        List of Managed Service Identity objects.
        """
        return pulumi.get(self, "managed_service_identities")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        """
        The maximum number of instances the group should have at any time.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        The minimum number of instances the group should have at any time.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        - The name of the Application Security group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output['outputs.ElastigroupAzureV3Network']:
        """
        Defines the Virtual Network and Subnet for your Elastigroup.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="odSizes")
    def od_sizes(self) -> pulumi.Output[Sequence[str]]:
        """
        Available On-Demand sizes
        """
        return pulumi.get(self, "od_sizes")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        """
        Type of the operating system. Valid values: `"Linux"`, `"Windows"`.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region your Azure group will be created in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        """
        - The resource group of the Application Security Group.
        }
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="spotSizes")
    def spot_sizes(self) -> pulumi.Output[Sequence[str]]:
        """
        Available Low-Priority sizes.
        """
        return pulumi.get(self, "spot_sizes")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output['outputs.ElastigroupAzureV3Strategy']:
        """
        Describes the deployment strategy.
        """
        return pulumi.get(self, "strategy")

