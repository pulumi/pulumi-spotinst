# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ElastigroupAzureV3Args', 'ElastigroupAzureV3']

@pulumi.input_type
class ElastigroupAzureV3Args:
    def __init__(__self__, *,
                 fallback_to_on_demand: pulumi.Input[bool],
                 network: pulumi.Input['ElastigroupAzureV3NetworkArgs'],
                 os: pulumi.Input[str],
                 region: pulumi.Input[str],
                 resource_group_name: pulumi.Input[str],
                 vm_sizes: pulumi.Input['ElastigroupAzureV3VmSizesArgs'],
                 availability_vs_cost: Optional[pulumi.Input[int]] = None,
                 boot_diagnostics: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]] = None,
                 capacity_reservation: Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 draining_timeout: Optional[pulumi.Input[int]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]] = None,
                 health: Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]] = None,
                 login: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_demand_count: Optional[pulumi.Input[int]] = None,
                 optimization_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os_disk: Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']] = None,
                 preferred_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proximity_placement_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]] = None,
                 revert_to_spot: Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']] = None,
                 scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]] = None,
                 scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]] = None,
                 scheduling_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]] = None,
                 security: Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']] = None,
                 shutdown_script: Optional[pulumi.Input[str]] = None,
                 signals: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]] = None,
                 spot_percentage: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_name_prefix: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ElastigroupAzureV3 resource.
        """
        pulumi.set(__self__, "fallback_to_on_demand", fallback_to_on_demand)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "vm_sizes", vm_sizes)
        if availability_vs_cost is not None:
            pulumi.set(__self__, "availability_vs_cost", availability_vs_cost)
        if boot_diagnostics is not None:
            pulumi.set(__self__, "boot_diagnostics", boot_diagnostics)
        if capacity_reservation is not None:
            pulumi.set(__self__, "capacity_reservation", capacity_reservation)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if draining_timeout is not None:
            pulumi.set(__self__, "draining_timeout", draining_timeout)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if managed_service_identities is not None:
            pulumi.set(__self__, "managed_service_identities", managed_service_identities)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_demand_count is not None:
            pulumi.set(__self__, "on_demand_count", on_demand_count)
        if optimization_windows is not None:
            pulumi.set(__self__, "optimization_windows", optimization_windows)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if preferred_zones is not None:
            pulumi.set(__self__, "preferred_zones", preferred_zones)
        if proximity_placement_groups is not None:
            pulumi.set(__self__, "proximity_placement_groups", proximity_placement_groups)
        if revert_to_spot is not None:
            pulumi.set(__self__, "revert_to_spot", revert_to_spot)
        if scaling_down_policies is not None:
            pulumi.set(__self__, "scaling_down_policies", scaling_down_policies)
        if scaling_up_policies is not None:
            pulumi.set(__self__, "scaling_up_policies", scaling_up_policies)
        if scheduling_tasks is not None:
            pulumi.set(__self__, "scheduling_tasks", scheduling_tasks)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if shutdown_script is not None:
            pulumi.set(__self__, "shutdown_script", shutdown_script)
        if signals is not None:
            pulumi.set(__self__, "signals", signals)
        if spot_percentage is not None:
            pulumi.set(__self__, "spot_percentage", spot_percentage)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vm_name_prefix is not None:
            pulumi.set(__self__, "vm_name_prefix", vm_name_prefix)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="fallbackToOnDemand")
    def fallback_to_on_demand(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "fallback_to_on_demand")

    @fallback_to_on_demand.setter
    def fallback_to_on_demand(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fallback_to_on_demand", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input['ElastigroupAzureV3NetworkArgs']:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input['ElastigroupAzureV3NetworkArgs']):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="vmSizes")
    def vm_sizes(self) -> pulumi.Input['ElastigroupAzureV3VmSizesArgs']:
        return pulumi.get(self, "vm_sizes")

    @vm_sizes.setter
    def vm_sizes(self, value: pulumi.Input['ElastigroupAzureV3VmSizesArgs']):
        pulumi.set(self, "vm_sizes", value)

    @property
    @pulumi.getter(name="availabilityVsCost")
    def availability_vs_cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "availability_vs_cost")

    @availability_vs_cost.setter
    def availability_vs_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "availability_vs_cost", value)

    @property
    @pulumi.getter(name="bootDiagnostics")
    def boot_diagnostics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]]:
        return pulumi.get(self, "boot_diagnostics")

    @boot_diagnostics.setter
    def boot_diagnostics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]]):
        pulumi.set(self, "boot_diagnostics", value)

    @property
    @pulumi.getter(name="capacityReservation")
    def capacity_reservation(self) -> Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']]:
        return pulumi.get(self, "capacity_reservation")

    @capacity_reservation.setter
    def capacity_reservation(self, value: Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']]):
        pulumi.set(self, "capacity_reservation", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="drainingTimeout")
    def draining_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "draining_timeout")

    @draining_timeout.setter
    def draining_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "draining_timeout", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]]:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']]:
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]]:
        return pulumi.get(self, "load_balancers")

    @load_balancers.setter
    def load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]]):
        pulumi.set(self, "load_balancers", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]:
        return pulumi.get(self, "managed_service_identities")

    @managed_service_identities.setter
    def managed_service_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]):
        pulumi.set(self, "managed_service_identities", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onDemandCount")
    def on_demand_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "on_demand_count")

    @on_demand_count.setter
    def on_demand_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_demand_count", value)

    @property
    @pulumi.getter(name="optimizationWindows")
    def optimization_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "optimization_windows")

    @optimization_windows.setter
    def optimization_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "optimization_windows", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']]:
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']]):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="preferredZones")
    def preferred_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "preferred_zones")

    @preferred_zones.setter
    def preferred_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_zones", value)

    @property
    @pulumi.getter(name="proximityPlacementGroups")
    def proximity_placement_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]]:
        return pulumi.get(self, "proximity_placement_groups")

    @proximity_placement_groups.setter
    def proximity_placement_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]]):
        pulumi.set(self, "proximity_placement_groups", value)

    @property
    @pulumi.getter(name="revertToSpot")
    def revert_to_spot(self) -> Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']]:
        return pulumi.get(self, "revert_to_spot")

    @revert_to_spot.setter
    def revert_to_spot(self, value: Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']]):
        pulumi.set(self, "revert_to_spot", value)

    @property
    @pulumi.getter(name="scalingDownPolicies")
    def scaling_down_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]]:
        return pulumi.get(self, "scaling_down_policies")

    @scaling_down_policies.setter
    def scaling_down_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]]):
        pulumi.set(self, "scaling_down_policies", value)

    @property
    @pulumi.getter(name="scalingUpPolicies")
    def scaling_up_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]]:
        return pulumi.get(self, "scaling_up_policies")

    @scaling_up_policies.setter
    def scaling_up_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]]):
        pulumi.set(self, "scaling_up_policies", value)

    @property
    @pulumi.getter(name="schedulingTasks")
    def scheduling_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]]:
        return pulumi.get(self, "scheduling_tasks")

    @scheduling_tasks.setter
    def scheduling_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]]):
        pulumi.set(self, "scheduling_tasks", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="shutdownScript")
    def shutdown_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_script")

    @shutdown_script.setter
    def shutdown_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_script", value)

    @property
    @pulumi.getter
    def signals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]]:
        return pulumi.get(self, "signals")

    @signals.setter
    def signals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]]):
        pulumi.set(self, "signals", value)

    @property
    @pulumi.getter(name="spotPercentage")
    def spot_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spot_percentage")

    @spot_percentage.setter
    def spot_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spot_percentage", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmNamePrefix")
    def vm_name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_name_prefix")

    @vm_name_prefix.setter
    def vm_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_prefix", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _ElastigroupAzureV3State:
    def __init__(__self__, *,
                 availability_vs_cost: Optional[pulumi.Input[int]] = None,
                 boot_diagnostics: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]] = None,
                 capacity_reservation: Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 draining_timeout: Optional[pulumi.Input[int]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]] = None,
                 fallback_to_on_demand: Optional[pulumi.Input[bool]] = None,
                 health: Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]] = None,
                 login: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']] = None,
                 on_demand_count: Optional[pulumi.Input[int]] = None,
                 optimization_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_disk: Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']] = None,
                 preferred_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proximity_placement_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 revert_to_spot: Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']] = None,
                 scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]] = None,
                 scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]] = None,
                 scheduling_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]] = None,
                 security: Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']] = None,
                 shutdown_script: Optional[pulumi.Input[str]] = None,
                 signals: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]] = None,
                 spot_percentage: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_name_prefix: Optional[pulumi.Input[str]] = None,
                 vm_sizes: Optional[pulumi.Input['ElastigroupAzureV3VmSizesArgs']] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ElastigroupAzureV3 resources.
        """
        if availability_vs_cost is not None:
            pulumi.set(__self__, "availability_vs_cost", availability_vs_cost)
        if boot_diagnostics is not None:
            pulumi.set(__self__, "boot_diagnostics", boot_diagnostics)
        if capacity_reservation is not None:
            pulumi.set(__self__, "capacity_reservation", capacity_reservation)
        if custom_data is not None:
            pulumi.set(__self__, "custom_data", custom_data)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if draining_timeout is not None:
            pulumi.set(__self__, "draining_timeout", draining_timeout)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if fallback_to_on_demand is not None:
            pulumi.set(__self__, "fallback_to_on_demand", fallback_to_on_demand)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if managed_service_identities is not None:
            pulumi.set(__self__, "managed_service_identities", managed_service_identities)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if on_demand_count is not None:
            pulumi.set(__self__, "on_demand_count", on_demand_count)
        if optimization_windows is not None:
            pulumi.set(__self__, "optimization_windows", optimization_windows)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_disk is not None:
            pulumi.set(__self__, "os_disk", os_disk)
        if preferred_zones is not None:
            pulumi.set(__self__, "preferred_zones", preferred_zones)
        if proximity_placement_groups is not None:
            pulumi.set(__self__, "proximity_placement_groups", proximity_placement_groups)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if revert_to_spot is not None:
            pulumi.set(__self__, "revert_to_spot", revert_to_spot)
        if scaling_down_policies is not None:
            pulumi.set(__self__, "scaling_down_policies", scaling_down_policies)
        if scaling_up_policies is not None:
            pulumi.set(__self__, "scaling_up_policies", scaling_up_policies)
        if scheduling_tasks is not None:
            pulumi.set(__self__, "scheduling_tasks", scheduling_tasks)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if shutdown_script is not None:
            pulumi.set(__self__, "shutdown_script", shutdown_script)
        if signals is not None:
            pulumi.set(__self__, "signals", signals)
        if spot_percentage is not None:
            pulumi.set(__self__, "spot_percentage", spot_percentage)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vm_name_prefix is not None:
            pulumi.set(__self__, "vm_name_prefix", vm_name_prefix)
        if vm_sizes is not None:
            pulumi.set(__self__, "vm_sizes", vm_sizes)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="availabilityVsCost")
    def availability_vs_cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "availability_vs_cost")

    @availability_vs_cost.setter
    def availability_vs_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "availability_vs_cost", value)

    @property
    @pulumi.getter(name="bootDiagnostics")
    def boot_diagnostics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]]:
        return pulumi.get(self, "boot_diagnostics")

    @boot_diagnostics.setter
    def boot_diagnostics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3BootDiagnosticArgs']]]]):
        pulumi.set(self, "boot_diagnostics", value)

    @property
    @pulumi.getter(name="capacityReservation")
    def capacity_reservation(self) -> Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']]:
        return pulumi.get(self, "capacity_reservation")

    @capacity_reservation.setter
    def capacity_reservation(self, value: Optional[pulumi.Input['ElastigroupAzureV3CapacityReservationArgs']]):
        pulumi.set(self, "capacity_reservation", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3DataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="drainingTimeout")
    def draining_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "draining_timeout")

    @draining_timeout.setter
    def draining_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "draining_timeout", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]]:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="fallbackToOnDemand")
    def fallback_to_on_demand(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fallback_to_on_demand")

    @fallback_to_on_demand.setter
    def fallback_to_on_demand(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fallback_to_on_demand", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']]:
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['ElastigroupAzureV3HealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]]:
        return pulumi.get(self, "load_balancers")

    @load_balancers.setter
    def load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3LoadBalancerArgs']]]]):
        pulumi.set(self, "load_balancers", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]:
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['ElastigroupAzureV3LoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]:
        return pulumi.get(self, "managed_service_identities")

    @managed_service_identities.setter
    def managed_service_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ManagedServiceIdentityArgs']]]]):
        pulumi.set(self, "managed_service_identities", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ElastigroupAzureV3NetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="onDemandCount")
    def on_demand_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "on_demand_count")

    @on_demand_count.setter
    def on_demand_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_demand_count", value)

    @property
    @pulumi.getter(name="optimizationWindows")
    def optimization_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "optimization_windows")

    @optimization_windows.setter
    def optimization_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "optimization_windows", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']]:
        return pulumi.get(self, "os_disk")

    @os_disk.setter
    def os_disk(self, value: Optional[pulumi.Input['ElastigroupAzureV3OsDiskArgs']]):
        pulumi.set(self, "os_disk", value)

    @property
    @pulumi.getter(name="preferredZones")
    def preferred_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "preferred_zones")

    @preferred_zones.setter
    def preferred_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "preferred_zones", value)

    @property
    @pulumi.getter(name="proximityPlacementGroups")
    def proximity_placement_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]]:
        return pulumi.get(self, "proximity_placement_groups")

    @proximity_placement_groups.setter
    def proximity_placement_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ProximityPlacementGroupArgs']]]]):
        pulumi.set(self, "proximity_placement_groups", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="revertToSpot")
    def revert_to_spot(self) -> Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']]:
        return pulumi.get(self, "revert_to_spot")

    @revert_to_spot.setter
    def revert_to_spot(self, value: Optional[pulumi.Input['ElastigroupAzureV3RevertToSpotArgs']]):
        pulumi.set(self, "revert_to_spot", value)

    @property
    @pulumi.getter(name="scalingDownPolicies")
    def scaling_down_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]]:
        return pulumi.get(self, "scaling_down_policies")

    @scaling_down_policies.setter
    def scaling_down_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingDownPolicyArgs']]]]):
        pulumi.set(self, "scaling_down_policies", value)

    @property
    @pulumi.getter(name="scalingUpPolicies")
    def scaling_up_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]]:
        return pulumi.get(self, "scaling_up_policies")

    @scaling_up_policies.setter
    def scaling_up_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3ScalingUpPolicyArgs']]]]):
        pulumi.set(self, "scaling_up_policies", value)

    @property
    @pulumi.getter(name="schedulingTasks")
    def scheduling_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]]:
        return pulumi.get(self, "scheduling_tasks")

    @scheduling_tasks.setter
    def scheduling_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SchedulingTaskArgs']]]]):
        pulumi.set(self, "scheduling_tasks", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SecretArgs']]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['ElastigroupAzureV3SecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="shutdownScript")
    def shutdown_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shutdown_script")

    @shutdown_script.setter
    def shutdown_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown_script", value)

    @property
    @pulumi.getter
    def signals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]]:
        return pulumi.get(self, "signals")

    @signals.setter
    def signals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3SignalArgs']]]]):
        pulumi.set(self, "signals", value)

    @property
    @pulumi.getter(name="spotPercentage")
    def spot_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "spot_percentage")

    @spot_percentage.setter
    def spot_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spot_percentage", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElastigroupAzureV3TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmNamePrefix")
    def vm_name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_name_prefix")

    @vm_name_prefix.setter
    def vm_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_name_prefix", value)

    @property
    @pulumi.getter(name="vmSizes")
    def vm_sizes(self) -> Optional[pulumi.Input['ElastigroupAzureV3VmSizesArgs']]:
        return pulumi.get(self, "vm_sizes")

    @vm_sizes.setter
    def vm_sizes(self, value: Optional[pulumi.Input['ElastigroupAzureV3VmSizesArgs']]):
        pulumi.set(self, "vm_sizes", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class ElastigroupAzureV3(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_vs_cost: Optional[pulumi.Input[int]] = None,
                 boot_diagnostics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3BootDiagnosticArgs', 'ElastigroupAzureV3BootDiagnosticArgsDict']]]]] = None,
                 capacity_reservation: Optional[pulumi.Input[Union['ElastigroupAzureV3CapacityReservationArgs', 'ElastigroupAzureV3CapacityReservationArgsDict']]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3DataDiskArgs', 'ElastigroupAzureV3DataDiskArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 draining_timeout: Optional[pulumi.Input[int]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ExtensionArgs', 'ElastigroupAzureV3ExtensionArgsDict']]]]] = None,
                 fallback_to_on_demand: Optional[pulumi.Input[bool]] = None,
                 health: Optional[pulumi.Input[Union['ElastigroupAzureV3HealthArgs', 'ElastigroupAzureV3HealthArgsDict']]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ImageArgs', 'ElastigroupAzureV3ImageArgsDict']]]]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3LoadBalancerArgs', 'ElastigroupAzureV3LoadBalancerArgsDict']]]]] = None,
                 login: Optional[pulumi.Input[Union['ElastigroupAzureV3LoginArgs', 'ElastigroupAzureV3LoginArgsDict']]] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ManagedServiceIdentityArgs', 'ElastigroupAzureV3ManagedServiceIdentityArgsDict']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[Union['ElastigroupAzureV3NetworkArgs', 'ElastigroupAzureV3NetworkArgsDict']]] = None,
                 on_demand_count: Optional[pulumi.Input[int]] = None,
                 optimization_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_disk: Optional[pulumi.Input[Union['ElastigroupAzureV3OsDiskArgs', 'ElastigroupAzureV3OsDiskArgsDict']]] = None,
                 preferred_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proximity_placement_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ProximityPlacementGroupArgs', 'ElastigroupAzureV3ProximityPlacementGroupArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 revert_to_spot: Optional[pulumi.Input[Union['ElastigroupAzureV3RevertToSpotArgs', 'ElastigroupAzureV3RevertToSpotArgsDict']]] = None,
                 scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingDownPolicyArgs', 'ElastigroupAzureV3ScalingDownPolicyArgsDict']]]]] = None,
                 scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingUpPolicyArgs', 'ElastigroupAzureV3ScalingUpPolicyArgsDict']]]]] = None,
                 scheduling_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SchedulingTaskArgs', 'ElastigroupAzureV3SchedulingTaskArgsDict']]]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SecretArgs', 'ElastigroupAzureV3SecretArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[Union['ElastigroupAzureV3SecurityArgs', 'ElastigroupAzureV3SecurityArgsDict']]] = None,
                 shutdown_script: Optional[pulumi.Input[str]] = None,
                 signals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SignalArgs', 'ElastigroupAzureV3SignalArgsDict']]]]] = None,
                 spot_percentage: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3TagArgs', 'ElastigroupAzureV3TagArgsDict']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_name_prefix: Optional[pulumi.Input[str]] = None,
                 vm_sizes: Optional[pulumi.Input[Union['ElastigroupAzureV3VmSizesArgs', 'ElastigroupAzureV3VmSizesArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ElastigroupAzureV3 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ElastigroupAzureV3Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ElastigroupAzureV3 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ElastigroupAzureV3Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ElastigroupAzureV3Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_vs_cost: Optional[pulumi.Input[int]] = None,
                 boot_diagnostics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3BootDiagnosticArgs', 'ElastigroupAzureV3BootDiagnosticArgsDict']]]]] = None,
                 capacity_reservation: Optional[pulumi.Input[Union['ElastigroupAzureV3CapacityReservationArgs', 'ElastigroupAzureV3CapacityReservationArgsDict']]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3DataDiskArgs', 'ElastigroupAzureV3DataDiskArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 draining_timeout: Optional[pulumi.Input[int]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ExtensionArgs', 'ElastigroupAzureV3ExtensionArgsDict']]]]] = None,
                 fallback_to_on_demand: Optional[pulumi.Input[bool]] = None,
                 health: Optional[pulumi.Input[Union['ElastigroupAzureV3HealthArgs', 'ElastigroupAzureV3HealthArgsDict']]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ImageArgs', 'ElastigroupAzureV3ImageArgsDict']]]]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3LoadBalancerArgs', 'ElastigroupAzureV3LoadBalancerArgsDict']]]]] = None,
                 login: Optional[pulumi.Input[Union['ElastigroupAzureV3LoginArgs', 'ElastigroupAzureV3LoginArgsDict']]] = None,
                 managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ManagedServiceIdentityArgs', 'ElastigroupAzureV3ManagedServiceIdentityArgsDict']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[Union['ElastigroupAzureV3NetworkArgs', 'ElastigroupAzureV3NetworkArgsDict']]] = None,
                 on_demand_count: Optional[pulumi.Input[int]] = None,
                 optimization_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_disk: Optional[pulumi.Input[Union['ElastigroupAzureV3OsDiskArgs', 'ElastigroupAzureV3OsDiskArgsDict']]] = None,
                 preferred_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proximity_placement_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ProximityPlacementGroupArgs', 'ElastigroupAzureV3ProximityPlacementGroupArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 revert_to_spot: Optional[pulumi.Input[Union['ElastigroupAzureV3RevertToSpotArgs', 'ElastigroupAzureV3RevertToSpotArgsDict']]] = None,
                 scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingDownPolicyArgs', 'ElastigroupAzureV3ScalingDownPolicyArgsDict']]]]] = None,
                 scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingUpPolicyArgs', 'ElastigroupAzureV3ScalingUpPolicyArgsDict']]]]] = None,
                 scheduling_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SchedulingTaskArgs', 'ElastigroupAzureV3SchedulingTaskArgsDict']]]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SecretArgs', 'ElastigroupAzureV3SecretArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[Union['ElastigroupAzureV3SecurityArgs', 'ElastigroupAzureV3SecurityArgsDict']]] = None,
                 shutdown_script: Optional[pulumi.Input[str]] = None,
                 signals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SignalArgs', 'ElastigroupAzureV3SignalArgsDict']]]]] = None,
                 spot_percentage: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3TagArgs', 'ElastigroupAzureV3TagArgsDict']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_name_prefix: Optional[pulumi.Input[str]] = None,
                 vm_sizes: Optional[pulumi.Input[Union['ElastigroupAzureV3VmSizesArgs', 'ElastigroupAzureV3VmSizesArgsDict']]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ElastigroupAzureV3Args.__new__(ElastigroupAzureV3Args)

            __props__.__dict__["availability_vs_cost"] = availability_vs_cost
            __props__.__dict__["boot_diagnostics"] = boot_diagnostics
            __props__.__dict__["capacity_reservation"] = capacity_reservation
            __props__.__dict__["custom_data"] = custom_data
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["description"] = description
            __props__.__dict__["desired_capacity"] = desired_capacity
            __props__.__dict__["draining_timeout"] = draining_timeout
            __props__.__dict__["extensions"] = extensions
            if fallback_to_on_demand is None and not opts.urn:
                raise TypeError("Missing required property 'fallback_to_on_demand'")
            __props__.__dict__["fallback_to_on_demand"] = fallback_to_on_demand
            __props__.__dict__["health"] = health
            __props__.__dict__["images"] = images
            __props__.__dict__["load_balancers"] = load_balancers
            __props__.__dict__["login"] = login
            __props__.__dict__["managed_service_identities"] = managed_service_identities
            __props__.__dict__["max_size"] = max_size
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["name"] = name
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            __props__.__dict__["on_demand_count"] = on_demand_count
            __props__.__dict__["optimization_windows"] = optimization_windows
            if os is None and not opts.urn:
                raise TypeError("Missing required property 'os'")
            __props__.__dict__["os"] = os
            __props__.__dict__["os_disk"] = os_disk
            __props__.__dict__["preferred_zones"] = preferred_zones
            __props__.__dict__["proximity_placement_groups"] = proximity_placement_groups
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__.__dict__["resource_group_name"] = resource_group_name
            __props__.__dict__["revert_to_spot"] = revert_to_spot
            __props__.__dict__["scaling_down_policies"] = scaling_down_policies
            __props__.__dict__["scaling_up_policies"] = scaling_up_policies
            __props__.__dict__["scheduling_tasks"] = scheduling_tasks
            __props__.__dict__["secrets"] = secrets
            __props__.__dict__["security"] = security
            __props__.__dict__["shutdown_script"] = shutdown_script
            __props__.__dict__["signals"] = signals
            __props__.__dict__["spot_percentage"] = spot_percentage
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["vm_name_prefix"] = vm_name_prefix
            if vm_sizes is None and not opts.urn:
                raise TypeError("Missing required property 'vm_sizes'")
            __props__.__dict__["vm_sizes"] = vm_sizes
            __props__.__dict__["zones"] = zones
        super(ElastigroupAzureV3, __self__).__init__(
            'spotinst:index/elastigroupAzureV3:ElastigroupAzureV3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_vs_cost: Optional[pulumi.Input[int]] = None,
            boot_diagnostics: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3BootDiagnosticArgs', 'ElastigroupAzureV3BootDiagnosticArgsDict']]]]] = None,
            capacity_reservation: Optional[pulumi.Input[Union['ElastigroupAzureV3CapacityReservationArgs', 'ElastigroupAzureV3CapacityReservationArgsDict']]] = None,
            custom_data: Optional[pulumi.Input[str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3DataDiskArgs', 'ElastigroupAzureV3DataDiskArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            desired_capacity: Optional[pulumi.Input[int]] = None,
            draining_timeout: Optional[pulumi.Input[int]] = None,
            extensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ExtensionArgs', 'ElastigroupAzureV3ExtensionArgsDict']]]]] = None,
            fallback_to_on_demand: Optional[pulumi.Input[bool]] = None,
            health: Optional[pulumi.Input[Union['ElastigroupAzureV3HealthArgs', 'ElastigroupAzureV3HealthArgsDict']]] = None,
            images: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ImageArgs', 'ElastigroupAzureV3ImageArgsDict']]]]] = None,
            load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3LoadBalancerArgs', 'ElastigroupAzureV3LoadBalancerArgsDict']]]]] = None,
            login: Optional[pulumi.Input[Union['ElastigroupAzureV3LoginArgs', 'ElastigroupAzureV3LoginArgsDict']]] = None,
            managed_service_identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ManagedServiceIdentityArgs', 'ElastigroupAzureV3ManagedServiceIdentityArgsDict']]]]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[Union['ElastigroupAzureV3NetworkArgs', 'ElastigroupAzureV3NetworkArgsDict']]] = None,
            on_demand_count: Optional[pulumi.Input[int]] = None,
            optimization_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            os: Optional[pulumi.Input[str]] = None,
            os_disk: Optional[pulumi.Input[Union['ElastigroupAzureV3OsDiskArgs', 'ElastigroupAzureV3OsDiskArgsDict']]] = None,
            preferred_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            proximity_placement_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ProximityPlacementGroupArgs', 'ElastigroupAzureV3ProximityPlacementGroupArgsDict']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_group_name: Optional[pulumi.Input[str]] = None,
            revert_to_spot: Optional[pulumi.Input[Union['ElastigroupAzureV3RevertToSpotArgs', 'ElastigroupAzureV3RevertToSpotArgsDict']]] = None,
            scaling_down_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingDownPolicyArgs', 'ElastigroupAzureV3ScalingDownPolicyArgsDict']]]]] = None,
            scaling_up_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3ScalingUpPolicyArgs', 'ElastigroupAzureV3ScalingUpPolicyArgsDict']]]]] = None,
            scheduling_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SchedulingTaskArgs', 'ElastigroupAzureV3SchedulingTaskArgsDict']]]]] = None,
            secrets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SecretArgs', 'ElastigroupAzureV3SecretArgsDict']]]]] = None,
            security: Optional[pulumi.Input[Union['ElastigroupAzureV3SecurityArgs', 'ElastigroupAzureV3SecurityArgsDict']]] = None,
            shutdown_script: Optional[pulumi.Input[str]] = None,
            signals: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3SignalArgs', 'ElastigroupAzureV3SignalArgsDict']]]]] = None,
            spot_percentage: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ElastigroupAzureV3TagArgs', 'ElastigroupAzureV3TagArgsDict']]]]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            vm_name_prefix: Optional[pulumi.Input[str]] = None,
            vm_sizes: Optional[pulumi.Input[Union['ElastigroupAzureV3VmSizesArgs', 'ElastigroupAzureV3VmSizesArgsDict']]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ElastigroupAzureV3':
        """
        Get an existing ElastigroupAzureV3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ElastigroupAzureV3State.__new__(_ElastigroupAzureV3State)

        __props__.__dict__["availability_vs_cost"] = availability_vs_cost
        __props__.__dict__["boot_diagnostics"] = boot_diagnostics
        __props__.__dict__["capacity_reservation"] = capacity_reservation
        __props__.__dict__["custom_data"] = custom_data
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["description"] = description
        __props__.__dict__["desired_capacity"] = desired_capacity
        __props__.__dict__["draining_timeout"] = draining_timeout
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["fallback_to_on_demand"] = fallback_to_on_demand
        __props__.__dict__["health"] = health
        __props__.__dict__["images"] = images
        __props__.__dict__["load_balancers"] = load_balancers
        __props__.__dict__["login"] = login
        __props__.__dict__["managed_service_identities"] = managed_service_identities
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["on_demand_count"] = on_demand_count
        __props__.__dict__["optimization_windows"] = optimization_windows
        __props__.__dict__["os"] = os
        __props__.__dict__["os_disk"] = os_disk
        __props__.__dict__["preferred_zones"] = preferred_zones
        __props__.__dict__["proximity_placement_groups"] = proximity_placement_groups
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["revert_to_spot"] = revert_to_spot
        __props__.__dict__["scaling_down_policies"] = scaling_down_policies
        __props__.__dict__["scaling_up_policies"] = scaling_up_policies
        __props__.__dict__["scheduling_tasks"] = scheduling_tasks
        __props__.__dict__["secrets"] = secrets
        __props__.__dict__["security"] = security
        __props__.__dict__["shutdown_script"] = shutdown_script
        __props__.__dict__["signals"] = signals
        __props__.__dict__["spot_percentage"] = spot_percentage
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vm_name_prefix"] = vm_name_prefix
        __props__.__dict__["vm_sizes"] = vm_sizes
        __props__.__dict__["zones"] = zones
        return ElastigroupAzureV3(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityVsCost")
    def availability_vs_cost(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "availability_vs_cost")

    @property
    @pulumi.getter(name="bootDiagnostics")
    def boot_diagnostics(self) -> pulumi.Output[Sequence['outputs.ElastigroupAzureV3BootDiagnostic']]:
        return pulumi.get(self, "boot_diagnostics")

    @property
    @pulumi.getter(name="capacityReservation")
    def capacity_reservation(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3CapacityReservation']]:
        return pulumi.get(self, "capacity_reservation")

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "custom_data")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3DataDisk']]]:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="drainingTimeout")
    def draining_timeout(self) -> pulumi.Output[int]:
        return pulumi.get(self, "draining_timeout")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Sequence['outputs.ElastigroupAzureV3Extension']]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="fallbackToOnDemand")
    def fallback_to_on_demand(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "fallback_to_on_demand")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3Health']]:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def images(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3Image']]]:
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3LoadBalancer']]]:
        return pulumi.get(self, "load_balancers")

    @property
    @pulumi.getter
    def login(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3Login']]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="managedServiceIdentities")
    def managed_service_identities(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3ManagedServiceIdentity']]]:
        return pulumi.get(self, "managed_service_identities")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output['outputs.ElastigroupAzureV3Network']:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="onDemandCount")
    def on_demand_count(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "on_demand_count")

    @property
    @pulumi.getter(name="optimizationWindows")
    def optimization_windows(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "optimization_windows")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osDisk")
    def os_disk(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3OsDisk']]:
        return pulumi.get(self, "os_disk")

    @property
    @pulumi.getter(name="preferredZones")
    def preferred_zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "preferred_zones")

    @property
    @pulumi.getter(name="proximityPlacementGroups")
    def proximity_placement_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3ProximityPlacementGroup']]]:
        return pulumi.get(self, "proximity_placement_groups")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="revertToSpot")
    def revert_to_spot(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3RevertToSpot']]:
        return pulumi.get(self, "revert_to_spot")

    @property
    @pulumi.getter(name="scalingDownPolicies")
    def scaling_down_policies(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3ScalingDownPolicy']]]:
        return pulumi.get(self, "scaling_down_policies")

    @property
    @pulumi.getter(name="scalingUpPolicies")
    def scaling_up_policies(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3ScalingUpPolicy']]]:
        return pulumi.get(self, "scaling_up_policies")

    @property
    @pulumi.getter(name="schedulingTasks")
    def scheduling_tasks(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3SchedulingTask']]]:
        return pulumi.get(self, "scheduling_tasks")

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3Secret']]]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[Optional['outputs.ElastigroupAzureV3Security']]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="shutdownScript")
    def shutdown_script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "shutdown_script")

    @property
    @pulumi.getter
    def signals(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3Signal']]]:
        return pulumi.get(self, "signals")

    @property
    @pulumi.getter(name="spotPercentage")
    def spot_percentage(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "spot_percentage")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ElastigroupAzureV3Tag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="vmNamePrefix")
    def vm_name_prefix(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vm_name_prefix")

    @property
    @pulumi.getter(name="vmSizes")
    def vm_sizes(self) -> pulumi.Output['outputs.ElastigroupAzureV3VmSizes']:
        return pulumi.get(self, "vm_sizes")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "zones")

